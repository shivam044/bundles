import {
  Component,
  ElementRef,
  EventEmitter,
  Injectable,
  Input,
  NgModule,
  NgZone,
  Output,
  ViewContainerRef,
  ViewEncapsulation$1,
  setClassMetadata,
  ɵɵNgOnChangesFeature,
  ɵɵProvidersFeature,
  ɵɵStandaloneFeature,
  ɵɵdefineComponent,
  ɵɵdefineInjectable,
  ɵɵdefineInjector,
  ɵɵdefineNgModule,
  ɵɵdirectiveInject,
  ɵɵgetInheritedFactory,
  ɵɵinject
} from "./chunk-YW2W5TUJ.js";

// node_modules/ag-grid-community/dist/ag-grid-community.auto.esm.js
function makeNull(value) {
  if (value == null || value === "") {
    return null;
  }
  return value;
}
function exists(value, allowEmptyString) {
  if (allowEmptyString === void 0) {
    allowEmptyString = false;
  }
  return value != null && (value !== "" || allowEmptyString);
}
function missing(value) {
  return !exists(value);
}
function missingOrEmpty(value) {
  return value == null || value.length === 0;
}
function toStringOrNull(value) {
  return value != null && typeof value.toString === "function" ? value.toString() : null;
}
function attrToNumber(value) {
  if (value === void 0) {
    return;
  }
  if (value === null || value === "") {
    return null;
  }
  if (typeof value === "number") {
    return isNaN(value) ? void 0 : value;
  }
  var valueParsed = parseInt(value, 10);
  return isNaN(valueParsed) ? void 0 : valueParsed;
}
function attrToBoolean(value) {
  if (value === void 0) {
    return;
  }
  if (value === null || value === "") {
    return false;
  }
  if (typeof value === "boolean") {
    return value;
  }
  return /true/i.test(value);
}
function attrToString(value) {
  if (value == null || value === "") {
    return;
  }
  return value;
}
function jsonEquals(val1, val2) {
  var val1Json = val1 ? JSON.stringify(val1) : null;
  var val2Json = val2 ? JSON.stringify(val2) : null;
  return val1Json === val2Json;
}
function defaultComparator(valueA, valueB, accentedCompare) {
  if (accentedCompare === void 0) {
    accentedCompare = false;
  }
  var valueAMissing = valueA == null;
  var valueBMissing = valueB == null;
  if (valueA && valueA.toNumber) {
    valueA = valueA.toNumber();
  }
  if (valueB && valueB.toNumber) {
    valueB = valueB.toNumber();
  }
  if (valueAMissing && valueBMissing) {
    return 0;
  }
  if (valueAMissing) {
    return -1;
  }
  if (valueBMissing) {
    return 1;
  }
  function doQuickCompare(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
  }
  if (typeof valueA !== "string") {
    return doQuickCompare(valueA, valueB);
  }
  if (!accentedCompare) {
    return doQuickCompare(valueA, valueB);
  }
  try {
    return valueA.localeCompare(valueB);
  } catch (e) {
    return doQuickCompare(valueA, valueB);
  }
}
function values(object) {
  if (object instanceof Set || object instanceof Map) {
    var arr_1 = [];
    object.forEach(function(value) {
      return arr_1.push(value);
    });
    return arr_1;
  }
  return Object.values(object);
}
var GenericUtils = Object.freeze({
  __proto__: null,
  makeNull,
  exists,
  missing,
  missingOrEmpty,
  toStringOrNull,
  attrToNumber,
  attrToBoolean,
  attrToString,
  jsonEquals,
  defaultComparator,
  values
});
var ColumnKeyCreator = (
  /** @class */
  function() {
    function ColumnKeyCreator2() {
      this.existingKeys = {};
    }
    ColumnKeyCreator2.prototype.addExistingKeys = function(keys2) {
      for (var i = 0; i < keys2.length; i++) {
        this.existingKeys[keys2[i]] = true;
      }
    };
    ColumnKeyCreator2.prototype.getUniqueKey = function(colId, colField) {
      colId = toStringOrNull(colId);
      var count = 0;
      while (true) {
        var idToTry = void 0;
        if (colId) {
          idToTry = colId;
          if (count !== 0) {
            idToTry += "_" + count;
          }
        } else if (colField) {
          idToTry = colField;
          if (count !== 0) {
            idToTry += "_" + count;
          }
        } else {
          idToTry = count;
        }
        if (!this.existingKeys[idToTry]) {
          this.existingKeys[idToTry] = true;
          return String(idToTry);
        }
        count++;
      }
    };
    return ColumnKeyCreator2;
  }()
);
var __values$b = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read$C = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
function iterateObject(object, callback) {
  var e_1, _a;
  if (object == null) {
    return;
  }
  if (Array.isArray(object)) {
    for (var i = 0; i < object.length; i++) {
      callback(i.toString(), object[i]);
    }
    return;
  }
  try {
    for (var _b = __values$b(Object.entries(object)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var _d = __read$C(_c.value, 2), key = _d[0], value = _d[1];
      callback(key, value);
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
}
function cloneObject(object) {
  var copy = {};
  var keys2 = Object.keys(object);
  for (var i = 0; i < keys2.length; i++) {
    var key = keys2[i];
    var value = object[key];
    copy[key] = value;
  }
  return copy;
}
function deepCloneObject(object) {
  return JSON.parse(JSON.stringify(object));
}
function deepCloneDefinition(object, keysToSkip) {
  if (!object) {
    return;
  }
  var obj = object;
  var res = {};
  Object.keys(obj).forEach(function(key) {
    if (keysToSkip && keysToSkip.indexOf(key) >= 0) {
      return;
    }
    var value = obj[key];
    var sourceIsSimpleObject = isNonNullObject(value) && value.constructor === Object;
    if (sourceIsSimpleObject) {
      res[key] = deepCloneDefinition(value);
    } else {
      res[key] = value;
    }
  });
  return res;
}
function getProperty(object, key) {
  return object[key];
}
function setProperty(object, key, value) {
  object[key] = value;
}
function copyPropertiesIfPresent(source, target) {
  var properties = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    properties[_i - 2] = arguments[_i];
  }
  properties.forEach(function(p) {
    return copyPropertyIfPresent(source, target, p);
  });
}
function copyPropertyIfPresent(source, target, property, transform) {
  var value = getProperty(source, property);
  if (value !== void 0) {
    setProperty(target, property, transform ? transform(value) : value);
  }
}
function getAllKeysInObjects(objects) {
  var allValues = {};
  objects.filter(function(obj) {
    return obj != null;
  }).forEach(function(obj) {
    Object.keys(obj).forEach(function(key) {
      return allValues[key] = null;
    });
  });
  return Object.keys(allValues);
}
function getAllValuesInObject(obj) {
  if (!obj) {
    return [];
  }
  var anyObject = Object;
  if (typeof anyObject.values === "function") {
    return anyObject.values(obj);
  }
  var ret = [];
  for (var key in obj) {
    if (obj.hasOwnProperty(key) && obj.propertyIsEnumerable(key)) {
      ret.push(obj[key]);
    }
  }
  return ret;
}
function mergeDeep(dest, source, copyUndefined, makeCopyOfSimpleObjects) {
  if (copyUndefined === void 0) {
    copyUndefined = true;
  }
  if (makeCopyOfSimpleObjects === void 0) {
    makeCopyOfSimpleObjects = false;
  }
  if (!exists(source)) {
    return;
  }
  iterateObject(source, function(key, sourceValue) {
    var destValue = dest[key];
    if (destValue === sourceValue) {
      return;
    }
    if (makeCopyOfSimpleObjects) {
      var objectIsDueToBeCopied = destValue == null && sourceValue != null;
      if (objectIsDueToBeCopied) {
        var sourceIsSimpleObject = typeof sourceValue === "object" && sourceValue.constructor === Object;
        var dontCopy = sourceIsSimpleObject;
        if (dontCopy) {
          destValue = {};
          dest[key] = destValue;
        }
      }
    }
    if (isNonNullObject(sourceValue) && isNonNullObject(destValue) && !Array.isArray(destValue)) {
      mergeDeep(destValue, sourceValue, copyUndefined, makeCopyOfSimpleObjects);
    } else if (copyUndefined || sourceValue !== void 0) {
      dest[key] = sourceValue;
    }
  });
}
function missingOrEmptyObject(value) {
  return missing(value) || Object.keys(value).length === 0;
}
function get(source, expression, defaultValue) {
  if (source == null) {
    return defaultValue;
  }
  var keys2 = expression.split(".");
  var objectToRead = source;
  while (keys2.length > 1) {
    objectToRead = objectToRead[keys2.shift()];
    if (objectToRead == null) {
      return defaultValue;
    }
  }
  var value = objectToRead[keys2[0]];
  return value != null ? value : defaultValue;
}
function set(target, expression, value) {
  if (target == null) {
    return;
  }
  var keys2 = expression.split(".");
  var objectToUpdate = target;
  keys2.forEach(function(key, i) {
    if (!objectToUpdate[key]) {
      objectToUpdate[key] = {};
    }
    if (i < keys2.length - 1) {
      objectToUpdate = objectToUpdate[key];
    }
  });
  objectToUpdate[keys2[keys2.length - 1]] = value;
}
function getValueUsingField(data, field, fieldContainsDots) {
  if (!field || !data) {
    return;
  }
  if (!fieldContainsDots) {
    return data[field];
  }
  var fields = field.split(".");
  var currentObject = data;
  for (var i = 0; i < fields.length; i++) {
    if (currentObject == null) {
      return void 0;
    }
    currentObject = currentObject[fields[i]];
  }
  return currentObject;
}
function removeAllReferences(obj, preserveKeys, preDestroyLink) {
  if (preserveKeys === void 0) {
    preserveKeys = [];
  }
  Object.keys(obj).forEach(function(key) {
    var value = obj[key];
    if (typeof value === "object" && !preserveKeys.includes(key)) {
      obj[key] = void 0;
    }
  });
  var proto = Object.getPrototypeOf(obj);
  var properties = {};
  var msgFunc = function(key) {
    return "AG Grid: Grid API function ".concat(key, "() cannot be called as the grid has been destroyed.\n    It is recommended to remove local references to the grid api. Alternatively, check gridApi.isDestroyed() to avoid calling methods against a destroyed grid.\n    To run logic when the grid is about to be destroyed use the gridPreDestroy event. See: ").concat(preDestroyLink);
  };
  Object.getOwnPropertyNames(proto).forEach(function(key) {
    var value = proto[key];
    if (typeof value === "function" && !preserveKeys.includes(key)) {
      var func = function() {
        console.warn(msgFunc(key));
      };
      properties[key] = { value: func, writable: true };
    }
  });
  Object.defineProperties(obj, properties);
}
function isNonNullObject(value) {
  return typeof value === "object" && value !== null;
}
var ObjectUtils = Object.freeze({
  __proto__: null,
  iterateObject,
  cloneObject,
  deepCloneObject,
  deepCloneDefinition,
  getProperty,
  setProperty,
  copyPropertiesIfPresent,
  copyPropertyIfPresent,
  getAllKeysInObjects,
  getAllValuesInObject,
  mergeDeep,
  missingOrEmptyObject,
  get,
  set,
  getValueUsingField,
  removeAllReferences,
  isNonNullObject
});
var doOnceFlags = {};
function doOnce(func, key) {
  if (doOnceFlags[key]) {
    return;
  }
  func();
  doOnceFlags[key] = true;
}
function warnOnce(msg) {
  doOnce(function() {
    return console.warn("AG Grid: " + msg);
  }, msg);
}
function errorOnce(msg) {
  doOnce(function() {
    return console.error("AG Grid: " + msg);
  }, msg);
}
function getFunctionName(funcConstructor) {
  if (funcConstructor.name) {
    return funcConstructor.name;
  }
  var matches = /function\s+([^\(]+)/.exec(funcConstructor.toString());
  return matches && matches.length === 2 ? matches[1].trim() : null;
}
function isFunction(val) {
  return !!(val && val.constructor && val.call && val.apply);
}
function executeInAWhile(funcs) {
  executeAfter(funcs, 400);
}
var executeNextVMTurnFuncs = [];
var executeNextVMTurnPending = false;
function executeNextVMTurn(func) {
  executeNextVMTurnFuncs.push(func);
  if (executeNextVMTurnPending) {
    return;
  }
  executeNextVMTurnPending = true;
  window.setTimeout(function() {
    var funcsCopy = executeNextVMTurnFuncs.slice();
    executeNextVMTurnFuncs.length = 0;
    executeNextVMTurnPending = false;
    funcsCopy.forEach(function(func2) {
      return func2();
    });
  }, 0);
}
function executeAfter(funcs, milliseconds) {
  if (milliseconds === void 0) {
    milliseconds = 0;
  }
  if (funcs.length > 0) {
    window.setTimeout(function() {
      return funcs.forEach(function(func) {
        return func();
      });
    }, milliseconds);
  }
}
function debounce(func, delay) {
  var timeout;
  return function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var context = this;
    window.clearTimeout(timeout);
    timeout = window.setTimeout(function() {
      func.apply(context, args);
    }, delay);
  };
}
function throttle(func, wait) {
  var previousCall = 0;
  return function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var context = this;
    var currentCall = (/* @__PURE__ */ new Date()).getTime();
    if (currentCall - previousCall < wait) {
      return;
    }
    previousCall = currentCall;
    func.apply(context, args);
  };
}
function waitUntil(condition, callback, timeout, timeoutMessage) {
  if (timeout === void 0) {
    timeout = 100;
  }
  var timeStamp = (/* @__PURE__ */ new Date()).getTime();
  var interval = null;
  var executed = false;
  var internalCallback = function() {
    var reachedTimeout = (/* @__PURE__ */ new Date()).getTime() - timeStamp > timeout;
    if (condition() || reachedTimeout) {
      callback();
      executed = true;
      if (interval != null) {
        window.clearInterval(interval);
        interval = null;
      }
      if (reachedTimeout && timeoutMessage) {
        console.warn(timeoutMessage);
      }
    }
  };
  internalCallback();
  if (!executed) {
    interval = window.setInterval(internalCallback, 10);
  }
}
function compose() {
  var fns = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    fns[_i] = arguments[_i];
  }
  return function(arg) {
    return fns.reduce(function(composed, f) {
      return f(composed);
    }, arg);
  };
}
function callIfPresent(func) {
  if (func) {
    func();
  }
}
var noop = function() {
  return;
};
var FunctionUtils = Object.freeze({
  __proto__: null,
  doOnce,
  warnOnce,
  errorOnce,
  getFunctionName,
  isFunction,
  executeInAWhile,
  executeNextVMTurn,
  executeAfter,
  debounce,
  throttle,
  waitUntil,
  compose,
  callIfPresent,
  noop
});
var ModuleNames;
(function(ModuleNames2) {
  ModuleNames2["CommunityCoreModule"] = "@ag-grid-community/core";
  ModuleNames2["InfiniteRowModelModule"] = "@ag-grid-community/infinite-row-model";
  ModuleNames2["ClientSideRowModelModule"] = "@ag-grid-community/client-side-row-model";
  ModuleNames2["CsvExportModule"] = "@ag-grid-community/csv-export";
  ModuleNames2["EnterpriseCoreModule"] = "@ag-grid-enterprise/core";
  ModuleNames2["RowGroupingModule"] = "@ag-grid-enterprise/row-grouping";
  ModuleNames2["ColumnsToolPanelModule"] = "@ag-grid-enterprise/column-tool-panel";
  ModuleNames2["FiltersToolPanelModule"] = "@ag-grid-enterprise/filter-tool-panel";
  ModuleNames2["MenuModule"] = "@ag-grid-enterprise/menu";
  ModuleNames2["SetFilterModule"] = "@ag-grid-enterprise/set-filter";
  ModuleNames2["MultiFilterModule"] = "@ag-grid-enterprise/multi-filter";
  ModuleNames2["StatusBarModule"] = "@ag-grid-enterprise/status-bar";
  ModuleNames2["SideBarModule"] = "@ag-grid-enterprise/side-bar";
  ModuleNames2["RangeSelectionModule"] = "@ag-grid-enterprise/range-selection";
  ModuleNames2["MasterDetailModule"] = "@ag-grid-enterprise/master-detail";
  ModuleNames2["RichSelectModule"] = "@ag-grid-enterprise/rich-select";
  ModuleNames2["GridChartsModule"] = "@ag-grid-enterprise/charts";
  ModuleNames2["ViewportRowModelModule"] = "@ag-grid-enterprise/viewport-row-model";
  ModuleNames2["ServerSideRowModelModule"] = "@ag-grid-enterprise/server-side-row-model";
  ModuleNames2["ExcelExportModule"] = "@ag-grid-enterprise/excel-export";
  ModuleNames2["ClipboardModule"] = "@ag-grid-enterprise/clipboard";
  ModuleNames2["SparklinesModule"] = "@ag-grid-enterprise/sparklines";
  ModuleNames2["AdvancedFilterModule"] = "@ag-grid-enterprise/advanced-filter";
  ModuleNames2["AngularModule"] = "@ag-grid-community/angular";
  ModuleNames2["ReactModule"] = "@ag-grid-community/react";
  ModuleNames2["VueModule"] = "@ag-grid-community/vue";
})(ModuleNames || (ModuleNames = {}));
var __read$B = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$t = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var ModuleRegistry = (
  /** @class */
  function() {
    function ModuleRegistry2() {
    }
    ModuleRegistry2.register = function(module) {
      ModuleRegistry2.__register(module, true, void 0);
    };
    ModuleRegistry2.registerModules = function(modules) {
      ModuleRegistry2.__registerModules(modules, true, void 0);
    };
    ModuleRegistry2.__register = function(module, moduleBased, gridId) {
      ModuleRegistry2.runVersionChecks(module);
      if (gridId !== void 0) {
        ModuleRegistry2.areGridScopedModules = true;
        if (ModuleRegistry2.gridModulesMap[gridId] === void 0) {
          ModuleRegistry2.gridModulesMap[gridId] = {};
        }
        ModuleRegistry2.gridModulesMap[gridId][module.moduleName] = module;
      } else {
        ModuleRegistry2.globalModulesMap[module.moduleName] = module;
      }
      ModuleRegistry2.setModuleBased(moduleBased);
    };
    ModuleRegistry2.__unRegisterGridModules = function(gridId) {
      delete ModuleRegistry2.gridModulesMap[gridId];
    };
    ModuleRegistry2.__registerModules = function(modules, moduleBased, gridId) {
      ModuleRegistry2.setModuleBased(moduleBased);
      if (!modules) {
        return;
      }
      modules.forEach(function(module) {
        return ModuleRegistry2.__register(module, moduleBased, gridId);
      });
    };
    ModuleRegistry2.isValidModuleVersion = function(module) {
      var _a = __read$B(module.version.split(".") || [], 2), moduleMajor = _a[0], moduleMinor = _a[1];
      var _b = __read$B(ModuleRegistry2.currentModuleVersion.split(".") || [], 2), currentModuleMajor = _b[0], currentModuleMinor = _b[1];
      return moduleMajor === currentModuleMajor && moduleMinor === currentModuleMinor;
    };
    ModuleRegistry2.runVersionChecks = function(module) {
      if (!ModuleRegistry2.currentModuleVersion) {
        ModuleRegistry2.currentModuleVersion = module.version;
      }
      if (!module.version) {
        console.error("AG Grid: You are using incompatible versions of AG Grid modules. Major and minor versions should always match across modules. '".concat(module.moduleName, "' is incompatible. Please update all modules to the same version."));
      } else if (!ModuleRegistry2.isValidModuleVersion(module)) {
        console.error("AG Grid: You are using incompatible versions of AG Grid modules. Major and minor versions should always match across modules. '".concat(module.moduleName, "' is version ").concat(module.version, " but the other modules are version ").concat(this.currentModuleVersion, ". Please update all modules to the same version."));
      }
      if (module.validate) {
        var result = module.validate();
        if (!result.isValid) {
          var errorResult = result;
          console.error("AG Grid: ".concat(errorResult.message));
        }
      }
    };
    ModuleRegistry2.setModuleBased = function(moduleBased) {
      if (ModuleRegistry2.moduleBased === void 0) {
        ModuleRegistry2.moduleBased = moduleBased;
      } else {
        if (ModuleRegistry2.moduleBased !== moduleBased) {
          doOnce(function() {
            console.warn("AG Grid: You are mixing modules (i.e. @ag-grid-community/core) and packages (ag-grid-community) - you can only use one or the other of these mechanisms.");
            console.warn("Please see https://www.ag-grid.com/javascript-grid/packages-modules/ for more information.");
          }, "ModulePackageCheck");
        }
      }
    };
    ModuleRegistry2.__setIsBundled = function() {
      ModuleRegistry2.isBundled = true;
    };
    ModuleRegistry2.__assertRegistered = function(moduleName, reason, gridId) {
      var _a;
      if (this.__isRegistered(moduleName, gridId)) {
        return true;
      }
      var warningKey = reason + moduleName;
      var warningMessage;
      if (ModuleRegistry2.isBundled) {
        {
          warningMessage = "AG Grid: unable to use ".concat(reason, ` as 'ag-grid-enterprise' has not been loaded. Check you are using the Enterprise bundle:
        
        <script src="https://cdn.jsdelivr.net/npm/ag-grid-enterprise@AG_GRID_VERSION/dist/ag-grid-enterprise.min.js"><\/script>
        
For more info see: https://ag-grid.com/javascript-data-grid/getting-started/#getting-started-with-ag-grid-enterprise`);
        }
      } else if (ModuleRegistry2.moduleBased || ModuleRegistry2.moduleBased === void 0) {
        var modName = (_a = Object.entries(ModuleNames).find(function(_a2) {
          var _b = __read$B(_a2, 2);
          _b[0];
          var v = _b[1];
          return v === moduleName;
        })) === null || _a === void 0 ? void 0 : _a[0];
        warningMessage = "AG Grid: unable to use ".concat(reason, " as the ").concat(modName, " is not registered").concat(ModuleRegistry2.areGridScopedModules ? " for gridId: ".concat(gridId) : "", ". Check if you have registered the module:\n           \n    import { ModuleRegistry } from '@ag-grid-community/core';\n    import { ").concat(modName, " } from '").concat(moduleName, "';\n    \n    ModuleRegistry.registerModules([ ").concat(modName, " ]);\n\nFor more info see: https://www.ag-grid.com/javascript-grid/modules/");
      } else {
        warningMessage = "AG Grid: unable to use ".concat(reason, " as package 'ag-grid-enterprise' has not been imported. Check that you have imported the package:\n            \n    import 'ag-grid-enterprise';\n            \nFor more info see: https://www.ag-grid.com/javascript-grid/packages/");
      }
      doOnce(function() {
        console.warn(warningMessage);
      }, warningKey);
      return false;
    };
    ModuleRegistry2.__isRegistered = function(moduleName, gridId) {
      var _a;
      return !!ModuleRegistry2.globalModulesMap[moduleName] || !!((_a = ModuleRegistry2.gridModulesMap[gridId]) === null || _a === void 0 ? void 0 : _a[moduleName]);
    };
    ModuleRegistry2.__getRegisteredModules = function(gridId) {
      return __spreadArray$t(__spreadArray$t([], __read$B(values(ModuleRegistry2.globalModulesMap)), false), __read$B(values(ModuleRegistry2.gridModulesMap[gridId] || {})), false);
    };
    ModuleRegistry2.__getGridRegisteredModules = function(gridId) {
      var _a;
      return values((_a = ModuleRegistry2.gridModulesMap[gridId]) !== null && _a !== void 0 ? _a : {}) || [];
    };
    ModuleRegistry2.__isPackageBased = function() {
      return !ModuleRegistry2.moduleBased;
    };
    ModuleRegistry2.globalModulesMap = {};
    ModuleRegistry2.gridModulesMap = {};
    ModuleRegistry2.areGridScopedModules = false;
    return ModuleRegistry2;
  }()
);
var __read$A = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$s = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var Context = (
  /** @class */
  function() {
    function Context2(params, logger) {
      this.beanWrappers = {};
      this.destroyed = false;
      if (!params || !params.beanClasses) {
        return;
      }
      this.contextParams = params;
      this.logger = logger;
      this.logger.log(">> creating ag-Application Context");
      this.createBeans();
      var beanInstances = this.getBeanInstances();
      this.wireBeans(beanInstances);
      this.logger.log(">> ag-Application Context ready - component is alive");
    }
    Context2.prototype.getBeanInstances = function() {
      return values(this.beanWrappers).map(function(beanEntry) {
        return beanEntry.beanInstance;
      });
    };
    Context2.prototype.createBean = function(bean, afterPreCreateCallback) {
      if (!bean) {
        throw Error("Can't wire to bean since it is null");
      }
      this.wireBeans([bean], afterPreCreateCallback);
      return bean;
    };
    Context2.prototype.wireBeans = function(beanInstances, afterPreCreateCallback) {
      this.autoWireBeans(beanInstances);
      this.methodWireBeans(beanInstances);
      this.callLifeCycleMethods(beanInstances, "preConstructMethods");
      if (exists(afterPreCreateCallback)) {
        beanInstances.forEach(afterPreCreateCallback);
      }
      this.callLifeCycleMethods(beanInstances, "postConstructMethods");
    };
    Context2.prototype.createBeans = function() {
      var _this = this;
      this.contextParams.beanClasses.forEach(this.createBeanWrapper.bind(this));
      iterateObject(this.beanWrappers, function(key, beanEntry) {
        var constructorParamsMeta;
        if (beanEntry.bean.__agBeanMetaData && beanEntry.bean.__agBeanMetaData.autowireMethods && beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor) {
          constructorParamsMeta = beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor;
        }
        var constructorParams = _this.getBeansForParameters(constructorParamsMeta, beanEntry.bean.name);
        var newInstance = new (beanEntry.bean.bind.apply(beanEntry.bean, __spreadArray$s([null], __read$A(constructorParams), false)))();
        beanEntry.beanInstance = newInstance;
      });
      var createdBeanNames = Object.keys(this.beanWrappers).join(", ");
      this.logger.log("created beans: ".concat(createdBeanNames));
    };
    Context2.prototype.createBeanWrapper = function(BeanClass) {
      var metaData = BeanClass.__agBeanMetaData;
      if (!metaData) {
        var beanName = void 0;
        if (BeanClass.prototype.constructor) {
          beanName = getFunctionName(BeanClass.prototype.constructor);
        } else {
          beanName = "" + BeanClass;
        }
        console.error("Context item ".concat(beanName, " is not a bean"));
        return;
      }
      var beanEntry = {
        bean: BeanClass,
        beanInstance: null,
        beanName: metaData.beanName
      };
      this.beanWrappers[metaData.beanName] = beanEntry;
    };
    Context2.prototype.autoWireBeans = function(beanInstances) {
      var _this = this;
      beanInstances.forEach(function(beanInstance) {
        _this.forEachMetaDataInHierarchy(beanInstance, function(metaData, beanName) {
          var attributes = metaData.agClassAttributes;
          if (!attributes) {
            return;
          }
          attributes.forEach(function(attribute) {
            var otherBean = _this.lookupBeanInstance(beanName, attribute.beanName, attribute.optional);
            beanInstance[attribute.attributeName] = otherBean;
          });
        });
      });
    };
    Context2.prototype.methodWireBeans = function(beanInstances) {
      var _this = this;
      beanInstances.forEach(function(beanInstance) {
        _this.forEachMetaDataInHierarchy(beanInstance, function(metaData, beanName) {
          iterateObject(metaData.autowireMethods, function(methodName, wireParams) {
            if (methodName === "agConstructor") {
              return;
            }
            var initParams = _this.getBeansForParameters(wireParams, beanName);
            beanInstance[methodName].apply(beanInstance, initParams);
          });
        });
      });
    };
    Context2.prototype.forEachMetaDataInHierarchy = function(beanInstance, callback) {
      var prototype = Object.getPrototypeOf(beanInstance);
      while (prototype != null) {
        var constructor = prototype.constructor;
        if (constructor.hasOwnProperty("__agBeanMetaData")) {
          var metaData = constructor.__agBeanMetaData;
          var beanName = this.getBeanName(constructor);
          callback(metaData, beanName);
        }
        prototype = Object.getPrototypeOf(prototype);
      }
    };
    Context2.prototype.getBeanName = function(constructor) {
      if (constructor.__agBeanMetaData && constructor.__agBeanMetaData.beanName) {
        return constructor.__agBeanMetaData.beanName;
      }
      var constructorString = constructor.toString();
      var beanName = constructorString.substring(9, constructorString.indexOf("("));
      return beanName;
    };
    Context2.prototype.getBeansForParameters = function(parameters, beanName) {
      var _this = this;
      var beansList = [];
      if (parameters) {
        iterateObject(parameters, function(paramIndex, otherBeanName) {
          var otherBean = _this.lookupBeanInstance(beanName, otherBeanName);
          beansList[Number(paramIndex)] = otherBean;
        });
      }
      return beansList;
    };
    Context2.prototype.lookupBeanInstance = function(wiringBean, beanName, optional) {
      if (optional === void 0) {
        optional = false;
      }
      if (this.destroyed) {
        this.logger.log("AG Grid: bean reference ".concat(beanName, " is used after the grid is destroyed!"));
        return null;
      }
      if (beanName === "context") {
        return this;
      }
      if (this.contextParams.providedBeanInstances && this.contextParams.providedBeanInstances.hasOwnProperty(beanName)) {
        return this.contextParams.providedBeanInstances[beanName];
      }
      var beanEntry = this.beanWrappers[beanName];
      if (beanEntry) {
        return beanEntry.beanInstance;
      }
      if (!optional) {
        console.error("AG Grid: unable to find bean reference ".concat(beanName, " while initialising ").concat(wiringBean));
      }
      return null;
    };
    Context2.prototype.callLifeCycleMethods = function(beanInstances, lifeCycleMethod) {
      var _this = this;
      beanInstances.forEach(function(beanInstance) {
        return _this.callLifeCycleMethodsOnBean(beanInstance, lifeCycleMethod);
      });
    };
    Context2.prototype.callLifeCycleMethodsOnBean = function(beanInstance, lifeCycleMethod, methodToIgnore) {
      var allMethods = {};
      this.forEachMetaDataInHierarchy(beanInstance, function(metaData) {
        var methods = metaData[lifeCycleMethod];
        if (methods) {
          methods.forEach(function(methodName) {
            if (methodName != methodToIgnore) {
              allMethods[methodName] = true;
            }
          });
        }
      });
      var allMethodsList = Object.keys(allMethods);
      allMethodsList.forEach(function(methodName) {
        return beanInstance[methodName]();
      });
    };
    Context2.prototype.getBean = function(name) {
      return this.lookupBeanInstance("getBean", name, true);
    };
    Context2.prototype.destroy = function() {
      if (this.destroyed) {
        return;
      }
      this.destroyed = true;
      this.logger.log(">> Shutting down ag-Application Context");
      var beanInstances = this.getBeanInstances();
      this.destroyBeans(beanInstances);
      this.contextParams.providedBeanInstances = null;
      ModuleRegistry.__unRegisterGridModules(this.contextParams.gridId);
      this.logger.log(">> ag-Application Context shut down - component is dead");
    };
    Context2.prototype.destroyBean = function(bean) {
      if (!bean) {
        return;
      }
      this.destroyBeans([bean]);
    };
    Context2.prototype.destroyBeans = function(beans) {
      var _this = this;
      if (!beans) {
        return [];
      }
      beans.forEach(function(bean) {
        _this.callLifeCycleMethodsOnBean(bean, "preDestroyMethods", "destroy");
        var beanAny = bean;
        if (typeof beanAny.destroy === "function") {
          beanAny.destroy();
        }
      });
      return [];
    };
    Context2.prototype.isDestroyed = function() {
      return this.destroyed;
    };
    Context2.prototype.getGridId = function() {
      return this.contextParams.gridId;
    };
    return Context2;
  }()
);
function PreConstruct(target, methodName, descriptor) {
  var props = getOrCreateProps$1(target.constructor);
  if (!props.preConstructMethods) {
    props.preConstructMethods = [];
  }
  props.preConstructMethods.push(methodName);
}
function PostConstruct(target, methodName, descriptor) {
  var props = getOrCreateProps$1(target.constructor);
  if (!props.postConstructMethods) {
    props.postConstructMethods = [];
  }
  props.postConstructMethods.push(methodName);
}
function PreDestroy(target, methodName, descriptor) {
  var props = getOrCreateProps$1(target.constructor);
  if (!props.preDestroyMethods) {
    props.preDestroyMethods = [];
  }
  props.preDestroyMethods.push(methodName);
}
function Bean(beanName) {
  return function(classConstructor) {
    var props = getOrCreateProps$1(classConstructor);
    props.beanName = beanName;
  };
}
function Autowired(name) {
  return function(target, propertyKey, descriptor) {
    autowiredFunc(target, name, false, target, propertyKey, null);
  };
}
function Optional(name) {
  return function(target, propertyKey, descriptor) {
    autowiredFunc(target, name, true, target, propertyKey, null);
  };
}
function autowiredFunc(target, name, optional, classPrototype, methodOrAttributeName, index) {
  if (name === null) {
    console.error("AG Grid: Autowired name should not be null");
    return;
  }
  if (typeof index === "number") {
    console.error("AG Grid: Autowired should be on an attribute");
    return;
  }
  var props = getOrCreateProps$1(target.constructor);
  if (!props.agClassAttributes) {
    props.agClassAttributes = [];
  }
  props.agClassAttributes.push({
    attributeName: methodOrAttributeName,
    beanName: name,
    optional
  });
}
function Qualifier(name) {
  return function(classPrototype, methodOrAttributeName, index) {
    var constructor = typeof classPrototype == "function" ? classPrototype : classPrototype.constructor;
    var props;
    if (typeof index === "number") {
      var methodName = void 0;
      if (methodOrAttributeName) {
        props = getOrCreateProps$1(constructor);
        methodName = methodOrAttributeName;
      } else {
        props = getOrCreateProps$1(constructor);
        methodName = "agConstructor";
      }
      if (!props.autowireMethods) {
        props.autowireMethods = {};
      }
      if (!props.autowireMethods[methodName]) {
        props.autowireMethods[methodName] = {};
      }
      props.autowireMethods[methodName][index] = name;
    }
  };
}
function getOrCreateProps$1(target) {
  if (!target.hasOwnProperty("__agBeanMetaData")) {
    target.__agBeanMetaData = {};
  }
  return target.__agBeanMetaData;
}
var __decorate$2P = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param$8 = function(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
};
var EventService = (
  /** @class */
  function() {
    function EventService2() {
      this.allSyncListeners = /* @__PURE__ */ new Map();
      this.allAsyncListeners = /* @__PURE__ */ new Map();
      this.globalSyncListeners = /* @__PURE__ */ new Set();
      this.globalAsyncListeners = /* @__PURE__ */ new Set();
      this.asyncFunctionsQueue = [];
      this.scheduled = false;
      this.firedEvents = {};
    }
    EventService2.prototype.setBeans = function(gridOptionsService, frameworkOverrides, globalEventListener, globalSyncEventListener) {
      if (globalEventListener === void 0) {
        globalEventListener = null;
      }
      if (globalSyncEventListener === void 0) {
        globalSyncEventListener = null;
      }
      this.frameworkOverrides = frameworkOverrides;
      this.gridOptionsService = gridOptionsService;
      if (globalEventListener) {
        var async = gridOptionsService.useAsyncEvents();
        this.addGlobalListener(globalEventListener, async);
      }
      if (globalSyncEventListener) {
        this.addGlobalListener(globalSyncEventListener, false);
      }
    };
    EventService2.prototype.setFrameworkOverrides = function(frameworkOverrides) {
      this.frameworkOverrides = frameworkOverrides;
    };
    EventService2.prototype.getListeners = function(eventType, async, autoCreateListenerCollection) {
      var listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;
      var listeners = listenerMap.get(eventType);
      if (!listeners && autoCreateListenerCollection) {
        listeners = /* @__PURE__ */ new Set();
        listenerMap.set(eventType, listeners);
      }
      return listeners;
    };
    EventService2.prototype.noRegisteredListenersExist = function() {
      return this.allSyncListeners.size === 0 && this.allAsyncListeners.size === 0 && this.globalSyncListeners.size === 0 && this.globalAsyncListeners.size === 0;
    };
    EventService2.prototype.addEventListener = function(eventType, listener, async) {
      if (async === void 0) {
        async = false;
      }
      this.getListeners(eventType, async, true).add(listener);
    };
    EventService2.prototype.removeEventListener = function(eventType, listener, async) {
      if (async === void 0) {
        async = false;
      }
      var listeners = this.getListeners(eventType, async, false);
      if (!listeners) {
        return;
      }
      listeners.delete(listener);
      if (listeners.size === 0) {
        var listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;
        listenerMap.delete(eventType);
      }
    };
    EventService2.prototype.addGlobalListener = function(listener, async) {
      if (async === void 0) {
        async = false;
      }
      (async ? this.globalAsyncListeners : this.globalSyncListeners).add(listener);
    };
    EventService2.prototype.removeGlobalListener = function(listener, async) {
      if (async === void 0) {
        async = false;
      }
      (async ? this.globalAsyncListeners : this.globalSyncListeners).delete(listener);
    };
    EventService2.prototype.dispatchEvent = function(event) {
      var agEvent = event;
      if (this.gridOptionsService) {
        this.gridOptionsService.addGridCommonParams(agEvent);
      }
      this.dispatchToListeners(agEvent, true);
      this.dispatchToListeners(agEvent, false);
      this.firedEvents[agEvent.type] = true;
    };
    EventService2.prototype.dispatchEventOnce = function(event) {
      if (!this.firedEvents[event.type]) {
        this.dispatchEvent(event);
      }
    };
    EventService2.prototype.dispatchToListeners = function(event, async) {
      var _this = this;
      var _a;
      var eventType = event.type;
      if (async && "event" in event) {
        var browserEvent = event.event;
        if (browserEvent instanceof Event) {
          event.eventPath = browserEvent.composedPath();
        }
      }
      var processEventListeners = function(listeners2, originalListeners2) {
        return listeners2.forEach(function(listener) {
          if (!originalListeners2.has(listener)) {
            return;
          }
          var callback = _this.frameworkOverrides ? function() {
            return _this.frameworkOverrides.wrapIncoming(function() {
              return listener(event);
            });
          } : function() {
            return listener(event);
          };
          if (async) {
            _this.dispatchAsync(callback);
          } else {
            callback();
          }
        });
      };
      var originalListeners = (_a = this.getListeners(eventType, async, false)) !== null && _a !== void 0 ? _a : /* @__PURE__ */ new Set();
      var listeners = new Set(originalListeners);
      if (listeners.size > 0) {
        processEventListeners(listeners, originalListeners);
      }
      var globalListeners = new Set(async ? this.globalAsyncListeners : this.globalSyncListeners);
      globalListeners.forEach(function(listener) {
        var callback = _this.frameworkOverrides ? function() {
          return _this.frameworkOverrides.wrapIncoming(function() {
            return listener(eventType, event);
          });
        } : function() {
          return listener(eventType, event);
        };
        if (async) {
          _this.dispatchAsync(callback);
        } else {
          callback();
        }
      });
    };
    EventService2.prototype.dispatchAsync = function(func) {
      var _this = this;
      this.asyncFunctionsQueue.push(func);
      if (!this.scheduled) {
        this.frameworkOverrides.wrapIncoming(function() {
          window.setTimeout(_this.flushAsyncQueue.bind(_this), 0);
        });
        this.scheduled = true;
      }
    };
    EventService2.prototype.flushAsyncQueue = function() {
      this.scheduled = false;
      var queueCopy = this.asyncFunctionsQueue.slice();
      this.asyncFunctionsQueue = [];
      queueCopy.forEach(function(func) {
        return func();
      });
    };
    __decorate$2P([
      __param$8(0, Qualifier("gridOptionsService")),
      __param$8(1, Qualifier("frameworkOverrides")),
      __param$8(2, Qualifier("globalEventListener")),
      __param$8(3, Qualifier("globalSyncEventListener"))
    ], EventService2.prototype, "setBeans", null);
    EventService2 = __decorate$2P([
      Bean("eventService")
    ], EventService2);
    return EventService2;
  }()
);
var FrameworkEventListenerService = (
  /** @class */
  function() {
    function FrameworkEventListenerService2(frameworkOverrides) {
      this.frameworkOverrides = frameworkOverrides;
      this.wrappedListeners = /* @__PURE__ */ new Map();
      this.wrappedGlobalListeners = /* @__PURE__ */ new Map();
    }
    FrameworkEventListenerService2.prototype.wrap = function(userListener) {
      var _this = this;
      var listener = userListener;
      if (this.frameworkOverrides.shouldWrapOutgoing) {
        listener = function(event) {
          _this.frameworkOverrides.wrapOutgoing(function() {
            return userListener(event);
          });
        };
        this.wrappedListeners.set(userListener, listener);
      }
      return listener;
    };
    FrameworkEventListenerService2.prototype.wrapGlobal = function(userListener) {
      var _this = this;
      var listener = userListener;
      if (this.frameworkOverrides.shouldWrapOutgoing) {
        listener = function(eventType, event) {
          _this.frameworkOverrides.wrapOutgoing(function() {
            return userListener(eventType, event);
          });
        };
        this.wrappedGlobalListeners.set(userListener, listener);
      }
      return listener;
    };
    FrameworkEventListenerService2.prototype.unwrap = function(userListener) {
      var _a;
      return (_a = this.wrappedListeners.get(userListener)) !== null && _a !== void 0 ? _a : userListener;
    };
    FrameworkEventListenerService2.prototype.unwrapGlobal = function(userListener) {
      var _a;
      return (_a = this.wrappedGlobalListeners.get(userListener)) !== null && _a !== void 0 ? _a : userListener;
    };
    return FrameworkEventListenerService2;
  }()
);
var __decorate$2O = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var COL_DEF_DEFAULTS = {
  resizable: true,
  sortable: true
};
var instanceIdSequence$4 = 0;
function getNextColInstanceId() {
  return instanceIdSequence$4++;
}
var Column = (
  /** @class */
  function() {
    function Column2(colDef, userProvidedColDef, colId, primary) {
      this.instanceId = getNextColInstanceId();
      this.autoHeaderHeight = null;
      this.moving = false;
      this.menuVisible = false;
      this.lastLeftPinned = false;
      this.firstRightPinned = false;
      this.filterActive = false;
      this.eventService = new EventService();
      this.tooltipEnabled = false;
      this.rowGroupActive = false;
      this.pivotActive = false;
      this.aggregationActive = false;
      this.colDef = colDef;
      this.userProvidedColDef = userProvidedColDef;
      this.colId = colId;
      this.primary = primary;
      this.setState(colDef);
    }
    Column2.prototype.getInstanceId = function() {
      return this.instanceId;
    };
    Column2.prototype.setState = function(colDef) {
      if (colDef.sort !== void 0) {
        if (colDef.sort === "asc" || colDef.sort === "desc") {
          this.sort = colDef.sort;
        }
      } else {
        if (colDef.initialSort === "asc" || colDef.initialSort === "desc") {
          this.sort = colDef.initialSort;
        }
      }
      var sortIndex = colDef.sortIndex;
      var initialSortIndex = colDef.initialSortIndex;
      if (sortIndex !== void 0) {
        if (sortIndex !== null) {
          this.sortIndex = sortIndex;
        }
      } else {
        if (initialSortIndex !== null) {
          this.sortIndex = initialSortIndex;
        }
      }
      var hide = colDef.hide;
      var initialHide = colDef.initialHide;
      if (hide !== void 0) {
        this.visible = !hide;
      } else {
        this.visible = !initialHide;
      }
      if (colDef.pinned !== void 0) {
        this.setPinned(colDef.pinned);
      } else {
        this.setPinned(colDef.initialPinned);
      }
      var flex = colDef.flex;
      var initialFlex = colDef.initialFlex;
      if (flex !== void 0) {
        this.flex = flex;
      } else if (initialFlex !== void 0) {
        this.flex = initialFlex;
      }
    };
    Column2.prototype.setColDef = function(colDef, userProvidedColDef, source) {
      if (source === void 0) {
        source = "api";
      }
      this.colDef = colDef;
      this.userProvidedColDef = userProvidedColDef;
      this.initMinAndMaxWidths();
      this.initDotNotation();
      this.initTooltip();
      this.eventService.dispatchEvent(this.createColumnEvent("colDefChanged", source));
    };
    Column2.prototype.getUserProvidedColDef = function() {
      return this.userProvidedColDef;
    };
    Column2.prototype.setParent = function(parent) {
      this.parent = parent;
    };
    Column2.prototype.getParent = function() {
      return this.parent;
    };
    Column2.prototype.setOriginalParent = function(originalParent) {
      this.originalParent = originalParent;
    };
    Column2.prototype.getOriginalParent = function() {
      return this.originalParent;
    };
    Column2.prototype.initialise = function() {
      this.initMinAndMaxWidths();
      this.resetActualWidth("gridInitializing");
      this.initDotNotation();
      this.initTooltip();
    };
    Column2.prototype.initDotNotation = function() {
      var suppressDotNotation = this.gridOptionsService.get("suppressFieldDotNotation");
      this.fieldContainsDots = exists(this.colDef.field) && this.colDef.field.indexOf(".") >= 0 && !suppressDotNotation;
      this.tooltipFieldContainsDots = exists(this.colDef.tooltipField) && this.colDef.tooltipField.indexOf(".") >= 0 && !suppressDotNotation;
    };
    Column2.prototype.initMinAndMaxWidths = function() {
      var colDef = this.colDef;
      this.minWidth = this.columnUtils.calculateColMinWidth(colDef);
      this.maxWidth = this.columnUtils.calculateColMaxWidth(colDef);
    };
    Column2.prototype.initTooltip = function() {
      this.tooltipEnabled = exists(this.colDef.tooltipField) || exists(this.colDef.tooltipValueGetter) || exists(this.colDef.tooltipComponent);
    };
    Column2.prototype.resetActualWidth = function(source) {
      if (source === void 0) {
        source = "api";
      }
      var initialWidth = this.columnUtils.calculateColInitialWidth(this.colDef);
      this.setActualWidth(initialWidth, source, true);
    };
    Column2.prototype.isEmptyGroup = function() {
      return false;
    };
    Column2.prototype.isRowGroupDisplayed = function(colId) {
      if (missing(this.colDef) || missing(this.colDef.showRowGroup)) {
        return false;
      }
      var showingAllGroups = this.colDef.showRowGroup === true;
      var showingThisGroup = this.colDef.showRowGroup === colId;
      return showingAllGroups || showingThisGroup;
    };
    Column2.prototype.isPrimary = function() {
      return this.primary;
    };
    Column2.prototype.isFilterAllowed = function() {
      var filterDefined = !!this.colDef.filter;
      return filterDefined;
    };
    Column2.prototype.isFieldContainsDots = function() {
      return this.fieldContainsDots;
    };
    Column2.prototype.isTooltipEnabled = function() {
      return this.tooltipEnabled;
    };
    Column2.prototype.isTooltipFieldContainsDots = function() {
      return this.tooltipFieldContainsDots;
    };
    Column2.prototype.addEventListener = function(eventType, userListener) {
      var _a, _b;
      if (this.frameworkOverrides.shouldWrapOutgoing && !this.frameworkEventListenerService) {
        this.eventService.setFrameworkOverrides(this.frameworkOverrides);
        this.frameworkEventListenerService = new FrameworkEventListenerService(this.frameworkOverrides);
      }
      var listener = (_b = (_a = this.frameworkEventListenerService) === null || _a === void 0 ? void 0 : _a.wrap(userListener)) !== null && _b !== void 0 ? _b : userListener;
      this.eventService.addEventListener(eventType, listener);
    };
    Column2.prototype.removeEventListener = function(eventType, userListener) {
      var _a, _b;
      var listener = (_b = (_a = this.frameworkEventListenerService) === null || _a === void 0 ? void 0 : _a.unwrap(userListener)) !== null && _b !== void 0 ? _b : userListener;
      this.eventService.removeEventListener(eventType, listener);
    };
    Column2.prototype.createColumnFunctionCallbackParams = function(rowNode) {
      return this.gridOptionsService.addGridCommonParams({
        node: rowNode,
        data: rowNode.data,
        column: this,
        colDef: this.colDef
      });
    };
    Column2.prototype.isSuppressNavigable = function(rowNode) {
      if (typeof this.colDef.suppressNavigable === "boolean") {
        return this.colDef.suppressNavigable;
      }
      if (typeof this.colDef.suppressNavigable === "function") {
        var params = this.createColumnFunctionCallbackParams(rowNode);
        var userFunc = this.colDef.suppressNavigable;
        return userFunc(params);
      }
      return false;
    };
    Column2.prototype.isCellEditable = function(rowNode) {
      if (rowNode.group && !this.gridOptionsService.get("enableGroupEdit")) {
        return false;
      }
      return this.isColumnFunc(rowNode, this.colDef.editable);
    };
    Column2.prototype.isSuppressFillHandle = function() {
      return !!this.colDef.suppressFillHandle;
    };
    Column2.prototype.isAutoHeight = function() {
      return !!this.colDef.autoHeight;
    };
    Column2.prototype.isAutoHeaderHeight = function() {
      return !!this.colDef.autoHeaderHeight;
    };
    Column2.prototype.isRowDrag = function(rowNode) {
      return this.isColumnFunc(rowNode, this.colDef.rowDrag);
    };
    Column2.prototype.isDndSource = function(rowNode) {
      return this.isColumnFunc(rowNode, this.colDef.dndSource);
    };
    Column2.prototype.isCellCheckboxSelection = function(rowNode) {
      return this.isColumnFunc(rowNode, this.colDef.checkboxSelection);
    };
    Column2.prototype.isSuppressPaste = function(rowNode) {
      return this.isColumnFunc(rowNode, this.colDef ? this.colDef.suppressPaste : null);
    };
    Column2.prototype.isResizable = function() {
      return !!this.getColDefValue("resizable");
    };
    Column2.prototype.getColDefValue = function(key) {
      var _a;
      return (_a = this.colDef[key]) !== null && _a !== void 0 ? _a : COL_DEF_DEFAULTS[key];
    };
    Column2.prototype.isColumnFunc = function(rowNode, value) {
      if (typeof value === "boolean") {
        return value;
      }
      if (typeof value === "function") {
        var params = this.createColumnFunctionCallbackParams(rowNode);
        var editableFunc = value;
        return editableFunc(params);
      }
      return false;
    };
    Column2.prototype.setMoving = function(moving, source) {
      if (source === void 0) {
        source = "api";
      }
      this.moving = moving;
      this.eventService.dispatchEvent(this.createColumnEvent("movingChanged", source));
    };
    Column2.prototype.createColumnEvent = function(type, source) {
      return this.gridOptionsService.addGridCommonParams({
        type,
        column: this,
        columns: [this],
        source
      });
    };
    Column2.prototype.isMoving = function() {
      return this.moving;
    };
    Column2.prototype.getSort = function() {
      return this.sort;
    };
    Column2.prototype.setSort = function(sort, source) {
      if (source === void 0) {
        source = "api";
      }
      if (this.sort !== sort) {
        this.sort = sort;
        this.eventService.dispatchEvent(this.createColumnEvent("sortChanged", source));
      }
      this.dispatchStateUpdatedEvent("sort");
    };
    Column2.prototype.setMenuVisible = function(visible, source) {
      if (source === void 0) {
        source = "api";
      }
      if (this.menuVisible !== visible) {
        this.menuVisible = visible;
        this.eventService.dispatchEvent(this.createColumnEvent("menuVisibleChanged", source));
      }
    };
    Column2.prototype.isMenuVisible = function() {
      return this.menuVisible;
    };
    Column2.prototype.isSortable = function() {
      return !!this.getColDefValue("sortable");
    };
    Column2.prototype.isSortAscending = function() {
      return this.sort === "asc";
    };
    Column2.prototype.isSortDescending = function() {
      return this.sort === "desc";
    };
    Column2.prototype.isSortNone = function() {
      return missing(this.sort);
    };
    Column2.prototype.isSorting = function() {
      return exists(this.sort);
    };
    Column2.prototype.getSortIndex = function() {
      return this.sortIndex;
    };
    Column2.prototype.setSortIndex = function(sortOrder) {
      this.sortIndex = sortOrder;
      this.dispatchStateUpdatedEvent("sortIndex");
    };
    Column2.prototype.setAggFunc = function(aggFunc) {
      this.aggFunc = aggFunc;
      this.dispatchStateUpdatedEvent("aggFunc");
    };
    Column2.prototype.getAggFunc = function() {
      return this.aggFunc;
    };
    Column2.prototype.getLeft = function() {
      return this.left;
    };
    Column2.prototype.getOldLeft = function() {
      return this.oldLeft;
    };
    Column2.prototype.getRight = function() {
      return this.left + this.actualWidth;
    };
    Column2.prototype.setLeft = function(left, source) {
      if (source === void 0) {
        source = "api";
      }
      this.oldLeft = this.left;
      if (this.left !== left) {
        this.left = left;
        this.eventService.dispatchEvent(this.createColumnEvent("leftChanged", source));
      }
    };
    Column2.prototype.isFilterActive = function() {
      return this.filterActive;
    };
    Column2.prototype.setFilterActive = function(active, source, additionalEventAttributes) {
      if (source === void 0) {
        source = "api";
      }
      if (this.filterActive !== active) {
        this.filterActive = active;
        this.eventService.dispatchEvent(this.createColumnEvent("filterActiveChanged", source));
      }
      var filterChangedEvent = this.createColumnEvent("filterChanged", source);
      if (additionalEventAttributes) {
        mergeDeep(filterChangedEvent, additionalEventAttributes);
      }
      this.eventService.dispatchEvent(filterChangedEvent);
    };
    Column2.prototype.isHovered = function() {
      return this.columnHoverService.isHovered(this);
    };
    Column2.prototype.setPinned = function(pinned) {
      if (pinned === true || pinned === "left") {
        this.pinned = "left";
      } else if (pinned === "right") {
        this.pinned = "right";
      } else {
        this.pinned = null;
      }
      this.dispatchStateUpdatedEvent("pinned");
    };
    Column2.prototype.setFirstRightPinned = function(firstRightPinned, source) {
      if (source === void 0) {
        source = "api";
      }
      if (this.firstRightPinned !== firstRightPinned) {
        this.firstRightPinned = firstRightPinned;
        this.eventService.dispatchEvent(this.createColumnEvent("firstRightPinnedChanged", source));
      }
    };
    Column2.prototype.setLastLeftPinned = function(lastLeftPinned, source) {
      if (source === void 0) {
        source = "api";
      }
      if (this.lastLeftPinned !== lastLeftPinned) {
        this.lastLeftPinned = lastLeftPinned;
        this.eventService.dispatchEvent(this.createColumnEvent("lastLeftPinnedChanged", source));
      }
    };
    Column2.prototype.isFirstRightPinned = function() {
      return this.firstRightPinned;
    };
    Column2.prototype.isLastLeftPinned = function() {
      return this.lastLeftPinned;
    };
    Column2.prototype.isPinned = function() {
      return this.pinned === "left" || this.pinned === "right";
    };
    Column2.prototype.isPinnedLeft = function() {
      return this.pinned === "left";
    };
    Column2.prototype.isPinnedRight = function() {
      return this.pinned === "right";
    };
    Column2.prototype.getPinned = function() {
      return this.pinned;
    };
    Column2.prototype.setVisible = function(visible, source) {
      if (source === void 0) {
        source = "api";
      }
      var newValue = visible === true;
      if (this.visible !== newValue) {
        this.visible = newValue;
        this.eventService.dispatchEvent(this.createColumnEvent("visibleChanged", source));
      }
      this.dispatchStateUpdatedEvent("hide");
    };
    Column2.prototype.isVisible = function() {
      return this.visible;
    };
    Column2.prototype.isSpanHeaderHeight = function() {
      var colDef = this.getColDef();
      return !colDef.suppressSpanHeaderHeight && !colDef.autoHeaderHeight;
    };
    Column2.prototype.getColDef = function() {
      return this.colDef;
    };
    Column2.prototype.getColumnGroupShow = function() {
      return this.colDef.columnGroupShow;
    };
    Column2.prototype.getColId = function() {
      return this.colId;
    };
    Column2.prototype.getId = function() {
      return this.colId;
    };
    Column2.prototype.getUniqueId = function() {
      return this.colId;
    };
    Column2.prototype.getDefinition = function() {
      return this.colDef;
    };
    Column2.prototype.getActualWidth = function() {
      return this.actualWidth;
    };
    Column2.prototype.getAutoHeaderHeight = function() {
      return this.autoHeaderHeight;
    };
    Column2.prototype.setAutoHeaderHeight = function(height) {
      var changed = height !== this.autoHeaderHeight;
      this.autoHeaderHeight = height;
      return changed;
    };
    Column2.prototype.createBaseColDefParams = function(rowNode) {
      var params = this.gridOptionsService.addGridCommonParams({
        node: rowNode,
        data: rowNode.data,
        colDef: this.colDef,
        column: this
      });
      return params;
    };
    Column2.prototype.getColSpan = function(rowNode) {
      if (missing(this.colDef.colSpan)) {
        return 1;
      }
      var params = this.createBaseColDefParams(rowNode);
      var colSpan = this.colDef.colSpan(params);
      return Math.max(colSpan, 1);
    };
    Column2.prototype.getRowSpan = function(rowNode) {
      if (missing(this.colDef.rowSpan)) {
        return 1;
      }
      var params = this.createBaseColDefParams(rowNode);
      var rowSpan = this.colDef.rowSpan(params);
      return Math.max(rowSpan, 1);
    };
    Column2.prototype.setActualWidth = function(actualWidth, source, silent) {
      if (source === void 0) {
        source = "api";
      }
      if (silent === void 0) {
        silent = false;
      }
      if (this.minWidth != null) {
        actualWidth = Math.max(actualWidth, this.minWidth);
      }
      if (this.maxWidth != null) {
        actualWidth = Math.min(actualWidth, this.maxWidth);
      }
      if (this.actualWidth !== actualWidth) {
        this.actualWidth = actualWidth;
        if (this.flex && source !== "flex" && source !== "gridInitializing") {
          this.flex = null;
        }
        if (!silent) {
          this.fireColumnWidthChangedEvent(source);
        }
      }
      this.dispatchStateUpdatedEvent("width");
    };
    Column2.prototype.fireColumnWidthChangedEvent = function(source) {
      this.eventService.dispatchEvent(this.createColumnEvent("widthChanged", source));
    };
    Column2.prototype.isGreaterThanMax = function(width) {
      if (this.maxWidth != null) {
        return width > this.maxWidth;
      }
      return false;
    };
    Column2.prototype.getMinWidth = function() {
      return this.minWidth;
    };
    Column2.prototype.getMaxWidth = function() {
      return this.maxWidth;
    };
    Column2.prototype.getFlex = function() {
      return this.flex || 0;
    };
    Column2.prototype.setFlex = function(flex) {
      if (this.flex !== flex) {
        this.flex = flex;
      }
      this.dispatchStateUpdatedEvent("flex");
    };
    Column2.prototype.setMinimum = function(source) {
      if (source === void 0) {
        source = "api";
      }
      if (exists(this.minWidth)) {
        this.setActualWidth(this.minWidth, source);
      }
    };
    Column2.prototype.setRowGroupActive = function(rowGroup, source) {
      if (source === void 0) {
        source = "api";
      }
      if (this.rowGroupActive !== rowGroup) {
        this.rowGroupActive = rowGroup;
        this.eventService.dispatchEvent(this.createColumnEvent("columnRowGroupChanged", source));
      }
      this.dispatchStateUpdatedEvent("rowGroup");
    };
    Column2.prototype.isRowGroupActive = function() {
      return this.rowGroupActive;
    };
    Column2.prototype.setPivotActive = function(pivot, source) {
      if (source === void 0) {
        source = "api";
      }
      if (this.pivotActive !== pivot) {
        this.pivotActive = pivot;
        this.eventService.dispatchEvent(this.createColumnEvent("columnPivotChanged", source));
      }
      this.dispatchStateUpdatedEvent("pivot");
    };
    Column2.prototype.isPivotActive = function() {
      return this.pivotActive;
    };
    Column2.prototype.isAnyFunctionActive = function() {
      return this.isPivotActive() || this.isRowGroupActive() || this.isValueActive();
    };
    Column2.prototype.isAnyFunctionAllowed = function() {
      return this.isAllowPivot() || this.isAllowRowGroup() || this.isAllowValue();
    };
    Column2.prototype.setValueActive = function(value, source) {
      if (source === void 0) {
        source = "api";
      }
      if (this.aggregationActive !== value) {
        this.aggregationActive = value;
        this.eventService.dispatchEvent(this.createColumnEvent("columnValueChanged", source));
      }
    };
    Column2.prototype.isValueActive = function() {
      return this.aggregationActive;
    };
    Column2.prototype.isAllowPivot = function() {
      return this.colDef.enablePivot === true;
    };
    Column2.prototype.isAllowValue = function() {
      return this.colDef.enableValue === true;
    };
    Column2.prototype.isAllowRowGroup = function() {
      return this.colDef.enableRowGroup === true;
    };
    Column2.prototype.getMenuTabs = function(defaultValues) {
      var menuTabs = this.getColDef().menuTabs;
      if (menuTabs == null) {
        menuTabs = defaultValues;
      }
      return menuTabs;
    };
    Column2.prototype.dispatchStateUpdatedEvent = function(key) {
      this.eventService.dispatchEvent({
        type: Column2.EVENT_STATE_UPDATED,
        key
      });
    };
    Column2.EVENT_MOVING_CHANGED = "movingChanged";
    Column2.EVENT_LEFT_CHANGED = "leftChanged";
    Column2.EVENT_WIDTH_CHANGED = "widthChanged";
    Column2.EVENT_LAST_LEFT_PINNED_CHANGED = "lastLeftPinnedChanged";
    Column2.EVENT_FIRST_RIGHT_PINNED_CHANGED = "firstRightPinnedChanged";
    Column2.EVENT_VISIBLE_CHANGED = "visibleChanged";
    Column2.EVENT_FILTER_CHANGED = "filterChanged";
    Column2.EVENT_FILTER_ACTIVE_CHANGED = "filterActiveChanged";
    Column2.EVENT_SORT_CHANGED = "sortChanged";
    Column2.EVENT_COL_DEF_CHANGED = "colDefChanged";
    Column2.EVENT_MENU_VISIBLE_CHANGED = "menuVisibleChanged";
    Column2.EVENT_ROW_GROUP_CHANGED = "columnRowGroupChanged";
    Column2.EVENT_PIVOT_CHANGED = "columnPivotChanged";
    Column2.EVENT_VALUE_CHANGED = "columnValueChanged";
    Column2.EVENT_STATE_UPDATED = "columnStateUpdated";
    __decorate$2O([
      Autowired("gridOptionsService")
    ], Column2.prototype, "gridOptionsService", void 0);
    __decorate$2O([
      Autowired("columnUtils")
    ], Column2.prototype, "columnUtils", void 0);
    __decorate$2O([
      Autowired("columnHoverService")
    ], Column2.prototype, "columnHoverService", void 0);
    __decorate$2O([
      Autowired("frameworkOverrides")
    ], Column2.prototype, "frameworkOverrides", void 0);
    __decorate$2O([
      PostConstruct
    ], Column2.prototype, "initialise", null);
    return Column2;
  }()
);
var __decorate$2N = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ProvidedColumnGroup = (
  /** @class */
  function() {
    function ProvidedColumnGroup2(colGroupDef, groupId, padding, level) {
      this.localEventService = new EventService();
      this.expandable = false;
      this.instanceId = getNextColInstanceId();
      this.expandableListenerRemoveCallback = null;
      this.colGroupDef = colGroupDef;
      this.groupId = groupId;
      this.expanded = !!colGroupDef && !!colGroupDef.openByDefault;
      this.padding = padding;
      this.level = level;
    }
    ProvidedColumnGroup2.prototype.destroy = function() {
      if (this.expandableListenerRemoveCallback) {
        this.reset(null, void 0);
      }
    };
    ProvidedColumnGroup2.prototype.reset = function(colGroupDef, level) {
      this.colGroupDef = colGroupDef;
      this.level = level;
      this.originalParent = null;
      if (this.expandableListenerRemoveCallback) {
        this.expandableListenerRemoveCallback();
      }
      this.children = void 0;
      this.expandable = void 0;
    };
    ProvidedColumnGroup2.prototype.getInstanceId = function() {
      return this.instanceId;
    };
    ProvidedColumnGroup2.prototype.setOriginalParent = function(originalParent) {
      this.originalParent = originalParent;
    };
    ProvidedColumnGroup2.prototype.getOriginalParent = function() {
      return this.originalParent;
    };
    ProvidedColumnGroup2.prototype.getLevel = function() {
      return this.level;
    };
    ProvidedColumnGroup2.prototype.isVisible = function() {
      if (this.children) {
        return this.children.some(function(child) {
          return child.isVisible();
        });
      }
      return false;
    };
    ProvidedColumnGroup2.prototype.isPadding = function() {
      return this.padding;
    };
    ProvidedColumnGroup2.prototype.setExpanded = function(expanded) {
      this.expanded = expanded === void 0 ? false : expanded;
      var event = {
        type: ProvidedColumnGroup2.EVENT_EXPANDED_CHANGED
      };
      this.localEventService.dispatchEvent(event);
    };
    ProvidedColumnGroup2.prototype.isExpandable = function() {
      return this.expandable;
    };
    ProvidedColumnGroup2.prototype.isExpanded = function() {
      return this.expanded;
    };
    ProvidedColumnGroup2.prototype.getGroupId = function() {
      return this.groupId;
    };
    ProvidedColumnGroup2.prototype.getId = function() {
      return this.getGroupId();
    };
    ProvidedColumnGroup2.prototype.setChildren = function(children) {
      this.children = children;
    };
    ProvidedColumnGroup2.prototype.getChildren = function() {
      return this.children;
    };
    ProvidedColumnGroup2.prototype.getColGroupDef = function() {
      return this.colGroupDef;
    };
    ProvidedColumnGroup2.prototype.getLeafColumns = function() {
      var result = [];
      this.addLeafColumns(result);
      return result;
    };
    ProvidedColumnGroup2.prototype.addLeafColumns = function(leafColumns) {
      if (!this.children) {
        return;
      }
      this.children.forEach(function(child) {
        if (child instanceof Column) {
          leafColumns.push(child);
        } else if (child instanceof ProvidedColumnGroup2) {
          child.addLeafColumns(leafColumns);
        }
      });
    };
    ProvidedColumnGroup2.prototype.getColumnGroupShow = function() {
      var colGroupDef = this.colGroupDef;
      if (!colGroupDef) {
        return;
      }
      return colGroupDef.columnGroupShow;
    };
    ProvidedColumnGroup2.prototype.setupExpandable = function() {
      var _this = this;
      this.setExpandable();
      if (this.expandableListenerRemoveCallback) {
        this.expandableListenerRemoveCallback();
      }
      var listener = this.onColumnVisibilityChanged.bind(this);
      this.getLeafColumns().forEach(function(col) {
        return col.addEventListener("visibleChanged", listener);
      });
      this.expandableListenerRemoveCallback = function() {
        _this.getLeafColumns().forEach(function(col) {
          return col.removeEventListener("visibleChanged", listener);
        });
        _this.expandableListenerRemoveCallback = null;
      };
    };
    ProvidedColumnGroup2.prototype.setExpandable = function() {
      if (this.isPadding()) {
        return;
      }
      var atLeastOneShowingWhenOpen = false;
      var atLeastOneShowingWhenClosed = false;
      var atLeastOneChangeable = false;
      var children = this.findChildrenRemovingPadding();
      for (var i = 0, j = children.length; i < j; i++) {
        var abstractColumn = children[i];
        if (!abstractColumn.isVisible()) {
          continue;
        }
        var headerGroupShow = abstractColumn.getColumnGroupShow();
        if (headerGroupShow === "open") {
          atLeastOneShowingWhenOpen = true;
          atLeastOneChangeable = true;
        } else if (headerGroupShow === "closed") {
          atLeastOneShowingWhenClosed = true;
          atLeastOneChangeable = true;
        } else {
          atLeastOneShowingWhenOpen = true;
          atLeastOneShowingWhenClosed = true;
        }
      }
      var expandable = atLeastOneShowingWhenOpen && atLeastOneShowingWhenClosed && atLeastOneChangeable;
      if (this.expandable !== expandable) {
        this.expandable = expandable;
        var event_1 = {
          type: ProvidedColumnGroup2.EVENT_EXPANDABLE_CHANGED
        };
        this.localEventService.dispatchEvent(event_1);
      }
    };
    ProvidedColumnGroup2.prototype.findChildrenRemovingPadding = function() {
      var res = [];
      var process = function(items) {
        items.forEach(function(item) {
          var skipBecausePadding = item instanceof ProvidedColumnGroup2 && item.isPadding();
          if (skipBecausePadding) {
            process(item.children);
          } else {
            res.push(item);
          }
        });
      };
      process(this.children);
      return res;
    };
    ProvidedColumnGroup2.prototype.onColumnVisibilityChanged = function() {
      this.setExpandable();
    };
    ProvidedColumnGroup2.prototype.addEventListener = function(eventType, listener) {
      this.localEventService.addEventListener(eventType, listener);
    };
    ProvidedColumnGroup2.prototype.removeEventListener = function(eventType, listener) {
      this.localEventService.removeEventListener(eventType, listener);
    };
    ProvidedColumnGroup2.EVENT_EXPANDED_CHANGED = "expandedChanged";
    ProvidedColumnGroup2.EVENT_EXPANDABLE_CHANGED = "expandableChanged";
    __decorate$2N([
      PreDestroy
    ], ProvidedColumnGroup2.prototype, "destroy", null);
    return ProvidedColumnGroup2;
  }()
);
var DefaultColumnTypes = {
  numericColumn: {
    headerClass: "ag-right-aligned-header",
    cellClass: "ag-right-aligned-cell"
  },
  rightAligned: {
    headerClass: "ag-right-aligned-header",
    cellClass: "ag-right-aligned-cell"
  }
};
function firstExistingValue() {
  var values2 = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    values2[_i] = arguments[_i];
  }
  for (var i = 0; i < values2.length; i++) {
    var value = values2[i];
    if (exists(value)) {
      return value;
    }
  }
  return null;
}
function existsAndNotEmpty(value) {
  return value != null && value.length > 0;
}
function last(arr) {
  if (!arr || !arr.length) {
    return;
  }
  return arr[arr.length - 1];
}
function areEqual(a, b, comparator) {
  if (a == null && b == null) {
    return true;
  }
  return a != null && b != null && a.length === b.length && a.every(function(value, index) {
    return comparator ? comparator(value, b[index]) : b[index] === value;
  });
}
function shallowCompare(arr1, arr2) {
  return areEqual(arr1, arr2);
}
function sortNumerically(array) {
  return array.sort(function(a, b) {
    return a - b;
  });
}
function removeRepeatsFromArray(array, object) {
  if (!array) {
    return;
  }
  for (var index = array.length - 2; index >= 0; index--) {
    var thisOneMatches = array[index] === object;
    var nextOneMatches = array[index + 1] === object;
    if (thisOneMatches && nextOneMatches) {
      array.splice(index + 1, 1);
    }
  }
}
function removeFromUnorderedArray(array, object) {
  var index = array.indexOf(object);
  if (index >= 0) {
    array[index] = array[array.length - 1];
    array.pop();
  }
}
function removeFromArray(array, object) {
  var index = array.indexOf(object);
  if (index >= 0) {
    array.splice(index, 1);
  }
}
function removeAllFromUnorderedArray(array, toRemove) {
  for (var i = 0; i < toRemove.length; i++) {
    removeFromUnorderedArray(array, toRemove[i]);
  }
}
function removeAllFromArray(array, toRemove) {
  for (var i = 0; i < toRemove.length; i++) {
    removeFromArray(array, toRemove[i]);
  }
}
function insertIntoArray(array, object, toIndex) {
  array.splice(toIndex, 0, object);
}
function insertArrayIntoArray(dest, src, toIndex) {
  if (dest == null || src == null) {
    return;
  }
  for (var i = src.length - 1; i >= 0; i--) {
    var item = src[i];
    insertIntoArray(dest, item, toIndex);
  }
}
function moveInArray(array, objectsToMove, toIndex) {
  removeAllFromArray(array, objectsToMove);
  objectsToMove.slice().reverse().forEach(function(obj) {
    return insertIntoArray(array, obj, toIndex);
  });
}
function includes(array, value) {
  return array.indexOf(value) > -1;
}
function flatten(arrayOfArrays) {
  return [].concat.apply([], arrayOfArrays);
}
function pushAll(target, source) {
  if (source == null || target == null) {
    return;
  }
  source.forEach(function(value) {
    return target.push(value);
  });
}
function toStrings(array) {
  return array.map(toStringOrNull);
}
function forEachReverse(list, action) {
  if (list == null) {
    return;
  }
  for (var i = list.length - 1; i >= 0; i--) {
    action(list[i], i);
  }
}
var ArrayUtils = Object.freeze({
  __proto__: null,
  firstExistingValue,
  existsAndNotEmpty,
  last,
  areEqual,
  shallowCompare,
  sortNumerically,
  removeRepeatsFromArray,
  removeFromUnorderedArray,
  removeFromArray,
  removeAllFromUnorderedArray,
  removeAllFromArray,
  insertIntoArray,
  insertArrayIntoArray,
  moveInArray,
  includes,
  flatten,
  pushAll,
  toStrings,
  forEachReverse
});
var AG_GRID_STOP_PROPAGATION = "__ag_Grid_Stop_Propagation";
var PASSIVE_EVENTS$1 = ["touchstart", "touchend", "touchmove", "touchcancel", "scroll"];
var supports = {};
function stopPropagationForAgGrid(event) {
  event[AG_GRID_STOP_PROPAGATION] = true;
}
function isStopPropagationForAgGrid(event) {
  return event[AG_GRID_STOP_PROPAGATION] === true;
}
var isEventSupported = /* @__PURE__ */ function() {
  var tags = {
    select: "input",
    change: "input",
    submit: "form",
    reset: "form",
    error: "img",
    load: "img",
    abort: "img"
  };
  var eventChecker = function(eventName) {
    if (typeof supports[eventName] === "boolean") {
      return supports[eventName];
    }
    var el = document.createElement(tags[eventName] || "div");
    eventName = "on" + eventName;
    return supports[eventName] = eventName in el;
  };
  return eventChecker;
}();
function getCtrlForEventTarget(gridOptionsService, eventTarget, type) {
  var sourceElement = eventTarget;
  while (sourceElement) {
    var renderedComp = gridOptionsService.getDomData(sourceElement, type);
    if (renderedComp) {
      return renderedComp;
    }
    sourceElement = sourceElement.parentElement;
  }
  return null;
}
function isElementInEventPath(element, event) {
  if (!event || !element) {
    return false;
  }
  return getEventPath(event).indexOf(element) >= 0;
}
function createEventPath(event) {
  var res = [];
  var pointer = event.target;
  while (pointer) {
    res.push(pointer);
    pointer = pointer.parentElement;
  }
  return res;
}
function getEventPath(event) {
  var eventNoType = event;
  if (eventNoType.path) {
    return eventNoType.path;
  }
  if (eventNoType.composedPath) {
    return eventNoType.composedPath();
  }
  return createEventPath(eventNoType);
}
function addSafePassiveEventListener(frameworkOverrides, eElement, event, listener) {
  var isPassive = includes(PASSIVE_EVENTS$1, event);
  var options = isPassive ? { passive: true } : void 0;
  if (frameworkOverrides && frameworkOverrides.addEventListener) {
    frameworkOverrides.addEventListener(eElement, event, listener, options);
  }
}
var EventUtils = Object.freeze({
  __proto__: null,
  stopPropagationForAgGrid,
  isStopPropagationForAgGrid,
  isEventSupported,
  getCtrlForEventTarget,
  isElementInEventPath,
  createEventPath,
  getEventPath,
  addSafePassiveEventListener
});
var __decorate$2M = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var BeanStub = (
  /** @class */
  function() {
    function BeanStub2() {
      var _this = this;
      this.destroyFunctions = [];
      this.destroyed = false;
      this.__v_skip = true;
      this.lastChangeSetIdLookup = {};
      this.propertyListenerId = 0;
      this.isAlive = function() {
        return !_this.destroyed;
      };
    }
    BeanStub2.prototype.getFrameworkOverrides = function() {
      return this.frameworkOverrides;
    };
    BeanStub2.prototype.getContext = function() {
      return this.context;
    };
    BeanStub2.prototype.destroy = function() {
      this.destroyFunctions.forEach(function(func) {
        return func();
      });
      this.destroyFunctions.length = 0;
      this.destroyed = true;
      this.dispatchEvent({ type: BeanStub2.EVENT_DESTROYED });
    };
    BeanStub2.prototype.addEventListener = function(eventType, listener) {
      if (!this.localEventService) {
        this.localEventService = new EventService();
      }
      this.localEventService.addEventListener(eventType, listener);
    };
    BeanStub2.prototype.removeEventListener = function(eventType, listener) {
      if (this.localEventService) {
        this.localEventService.removeEventListener(eventType, listener);
      }
    };
    BeanStub2.prototype.dispatchEvent = function(event) {
      if (this.localEventService) {
        this.localEventService.dispatchEvent(event);
      }
    };
    BeanStub2.prototype.addManagedListener = function(object, event, listener) {
      var _this = this;
      if (this.destroyed) {
        return;
      }
      if (object instanceof HTMLElement) {
        addSafePassiveEventListener(this.getFrameworkOverrides(), object, event, listener);
      } else {
        object.addEventListener(event, listener);
      }
      var destroyFunc = function() {
        object.removeEventListener(event, listener);
        _this.destroyFunctions = _this.destroyFunctions.filter(function(fn) {
          return fn !== destroyFunc;
        });
        return null;
      };
      this.destroyFunctions.push(destroyFunc);
      return destroyFunc;
    };
    BeanStub2.prototype.setupGridOptionListener = function(event, listener) {
      var _this = this;
      this.gridOptionsService.addEventListener(event, listener);
      var destroyFunc = function() {
        _this.gridOptionsService.removeEventListener(event, listener);
        _this.destroyFunctions = _this.destroyFunctions.filter(function(fn) {
          return fn !== destroyFunc;
        });
        return null;
      };
      this.destroyFunctions.push(destroyFunc);
      return destroyFunc;
    };
    BeanStub2.prototype.addManagedPropertyListener = function(event, listener) {
      if (this.destroyed) {
        return function() {
          return null;
        };
      }
      return this.setupGridOptionListener(event, listener);
    };
    BeanStub2.prototype.addManagedPropertyListeners = function(events, listener) {
      var _this = this;
      if (this.destroyed) {
        return;
      }
      var eventsKey = events.join("-") + this.propertyListenerId++;
      var wrappedListener = function(event) {
        if (event.changeSet) {
          if (event.changeSet && event.changeSet.id === _this.lastChangeSetIdLookup[eventsKey]) {
            return;
          }
          _this.lastChangeSetIdLookup[eventsKey] = event.changeSet.id;
        }
        var propertiesChangeEvent = {
          type: "gridPropertyChanged",
          changeSet: event.changeSet
        };
        listener(propertiesChangeEvent);
      };
      events.forEach(function(event) {
        return _this.setupGridOptionListener(event, wrappedListener);
      });
    };
    BeanStub2.prototype.addDestroyFunc = function(func) {
      if (this.isAlive()) {
        this.destroyFunctions.push(func);
      } else {
        func();
      }
    };
    BeanStub2.prototype.createManagedBean = function(bean, context) {
      var res = this.createBean(bean, context);
      this.addDestroyFunc(this.destroyBean.bind(this, bean, context));
      return res;
    };
    BeanStub2.prototype.createBean = function(bean, context, afterPreCreateCallback) {
      return (context || this.getContext()).createBean(bean, afterPreCreateCallback);
    };
    BeanStub2.prototype.destroyBean = function(bean, context) {
      return (context || this.getContext()).destroyBean(bean);
    };
    BeanStub2.prototype.destroyBeans = function(beans, context) {
      var _this = this;
      if (beans) {
        beans.forEach(function(bean) {
          return _this.destroyBean(bean, context);
        });
      }
      return [];
    };
    BeanStub2.EVENT_DESTROYED = "destroyed";
    __decorate$2M([
      Autowired("frameworkOverrides")
    ], BeanStub2.prototype, "frameworkOverrides", void 0);
    __decorate$2M([
      Autowired("context")
    ], BeanStub2.prototype, "context", void 0);
    __decorate$2M([
      Autowired("eventService")
    ], BeanStub2.prototype, "eventService", void 0);
    __decorate$2M([
      Autowired("gridOptionsService")
    ], BeanStub2.prototype, "gridOptionsService", void 0);
    __decorate$2M([
      Autowired("localeService")
    ], BeanStub2.prototype, "localeService", void 0);
    __decorate$2M([
      Autowired("environment")
    ], BeanStub2.prototype, "environment", void 0);
    __decorate$2M([
      PreDestroy
    ], BeanStub2.prototype, "destroy", null);
    return BeanStub2;
  }()
);
var __extends$3d = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2L = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param$7 = function(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
};
var ColumnFactory = (
  /** @class */
  function(_super) {
    __extends$3d(ColumnFactory2, _super);
    function ColumnFactory2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ColumnFactory2.prototype.setBeans = function(loggerFactory) {
      this.logger = loggerFactory.create("ColumnFactory");
    };
    ColumnFactory2.prototype.createColumnTree = function(defs, primaryColumns, existingTree) {
      var columnKeyCreator = new ColumnKeyCreator();
      var _a = this.extractExistingTreeData(existingTree), existingCols = _a.existingCols, existingGroups = _a.existingGroups, existingColKeys = _a.existingColKeys;
      columnKeyCreator.addExistingKeys(existingColKeys);
      var unbalancedTree = this.recursivelyCreateColumns(defs, 0, primaryColumns, existingCols, columnKeyCreator, existingGroups);
      var treeDept = this.findMaxDept(unbalancedTree, 0);
      this.logger.log("Number of levels for grouped columns is " + treeDept);
      var columnTree = this.balanceColumnTree(unbalancedTree, 0, treeDept, columnKeyCreator);
      var deptFirstCallback = function(child, parent) {
        if (child instanceof ProvidedColumnGroup) {
          child.setupExpandable();
        }
        child.setOriginalParent(parent);
      };
      this.columnUtils.depthFirstOriginalTreeSearch(null, columnTree, deptFirstCallback);
      return {
        columnTree,
        treeDept
      };
    };
    ColumnFactory2.prototype.extractExistingTreeData = function(existingTree) {
      var existingCols = [];
      var existingGroups = [];
      var existingColKeys = [];
      if (existingTree) {
        this.columnUtils.depthFirstOriginalTreeSearch(null, existingTree, function(item) {
          if (item instanceof ProvidedColumnGroup) {
            var group = item;
            existingGroups.push(group);
          } else {
            var col = item;
            existingColKeys.push(col.getId());
            existingCols.push(col);
          }
        });
      }
      return { existingCols, existingGroups, existingColKeys };
    };
    ColumnFactory2.prototype.createForAutoGroups = function(autoGroupCols, gridBalancedTree) {
      var _this = this;
      return autoGroupCols.map(function(col) {
        return _this.createAutoGroupTreeItem(gridBalancedTree, col);
      });
    };
    ColumnFactory2.prototype.createAutoGroupTreeItem = function(balancedColumnTree, column) {
      var dept = this.findDepth(balancedColumnTree);
      var nextChild = column;
      for (var i = dept - 1; i >= 0; i--) {
        var autoGroup = new ProvidedColumnGroup(null, "FAKE_PATH_".concat(column.getId(), "}_").concat(i), true, i);
        this.createBean(autoGroup);
        autoGroup.setChildren([nextChild]);
        nextChild.setOriginalParent(autoGroup);
        nextChild = autoGroup;
      }
      if (dept === 0) {
        column.setOriginalParent(null);
      }
      return nextChild;
    };
    ColumnFactory2.prototype.findDepth = function(balancedColumnTree) {
      var dept = 0;
      var pointer = balancedColumnTree;
      while (pointer && pointer[0] && pointer[0] instanceof ProvidedColumnGroup) {
        dept++;
        pointer = pointer[0].getChildren();
      }
      return dept;
    };
    ColumnFactory2.prototype.balanceColumnTree = function(unbalancedTree, currentDept, columnDept, columnKeyCreator) {
      var result = [];
      for (var i = 0; i < unbalancedTree.length; i++) {
        var child = unbalancedTree[i];
        if (child instanceof ProvidedColumnGroup) {
          var originalGroup = child;
          var newChildren = this.balanceColumnTree(originalGroup.getChildren(), currentDept + 1, columnDept, columnKeyCreator);
          originalGroup.setChildren(newChildren);
          result.push(originalGroup);
        } else {
          var firstPaddedGroup = void 0;
          var currentPaddedGroup = void 0;
          for (var j = columnDept - 1; j >= currentDept; j--) {
            var newColId = columnKeyCreator.getUniqueKey(null, null);
            var colGroupDefMerged = this.createMergedColGroupDef(null);
            var paddedGroup = new ProvidedColumnGroup(colGroupDefMerged, newColId, true, currentDept);
            this.createBean(paddedGroup);
            if (currentPaddedGroup) {
              currentPaddedGroup.setChildren([paddedGroup]);
            }
            currentPaddedGroup = paddedGroup;
            if (!firstPaddedGroup) {
              firstPaddedGroup = currentPaddedGroup;
            }
          }
          if (firstPaddedGroup && currentPaddedGroup) {
            result.push(firstPaddedGroup);
            var hasGroups = unbalancedTree.some(function(leaf) {
              return leaf instanceof ProvidedColumnGroup;
            });
            if (hasGroups) {
              currentPaddedGroup.setChildren([child]);
              continue;
            } else {
              currentPaddedGroup.setChildren(unbalancedTree);
              break;
            }
          }
          result.push(child);
        }
      }
      return result;
    };
    ColumnFactory2.prototype.findMaxDept = function(treeChildren, dept) {
      var maxDeptThisLevel = dept;
      for (var i = 0; i < treeChildren.length; i++) {
        var abstractColumn = treeChildren[i];
        if (abstractColumn instanceof ProvidedColumnGroup) {
          var originalGroup = abstractColumn;
          var newDept = this.findMaxDept(originalGroup.getChildren(), dept + 1);
          if (maxDeptThisLevel < newDept) {
            maxDeptThisLevel = newDept;
          }
        }
      }
      return maxDeptThisLevel;
    };
    ColumnFactory2.prototype.recursivelyCreateColumns = function(defs, level, primaryColumns, existingColsCopy, columnKeyCreator, existingGroups) {
      if (!defs)
        return [];
      var result = new Array(defs.length);
      for (var i = 0; i < result.length; i++) {
        var def = defs[i];
        if (this.isColumnGroup(def)) {
          result[i] = this.createColumnGroup(primaryColumns, def, level, existingColsCopy, columnKeyCreator, existingGroups);
        } else {
          result[i] = this.createColumn(primaryColumns, def, existingColsCopy, columnKeyCreator);
        }
      }
      return result;
    };
    ColumnFactory2.prototype.createColumnGroup = function(primaryColumns, colGroupDef, level, existingColumns, columnKeyCreator, existingGroups) {
      var colGroupDefMerged = this.createMergedColGroupDef(colGroupDef);
      var groupId = columnKeyCreator.getUniqueKey(colGroupDefMerged.groupId || null, null);
      var providedGroup = new ProvidedColumnGroup(colGroupDefMerged, groupId, false, level);
      this.createBean(providedGroup);
      var existingGroupAndIndex = this.findExistingGroup(colGroupDef, existingGroups);
      if (existingGroupAndIndex) {
        existingGroups.splice(existingGroupAndIndex.idx, 1);
      }
      var existingGroup = existingGroupAndIndex === null || existingGroupAndIndex === void 0 ? void 0 : existingGroupAndIndex.group;
      if (existingGroup) {
        providedGroup.setExpanded(existingGroup.isExpanded());
      }
      var children = this.recursivelyCreateColumns(colGroupDefMerged.children, level + 1, primaryColumns, existingColumns, columnKeyCreator, existingGroups);
      providedGroup.setChildren(children);
      return providedGroup;
    };
    ColumnFactory2.prototype.createMergedColGroupDef = function(colGroupDef) {
      var colGroupDefMerged = {};
      Object.assign(colGroupDefMerged, this.gridOptionsService.get("defaultColGroupDef"));
      Object.assign(colGroupDefMerged, colGroupDef);
      return colGroupDefMerged;
    };
    ColumnFactory2.prototype.createColumn = function(primaryColumns, colDef, existingColsCopy, columnKeyCreator) {
      var existingColAndIndex = this.findExistingColumn(colDef, existingColsCopy);
      if (existingColAndIndex) {
        existingColsCopy === null || existingColsCopy === void 0 ? void 0 : existingColsCopy.splice(existingColAndIndex.idx, 1);
      }
      var column = existingColAndIndex === null || existingColAndIndex === void 0 ? void 0 : existingColAndIndex.column;
      if (!column) {
        var colId = columnKeyCreator.getUniqueKey(colDef.colId, colDef.field);
        var colDefMerged = this.addColumnDefaultAndTypes(colDef, colId);
        column = new Column(colDefMerged, colDef, colId, primaryColumns);
        this.context.createBean(column);
      } else {
        var colDefMerged = this.addColumnDefaultAndTypes(colDef, column.getColId());
        column.setColDef(colDefMerged, colDef);
        this.applyColumnState(column, colDefMerged);
      }
      this.dataTypeService.addColumnListeners(column);
      return column;
    };
    ColumnFactory2.prototype.applyColumnState = function(column, colDef) {
      var flex = attrToNumber(colDef.flex);
      if (flex !== void 0) {
        column.setFlex(flex);
      }
      var noFlexThisCol = column.getFlex() <= 0;
      if (noFlexThisCol) {
        var width = attrToNumber(colDef.width);
        if (width != null) {
          column.setActualWidth(width);
        } else {
          var widthBeforeUpdate = column.getActualWidth();
          column.setActualWidth(widthBeforeUpdate);
        }
      }
      if (colDef.sort !== void 0) {
        if (colDef.sort == "asc" || colDef.sort == "desc") {
          column.setSort(colDef.sort);
        } else {
          column.setSort(void 0);
        }
      }
      var sortIndex = attrToNumber(colDef.sortIndex);
      if (sortIndex !== void 0) {
        column.setSortIndex(sortIndex);
      }
      var hide = attrToBoolean(colDef.hide);
      if (hide !== void 0) {
        column.setVisible(!hide);
      }
      if (colDef.pinned !== void 0) {
        column.setPinned(colDef.pinned);
      }
    };
    ColumnFactory2.prototype.findExistingColumn = function(newColDef, existingColsCopy) {
      if (!existingColsCopy)
        return void 0;
      for (var i = 0; i < existingColsCopy.length; i++) {
        var def = existingColsCopy[i].getUserProvidedColDef();
        if (!def)
          continue;
        var newHasId = newColDef.colId != null;
        if (newHasId) {
          if (existingColsCopy[i].getId() === newColDef.colId) {
            return { idx: i, column: existingColsCopy[i] };
          }
          continue;
        }
        var newHasField = newColDef.field != null;
        if (newHasField) {
          if (def.field === newColDef.field) {
            return { idx: i, column: existingColsCopy[i] };
          }
          continue;
        }
        if (def === newColDef) {
          return { idx: i, column: existingColsCopy[i] };
        }
      }
      return void 0;
    };
    ColumnFactory2.prototype.findExistingGroup = function(newGroupDef, existingGroups) {
      var newHasId = newGroupDef.groupId != null;
      if (!newHasId) {
        return void 0;
      }
      for (var i = 0; i < existingGroups.length; i++) {
        var existingGroup = existingGroups[i];
        var existingDef = existingGroup.getColGroupDef();
        if (!existingDef) {
          continue;
        }
        if (existingGroup.getId() === newGroupDef.groupId) {
          return { idx: i, group: existingGroup };
        }
      }
      return void 0;
    };
    ColumnFactory2.prototype.addColumnDefaultAndTypes = function(colDef, colId) {
      var res = {};
      var defaultColDef = this.gridOptionsService.get("defaultColDef");
      mergeDeep(res, defaultColDef, false, true);
      var columnType = this.dataTypeService.updateColDefAndGetColumnType(res, colDef, colId);
      if (columnType) {
        this.assignColumnTypes(columnType, res);
      }
      mergeDeep(res, colDef, false, true);
      var autoGroupColDef = this.gridOptionsService.get("autoGroupColumnDef");
      var isSortingCoupled = this.gridOptionsService.isColumnsSortingCoupledToGroup();
      if (colDef.rowGroup && autoGroupColDef && isSortingCoupled) {
        mergeDeep(res, { sort: autoGroupColDef.sort, initialSort: autoGroupColDef.initialSort }, false, true);
      }
      this.dataTypeService.validateColDef(res);
      return res;
    };
    ColumnFactory2.prototype.assignColumnTypes = function(typeKeys, colDefMerged) {
      if (!typeKeys.length) {
        return;
      }
      var allColumnTypes = Object.assign({}, DefaultColumnTypes);
      var userTypes = this.gridOptionsService.get("columnTypes") || {};
      iterateObject(userTypes, function(key, value) {
        if (key in allColumnTypes) {
          console.warn("AG Grid: the column type '".concat(key, "' is a default column type and cannot be overridden."));
        } else {
          var colType = value;
          if (colType.type) {
            warnOnce("Column type definitions 'columnTypes' with a 'type' attribute are not supported because a column type cannot refer to another column type. Only column definitions 'columnDefs' can use the 'type' attribute to refer to a column type.");
          }
          allColumnTypes[key] = value;
        }
      });
      typeKeys.forEach(function(t) {
        var typeColDef = allColumnTypes[t.trim()];
        if (typeColDef) {
          mergeDeep(colDefMerged, typeColDef, false, true);
        } else {
          console.warn("AG Grid: colDef.type '" + t + "' does not correspond to defined gridOptions.columnTypes");
        }
      });
    };
    ColumnFactory2.prototype.isColumnGroup = function(abstractColDef) {
      return abstractColDef.children !== void 0;
    };
    __decorate$2L([
      Autowired("columnUtils")
    ], ColumnFactory2.prototype, "columnUtils", void 0);
    __decorate$2L([
      Autowired("dataTypeService")
    ], ColumnFactory2.prototype, "dataTypeService", void 0);
    __decorate$2L([
      __param$7(0, Qualifier("loggerFactory"))
    ], ColumnFactory2.prototype, "setBeans", null);
    ColumnFactory2 = __decorate$2L([
      Bean("columnFactory")
    ], ColumnFactory2);
    return ColumnFactory2;
  }(BeanStub)
);
var __decorate$2K = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ColumnGroup = (
  /** @class */
  function() {
    function ColumnGroup2(providedColumnGroup, groupId, partId, pinned) {
      this.displayedChildren = [];
      this.localEventService = new EventService();
      this.groupId = groupId;
      this.partId = partId;
      this.providedColumnGroup = providedColumnGroup;
      this.pinned = pinned;
    }
    ColumnGroup2.createUniqueId = function(groupId, instanceId) {
      return groupId + "_" + instanceId;
    };
    ColumnGroup2.prototype.reset = function() {
      this.parent = null;
      this.children = null;
      this.displayedChildren = null;
    };
    ColumnGroup2.prototype.getParent = function() {
      return this.parent;
    };
    ColumnGroup2.prototype.setParent = function(parent) {
      this.parent = parent;
    };
    ColumnGroup2.prototype.getUniqueId = function() {
      return ColumnGroup2.createUniqueId(this.groupId, this.partId);
    };
    ColumnGroup2.prototype.isEmptyGroup = function() {
      return this.displayedChildren.length === 0;
    };
    ColumnGroup2.prototype.isMoving = function() {
      var allLeafColumns = this.getProvidedColumnGroup().getLeafColumns();
      if (!allLeafColumns || allLeafColumns.length === 0) {
        return false;
      }
      return allLeafColumns.every(function(col) {
        return col.isMoving();
      });
    };
    ColumnGroup2.prototype.checkLeft = function() {
      this.displayedChildren.forEach(function(child) {
        if (child instanceof ColumnGroup2) {
          child.checkLeft();
        }
      });
      if (this.displayedChildren.length > 0) {
        if (this.gridOptionsService.get("enableRtl")) {
          var lastChild = last(this.displayedChildren);
          var lastChildLeft = lastChild.getLeft();
          this.setLeft(lastChildLeft);
        } else {
          var firstChildLeft = this.displayedChildren[0].getLeft();
          this.setLeft(firstChildLeft);
        }
      } else {
        this.setLeft(null);
      }
    };
    ColumnGroup2.prototype.getLeft = function() {
      return this.left;
    };
    ColumnGroup2.prototype.getOldLeft = function() {
      return this.oldLeft;
    };
    ColumnGroup2.prototype.setLeft = function(left) {
      this.oldLeft = this.left;
      if (this.left !== left) {
        this.left = left;
        this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup2.EVENT_LEFT_CHANGED));
      }
    };
    ColumnGroup2.prototype.getPinned = function() {
      return this.pinned;
    };
    ColumnGroup2.prototype.createAgEvent = function(type) {
      return { type };
    };
    ColumnGroup2.prototype.addEventListener = function(eventType, listener) {
      this.localEventService.addEventListener(eventType, listener);
    };
    ColumnGroup2.prototype.removeEventListener = function(eventType, listener) {
      this.localEventService.removeEventListener(eventType, listener);
    };
    ColumnGroup2.prototype.getGroupId = function() {
      return this.groupId;
    };
    ColumnGroup2.prototype.getPartId = function() {
      return this.partId;
    };
    ColumnGroup2.prototype.isChildInThisGroupDeepSearch = function(wantedChild) {
      var result = false;
      this.children.forEach(function(foundChild) {
        if (wantedChild === foundChild) {
          result = true;
        }
        if (foundChild instanceof ColumnGroup2) {
          if (foundChild.isChildInThisGroupDeepSearch(wantedChild)) {
            result = true;
          }
        }
      });
      return result;
    };
    ColumnGroup2.prototype.getActualWidth = function() {
      var groupActualWidth = 0;
      if (this.displayedChildren) {
        this.displayedChildren.forEach(function(child) {
          groupActualWidth += child.getActualWidth();
        });
      }
      return groupActualWidth;
    };
    ColumnGroup2.prototype.isResizable = function() {
      if (!this.displayedChildren) {
        return false;
      }
      var result = false;
      this.displayedChildren.forEach(function(child) {
        if (child.isResizable()) {
          result = true;
        }
      });
      return result;
    };
    ColumnGroup2.prototype.getMinWidth = function() {
      var result = 0;
      this.displayedChildren.forEach(function(groupChild) {
        result += groupChild.getMinWidth() || 0;
      });
      return result;
    };
    ColumnGroup2.prototype.addChild = function(child) {
      if (!this.children) {
        this.children = [];
      }
      this.children.push(child);
    };
    ColumnGroup2.prototype.getDisplayedChildren = function() {
      return this.displayedChildren;
    };
    ColumnGroup2.prototype.getLeafColumns = function() {
      var result = [];
      this.addLeafColumns(result);
      return result;
    };
    ColumnGroup2.prototype.getDisplayedLeafColumns = function() {
      var result = [];
      this.addDisplayedLeafColumns(result);
      return result;
    };
    ColumnGroup2.prototype.getDefinition = function() {
      return this.providedColumnGroup.getColGroupDef();
    };
    ColumnGroup2.prototype.getColGroupDef = function() {
      return this.providedColumnGroup.getColGroupDef();
    };
    ColumnGroup2.prototype.isPadding = function() {
      return this.providedColumnGroup.isPadding();
    };
    ColumnGroup2.prototype.isExpandable = function() {
      return this.providedColumnGroup.isExpandable();
    };
    ColumnGroup2.prototype.isExpanded = function() {
      return this.providedColumnGroup.isExpanded();
    };
    ColumnGroup2.prototype.setExpanded = function(expanded) {
      this.providedColumnGroup.setExpanded(expanded);
    };
    ColumnGroup2.prototype.addDisplayedLeafColumns = function(leafColumns) {
      this.displayedChildren.forEach(function(child) {
        if (child instanceof Column) {
          leafColumns.push(child);
        } else if (child instanceof ColumnGroup2) {
          child.addDisplayedLeafColumns(leafColumns);
        }
      });
    };
    ColumnGroup2.prototype.addLeafColumns = function(leafColumns) {
      this.children.forEach(function(child) {
        if (child instanceof Column) {
          leafColumns.push(child);
        } else if (child instanceof ColumnGroup2) {
          child.addLeafColumns(leafColumns);
        }
      });
    };
    ColumnGroup2.prototype.getChildren = function() {
      return this.children;
    };
    ColumnGroup2.prototype.getColumnGroupShow = function() {
      return this.providedColumnGroup.getColumnGroupShow();
    };
    ColumnGroup2.prototype.getProvidedColumnGroup = function() {
      return this.providedColumnGroup;
    };
    ColumnGroup2.prototype.getPaddingLevel = function() {
      var parent = this.getParent();
      if (!this.isPadding() || !parent || !parent.isPadding()) {
        return 0;
      }
      return 1 + parent.getPaddingLevel();
    };
    ColumnGroup2.prototype.calculateDisplayedColumns = function() {
      var _this = this;
      this.displayedChildren = [];
      var parentWithExpansion = this;
      while (parentWithExpansion != null && parentWithExpansion.isPadding()) {
        parentWithExpansion = parentWithExpansion.getParent();
      }
      var isExpandable = parentWithExpansion ? parentWithExpansion.providedColumnGroup.isExpandable() : false;
      if (!isExpandable) {
        this.displayedChildren = this.children;
        this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup2.EVENT_DISPLAYED_CHILDREN_CHANGED));
        return;
      }
      this.children.forEach(function(child) {
        var emptyGroup = child instanceof ColumnGroup2 && (!child.displayedChildren || !child.displayedChildren.length);
        if (emptyGroup) {
          return;
        }
        var headerGroupShow = child.getColumnGroupShow();
        switch (headerGroupShow) {
          case "open":
            if (parentWithExpansion.providedColumnGroup.isExpanded()) {
              _this.displayedChildren.push(child);
            }
            break;
          case "closed":
            if (!parentWithExpansion.providedColumnGroup.isExpanded()) {
              _this.displayedChildren.push(child);
            }
            break;
          default:
            _this.displayedChildren.push(child);
            break;
        }
      });
      this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup2.EVENT_DISPLAYED_CHILDREN_CHANGED));
    };
    ColumnGroup2.EVENT_LEFT_CHANGED = "leftChanged";
    ColumnGroup2.EVENT_DISPLAYED_CHILDREN_CHANGED = "displayedChildrenChanged";
    __decorate$2K([
      Autowired("gridOptionsService")
    ], ColumnGroup2.prototype, "gridOptionsService", void 0);
    return ColumnGroup2;
  }()
);
var Events = (
  /** @class */
  function() {
    function Events2() {
    }
    Events2.EVENT_COLUMN_EVERYTHING_CHANGED = "columnEverythingChanged";
    Events2.EVENT_NEW_COLUMNS_LOADED = "newColumnsLoaded";
    Events2.EVENT_COLUMN_PIVOT_MODE_CHANGED = "columnPivotModeChanged";
    Events2.EVENT_COLUMN_ROW_GROUP_CHANGED = "columnRowGroupChanged";
    Events2.EVENT_EXPAND_COLLAPSE_ALL = "expandOrCollapseAll";
    Events2.EVENT_COLUMN_PIVOT_CHANGED = "columnPivotChanged";
    Events2.EVENT_GRID_COLUMNS_CHANGED = "gridColumnsChanged";
    Events2.EVENT_COLUMN_VALUE_CHANGED = "columnValueChanged";
    Events2.EVENT_COLUMN_MOVED = "columnMoved";
    Events2.EVENT_COLUMN_VISIBLE = "columnVisible";
    Events2.EVENT_COLUMN_PINNED = "columnPinned";
    Events2.EVENT_COLUMN_GROUP_OPENED = "columnGroupOpened";
    Events2.EVENT_COLUMN_RESIZED = "columnResized";
    Events2.EVENT_DISPLAYED_COLUMNS_CHANGED = "displayedColumnsChanged";
    Events2.EVENT_SUPPRESS_COLUMN_MOVE_CHANGED = "suppressMovableColumns";
    Events2.EVENT_SUPPRESS_MENU_HIDE_CHANGED = "suppressMenuHide";
    Events2.EVENT_SUPPRESS_FIELD_DOT_NOTATION = "suppressFieldDotNotation";
    Events2.EVENT_VIRTUAL_COLUMNS_CHANGED = "virtualColumnsChanged";
    Events2.EVENT_COLUMN_HEADER_MOUSE_OVER = "columnHeaderMouseOver";
    Events2.EVENT_COLUMN_HEADER_MOUSE_LEAVE = "columnHeaderMouseLeave";
    Events2.EVENT_COLUMN_HEADER_CLICKED = "columnHeaderClicked";
    Events2.EVENT_COLUMN_HEADER_CONTEXT_MENU = "columnHeaderContextMenu";
    Events2.EVENT_ASYNC_TRANSACTIONS_FLUSHED = "asyncTransactionsFlushed";
    Events2.EVENT_ROW_GROUP_OPENED = "rowGroupOpened";
    Events2.EVENT_ROW_DATA_UPDATED = "rowDataUpdated";
    Events2.EVENT_PINNED_ROW_DATA_CHANGED = "pinnedRowDataChanged";
    Events2.EVENT_RANGE_SELECTION_CHANGED = "rangeSelectionChanged";
    Events2.EVENT_CHART_CREATED = "chartCreated";
    Events2.EVENT_CHART_RANGE_SELECTION_CHANGED = "chartRangeSelectionChanged";
    Events2.EVENT_CHART_OPTIONS_CHANGED = "chartOptionsChanged";
    Events2.EVENT_CHART_DESTROYED = "chartDestroyed";
    Events2.EVENT_TOOL_PANEL_VISIBLE_CHANGED = "toolPanelVisibleChanged";
    Events2.EVENT_TOOL_PANEL_SIZE_CHANGED = "toolPanelSizeChanged";
    Events2.EVENT_COLUMN_PANEL_ITEM_DRAG_START = "columnPanelItemDragStart";
    Events2.EVENT_COLUMN_PANEL_ITEM_DRAG_END = "columnPanelItemDragEnd";
    Events2.EVENT_MODEL_UPDATED = "modelUpdated";
    Events2.EVENT_CUT_START = "cutStart";
    Events2.EVENT_CUT_END = "cutEnd";
    Events2.EVENT_PASTE_START = "pasteStart";
    Events2.EVENT_PASTE_END = "pasteEnd";
    Events2.EVENT_FILL_START = "fillStart";
    Events2.EVENT_FILL_END = "fillEnd";
    Events2.EVENT_RANGE_DELETE_START = "rangeDeleteStart";
    Events2.EVENT_RANGE_DELETE_END = "rangeDeleteEnd";
    Events2.EVENT_UNDO_STARTED = "undoStarted";
    Events2.EVENT_UNDO_ENDED = "undoEnded";
    Events2.EVENT_REDO_STARTED = "redoStarted";
    Events2.EVENT_REDO_ENDED = "redoEnded";
    Events2.EVENT_KEY_SHORTCUT_CHANGED_CELL_START = "keyShortcutChangedCellStart";
    Events2.EVENT_KEY_SHORTCUT_CHANGED_CELL_END = "keyShortcutChangedCellEnd";
    Events2.EVENT_CELL_CLICKED = "cellClicked";
    Events2.EVENT_CELL_DOUBLE_CLICKED = "cellDoubleClicked";
    Events2.EVENT_CELL_MOUSE_DOWN = "cellMouseDown";
    Events2.EVENT_CELL_CONTEXT_MENU = "cellContextMenu";
    Events2.EVENT_CELL_VALUE_CHANGED = "cellValueChanged";
    Events2.EVENT_CELL_EDIT_REQUEST = "cellEditRequest";
    Events2.EVENT_ROW_VALUE_CHANGED = "rowValueChanged";
    Events2.EVENT_CELL_FOCUSED = "cellFocused";
    Events2.EVENT_CELL_FOCUS_CLEARED = "cellFocusCleared";
    Events2.EVENT_FULL_WIDTH_ROW_FOCUSED = "fullWidthRowFocused";
    Events2.EVENT_ROW_SELECTED = "rowSelected";
    Events2.EVENT_SELECTION_CHANGED = "selectionChanged";
    Events2.EVENT_TOOLTIP_SHOW = "tooltipShow";
    Events2.EVENT_TOOLTIP_HIDE = "tooltipHide";
    Events2.EVENT_CELL_KEY_DOWN = "cellKeyDown";
    Events2.EVENT_CELL_MOUSE_OVER = "cellMouseOver";
    Events2.EVENT_CELL_MOUSE_OUT = "cellMouseOut";
    Events2.EVENT_FILTER_CHANGED = "filterChanged";
    Events2.EVENT_FILTER_MODIFIED = "filterModified";
    Events2.EVENT_FILTER_OPENED = "filterOpened";
    Events2.EVENT_ADVANCED_FILTER_BUILDER_VISIBLE_CHANGED = "advancedFilterBuilderVisibleChanged";
    Events2.EVENT_SORT_CHANGED = "sortChanged";
    Events2.EVENT_VIRTUAL_ROW_REMOVED = "virtualRowRemoved";
    Events2.EVENT_ROW_CLICKED = "rowClicked";
    Events2.EVENT_ROW_DOUBLE_CLICKED = "rowDoubleClicked";
    Events2.EVENT_GRID_READY = "gridReady";
    Events2.EVENT_GRID_PRE_DESTROYED = "gridPreDestroyed";
    Events2.EVENT_GRID_SIZE_CHANGED = "gridSizeChanged";
    Events2.EVENT_VIEWPORT_CHANGED = "viewportChanged";
    Events2.EVENT_SCROLLBAR_WIDTH_CHANGED = "scrollbarWidthChanged";
    Events2.EVENT_FIRST_DATA_RENDERED = "firstDataRendered";
    Events2.EVENT_DRAG_STARTED = "dragStarted";
    Events2.EVENT_DRAG_STOPPED = "dragStopped";
    Events2.EVENT_CHECKBOX_CHANGED = "checkboxChanged";
    Events2.EVENT_ROW_EDITING_STARTED = "rowEditingStarted";
    Events2.EVENT_ROW_EDITING_STOPPED = "rowEditingStopped";
    Events2.EVENT_CELL_EDITING_STARTED = "cellEditingStarted";
    Events2.EVENT_CELL_EDITING_STOPPED = "cellEditingStopped";
    Events2.EVENT_BODY_SCROLL = "bodyScroll";
    Events2.EVENT_BODY_SCROLL_END = "bodyScrollEnd";
    Events2.EVENT_HEIGHT_SCALE_CHANGED = "heightScaleChanged";
    Events2.EVENT_PAGINATION_CHANGED = "paginationChanged";
    Events2.EVENT_COMPONENT_STATE_CHANGED = "componentStateChanged";
    Events2.EVENT_STORE_REFRESHED = "storeRefreshed";
    Events2.EVENT_STATE_UPDATED = "stateUpdated";
    Events2.EVENT_BODY_HEIGHT_CHANGED = "bodyHeightChanged";
    Events2.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED = "displayedColumnsWidthChanged";
    Events2.EVENT_SCROLL_VISIBILITY_CHANGED = "scrollVisibilityChanged";
    Events2.EVENT_COLUMN_HOVER_CHANGED = "columnHoverChanged";
    Events2.EVENT_FLASH_CELLS = "flashCells";
    Events2.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED = "paginationPixelOffsetChanged";
    Events2.EVENT_DISPLAYED_ROWS_CHANGED = "displayedRowsChanged";
    Events2.EVENT_LEFT_PINNED_WIDTH_CHANGED = "leftPinnedWidthChanged";
    Events2.EVENT_RIGHT_PINNED_WIDTH_CHANGED = "rightPinnedWidthChanged";
    Events2.EVENT_ROW_CONTAINER_HEIGHT_CHANGED = "rowContainerHeightChanged";
    Events2.EVENT_HEADER_HEIGHT_CHANGED = "headerHeightChanged";
    Events2.EVENT_COLUMN_HEADER_HEIGHT_CHANGED = "columnHeaderHeightChanged";
    Events2.EVENT_ROW_DRAG_ENTER = "rowDragEnter";
    Events2.EVENT_ROW_DRAG_MOVE = "rowDragMove";
    Events2.EVENT_ROW_DRAG_LEAVE = "rowDragLeave";
    Events2.EVENT_ROW_DRAG_END = "rowDragEnd";
    Events2.EVENT_GRID_STYLES_CHANGED = "gridStylesChanged";
    Events2.EVENT_POPUP_TO_FRONT = "popupToFront";
    Events2.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST = "columnRowGroupChangeRequest";
    Events2.EVENT_COLUMN_PIVOT_CHANGE_REQUEST = "columnPivotChangeRequest";
    Events2.EVENT_COLUMN_VALUE_CHANGE_REQUEST = "columnValueChangeRequest";
    Events2.EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST = "columnAggFuncChangeRequest";
    Events2.EVENT_STORE_UPDATED = "storeUpdated";
    Events2.EVENT_FILTER_DESTROYED = "filterDestroyed";
    Events2.EVENT_ROW_DATA_UPDATE_STARTED = "rowDataUpdateStarted";
    Events2.EVENT_ROW_COUNT_READY = "rowCountReady";
    Events2.EVENT_ADVANCED_FILTER_ENABLED_CHANGED = "advancedFilterEnabledChanged";
    Events2.EVENT_DATA_TYPES_INFERRED = "dataTypesInferred";
    Events2.EVENT_FIELD_VALUE_CHANGED = "fieldValueChanged";
    Events2.EVENT_FIELD_PICKER_VALUE_SELECTED = "fieldPickerValueSelected";
    Events2.EVENT_SIDE_BAR_UPDATED = "sideBarUpdated";
    return Events2;
  }()
);
var GroupInstanceIdCreator = (
  /** @class */
  function() {
    function GroupInstanceIdCreator2() {
      this.existingIds = {};
    }
    GroupInstanceIdCreator2.prototype.getInstanceIdForKey = function(key) {
      var lastResult = this.existingIds[key];
      var result;
      if (typeof lastResult !== "number") {
        result = 0;
      } else {
        result = lastResult + 1;
      }
      this.existingIds[key] = result;
      return result;
    };
    return GroupInstanceIdCreator2;
  }()
);
var __extends$3c = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2J = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var GROUP_AUTO_COLUMN_ID = "ag-Grid-AutoColumn";
var AutoGroupColService = (
  /** @class */
  function(_super) {
    __extends$3c(AutoGroupColService2, _super);
    function AutoGroupColService2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    AutoGroupColService2.prototype.createAutoGroupColumns = function(rowGroupColumns) {
      var _this = this;
      var groupAutoColumns = [];
      var doingTreeData = this.gridOptionsService.get("treeData");
      var doingMultiAutoColumn = this.gridOptionsService.isGroupMultiAutoColumn();
      if (doingTreeData && doingMultiAutoColumn) {
        console.warn('AG Grid: you cannot mix groupDisplayType = "multipleColumns" with treeData, only one column can be used to display groups when doing tree data');
        doingMultiAutoColumn = false;
      }
      if (doingMultiAutoColumn) {
        rowGroupColumns.forEach(function(rowGroupCol, index) {
          groupAutoColumns.push(_this.createOneAutoGroupColumn(rowGroupCol, index));
        });
      } else {
        groupAutoColumns.push(this.createOneAutoGroupColumn());
      }
      return groupAutoColumns;
    };
    AutoGroupColService2.prototype.updateAutoGroupColumns = function(autoGroupColumns) {
      var _this = this;
      autoGroupColumns.forEach(function(column, index) {
        return _this.updateOneAutoGroupColumn(column, index);
      });
    };
    AutoGroupColService2.prototype.createOneAutoGroupColumn = function(rowGroupCol, index) {
      var colId;
      if (rowGroupCol) {
        colId = "".concat(GROUP_AUTO_COLUMN_ID, "-").concat(rowGroupCol.getId());
      } else {
        colId = GROUP_AUTO_COLUMN_ID;
      }
      var colDef = this.createAutoGroupColDef(colId, rowGroupCol, index);
      colDef.colId = colId;
      var newCol = new Column(colDef, null, colId, true);
      this.context.createBean(newCol);
      return newCol;
    };
    AutoGroupColService2.prototype.updateOneAutoGroupColumn = function(colToUpdate, index) {
      var oldColDef = colToUpdate.getColDef();
      var underlyingColId = typeof oldColDef.showRowGroup == "string" ? oldColDef.showRowGroup : void 0;
      var underlyingColumn = underlyingColId != null ? this.columnModel.getPrimaryColumn(underlyingColId) : void 0;
      var colDef = this.createAutoGroupColDef(colToUpdate.getId(), underlyingColumn !== null && underlyingColumn !== void 0 ? underlyingColumn : void 0, index);
      colToUpdate.setColDef(colDef, null);
      this.columnFactory.applyColumnState(colToUpdate, colDef);
    };
    AutoGroupColService2.prototype.createAutoGroupColDef = function(colId, underlyingColumn, index) {
      var res = this.createBaseColDef(underlyingColumn);
      var autoGroupColumnDef = this.gridOptionsService.get("autoGroupColumnDef");
      mergeDeep(res, autoGroupColumnDef);
      res = this.columnFactory.addColumnDefaultAndTypes(res, colId);
      if (!this.gridOptionsService.get("treeData")) {
        var noFieldOrValueGetter = missing(res.field) && missing(res.valueGetter) && missing(res.filterValueGetter) && res.filter !== "agGroupColumnFilter";
        if (noFieldOrValueGetter) {
          res.filter = false;
        }
      }
      if (index && index > 0) {
        res.headerCheckboxSelection = false;
      }
      var isSortingCoupled = this.gridOptionsService.isColumnsSortingCoupledToGroup();
      var hasOwnData = res.valueGetter || res.field != null;
      if (isSortingCoupled && !hasOwnData) {
        res.sortIndex = void 0;
        res.initialSort = void 0;
      }
      return res;
    };
    AutoGroupColService2.prototype.createBaseColDef = function(rowGroupCol) {
      var userDef = this.gridOptionsService.get("autoGroupColumnDef");
      var localeTextFunc = this.localeService.getLocaleTextFunc();
      var res = {
        headerName: localeTextFunc("group", "Group")
      };
      var userHasProvidedGroupCellRenderer = userDef && (userDef.cellRenderer || userDef.cellRendererSelector);
      if (!userHasProvidedGroupCellRenderer) {
        res.cellRenderer = "agGroupCellRenderer";
      }
      if (rowGroupCol) {
        var colDef = rowGroupCol.getColDef();
        Object.assign(res, {
          // cellRendererParams.groupKey: colDefToCopy.field;
          headerName: this.columnModel.getDisplayNameForColumn(rowGroupCol, "header"),
          headerValueGetter: colDef.headerValueGetter
        });
        if (colDef.cellRenderer) {
          Object.assign(res, {
            cellRendererParams: {
              innerRenderer: colDef.cellRenderer,
              innerRendererParams: colDef.cellRendererParams
            }
          });
        }
        res.showRowGroup = rowGroupCol.getColId();
      } else {
        res.showRowGroup = true;
      }
      return res;
    };
    __decorate$2J([
      Autowired("columnModel")
    ], AutoGroupColService2.prototype, "columnModel", void 0);
    __decorate$2J([
      Autowired("columnFactory")
    ], AutoGroupColService2.prototype, "columnFactory", void 0);
    AutoGroupColService2 = __decorate$2J([
      Bean("autoGroupColService")
    ], AutoGroupColService2);
    return AutoGroupColService2;
  }(BeanStub)
);
var reUnescapedHtml = /[&<>"']/g;
var HTML_ESCAPES = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
function utf8_encode(s) {
  var stringFromCharCode = String.fromCharCode;
  function ucs2decode(string) {
    var output = [];
    if (!string) {
      return [];
    }
    var len = string.length;
    var counter = 0;
    var value;
    var extra;
    while (counter < len) {
      value = string.charCodeAt(counter++);
      if (value >= 55296 && value <= 56319 && counter < len) {
        extra = string.charCodeAt(counter++);
        if ((extra & 64512) == 56320) {
          output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
        } else {
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }
    return output;
  }
  function checkScalarValue(point) {
    if (point >= 55296 && point <= 57343) {
      throw Error("Lone surrogate U+" + point.toString(16).toUpperCase() + " is not a scalar value");
    }
  }
  function createByte(point, shift) {
    return stringFromCharCode(point >> shift & 63 | 128);
  }
  function encodeCodePoint(point) {
    if (point >= 0 && point <= 31 && point !== 10) {
      var convertedCode = point.toString(16).toUpperCase();
      var paddedCode = convertedCode.padStart(4, "0");
      return "_x".concat(paddedCode, "_");
    }
    if ((point & 4294967168) == 0) {
      return stringFromCharCode(point);
    }
    var symbol = "";
    if ((point & 4294965248) == 0) {
      symbol = stringFromCharCode(point >> 6 & 31 | 192);
    } else if ((point & 4294901760) == 0) {
      checkScalarValue(point);
      symbol = stringFromCharCode(point >> 12 & 15 | 224);
      symbol += createByte(point, 6);
    } else if ((point & 4292870144) == 0) {
      symbol = stringFromCharCode(point >> 18 & 7 | 240);
      symbol += createByte(point, 12);
      symbol += createByte(point, 6);
    }
    symbol += stringFromCharCode(point & 63 | 128);
    return symbol;
  }
  var codePoints = ucs2decode(s);
  var length = codePoints.length;
  var index = -1;
  var codePoint;
  var byteString = "";
  while (++index < length) {
    codePoint = codePoints[index];
    byteString += encodeCodePoint(codePoint);
  }
  return byteString;
}
function capitalise(str) {
  return str[0].toUpperCase() + str.substring(1).toLowerCase();
}
function escapeString(toEscape, skipEscapingHtmlChars) {
  if (toEscape == null) {
    return null;
  }
  var stringResult = toEscape.toString().toString();
  if (skipEscapingHtmlChars) {
    return stringResult;
  }
  return stringResult.replace(reUnescapedHtml, function(chr) {
    return HTML_ESCAPES[chr];
  });
}
function camelCaseToHumanText(camelCase) {
  if (!camelCase || camelCase == null) {
    return null;
  }
  var rex = /([a-z])([A-Z])/g;
  var rexCaps = /([A-Z]+)([A-Z])([a-z])/g;
  var words = camelCase.replace(rex, "$1 $2").replace(rexCaps, "$1 $2$3").replace(/\./g, " ").split(" ");
  return words.map(function(word) {
    return word.substring(0, 1).toUpperCase() + (word.length > 1 ? word.substring(1, word.length) : "");
  }).join(" ");
}
function camelCaseToHyphenated(camelCase) {
  return camelCase.replace(/[A-Z]/g, function(s) {
    return "-".concat(s.toLocaleLowerCase());
  });
}
var StringUtils = Object.freeze({
  __proto__: null,
  utf8_encode,
  capitalise,
  escapeString,
  camelCaseToHumanText,
  camelCaseToHyphenated
});
function convertToMap(arr) {
  var map = /* @__PURE__ */ new Map();
  arr.forEach(function(pair) {
    return map.set(pair[0], pair[1]);
  });
  return map;
}
function mapById(arr, callback) {
  var map = /* @__PURE__ */ new Map();
  arr.forEach(function(item) {
    return map.set(callback(item), item);
  });
  return map;
}
function keys(map) {
  var arr = [];
  map.forEach(function(_2, key) {
    return arr.push(key);
  });
  return arr;
}
var MapUtils = Object.freeze({
  __proto__: null,
  convertToMap,
  mapById,
  keys
});
var __extends$3b = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2I = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param$6 = function(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
};
var __rest = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var __read$z = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$r = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var __values$a = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var ColumnModel = (
  /** @class */
  function(_super) {
    __extends$3b(ColumnModel2, _super);
    function ColumnModel2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.primaryHeaderRowCount = 0;
      _this.secondaryHeaderRowCount = 0;
      _this.gridHeaderRowCount = 0;
      _this.displayedColumnsLeft = [];
      _this.displayedColumnsRight = [];
      _this.displayedColumnsCenter = [];
      _this.displayedColumns = [];
      _this.displayedColumnsAndGroupsMap = {};
      _this.viewportColumns = [];
      _this.viewportColumnsHash = "";
      _this.headerViewportColumns = [];
      _this.viewportColumnsCenter = [];
      _this.headerViewportColumnsCenter = [];
      _this.viewportRowLeft = {};
      _this.viewportRowRight = {};
      _this.viewportRowCenter = {};
      _this.autoHeightActiveAtLeastOnce = false;
      _this.rowGroupColumns = [];
      _this.valueColumns = [];
      _this.pivotColumns = [];
      _this.ready = false;
      _this.autoGroupsNeedBuilding = false;
      _this.forceRecreateAutoGroups = false;
      _this.pivotMode = false;
      _this.bodyWidth = 0;
      _this.leftWidth = 0;
      _this.rightWidth = 0;
      _this.bodyWidthDirty = true;
      _this.shouldQueueResizeOperations = false;
      _this.resizeOperationQueue = [];
      return _this;
    }
    ColumnModel2.prototype.init = function() {
      var _this = this;
      this.suppressColumnVirtualisation = this.gridOptionsService.get("suppressColumnVirtualisation");
      var pivotMode = this.gridOptionsService.get("pivotMode");
      if (this.isPivotSettingAllowed(pivotMode)) {
        this.pivotMode = pivotMode;
      }
      this.addManagedPropertyListeners(["groupDisplayType", "treeData", "treeDataDisplayType", "groupHideOpenParents"], function() {
        return _this.buildAutoGroupColumns();
      });
      this.addManagedPropertyListener("autoGroupColumnDef", function() {
        return _this.onAutoGroupColumnDefChanged();
      });
      this.addManagedPropertyListeners(["defaultColDef", "columnTypes", "suppressFieldDotNotation"], function(params) {
        return _this.onSharedColDefChanged(params.source);
      });
      this.addManagedPropertyListener("pivotMode", function(event) {
        return _this.setPivotMode(_this.gridOptionsService.get("pivotMode"), event.source);
      });
      this.addManagedListener(this.eventService, Events.EVENT_FIRST_DATA_RENDERED, function() {
        return _this.onFirstDataRendered();
      });
    };
    ColumnModel2.prototype.buildAutoGroupColumns = function() {
      if (!this.columnDefs) {
        return;
      }
      this.autoGroupsNeedBuilding = true;
      this.forceRecreateAutoGroups = true;
      this.updateGridColumns();
      this.updateDisplayedColumns("gridOptionsChanged");
    };
    ColumnModel2.prototype.onAutoGroupColumnDefChanged = function() {
      if (this.groupAutoColumns) {
        this.autoGroupColService.updateAutoGroupColumns(this.groupAutoColumns);
      }
    };
    ColumnModel2.prototype.onSharedColDefChanged = function(source) {
      if (source === void 0) {
        source = "api";
      }
      if (!this.gridColumns) {
        return;
      }
      if (this.groupAutoColumns) {
        this.autoGroupColService.updateAutoGroupColumns(this.groupAutoColumns);
      }
      this.createColumnsFromColumnDefs(true, source);
    };
    ColumnModel2.prototype.setColumnDefs = function(columnDefs, source) {
      if (source === void 0) {
        source = "api";
      }
      var colsPreviouslyExisted = !!this.columnDefs;
      this.columnDefs = columnDefs;
      this.createColumnsFromColumnDefs(colsPreviouslyExisted, source);
    };
    ColumnModel2.prototype.recreateColumnDefs = function(source) {
      if (source === void 0) {
        source = "api";
      }
      this.onSharedColDefChanged(source);
    };
    ColumnModel2.prototype.destroyOldColumns = function(oldTree, newTree) {
      var oldObjectsById = {};
      if (!oldTree) {
        return;
      }
      this.columnUtils.depthFirstOriginalTreeSearch(null, oldTree, function(child) {
        oldObjectsById[child.getInstanceId()] = child;
      });
      if (newTree) {
        this.columnUtils.depthFirstOriginalTreeSearch(null, newTree, function(child) {
          oldObjectsById[child.getInstanceId()] = null;
        });
      }
      var colsToDestroy = Object.values(oldObjectsById).filter(function(item) {
        return item != null;
      });
      this.destroyBeans(colsToDestroy);
    };
    ColumnModel2.prototype.destroyColumns = function() {
      this.destroyOldColumns(this.primaryColumnTree);
      this.destroyOldColumns(this.secondaryBalancedTree);
      this.destroyOldColumns(this.groupAutoColsBalancedTree);
    };
    ColumnModel2.prototype.createColumnsFromColumnDefs = function(colsPreviouslyExisted, source) {
      var _this = this;
      if (source === void 0) {
        source = "api";
      }
      var dispatchEventsFunc = colsPreviouslyExisted ? this.compareColumnStatesAndDispatchEvents(source) : void 0;
      this.valueCache.expire();
      this.autoGroupsNeedBuilding = true;
      var oldPrimaryColumns = this.primaryColumns;
      var oldPrimaryTree = this.primaryColumnTree;
      var balancedTreeResult = this.columnFactory.createColumnTree(this.columnDefs, true, oldPrimaryTree);
      this.destroyOldColumns(this.primaryColumnTree, balancedTreeResult.columnTree);
      this.primaryColumnTree = balancedTreeResult.columnTree;
      this.primaryHeaderRowCount = balancedTreeResult.treeDept + 1;
      this.primaryColumns = this.getColumnsFromTree(this.primaryColumnTree);
      this.primaryColumnsMap = {};
      this.primaryColumns.forEach(function(col) {
        return _this.primaryColumnsMap[col.getId()] = col;
      });
      this.extractRowGroupColumns(source, oldPrimaryColumns);
      this.extractPivotColumns(source, oldPrimaryColumns);
      this.extractValueColumns(source, oldPrimaryColumns);
      this.ready = true;
      var gridColsNotProcessed = this.gridColsArePrimary === void 0;
      var processGridCols = this.gridColsArePrimary || gridColsNotProcessed || this.autoGroupsNeedBuilding;
      if (processGridCols) {
        this.updateGridColumns();
        if (colsPreviouslyExisted && this.gridColsArePrimary && !this.gridOptionsService.get("maintainColumnOrder")) {
          this.orderGridColumnsLikePrimary();
        }
        this.updateDisplayedColumns(source);
        this.checkViewportColumns();
      }
      this.dispatchEverythingChanged(source);
      if (dispatchEventsFunc) {
        dispatchEventsFunc();
      }
      this.dispatchNewColumnsLoaded(source);
    };
    ColumnModel2.prototype.dispatchNewColumnsLoaded = function(source) {
      var newColumnsLoadedEvent = {
        type: Events.EVENT_NEW_COLUMNS_LOADED,
        source
      };
      this.eventService.dispatchEvent(newColumnsLoadedEvent);
      if (source === "gridInitializing") {
        this.onColumnsReady();
      }
    };
    ColumnModel2.prototype.dispatchEverythingChanged = function(source) {
      if (source === void 0) {
        source = "api";
      }
      var eventEverythingChanged = {
        type: Events.EVENT_COLUMN_EVERYTHING_CHANGED,
        source
      };
      this.eventService.dispatchEvent(eventEverythingChanged);
    };
    ColumnModel2.prototype.orderGridColumnsLikePrimary = function() {
      var _this = this;
      var primaryColumns = this.primaryColumns;
      if (!primaryColumns) {
        return;
      }
      var primaryColsOrdered = primaryColumns.filter(function(col) {
        return _this.gridColumns.indexOf(col) >= 0;
      });
      var otherCols = this.gridColumns.filter(function(col) {
        return primaryColsOrdered.indexOf(col) < 0;
      });
      this.gridColumns = __spreadArray$r(__spreadArray$r([], __read$z(otherCols), false), __read$z(primaryColsOrdered), false);
      this.gridColumns = this.placeLockedColumns(this.gridColumns);
    };
    ColumnModel2.prototype.getAllDisplayedAutoHeightCols = function() {
      return this.displayedAutoHeightCols;
    };
    ColumnModel2.prototype.setViewport = function() {
      if (this.gridOptionsService.get("enableRtl")) {
        this.viewportLeft = this.bodyWidth - this.scrollPosition - this.scrollWidth;
        this.viewportRight = this.bodyWidth - this.scrollPosition;
      } else {
        this.viewportLeft = this.scrollPosition;
        this.viewportRight = this.scrollWidth + this.scrollPosition;
      }
    };
    ColumnModel2.prototype.getDisplayedColumnsStartingAt = function(column) {
      var currentColumn = column;
      var columns = [];
      while (currentColumn != null) {
        columns.push(currentColumn);
        currentColumn = this.getDisplayedColAfter(currentColumn);
      }
      return columns;
    };
    ColumnModel2.prototype.checkViewportColumns = function(afterScroll) {
      if (afterScroll === void 0) {
        afterScroll = false;
      }
      if (this.displayedColumnsCenter == null) {
        return;
      }
      var viewportColumnsChanged = this.extractViewport();
      if (!viewportColumnsChanged) {
        return;
      }
      var event = {
        type: Events.EVENT_VIRTUAL_COLUMNS_CHANGED,
        afterScroll
      };
      this.eventService.dispatchEvent(event);
    };
    ColumnModel2.prototype.setViewportPosition = function(scrollWidth, scrollPosition, afterScroll) {
      if (afterScroll === void 0) {
        afterScroll = false;
      }
      if (scrollWidth !== this.scrollWidth || scrollPosition !== this.scrollPosition || this.bodyWidthDirty) {
        this.scrollWidth = scrollWidth;
        this.scrollPosition = scrollPosition;
        this.bodyWidthDirty = true;
        this.setViewport();
        if (this.ready) {
          this.checkViewportColumns(afterScroll);
        }
      }
    };
    ColumnModel2.prototype.isPivotMode = function() {
      return this.pivotMode;
    };
    ColumnModel2.prototype.isPivotSettingAllowed = function(pivot) {
      if (pivot && this.gridOptionsService.get("treeData")) {
        console.warn("AG Grid: Pivot mode not available in conjunction Tree Data i.e. 'gridOptions.treeData: true'");
        return false;
      }
      return true;
    };
    ColumnModel2.prototype.setPivotMode = function(pivotMode, source) {
      if (source === void 0) {
        source = "api";
      }
      if (pivotMode === this.pivotMode || !this.isPivotSettingAllowed(this.pivotMode)) {
        return;
      }
      this.pivotMode = pivotMode;
      if (!this.gridColumns) {
        return;
      }
      this.autoGroupsNeedBuilding = true;
      this.updateGridColumns();
      this.updateDisplayedColumns(source);
      var event = {
        type: Events.EVENT_COLUMN_PIVOT_MODE_CHANGED
      };
      this.eventService.dispatchEvent(event);
    };
    ColumnModel2.prototype.getSecondaryPivotColumn = function(pivotKeys, valueColKey) {
      if (missing(this.secondaryColumns)) {
        return null;
      }
      var valueColumnToFind = this.getPrimaryColumn(valueColKey);
      var foundColumn = null;
      this.secondaryColumns.forEach(function(column) {
        var thisPivotKeys = column.getColDef().pivotKeys;
        var pivotValueColumn = column.getColDef().pivotValueColumn;
        var pivotKeyMatches = areEqual(thisPivotKeys, pivotKeys);
        var pivotValueMatches = pivotValueColumn === valueColumnToFind;
        if (pivotKeyMatches && pivotValueMatches) {
          foundColumn = column;
        }
      });
      return foundColumn;
    };
    ColumnModel2.prototype.setBeans = function(loggerFactory) {
      this.logger = loggerFactory.create("columnModel");
    };
    ColumnModel2.prototype.setFirstRightAndLastLeftPinned = function(source) {
      var lastLeft;
      var firstRight;
      if (this.gridOptionsService.get("enableRtl")) {
        lastLeft = this.displayedColumnsLeft ? this.displayedColumnsLeft[0] : null;
        firstRight = this.displayedColumnsRight ? last(this.displayedColumnsRight) : null;
      } else {
        lastLeft = this.displayedColumnsLeft ? last(this.displayedColumnsLeft) : null;
        firstRight = this.displayedColumnsRight ? this.displayedColumnsRight[0] : null;
      }
      this.gridColumns.forEach(function(column) {
        column.setLastLeftPinned(column === lastLeft, source);
        column.setFirstRightPinned(column === firstRight, source);
      });
    };
    ColumnModel2.prototype.autoSizeColumns = function(params) {
      var _this = this;
      if (this.shouldQueueResizeOperations) {
        this.resizeOperationQueue.push(function() {
          return _this.autoSizeColumns(params);
        });
        return;
      }
      var columns = params.columns, skipHeader = params.skipHeader, skipHeaderGroups = params.skipHeaderGroups, stopAtGroup = params.stopAtGroup, _a = params.source, source = _a === void 0 ? "api" : _a;
      this.animationFrameService.flushAllFrames();
      var columnsAutosized = [];
      var changesThisTimeAround = -1;
      var shouldSkipHeader = skipHeader != null ? skipHeader : this.gridOptionsService.get("skipHeaderOnAutoSize");
      var shouldSkipHeaderGroups = skipHeaderGroups != null ? skipHeaderGroups : shouldSkipHeader;
      while (changesThisTimeAround !== 0) {
        changesThisTimeAround = 0;
        this.actionOnGridColumns(columns, function(column) {
          if (columnsAutosized.indexOf(column) >= 0) {
            return false;
          }
          var preferredWidth = _this.autoWidthCalculator.getPreferredWidthForColumn(column, shouldSkipHeader);
          if (preferredWidth > 0) {
            var newWidth = _this.normaliseColumnWidth(column, preferredWidth);
            column.setActualWidth(newWidth, source);
            columnsAutosized.push(column);
            changesThisTimeAround++;
          }
          return true;
        }, source);
      }
      if (!shouldSkipHeaderGroups) {
        this.autoSizeColumnGroupsByColumns(columns, source, stopAtGroup);
      }
      this.dispatchColumnResizedEvent(columnsAutosized, true, "autosizeColumns");
    };
    ColumnModel2.prototype.dispatchColumnResizedEvent = function(columns, finished, source, flexColumns) {
      if (flexColumns === void 0) {
        flexColumns = null;
      }
      if (columns && columns.length) {
        var event_1 = {
          type: Events.EVENT_COLUMN_RESIZED,
          columns,
          column: columns.length === 1 ? columns[0] : null,
          flexColumns,
          finished,
          source
        };
        this.eventService.dispatchEvent(event_1);
      }
    };
    ColumnModel2.prototype.dispatchColumnChangedEvent = function(type, columns, source) {
      var event = {
        type,
        columns,
        column: columns && columns.length == 1 ? columns[0] : null,
        source
      };
      this.eventService.dispatchEvent(event);
    };
    ColumnModel2.prototype.dispatchColumnMovedEvent = function(params) {
      var movedColumns = params.movedColumns, source = params.source, toIndex = params.toIndex, finished = params.finished;
      var event = {
        type: Events.EVENT_COLUMN_MOVED,
        columns: movedColumns,
        column: movedColumns && movedColumns.length === 1 ? movedColumns[0] : null,
        toIndex,
        finished,
        source
      };
      this.eventService.dispatchEvent(event);
    };
    ColumnModel2.prototype.dispatchColumnPinnedEvent = function(changedColumns, source) {
      if (!changedColumns.length) {
        return;
      }
      var column = changedColumns.length === 1 ? changedColumns[0] : null;
      var pinned = this.getCommonValue(changedColumns, function(col) {
        return col.getPinned();
      });
      var event = {
        type: Events.EVENT_COLUMN_PINNED,
        // mistake in typing, 'undefined' should be allowed, as 'null' means 'not pinned'
        pinned: pinned != null ? pinned : null,
        columns: changedColumns,
        column,
        source
      };
      this.eventService.dispatchEvent(event);
    };
    ColumnModel2.prototype.dispatchColumnVisibleEvent = function(changedColumns, source) {
      if (!changedColumns.length) {
        return;
      }
      var column = changedColumns.length === 1 ? changedColumns[0] : null;
      var visible = this.getCommonValue(changedColumns, function(col) {
        return col.isVisible();
      });
      var event = {
        type: Events.EVENT_COLUMN_VISIBLE,
        visible,
        columns: changedColumns,
        column,
        source
      };
      this.eventService.dispatchEvent(event);
    };
    ColumnModel2.prototype.autoSizeColumn = function(key, skipHeader, source) {
      if (source === void 0) {
        source = "api";
      }
      if (key) {
        this.autoSizeColumns({ columns: [key], skipHeader, skipHeaderGroups: true, source });
      }
    };
    ColumnModel2.prototype.autoSizeColumnGroupsByColumns = function(keys2, source, stopAtGroup) {
      var e_1, _a, e_2, _b;
      var columnGroups = /* @__PURE__ */ new Set();
      var columns = this.getGridColumns(keys2);
      columns.forEach(function(col) {
        var parent = col.getParent();
        while (parent && parent != stopAtGroup) {
          if (!parent.isPadding()) {
            columnGroups.add(parent);
          }
          parent = parent.getParent();
        }
      });
      var headerGroupCtrl;
      var resizedColumns = [];
      try {
        for (var columnGroups_1 = __values$a(columnGroups), columnGroups_1_1 = columnGroups_1.next(); !columnGroups_1_1.done; columnGroups_1_1 = columnGroups_1.next()) {
          var columnGroup = columnGroups_1_1.value;
          try {
            for (var _c = (e_2 = void 0, __values$a(this.ctrlsService.getHeaderRowContainerCtrls())), _d = _c.next(); !_d.done; _d = _c.next()) {
              var headerContainerCtrl = _d.value;
              headerGroupCtrl = headerContainerCtrl.getHeaderCtrlForColumn(columnGroup);
              if (headerGroupCtrl) {
                break;
              }
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (_d && !_d.done && (_b = _c.return))
                _b.call(_c);
            } finally {
              if (e_2)
                throw e_2.error;
            }
          }
          if (headerGroupCtrl) {
            headerGroupCtrl.resizeLeafColumnsToFit(source);
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (columnGroups_1_1 && !columnGroups_1_1.done && (_a = columnGroups_1.return))
            _a.call(columnGroups_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return resizedColumns;
    };
    ColumnModel2.prototype.autoSizeAllColumns = function(skipHeader, source) {
      var _this = this;
      if (source === void 0) {
        source = "api";
      }
      if (this.shouldQueueResizeOperations) {
        this.resizeOperationQueue.push(function() {
          return _this.autoSizeAllColumns(skipHeader, source);
        });
        return;
      }
      var allDisplayedColumns = this.getAllDisplayedColumns();
      this.autoSizeColumns({ columns: allDisplayedColumns, skipHeader, source });
    };
    ColumnModel2.prototype.getColumnsFromTree = function(rootColumns) {
      var result = [];
      var recursiveFindColumns = function(childColumns) {
        for (var i = 0; i < childColumns.length; i++) {
          var child = childColumns[i];
          if (child instanceof Column) {
            result.push(child);
          } else if (child instanceof ProvidedColumnGroup) {
            recursiveFindColumns(child.getChildren());
          }
        }
      };
      recursiveFindColumns(rootColumns);
      return result;
    };
    ColumnModel2.prototype.getAllDisplayedTrees = function() {
      if (this.displayedTreeLeft && this.displayedTreeRight && this.displayedTreeCentre) {
        return this.displayedTreeLeft.concat(this.displayedTreeCentre).concat(this.displayedTreeRight);
      }
      return null;
    };
    ColumnModel2.prototype.getPrimaryColumnTree = function() {
      return this.primaryColumnTree;
    };
    ColumnModel2.prototype.getHeaderRowCount = function() {
      return this.gridHeaderRowCount;
    };
    ColumnModel2.prototype.getDisplayedTreeLeft = function() {
      return this.displayedTreeLeft;
    };
    ColumnModel2.prototype.getDisplayedTreeRight = function() {
      return this.displayedTreeRight;
    };
    ColumnModel2.prototype.getDisplayedTreeCentre = function() {
      return this.displayedTreeCentre;
    };
    ColumnModel2.prototype.isColumnDisplayed = function(column) {
      return this.getAllDisplayedColumns().indexOf(column) >= 0;
    };
    ColumnModel2.prototype.getAllDisplayedColumns = function() {
      return this.displayedColumns;
    };
    ColumnModel2.prototype.getViewportColumns = function() {
      return this.viewportColumns;
    };
    ColumnModel2.prototype.getDisplayedLeftColumnsForRow = function(rowNode) {
      if (!this.colSpanActive) {
        return this.displayedColumnsLeft;
      }
      return this.getDisplayedColumnsForRow(rowNode, this.displayedColumnsLeft);
    };
    ColumnModel2.prototype.getDisplayedRightColumnsForRow = function(rowNode) {
      if (!this.colSpanActive) {
        return this.displayedColumnsRight;
      }
      return this.getDisplayedColumnsForRow(rowNode, this.displayedColumnsRight);
    };
    ColumnModel2.prototype.isColSpanActive = function() {
      return this.colSpanActive;
    };
    ColumnModel2.prototype.getDisplayedColumnsForRow = function(rowNode, displayedColumns, filterCallback, emptySpaceBeforeColumn) {
      var result = [];
      var lastConsideredCol = null;
      var _loop_1 = function(i2) {
        var col = displayedColumns[i2];
        var maxAllowedColSpan = displayedColumns.length - i2;
        var colSpan = Math.min(col.getColSpan(rowNode), maxAllowedColSpan);
        var columnsToCheckFilter = [col];
        if (colSpan > 1) {
          var colsToRemove = colSpan - 1;
          for (var j = 1; j <= colsToRemove; j++) {
            columnsToCheckFilter.push(displayedColumns[i2 + j]);
          }
          i2 += colsToRemove;
        }
        var filterPasses;
        if (filterCallback) {
          filterPasses = false;
          columnsToCheckFilter.forEach(function(colForFilter) {
            if (filterCallback(colForFilter)) {
              filterPasses = true;
            }
          });
        } else {
          filterPasses = true;
        }
        if (filterPasses) {
          if (result.length === 0 && lastConsideredCol) {
            var gapBeforeColumn = emptySpaceBeforeColumn ? emptySpaceBeforeColumn(col) : false;
            if (gapBeforeColumn) {
              result.push(lastConsideredCol);
            }
          }
          result.push(col);
        }
        lastConsideredCol = col;
        out_i_1 = i2;
      };
      var out_i_1;
      for (var i = 0; i < displayedColumns.length; i++) {
        _loop_1(i);
        i = out_i_1;
      }
      return result;
    };
    ColumnModel2.prototype.getViewportCenterColumnsForRow = function(rowNode) {
      var _this = this;
      if (!this.colSpanActive) {
        return this.viewportColumnsCenter;
      }
      var emptySpaceBeforeColumn = function(col) {
        var left = col.getLeft();
        return exists(left) && left > _this.viewportLeft;
      };
      var filterCallback = this.suppressColumnVirtualisation ? null : this.isColumnInRowViewport.bind(this);
      return this.getDisplayedColumnsForRow(rowNode, this.displayedColumnsCenter, filterCallback, emptySpaceBeforeColumn);
    };
    ColumnModel2.prototype.isColumnAtEdge = function(col, edge) {
      var allColumns = this.getAllDisplayedColumns();
      if (!allColumns.length) {
        return false;
      }
      var isFirst = edge === "first";
      var columnToCompare;
      if (col instanceof ColumnGroup) {
        var leafColumns = col.getDisplayedLeafColumns();
        if (!leafColumns.length) {
          return false;
        }
        columnToCompare = isFirst ? leafColumns[0] : last(leafColumns);
      } else {
        columnToCompare = col;
      }
      return (isFirst ? allColumns[0] : last(allColumns)) === columnToCompare;
    };
    ColumnModel2.prototype.getAriaColumnIndex = function(col) {
      var targetColumn;
      if (col instanceof ColumnGroup) {
        targetColumn = col.getLeafColumns()[0];
      } else {
        targetColumn = col;
      }
      return this.ariaOrderColumns.indexOf(targetColumn) + 1;
    };
    ColumnModel2.prototype.isColumnInHeaderViewport = function(col) {
      if (col.isAutoHeaderHeight()) {
        return true;
      }
      return this.isColumnInRowViewport(col);
    };
    ColumnModel2.prototype.isColumnInRowViewport = function(col) {
      if (col.isAutoHeight() || this.viewportRight === 0) {
        return true;
      }
      var columnLeft = col.getLeft() || 0;
      var columnRight = columnLeft + col.getActualWidth();
      var leftBounds = this.viewportLeft - 200;
      var rightBounds = this.viewportRight + 200;
      var columnToMuchLeft = columnLeft < leftBounds && columnRight < leftBounds;
      var columnToMuchRight = columnLeft > rightBounds && columnRight > rightBounds;
      return !columnToMuchLeft && !columnToMuchRight;
    };
    ColumnModel2.prototype.getDisplayedColumnsLeftWidth = function() {
      return this.getWidthOfColsInList(this.displayedColumnsLeft);
    };
    ColumnModel2.prototype.getDisplayedColumnsRightWidth = function() {
      return this.getWidthOfColsInList(this.displayedColumnsRight);
    };
    ColumnModel2.prototype.updatePrimaryColumnList = function(keys2, masterList, actionIsAdd, columnCallback, eventType, source) {
      var _this = this;
      if (source === void 0) {
        source = "api";
      }
      if (!keys2 || missingOrEmpty(keys2)) {
        return;
      }
      var atLeastOne = false;
      keys2.forEach(function(key) {
        var columnToAdd = _this.getPrimaryColumn(key);
        if (!columnToAdd) {
          return;
        }
        if (actionIsAdd) {
          if (masterList.indexOf(columnToAdd) >= 0) {
            return;
          }
          masterList.push(columnToAdd);
        } else {
          if (masterList.indexOf(columnToAdd) < 0) {
            return;
          }
          removeFromArray(masterList, columnToAdd);
        }
        columnCallback(columnToAdd);
        atLeastOne = true;
      });
      if (!atLeastOne) {
        return;
      }
      if (this.autoGroupsNeedBuilding) {
        this.updateGridColumns();
      }
      this.updateDisplayedColumns(source);
      var event = {
        type: eventType,
        columns: masterList,
        column: masterList.length === 1 ? masterList[0] : null,
        source
      };
      this.eventService.dispatchEvent(event);
    };
    ColumnModel2.prototype.setRowGroupColumns = function(colKeys, source) {
      if (source === void 0) {
        source = "api";
      }
      this.autoGroupsNeedBuilding = true;
      this.setPrimaryColumnList(colKeys, this.rowGroupColumns, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, true, this.setRowGroupActive.bind(this), source);
    };
    ColumnModel2.prototype.setRowGroupActive = function(active, column, source) {
      if (active === column.isRowGroupActive()) {
        return;
      }
      column.setRowGroupActive(active, source);
      if (active && !this.gridOptionsService.get("suppressRowGroupHidesColumns")) {
        this.setColumnVisible(column, false, source);
      }
      if (!active && !this.gridOptionsService.get("suppressMakeColumnVisibleAfterUnGroup")) {
        this.setColumnVisible(column, true, source);
      }
    };
    ColumnModel2.prototype.addRowGroupColumn = function(key, source) {
      if (source === void 0) {
        source = "api";
      }
      if (key) {
        this.addRowGroupColumns([key], source);
      }
    };
    ColumnModel2.prototype.addRowGroupColumns = function(keys2, source) {
      if (source === void 0) {
        source = "api";
      }
      this.autoGroupsNeedBuilding = true;
      this.updatePrimaryColumnList(keys2, this.rowGroupColumns, true, this.setRowGroupActive.bind(this, true), Events.EVENT_COLUMN_ROW_GROUP_CHANGED, source);
    };
    ColumnModel2.prototype.removeRowGroupColumns = function(keys2, source) {
      if (source === void 0) {
        source = "api";
      }
      this.autoGroupsNeedBuilding = true;
      this.updatePrimaryColumnList(keys2, this.rowGroupColumns, false, this.setRowGroupActive.bind(this, false), Events.EVENT_COLUMN_ROW_GROUP_CHANGED, source);
    };
    ColumnModel2.prototype.removeRowGroupColumn = function(key, source) {
      if (source === void 0) {
        source = "api";
      }
      if (key) {
        this.removeRowGroupColumns([key], source);
      }
    };
    ColumnModel2.prototype.addPivotColumns = function(keys2, source) {
      if (source === void 0) {
        source = "api";
      }
      this.updatePrimaryColumnList(keys2, this.pivotColumns, true, function(column) {
        return column.setPivotActive(true, source);
      }, Events.EVENT_COLUMN_PIVOT_CHANGED, source);
    };
    ColumnModel2.prototype.setPivotColumns = function(colKeys, source) {
      if (source === void 0) {
        source = "api";
      }
      this.setPrimaryColumnList(colKeys, this.pivotColumns, Events.EVENT_COLUMN_PIVOT_CHANGED, true, function(added, column) {
        column.setPivotActive(added, source);
      }, source);
    };
    ColumnModel2.prototype.addPivotColumn = function(key, source) {
      if (source === void 0) {
        source = "api";
      }
      this.addPivotColumns([key], source);
    };
    ColumnModel2.prototype.removePivotColumns = function(keys2, source) {
      if (source === void 0) {
        source = "api";
      }
      this.updatePrimaryColumnList(keys2, this.pivotColumns, false, function(column) {
        return column.setPivotActive(false, source);
      }, Events.EVENT_COLUMN_PIVOT_CHANGED, source);
    };
    ColumnModel2.prototype.removePivotColumn = function(key, source) {
      if (source === void 0) {
        source = "api";
      }
      this.removePivotColumns([key], source);
    };
    ColumnModel2.prototype.setPrimaryColumnList = function(colKeys, masterList, eventName, detectOrderChange, columnCallback, source) {
      var _this = this;
      if (!this.gridColumns) {
        return;
      }
      var changes = /* @__PURE__ */ new Map();
      masterList.forEach(function(col, idx) {
        return changes.set(col, idx);
      });
      masterList.length = 0;
      if (exists(colKeys)) {
        colKeys.forEach(function(key) {
          var column = _this.getPrimaryColumn(key);
          if (column) {
            masterList.push(column);
          }
        });
      }
      masterList.forEach(function(col, idx) {
        var oldIndex = changes.get(col);
        if (oldIndex === void 0) {
          changes.set(col, 0);
          return;
        }
        if (detectOrderChange && oldIndex !== idx) {
          return;
        }
        changes.delete(col);
      });
      (this.primaryColumns || []).forEach(function(column) {
        var added = masterList.indexOf(column) >= 0;
        columnCallback(added, column);
      });
      if (this.autoGroupsNeedBuilding) {
        this.updateGridColumns();
      }
      this.updateDisplayedColumns(source);
      this.dispatchColumnChangedEvent(eventName, __spreadArray$r([], __read$z(changes.keys()), false), source);
    };
    ColumnModel2.prototype.setValueColumns = function(colKeys, source) {
      if (source === void 0) {
        source = "api";
      }
      this.setPrimaryColumnList(colKeys, this.valueColumns, Events.EVENT_COLUMN_VALUE_CHANGED, false, this.setValueActive.bind(this), source);
    };
    ColumnModel2.prototype.setValueActive = function(active, column, source) {
      if (active === column.isValueActive()) {
        return;
      }
      column.setValueActive(active, source);
      if (active && !column.getAggFunc()) {
        var initialAggFunc = this.aggFuncService.getDefaultAggFunc(column);
        column.setAggFunc(initialAggFunc);
      }
    };
    ColumnModel2.prototype.addValueColumns = function(keys2, source) {
      if (source === void 0) {
        source = "api";
      }
      this.updatePrimaryColumnList(keys2, this.valueColumns, true, this.setValueActive.bind(this, true), Events.EVENT_COLUMN_VALUE_CHANGED, source);
    };
    ColumnModel2.prototype.addValueColumn = function(colKey, source) {
      if (source === void 0) {
        source = "api";
      }
      if (colKey) {
        this.addValueColumns([colKey], source);
      }
    };
    ColumnModel2.prototype.removeValueColumn = function(colKey, source) {
      if (source === void 0) {
        source = "api";
      }
      this.removeValueColumns([colKey], source);
    };
    ColumnModel2.prototype.removeValueColumns = function(keys2, source) {
      if (source === void 0) {
        source = "api";
      }
      this.updatePrimaryColumnList(keys2, this.valueColumns, false, this.setValueActive.bind(this, false), Events.EVENT_COLUMN_VALUE_CHANGED, source);
    };
    ColumnModel2.prototype.normaliseColumnWidth = function(column, newWidth) {
      var minWidth = column.getMinWidth();
      if (exists(minWidth) && newWidth < minWidth) {
        newWidth = minWidth;
      }
      var maxWidth = column.getMaxWidth();
      if (exists(maxWidth) && column.isGreaterThanMax(newWidth)) {
        newWidth = maxWidth;
      }
      return newWidth;
    };
    ColumnModel2.prototype.getPrimaryOrGridColumn = function(key) {
      var column = this.getPrimaryColumn(key);
      return column || this.getGridColumn(key);
    };
    ColumnModel2.prototype.setColumnWidths = function(columnWidths, shiftKey, finished, source) {
      var _this = this;
      if (source === void 0) {
        source = "api";
      }
      var sets = [];
      columnWidths.forEach(function(columnWidth) {
        var col = _this.getPrimaryOrGridColumn(columnWidth.key);
        if (!col) {
          return;
        }
        sets.push({
          width: columnWidth.newWidth,
          ratios: [1],
          columns: [col]
        });
        var defaultIsShift = _this.gridOptionsService.get("colResizeDefault") === "shift";
        if (defaultIsShift) {
          shiftKey = !shiftKey;
        }
        if (shiftKey) {
          var otherCol = _this.getDisplayedColAfter(col);
          if (!otherCol) {
            return;
          }
          var widthDiff = col.getActualWidth() - columnWidth.newWidth;
          var otherColWidth = otherCol.getActualWidth() + widthDiff;
          sets.push({
            width: otherColWidth,
            ratios: [1],
            columns: [otherCol]
          });
        }
      });
      if (sets.length === 0) {
        return;
      }
      this.resizeColumnSets({
        resizeSets: sets,
        finished,
        source
      });
    };
    ColumnModel2.prototype.checkMinAndMaxWidthsForSet = function(columnResizeSet) {
      var columns = columnResizeSet.columns, width = columnResizeSet.width;
      var minWidthAccumulated = 0;
      var maxWidthAccumulated = 0;
      var maxWidthActive = true;
      columns.forEach(function(col) {
        var minWidth = col.getMinWidth();
        minWidthAccumulated += minWidth || 0;
        var maxWidth = col.getMaxWidth();
        if (exists(maxWidth) && maxWidth > 0) {
          maxWidthAccumulated += maxWidth;
        } else {
          maxWidthActive = false;
        }
      });
      var minWidthPasses = width >= minWidthAccumulated;
      var maxWidthPasses = !maxWidthActive || width <= maxWidthAccumulated;
      return minWidthPasses && maxWidthPasses;
    };
    ColumnModel2.prototype.resizeColumnSets = function(params) {
      var _this = this;
      var resizeSets = params.resizeSets, finished = params.finished, source = params.source;
      var passMinMaxCheck = !resizeSets || resizeSets.every(function(columnResizeSet) {
        return _this.checkMinAndMaxWidthsForSet(columnResizeSet);
      });
      if (!passMinMaxCheck) {
        if (finished) {
          var columns = resizeSets && resizeSets.length > 0 ? resizeSets[0].columns : null;
          this.dispatchColumnResizedEvent(columns, finished, source);
        }
        return;
      }
      var changedCols = [];
      var allResizedCols = [];
      resizeSets.forEach(function(set2) {
        var width = set2.width, columns2 = set2.columns, ratios = set2.ratios;
        var newWidths = {};
        var finishedCols = {};
        columns2.forEach(function(col) {
          return allResizedCols.push(col);
        });
        var finishedColsGrew = true;
        var loopCount = 0;
        var _loop_2 = function() {
          loopCount++;
          if (loopCount > 1e3) {
            console.error("AG Grid: infinite loop in resizeColumnSets");
            return "break";
          }
          finishedColsGrew = false;
          var subsetCols = [];
          var subsetRatioTotal = 0;
          var pixelsToDistribute = width;
          columns2.forEach(function(col, index) {
            var thisColFinished = finishedCols[col.getId()];
            if (thisColFinished) {
              pixelsToDistribute -= newWidths[col.getId()];
            } else {
              subsetCols.push(col);
              var ratioThisCol = ratios[index];
              subsetRatioTotal += ratioThisCol;
            }
          });
          var ratioScale = 1 / subsetRatioTotal;
          subsetCols.forEach(function(col, index) {
            var lastCol = index === subsetCols.length - 1;
            var colNewWidth;
            if (lastCol) {
              colNewWidth = pixelsToDistribute;
            } else {
              colNewWidth = Math.round(ratios[index] * width * ratioScale);
              pixelsToDistribute -= colNewWidth;
            }
            var minWidth = col.getMinWidth();
            var maxWidth = col.getMaxWidth();
            if (exists(minWidth) && colNewWidth < minWidth) {
              colNewWidth = minWidth;
              finishedCols[col.getId()] = true;
              finishedColsGrew = true;
            } else if (exists(maxWidth) && maxWidth > 0 && colNewWidth > maxWidth) {
              colNewWidth = maxWidth;
              finishedCols[col.getId()] = true;
              finishedColsGrew = true;
            }
            newWidths[col.getId()] = colNewWidth;
          });
        };
        while (finishedColsGrew) {
          var state_1 = _loop_2();
          if (state_1 === "break")
            break;
        }
        columns2.forEach(function(col) {
          var newWidth = newWidths[col.getId()];
          var actualWidth = col.getActualWidth();
          if (actualWidth !== newWidth) {
            col.setActualWidth(newWidth, source);
            changedCols.push(col);
          }
        });
      });
      var atLeastOneColChanged = changedCols.length > 0;
      var flexedCols = [];
      if (atLeastOneColChanged) {
        flexedCols = this.refreshFlexedColumns({ resizingCols: allResizedCols, skipSetLeft: true });
        this.setLeftValues(source);
        this.updateBodyWidths();
        this.checkViewportColumns();
      }
      var colsForEvent = allResizedCols.concat(flexedCols);
      if (atLeastOneColChanged || finished) {
        this.dispatchColumnResizedEvent(colsForEvent, finished, source, flexedCols);
      }
    };
    ColumnModel2.prototype.setColumnAggFunc = function(key, aggFunc, source) {
      if (source === void 0) {
        source = "api";
      }
      if (!key) {
        return;
      }
      var column = this.getPrimaryColumn(key);
      if (!column) {
        return;
      }
      column.setAggFunc(aggFunc);
      this.dispatchColumnChangedEvent(Events.EVENT_COLUMN_VALUE_CHANGED, [column], source);
    };
    ColumnModel2.prototype.moveRowGroupColumn = function(fromIndex, toIndex, source) {
      if (source === void 0) {
        source = "api";
      }
      if (this.isRowGroupEmpty()) {
        return;
      }
      var column = this.rowGroupColumns[fromIndex];
      var impactedColumns = this.rowGroupColumns.slice(fromIndex, toIndex);
      this.rowGroupColumns.splice(fromIndex, 1);
      this.rowGroupColumns.splice(toIndex, 0, column);
      var event = {
        type: Events.EVENT_COLUMN_ROW_GROUP_CHANGED,
        columns: impactedColumns,
        column: impactedColumns.length === 1 ? impactedColumns[0] : null,
        source
      };
      this.eventService.dispatchEvent(event);
    };
    ColumnModel2.prototype.moveColumns = function(columnsToMoveKeys, toIndex, source, finished) {
      if (source === void 0) {
        source = "api";
      }
      if (finished === void 0) {
        finished = true;
      }
      if (!this.gridColumns) {
        return;
      }
      this.columnAnimationService.start();
      if (toIndex > this.gridColumns.length - columnsToMoveKeys.length) {
        console.warn("AG Grid: tried to insert columns in invalid location, toIndex = " + toIndex);
        console.warn("AG Grid: remember that you should not count the moving columns when calculating the new index");
        return;
      }
      var movedColumns = this.getGridColumns(columnsToMoveKeys);
      var failedRules = !this.doesMovePassRules(movedColumns, toIndex);
      if (failedRules) {
        return;
      }
      moveInArray(this.gridColumns, movedColumns, toIndex);
      this.updateDisplayedColumns(source);
      this.dispatchColumnMovedEvent({ movedColumns, source, toIndex, finished });
      this.columnAnimationService.finish();
    };
    ColumnModel2.prototype.doesMovePassRules = function(columnsToMove, toIndex) {
      var proposedColumnOrder = this.getProposedColumnOrder(columnsToMove, toIndex);
      return this.doesOrderPassRules(proposedColumnOrder);
    };
    ColumnModel2.prototype.doesOrderPassRules = function(gridOrder) {
      if (!this.doesMovePassMarryChildren(gridOrder)) {
        return false;
      }
      if (!this.doesMovePassLockedPositions(gridOrder)) {
        return false;
      }
      return true;
    };
    ColumnModel2.prototype.getProposedColumnOrder = function(columnsToMove, toIndex) {
      var proposedColumnOrder = this.gridColumns.slice();
      moveInArray(proposedColumnOrder, columnsToMove, toIndex);
      return proposedColumnOrder;
    };
    ColumnModel2.prototype.sortColumnsLikeGridColumns = function(cols) {
      var _this = this;
      if (!cols || cols.length <= 1) {
        return;
      }
      var notAllColsInGridColumns = cols.filter(function(c) {
        return _this.gridColumns.indexOf(c) < 0;
      }).length > 0;
      if (notAllColsInGridColumns) {
        return;
      }
      cols.sort(function(a, b) {
        var indexA = _this.gridColumns.indexOf(a);
        var indexB = _this.gridColumns.indexOf(b);
        return indexA - indexB;
      });
    };
    ColumnModel2.prototype.doesMovePassLockedPositions = function(proposedColumnOrder) {
      var lastPlacement = 0;
      var rulePassed = true;
      var lockPositionToPlacement = function(position) {
        if (!position) {
          return 1;
        }
        if (position === true) {
          return 0;
        }
        return position === "left" ? 0 : 2;
      };
      proposedColumnOrder.forEach(function(col) {
        var placement = lockPositionToPlacement(col.getColDef().lockPosition);
        if (placement < lastPlacement) {
          rulePassed = false;
        }
        lastPlacement = placement;
      });
      return rulePassed;
    };
    ColumnModel2.prototype.doesMovePassMarryChildren = function(allColumnsCopy) {
      var rulePassed = true;
      this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function(child) {
        if (!(child instanceof ProvidedColumnGroup)) {
          return;
        }
        var columnGroup = child;
        var colGroupDef = columnGroup.getColGroupDef();
        var marryChildren = colGroupDef && colGroupDef.marryChildren;
        if (!marryChildren) {
          return;
        }
        var newIndexes = [];
        columnGroup.getLeafColumns().forEach(function(col) {
          var newColIndex = allColumnsCopy.indexOf(col);
          newIndexes.push(newColIndex);
        });
        var maxIndex = Math.max.apply(Math, newIndexes);
        var minIndex = Math.min.apply(Math, newIndexes);
        var spread = maxIndex - minIndex;
        var maxSpread = columnGroup.getLeafColumns().length - 1;
        if (spread > maxSpread) {
          rulePassed = false;
        }
      });
      return rulePassed;
    };
    ColumnModel2.prototype.moveColumn = function(key, toIndex, source) {
      if (source === void 0) {
        source = "api";
      }
      this.moveColumns([key], toIndex, source);
    };
    ColumnModel2.prototype.moveColumnByIndex = function(fromIndex, toIndex, source) {
      if (source === void 0) {
        source = "api";
      }
      if (!this.gridColumns) {
        return;
      }
      var column = this.gridColumns[fromIndex];
      this.moveColumn(column, toIndex, source);
    };
    ColumnModel2.prototype.getColumnDefs = function() {
      var _this = this;
      if (!this.primaryColumns) {
        return;
      }
      var cols = this.primaryColumns.slice();
      if (this.gridColsArePrimary) {
        cols.sort(function(a, b) {
          return _this.gridColumns.indexOf(a) - _this.gridColumns.indexOf(b);
        });
      } else if (this.lastPrimaryOrder) {
        cols.sort(function(a, b) {
          return _this.lastPrimaryOrder.indexOf(a) - _this.lastPrimaryOrder.indexOf(b);
        });
      }
      return this.columnDefFactory.buildColumnDefs(cols, this.rowGroupColumns, this.pivotColumns);
    };
    ColumnModel2.prototype.getBodyContainerWidth = function() {
      return this.bodyWidth;
    };
    ColumnModel2.prototype.getContainerWidth = function(pinned) {
      switch (pinned) {
        case "left":
          return this.leftWidth;
        case "right":
          return this.rightWidth;
        default:
          return this.bodyWidth;
      }
    };
    ColumnModel2.prototype.updateBodyWidths = function() {
      var newBodyWidth = this.getWidthOfColsInList(this.displayedColumnsCenter);
      var newLeftWidth = this.getWidthOfColsInList(this.displayedColumnsLeft);
      var newRightWidth = this.getWidthOfColsInList(this.displayedColumnsRight);
      this.bodyWidthDirty = this.bodyWidth !== newBodyWidth;
      var atLeastOneChanged = this.bodyWidth !== newBodyWidth || this.leftWidth !== newLeftWidth || this.rightWidth !== newRightWidth;
      if (atLeastOneChanged) {
        this.bodyWidth = newBodyWidth;
        this.leftWidth = newLeftWidth;
        this.rightWidth = newRightWidth;
        var event_2 = {
          type: Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED
        };
        this.eventService.dispatchEvent(event_2);
      }
    };
    ColumnModel2.prototype.getValueColumns = function() {
      return this.valueColumns ? this.valueColumns : [];
    };
    ColumnModel2.prototype.getPivotColumns = function() {
      return this.pivotColumns ? this.pivotColumns : [];
    };
    ColumnModel2.prototype.isPivotActive = function() {
      return this.pivotColumns && this.pivotColumns.length > 0 && this.pivotMode;
    };
    ColumnModel2.prototype.getRowGroupColumns = function() {
      return this.rowGroupColumns ? this.rowGroupColumns : [];
    };
    ColumnModel2.prototype.getDisplayedCenterColumns = function() {
      return this.displayedColumnsCenter;
    };
    ColumnModel2.prototype.getDisplayedLeftColumns = function() {
      return this.displayedColumnsLeft;
    };
    ColumnModel2.prototype.getDisplayedRightColumns = function() {
      return this.displayedColumnsRight;
    };
    ColumnModel2.prototype.getDisplayedColumns = function(type) {
      switch (type) {
        case "left":
          return this.getDisplayedLeftColumns();
        case "right":
          return this.getDisplayedRightColumns();
        default:
          return this.getDisplayedCenterColumns();
      }
    };
    ColumnModel2.prototype.getAllPrimaryColumns = function() {
      return this.primaryColumns ? this.primaryColumns.slice() : null;
    };
    ColumnModel2.prototype.getSecondaryColumns = function() {
      return this.secondaryColumns ? this.secondaryColumns.slice() : null;
    };
    ColumnModel2.prototype.getAllColumnsForQuickFilter = function() {
      return this.columnsForQuickFilter;
    };
    ColumnModel2.prototype.getAllGridColumns = function() {
      var _a;
      return (_a = this.gridColumns) !== null && _a !== void 0 ? _a : [];
    };
    ColumnModel2.prototype.isEmpty = function() {
      return missingOrEmpty(this.gridColumns);
    };
    ColumnModel2.prototype.isRowGroupEmpty = function() {
      return missingOrEmpty(this.rowGroupColumns);
    };
    ColumnModel2.prototype.setColumnVisible = function(key, visible, source) {
      if (source === void 0) {
        source = "api";
      }
      this.setColumnsVisible([key], visible, source);
    };
    ColumnModel2.prototype.setColumnsVisible = function(keys2, visible, source) {
      if (visible === void 0) {
        visible = false;
      }
      if (source === void 0) {
        source = "api";
      }
      this.applyColumnState({
        state: keys2.map(function(key) {
          return {
            colId: typeof key === "string" ? key : key.getColId(),
            hide: !visible
          };
        })
      }, source);
    };
    ColumnModel2.prototype.setColumnPinned = function(key, pinned, source) {
      if (source === void 0) {
        source = "api";
      }
      if (key) {
        this.setColumnsPinned([key], pinned, source);
      }
    };
    ColumnModel2.prototype.setColumnsPinned = function(keys2, pinned, source) {
      if (source === void 0) {
        source = "api";
      }
      if (!this.gridColumns) {
        return;
      }
      if (this.gridOptionsService.isDomLayout("print")) {
        console.warn("AG Grid: Changing the column pinning status is not allowed with domLayout='print'");
        return;
      }
      this.columnAnimationService.start();
      var actualPinned;
      if (pinned === true || pinned === "left") {
        actualPinned = "left";
      } else if (pinned === "right") {
        actualPinned = "right";
      } else {
        actualPinned = null;
      }
      this.actionOnGridColumns(keys2, function(col) {
        if (col.getPinned() !== actualPinned) {
          col.setPinned(actualPinned);
          return true;
        }
        return false;
      }, source, function() {
        var event = {
          type: Events.EVENT_COLUMN_PINNED,
          pinned: actualPinned,
          column: null,
          columns: null,
          source
        };
        return event;
      });
      this.columnAnimationService.finish();
    };
    ColumnModel2.prototype.actionOnGridColumns = function(keys2, action, source, createEvent) {
      var _this = this;
      if (missingOrEmpty(keys2)) {
        return;
      }
      var updatedColumns = [];
      keys2.forEach(function(key) {
        var column = _this.getGridColumn(key);
        if (!column) {
          return;
        }
        var resultOfAction = action(column);
        if (resultOfAction !== false) {
          updatedColumns.push(column);
        }
      });
      if (!updatedColumns.length) {
        return;
      }
      this.updateDisplayedColumns(source);
      if (exists(createEvent) && createEvent) {
        var event_3 = createEvent();
        event_3.columns = updatedColumns;
        event_3.column = updatedColumns.length === 1 ? updatedColumns[0] : null;
        this.eventService.dispatchEvent(event_3);
      }
    };
    ColumnModel2.prototype.getDisplayedColBefore = function(col) {
      var allDisplayedColumns = this.getAllDisplayedColumns();
      var oldIndex = allDisplayedColumns.indexOf(col);
      if (oldIndex > 0) {
        return allDisplayedColumns[oldIndex - 1];
      }
      return null;
    };
    ColumnModel2.prototype.getDisplayedColAfter = function(col) {
      var allDisplayedColumns = this.getAllDisplayedColumns();
      var oldIndex = allDisplayedColumns.indexOf(col);
      if (oldIndex < allDisplayedColumns.length - 1) {
        return allDisplayedColumns[oldIndex + 1];
      }
      return null;
    };
    ColumnModel2.prototype.getDisplayedGroupAfter = function(columnGroup) {
      return this.getDisplayedGroupAtDirection(columnGroup, "After");
    };
    ColumnModel2.prototype.getDisplayedGroupBefore = function(columnGroup) {
      return this.getDisplayedGroupAtDirection(columnGroup, "Before");
    };
    ColumnModel2.prototype.getDisplayedGroupAtDirection = function(columnGroup, direction) {
      var requiredLevel = columnGroup.getProvidedColumnGroup().getLevel() + columnGroup.getPaddingLevel();
      var colGroupLeafColumns = columnGroup.getDisplayedLeafColumns();
      var col = direction === "After" ? last(colGroupLeafColumns) : colGroupLeafColumns[0];
      var getDisplayColMethod = "getDisplayedCol".concat(direction);
      while (true) {
        var column = this[getDisplayColMethod](col);
        if (!column) {
          return null;
        }
        var groupPointer = this.getColumnGroupAtLevel(column, requiredLevel);
        if (groupPointer !== columnGroup) {
          return groupPointer;
        }
      }
    };
    ColumnModel2.prototype.getColumnGroupAtLevel = function(column, level) {
      var groupPointer = column.getParent();
      var originalGroupLevel;
      var groupPointerLevel;
      while (true) {
        var groupPointerProvidedColumnGroup = groupPointer.getProvidedColumnGroup();
        originalGroupLevel = groupPointerProvidedColumnGroup.getLevel();
        groupPointerLevel = groupPointer.getPaddingLevel();
        if (originalGroupLevel + groupPointerLevel <= level) {
          break;
        }
        groupPointer = groupPointer.getParent();
      }
      return groupPointer;
    };
    ColumnModel2.prototype.isPinningLeft = function() {
      return this.displayedColumnsLeft.length > 0;
    };
    ColumnModel2.prototype.isPinningRight = function() {
      return this.displayedColumnsRight.length > 0;
    };
    ColumnModel2.prototype.getPrimaryAndSecondaryAndAutoColumns = function() {
      var _a;
      return (_a = []).concat.apply(_a, [
        this.primaryColumns || [],
        this.groupAutoColumns || [],
        this.secondaryColumns || []
      ]);
    };
    ColumnModel2.prototype.createStateItemFromColumn = function(column) {
      var rowGroupIndex = column.isRowGroupActive() ? this.rowGroupColumns.indexOf(column) : null;
      var pivotIndex = column.isPivotActive() ? this.pivotColumns.indexOf(column) : null;
      var aggFunc = column.isValueActive() ? column.getAggFunc() : null;
      var sort = column.getSort() != null ? column.getSort() : null;
      var sortIndex = column.getSortIndex() != null ? column.getSortIndex() : null;
      var flex = column.getFlex() != null && column.getFlex() > 0 ? column.getFlex() : null;
      var res = {
        colId: column.getColId(),
        width: column.getActualWidth(),
        hide: !column.isVisible(),
        pinned: column.getPinned(),
        sort,
        sortIndex,
        aggFunc,
        rowGroup: column.isRowGroupActive(),
        rowGroupIndex,
        pivot: column.isPivotActive(),
        pivotIndex,
        flex
      };
      return res;
    };
    ColumnModel2.prototype.getColumnState = function() {
      if (missing(this.primaryColumns) || !this.isAlive()) {
        return [];
      }
      var colsForState = this.getPrimaryAndSecondaryAndAutoColumns();
      var res = colsForState.map(this.createStateItemFromColumn.bind(this));
      this.orderColumnStateList(res);
      return res;
    };
    ColumnModel2.prototype.orderColumnStateList = function(columnStateList) {
      var colIdToGridIndexMap = convertToMap(this.gridColumns.map(function(col, index) {
        return [col.getColId(), index];
      }));
      columnStateList.sort(function(itemA, itemB) {
        var posA = colIdToGridIndexMap.has(itemA.colId) ? colIdToGridIndexMap.get(itemA.colId) : -1;
        var posB = colIdToGridIndexMap.has(itemB.colId) ? colIdToGridIndexMap.get(itemB.colId) : -1;
        return posA - posB;
      });
    };
    ColumnModel2.prototype.resetColumnState = function(source) {
      var _this = this;
      if (source === void 0) {
        source = "api";
      }
      if (missingOrEmpty(this.primaryColumns)) {
        return;
      }
      var primaryColumns = this.getColumnsFromTree(this.primaryColumnTree);
      var columnStates = [];
      var letRowGroupIndex = 1e3;
      var letPivotIndex = 1e3;
      var colsToProcess = [];
      if (this.groupAutoColumns) {
        colsToProcess = colsToProcess.concat(this.groupAutoColumns);
      }
      if (primaryColumns) {
        colsToProcess = colsToProcess.concat(primaryColumns);
      }
      colsToProcess.forEach(function(column) {
        var stateItem = _this.getColumnStateFromColDef(column);
        if (missing(stateItem.rowGroupIndex) && stateItem.rowGroup) {
          stateItem.rowGroupIndex = letRowGroupIndex++;
        }
        if (missing(stateItem.pivotIndex) && stateItem.pivot) {
          stateItem.pivotIndex = letPivotIndex++;
        }
        columnStates.push(stateItem);
      });
      this.applyColumnState({ state: columnStates, applyOrder: true }, source);
    };
    ColumnModel2.prototype.getColumnStateFromColDef = function(column) {
      var getValueOrNull = function(a, b) {
        return a != null ? a : b != null ? b : null;
      };
      var colDef = column.getColDef();
      var sort = getValueOrNull(colDef.sort, colDef.initialSort);
      var sortIndex = getValueOrNull(colDef.sortIndex, colDef.initialSortIndex);
      var hide = getValueOrNull(colDef.hide, colDef.initialHide);
      var pinned = getValueOrNull(colDef.pinned, colDef.initialPinned);
      var width = getValueOrNull(colDef.width, colDef.initialWidth);
      var flex = getValueOrNull(colDef.flex, colDef.initialFlex);
      var rowGroupIndex = getValueOrNull(colDef.rowGroupIndex, colDef.initialRowGroupIndex);
      var rowGroup = getValueOrNull(colDef.rowGroup, colDef.initialRowGroup);
      if (rowGroupIndex == null && (rowGroup == null || rowGroup == false)) {
        rowGroupIndex = null;
        rowGroup = null;
      }
      var pivotIndex = getValueOrNull(colDef.pivotIndex, colDef.initialPivotIndex);
      var pivot = getValueOrNull(colDef.pivot, colDef.initialPivot);
      if (pivotIndex == null && (pivot == null || pivot == false)) {
        pivotIndex = null;
        pivot = null;
      }
      var aggFunc = getValueOrNull(colDef.aggFunc, colDef.initialAggFunc);
      return {
        colId: column.getColId(),
        sort,
        sortIndex,
        hide,
        pinned,
        width,
        flex,
        rowGroup,
        rowGroupIndex,
        pivot,
        pivotIndex,
        aggFunc
      };
    };
    ColumnModel2.prototype.applyColumnState = function(params, source) {
      var _this = this;
      if (missingOrEmpty(this.primaryColumns)) {
        return false;
      }
      if (params && params.state && !params.state.forEach) {
        console.warn("AG Grid: applyColumnState() - the state attribute should be an array, however an array was not found. Please provide an array of items (one for each col you want to change) for state.");
        return false;
      }
      var applyStates = function(states, existingColumns, getById) {
        var dispatchEventsFunc = _this.compareColumnStatesAndDispatchEvents(source);
        _this.autoGroupsNeedBuilding = true;
        var columnsWithNoState = existingColumns.slice();
        var rowGroupIndexes = {};
        var pivotIndexes = {};
        var autoGroupColumnStates = [];
        var unmatchedAndAutoStates2 = [];
        var unmatchedCount2 = 0;
        var previousRowGroupCols = _this.rowGroupColumns.slice();
        var previousPivotCols = _this.pivotColumns.slice();
        states.forEach(function(state) {
          var colId = state.colId || "";
          var isAutoGroupColumn = colId.startsWith(GROUP_AUTO_COLUMN_ID);
          if (isAutoGroupColumn) {
            autoGroupColumnStates.push(state);
            unmatchedAndAutoStates2.push(state);
            return;
          }
          var column = getById(colId);
          if (!column) {
            unmatchedAndAutoStates2.push(state);
            unmatchedCount2 += 1;
          } else {
            _this.syncColumnWithStateItem(column, state, params.defaultState, rowGroupIndexes, pivotIndexes, false, source);
            removeFromArray(columnsWithNoState, column);
          }
        });
        var applyDefaultsFunc = function(col) {
          return _this.syncColumnWithStateItem(col, null, params.defaultState, rowGroupIndexes, pivotIndexes, false, source);
        };
        columnsWithNoState.forEach(applyDefaultsFunc);
        var comparator = function(indexes, oldList, colA, colB) {
          var indexA = indexes[colA.getId()];
          var indexB = indexes[colB.getId()];
          var aHasIndex = indexA != null;
          var bHasIndex = indexB != null;
          if (aHasIndex && bHasIndex) {
            return indexA - indexB;
          }
          if (aHasIndex) {
            return -1;
          }
          if (bHasIndex) {
            return 1;
          }
          var oldIndexA = oldList.indexOf(colA);
          var oldIndexB = oldList.indexOf(colB);
          var aHasOldIndex = oldIndexA >= 0;
          var bHasOldIndex = oldIndexB >= 0;
          if (aHasOldIndex && bHasOldIndex) {
            return oldIndexA - oldIndexB;
          }
          if (aHasOldIndex) {
            return -1;
          }
          return 1;
        };
        _this.rowGroupColumns.sort(comparator.bind(_this, rowGroupIndexes, previousRowGroupCols));
        _this.pivotColumns.sort(comparator.bind(_this, pivotIndexes, previousPivotCols));
        _this.updateGridColumns();
        var autoGroupColsCopy = _this.groupAutoColumns ? _this.groupAutoColumns.slice() : [];
        autoGroupColumnStates.forEach(function(stateItem) {
          var autoCol = _this.getAutoColumn(stateItem.colId);
          removeFromArray(autoGroupColsCopy, autoCol);
          _this.syncColumnWithStateItem(autoCol, stateItem, params.defaultState, null, null, true, source);
        });
        autoGroupColsCopy.forEach(applyDefaultsFunc);
        _this.applyOrderAfterApplyState(params);
        _this.updateDisplayedColumns(source);
        _this.dispatchEverythingChanged(source);
        dispatchEventsFunc();
        return { unmatchedAndAutoStates: unmatchedAndAutoStates2, unmatchedCount: unmatchedCount2 };
      };
      this.columnAnimationService.start();
      var _a = applyStates(params.state || [], this.primaryColumns || [], function(id) {
        return _this.getPrimaryColumn(id);
      }), unmatchedAndAutoStates = _a.unmatchedAndAutoStates, unmatchedCount = _a.unmatchedCount;
      if (unmatchedAndAutoStates.length > 0 || exists(params.defaultState)) {
        unmatchedCount = applyStates(unmatchedAndAutoStates, this.secondaryColumns || [], function(id) {
          return _this.getSecondaryColumn(id);
        }).unmatchedCount;
      }
      this.columnAnimationService.finish();
      return unmatchedCount === 0;
    };
    ColumnModel2.prototype.applyOrderAfterApplyState = function(params) {
      var _this = this;
      if (!params.applyOrder || !params.state) {
        return;
      }
      var newOrder = [];
      var processedColIds = {};
      params.state.forEach(function(item) {
        if (!item.colId || processedColIds[item.colId]) {
          return;
        }
        var col = _this.gridColumnsMap[item.colId];
        if (col) {
          newOrder.push(col);
          processedColIds[item.colId] = true;
        }
      });
      var autoGroupInsertIndex = 0;
      this.gridColumns.forEach(function(col) {
        var colId = col.getColId();
        var alreadyProcessed = processedColIds[colId] != null;
        if (alreadyProcessed) {
          return;
        }
        var isAutoGroupCol = colId.startsWith(GROUP_AUTO_COLUMN_ID);
        if (isAutoGroupCol) {
          insertIntoArray(newOrder, col, autoGroupInsertIndex++);
        } else {
          newOrder.push(col);
        }
      });
      newOrder = this.placeLockedColumns(newOrder);
      if (!this.doesMovePassMarryChildren(newOrder)) {
        console.warn("AG Grid: Applying column order broke a group where columns should be married together. Applying new order has been discarded.");
        return;
      }
      this.gridColumns = newOrder;
    };
    ColumnModel2.prototype.compareColumnStatesAndDispatchEvents = function(source) {
      var _this = this;
      var startState = {
        rowGroupColumns: this.rowGroupColumns.slice(),
        pivotColumns: this.pivotColumns.slice(),
        valueColumns: this.valueColumns.slice()
      };
      var columnStateBefore = this.getColumnState();
      var columnStateBeforeMap = {};
      columnStateBefore.forEach(function(col) {
        columnStateBeforeMap[col.colId] = col;
      });
      return function() {
        var colsForState = _this.getPrimaryAndSecondaryAndAutoColumns();
        var dispatchWhenListsDifferent = function(eventType, colsBefore, colsAfter, idMapper) {
          var beforeList = colsBefore.map(idMapper);
          var afterList = colsAfter.map(idMapper);
          var unchanged = areEqual(beforeList, afterList);
          if (unchanged) {
            return;
          }
          var changes = new Set(colsBefore);
          colsAfter.forEach(function(id) {
            if (!changes.delete(id)) {
              changes.add(id);
            }
          });
          var changesArr = __spreadArray$r([], __read$z(changes), false);
          var event = {
            type: eventType,
            columns: changesArr,
            column: changesArr.length === 1 ? changesArr[0] : null,
            source
          };
          _this.eventService.dispatchEvent(event);
        };
        var getChangedColumns = function(changedPredicate) {
          var changedColumns2 = [];
          colsForState.forEach(function(column) {
            var colStateBefore = columnStateBeforeMap[column.getColId()];
            if (colStateBefore && changedPredicate(colStateBefore, column)) {
              changedColumns2.push(column);
            }
          });
          return changedColumns2;
        };
        var columnIdMapper = function(c) {
          return c.getColId();
        };
        dispatchWhenListsDifferent(Events.EVENT_COLUMN_ROW_GROUP_CHANGED, startState.rowGroupColumns, _this.rowGroupColumns, columnIdMapper);
        dispatchWhenListsDifferent(Events.EVENT_COLUMN_PIVOT_CHANGED, startState.pivotColumns, _this.pivotColumns, columnIdMapper);
        var valueChangePredicate = function(cs, c) {
          var oldActive = cs.aggFunc != null;
          var activeChanged = oldActive != c.isValueActive();
          var aggFuncChanged = oldActive && cs.aggFunc != c.getAggFunc();
          return activeChanged || aggFuncChanged;
        };
        var changedValues = getChangedColumns(valueChangePredicate);
        if (changedValues.length > 0) {
          _this.dispatchColumnChangedEvent(Events.EVENT_COLUMN_VALUE_CHANGED, changedValues, source);
        }
        var resizeChangePredicate = function(cs, c) {
          return cs.width != c.getActualWidth();
        };
        _this.dispatchColumnResizedEvent(getChangedColumns(resizeChangePredicate), true, source);
        var pinnedChangePredicate = function(cs, c) {
          return cs.pinned != c.getPinned();
        };
        _this.dispatchColumnPinnedEvent(getChangedColumns(pinnedChangePredicate), source);
        var visibilityChangePredicate = function(cs, c) {
          return cs.hide == c.isVisible();
        };
        _this.dispatchColumnVisibleEvent(getChangedColumns(visibilityChangePredicate), source);
        var sortChangePredicate = function(cs, c) {
          return cs.sort != c.getSort() || cs.sortIndex != c.getSortIndex();
        };
        var changedColumns = getChangedColumns(sortChangePredicate);
        if (changedColumns.length > 0) {
          _this.sortController.dispatchSortChangedEvents(source, changedColumns);
        }
        _this.normaliseColumnMovedEventForColumnState(columnStateBefore, source);
      };
    };
    ColumnModel2.prototype.getCommonValue = function(cols, valueGetter) {
      if (!cols || cols.length == 0) {
        return void 0;
      }
      var firstValue = valueGetter(cols[0]);
      for (var i = 1; i < cols.length; i++) {
        if (firstValue !== valueGetter(cols[i])) {
          return void 0;
        }
      }
      return firstValue;
    };
    ColumnModel2.prototype.normaliseColumnMovedEventForColumnState = function(colStateBefore, source) {
      var _this = this;
      var colStateAfter = this.getColumnState();
      var colStateAfterMapped = {};
      colStateAfter.forEach(function(s) {
        return colStateAfterMapped[s.colId] = s;
      });
      var colsIntersectIds = {};
      colStateBefore.forEach(function(s) {
        if (colStateAfterMapped[s.colId]) {
          colsIntersectIds[s.colId] = true;
        }
      });
      var beforeFiltered = colStateBefore.filter(function(c) {
        return colsIntersectIds[c.colId];
      });
      var afterFiltered = colStateAfter.filter(function(c) {
        return colsIntersectIds[c.colId];
      });
      var movedColumns = [];
      afterFiltered.forEach(function(csAfter, index) {
        var csBefore = beforeFiltered && beforeFiltered[index];
        if (csBefore && csBefore.colId !== csAfter.colId) {
          var gridCol = _this.getGridColumn(csBefore.colId);
          if (gridCol) {
            movedColumns.push(gridCol);
          }
        }
      });
      if (!movedColumns.length) {
        return;
      }
      this.dispatchColumnMovedEvent({ movedColumns, source, finished: true });
    };
    ColumnModel2.prototype.syncColumnWithStateItem = function(column, stateItem, defaultState, rowGroupIndexes, pivotIndexes, autoCol, source) {
      if (!column) {
        return;
      }
      var getValue = function(key1, key2) {
        var obj = { value1: void 0, value2: void 0 };
        var calculated = false;
        if (stateItem) {
          if (stateItem[key1] !== void 0) {
            obj.value1 = stateItem[key1];
            calculated = true;
          }
          if (exists(key2) && stateItem[key2] !== void 0) {
            obj.value2 = stateItem[key2];
            calculated = true;
          }
        }
        if (!calculated && defaultState) {
          if (defaultState[key1] !== void 0) {
            obj.value1 = defaultState[key1];
          }
          if (exists(key2) && defaultState[key2] !== void 0) {
            obj.value2 = defaultState[key2];
          }
        }
        return obj;
      };
      var hide = getValue("hide").value1;
      if (hide !== void 0) {
        column.setVisible(!hide, source);
      }
      var pinned = getValue("pinned").value1;
      if (pinned !== void 0) {
        column.setPinned(pinned);
      }
      var minColWidth = this.columnUtils.calculateColMinWidth(column.getColDef());
      var flex = getValue("flex").value1;
      if (flex !== void 0) {
        column.setFlex(flex);
      } else {
        var width = getValue("width").value1;
        if (width != null) {
          if (minColWidth != null && width >= minColWidth) {
            column.setActualWidth(width, source);
          }
        }
      }
      var sort = getValue("sort").value1;
      if (sort !== void 0) {
        if (sort === "desc" || sort === "asc") {
          column.setSort(sort, source);
        } else {
          column.setSort(void 0, source);
        }
      }
      var sortIndex = getValue("sortIndex").value1;
      if (sortIndex !== void 0) {
        column.setSortIndex(sortIndex);
      }
      if (autoCol || !column.isPrimary()) {
        return;
      }
      var aggFunc = getValue("aggFunc").value1;
      if (aggFunc !== void 0) {
        if (typeof aggFunc === "string") {
          column.setAggFunc(aggFunc);
          if (!column.isValueActive()) {
            column.setValueActive(true, source);
            this.valueColumns.push(column);
          }
        } else {
          if (exists(aggFunc)) {
            console.warn("AG Grid: stateItem.aggFunc must be a string. if using your own aggregation functions, register the functions first before using them in get/set state. This is because it is intended for the column state to be stored and retrieved as simple JSON.");
          }
          if (column.isValueActive()) {
            column.setValueActive(false, source);
            removeFromArray(this.valueColumns, column);
          }
        }
      }
      var _a = getValue("rowGroup", "rowGroupIndex"), rowGroup = _a.value1, rowGroupIndex = _a.value2;
      if (rowGroup !== void 0 || rowGroupIndex !== void 0) {
        if (typeof rowGroupIndex === "number" || rowGroup) {
          if (!column.isRowGroupActive()) {
            column.setRowGroupActive(true, source);
            this.rowGroupColumns.push(column);
          }
          if (rowGroupIndexes && typeof rowGroupIndex === "number") {
            rowGroupIndexes[column.getId()] = rowGroupIndex;
          }
        } else {
          if (column.isRowGroupActive()) {
            column.setRowGroupActive(false, source);
            removeFromArray(this.rowGroupColumns, column);
          }
        }
      }
      var _b = getValue("pivot", "pivotIndex"), pivot = _b.value1, pivotIndex = _b.value2;
      if (pivot !== void 0 || pivotIndex !== void 0) {
        if (typeof pivotIndex === "number" || pivot) {
          if (!column.isPivotActive()) {
            column.setPivotActive(true, source);
            this.pivotColumns.push(column);
          }
          if (pivotIndexes && typeof pivotIndex === "number") {
            pivotIndexes[column.getId()] = pivotIndex;
          }
        } else {
          if (column.isPivotActive()) {
            column.setPivotActive(false, source);
            removeFromArray(this.pivotColumns, column);
          }
        }
      }
    };
    ColumnModel2.prototype.getGridColumns = function(keys2) {
      return this.getColumns(keys2, this.getGridColumn.bind(this));
    };
    ColumnModel2.prototype.getColumns = function(keys2, columnLookupCallback) {
      var foundColumns = [];
      if (keys2) {
        keys2.forEach(function(key) {
          var column = columnLookupCallback(key);
          if (column) {
            foundColumns.push(column);
          }
        });
      }
      return foundColumns;
    };
    ColumnModel2.prototype.getColumnWithValidation = function(key) {
      if (key == null) {
        return null;
      }
      var column = this.getGridColumn(key);
      if (!column) {
        console.warn("AG Grid: could not find column " + key);
      }
      return column;
    };
    ColumnModel2.prototype.getPrimaryColumn = function(key) {
      if (!this.primaryColumns) {
        return null;
      }
      return this.getColumn(key, this.primaryColumns, this.primaryColumnsMap);
    };
    ColumnModel2.prototype.getGridColumn = function(key) {
      return this.getColumn(key, this.gridColumns, this.gridColumnsMap);
    };
    ColumnModel2.prototype.lookupGridColumn = function(key) {
      return this.gridColumnsMap[key];
    };
    ColumnModel2.prototype.getSecondaryColumn = function(key) {
      if (!this.secondaryColumns) {
        return null;
      }
      return this.getColumn(key, this.secondaryColumns, this.secondaryColumnsMap);
    };
    ColumnModel2.prototype.getColumn = function(key, columnList, columnMap) {
      if (!key || !columnMap) {
        return null;
      }
      if (typeof key == "string" && columnMap[key]) {
        return columnMap[key];
      }
      for (var i = 0; i < columnList.length; i++) {
        if (this.columnsMatch(columnList[i], key)) {
          return columnList[i];
        }
      }
      return this.getAutoColumn(key);
    };
    ColumnModel2.prototype.getSourceColumnsForGroupColumn = function(groupCol) {
      var sourceColumnId = groupCol.getColDef().showRowGroup;
      if (!sourceColumnId) {
        return null;
      }
      if (sourceColumnId === true) {
        return this.rowGroupColumns.slice(0);
      }
      var column = this.getPrimaryColumn(sourceColumnId);
      return column ? [column] : null;
    };
    ColumnModel2.prototype.getAutoColumn = function(key) {
      var _this = this;
      if (!this.groupAutoColumns || !exists(this.groupAutoColumns) || missing(this.groupAutoColumns)) {
        return null;
      }
      return this.groupAutoColumns.find(function(groupCol) {
        return _this.columnsMatch(groupCol, key);
      }) || null;
    };
    ColumnModel2.prototype.columnsMatch = function(column, key) {
      var columnMatches = column === key;
      var colDefMatches = column.getColDef() === key;
      var idMatches = column.getColId() == key;
      return columnMatches || colDefMatches || idMatches;
    };
    ColumnModel2.prototype.getDisplayNameForColumn = function(column, location, includeAggFunc) {
      if (includeAggFunc === void 0) {
        includeAggFunc = false;
      }
      if (!column) {
        return null;
      }
      var headerName = this.getHeaderName(column.getColDef(), column, null, null, location);
      if (includeAggFunc) {
        return this.wrapHeaderNameWithAggFunc(column, headerName);
      }
      return headerName;
    };
    ColumnModel2.prototype.getDisplayNameForProvidedColumnGroup = function(columnGroup, providedColumnGroup, location) {
      var colGroupDef = providedColumnGroup ? providedColumnGroup.getColGroupDef() : null;
      if (colGroupDef) {
        return this.getHeaderName(colGroupDef, null, columnGroup, providedColumnGroup, location);
      }
      return null;
    };
    ColumnModel2.prototype.getDisplayNameForColumnGroup = function(columnGroup, location) {
      return this.getDisplayNameForProvidedColumnGroup(columnGroup, columnGroup.getProvidedColumnGroup(), location);
    };
    ColumnModel2.prototype.getHeaderName = function(colDef, column, columnGroup, providedColumnGroup, location) {
      var headerValueGetter = colDef.headerValueGetter;
      if (headerValueGetter) {
        var params = this.gridOptionsService.addGridCommonParams({
          colDef,
          column,
          columnGroup,
          providedColumnGroup,
          location
        });
        if (typeof headerValueGetter === "function") {
          return headerValueGetter(params);
        } else if (typeof headerValueGetter === "string") {
          return this.expressionService.evaluate(headerValueGetter, params);
        }
        console.warn("AG Grid: headerValueGetter must be a function or a string");
        return "";
      } else if (colDef.headerName != null) {
        return colDef.headerName;
      } else if (colDef.field) {
        return camelCaseToHumanText(colDef.field);
      }
      return "";
    };
    ColumnModel2.prototype.wrapHeaderNameWithAggFunc = function(column, headerName) {
      if (this.gridOptionsService.get("suppressAggFuncInHeader")) {
        return headerName;
      }
      var pivotValueColumn = column.getColDef().pivotValueColumn;
      var pivotActiveOnThisColumn = exists(pivotValueColumn);
      var aggFunc = null;
      var aggFuncFound;
      if (pivotActiveOnThisColumn) {
        var isCollapsedHeaderEnabled = this.gridOptionsService.get("removePivotHeaderRowWhenSingleValueColumn") && this.valueColumns.length === 1;
        var isTotalColumn = column.getColDef().pivotTotalColumnIds !== void 0;
        if (isCollapsedHeaderEnabled && !isTotalColumn) {
          return headerName;
        }
        aggFunc = pivotValueColumn ? pivotValueColumn.getAggFunc() : null;
        aggFuncFound = true;
      } else {
        var measureActive = column.isValueActive();
        var aggregationPresent = this.pivotMode || !this.isRowGroupEmpty();
        if (measureActive && aggregationPresent) {
          aggFunc = column.getAggFunc();
          aggFuncFound = true;
        } else {
          aggFuncFound = false;
        }
      }
      if (aggFuncFound) {
        var aggFuncString = typeof aggFunc === "string" ? aggFunc : "func";
        var localeTextFunc = this.localeService.getLocaleTextFunc();
        var aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);
        return "".concat(aggFuncStringTranslated, "(").concat(headerName, ")");
      }
      return headerName;
    };
    ColumnModel2.prototype.getColumnGroup = function(colId, partId) {
      if (!colId) {
        return null;
      }
      if (colId instanceof ColumnGroup) {
        return colId;
      }
      var allColumnGroups = this.getAllDisplayedTrees();
      var checkPartId = typeof partId === "number";
      var result = null;
      this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, function(child) {
        if (child instanceof ColumnGroup) {
          var columnGroup = child;
          var matched = void 0;
          if (checkPartId) {
            matched = colId === columnGroup.getGroupId() && partId === columnGroup.getPartId();
          } else {
            matched = colId === columnGroup.getGroupId();
          }
          if (matched) {
            result = columnGroup;
          }
        }
      });
      return result;
    };
    ColumnModel2.prototype.isReady = function() {
      return this.ready;
    };
    ColumnModel2.prototype.extractValueColumns = function(source, oldPrimaryColumns) {
      this.valueColumns = this.extractColumns(
        oldPrimaryColumns,
        this.valueColumns,
        function(col, flag) {
          return col.setValueActive(flag, source);
        },
        // aggFunc doesn't have index variant, cos order of value cols doesn't matter, so always return null
        function() {
          return void 0;
        },
        function() {
          return void 0;
        },
        // aggFunc is a string, so return it's existence
        function(colDef) {
          var aggFunc = colDef.aggFunc;
          if (aggFunc === null || aggFunc === "") {
            return null;
          }
          if (aggFunc === void 0) {
            return;
          }
          return !!aggFunc;
        },
        function(colDef) {
          return colDef.initialAggFunc != null && colDef.initialAggFunc != "";
        }
      );
      this.valueColumns.forEach(function(col) {
        var colDef = col.getColDef();
        if (colDef.aggFunc != null && colDef.aggFunc != "") {
          col.setAggFunc(colDef.aggFunc);
        } else {
          if (!col.getAggFunc()) {
            col.setAggFunc(colDef.initialAggFunc);
          }
        }
      });
    };
    ColumnModel2.prototype.extractRowGroupColumns = function(source, oldPrimaryColumns) {
      this.rowGroupColumns = this.extractColumns(oldPrimaryColumns, this.rowGroupColumns, function(col, flag) {
        return col.setRowGroupActive(flag, source);
      }, function(colDef) {
        return colDef.rowGroupIndex;
      }, function(colDef) {
        return colDef.initialRowGroupIndex;
      }, function(colDef) {
        return colDef.rowGroup;
      }, function(colDef) {
        return colDef.initialRowGroup;
      });
    };
    ColumnModel2.prototype.extractColumns = function(oldPrimaryColumns, previousCols, setFlagFunc, getIndexFunc, getInitialIndexFunc, getValueFunc, getInitialValueFunc) {
      if (oldPrimaryColumns === void 0) {
        oldPrimaryColumns = [];
      }
      if (previousCols === void 0) {
        previousCols = [];
      }
      var colsWithIndex = [];
      var colsWithValue = [];
      (this.primaryColumns || []).forEach(function(col) {
        var colIsNew = oldPrimaryColumns.indexOf(col) < 0;
        var colDef = col.getColDef();
        var value = attrToBoolean(getValueFunc(colDef));
        var initialValue = attrToBoolean(getInitialValueFunc(colDef));
        var index = attrToNumber(getIndexFunc(colDef));
        var initialIndex = attrToNumber(getInitialIndexFunc(colDef));
        var include;
        var valuePresent = value !== void 0;
        var indexPresent = index !== void 0;
        var initialValuePresent = initialValue !== void 0;
        var initialIndexPresent = initialIndex !== void 0;
        if (valuePresent) {
          include = value;
        } else if (indexPresent) {
          if (index === null) {
            include = false;
          } else {
            include = index >= 0;
          }
        } else {
          if (colIsNew) {
            if (initialValuePresent) {
              include = initialValue;
            } else if (initialIndexPresent) {
              include = initialIndex != null && initialIndex >= 0;
            } else {
              include = false;
            }
          } else {
            include = previousCols.indexOf(col) >= 0;
          }
        }
        if (include) {
          var useIndex = colIsNew ? index != null || initialIndex != null : index != null;
          useIndex ? colsWithIndex.push(col) : colsWithValue.push(col);
        }
      });
      var getIndexForCol = function(col) {
        var index = getIndexFunc(col.getColDef());
        var defaultIndex = getInitialIndexFunc(col.getColDef());
        return index != null ? index : defaultIndex;
      };
      colsWithIndex.sort(function(colA, colB) {
        var indexA = getIndexForCol(colA);
        var indexB = getIndexForCol(colB);
        if (indexA === indexB) {
          return 0;
        }
        if (indexA < indexB) {
          return -1;
        }
        return 1;
      });
      var res = [].concat(colsWithIndex);
      previousCols.forEach(function(col) {
        if (colsWithValue.indexOf(col) >= 0) {
          res.push(col);
        }
      });
      colsWithValue.forEach(function(col) {
        if (res.indexOf(col) < 0) {
          res.push(col);
        }
      });
      previousCols.forEach(function(col) {
        if (res.indexOf(col) < 0) {
          setFlagFunc(col, false);
        }
      });
      res.forEach(function(col) {
        if (previousCols.indexOf(col) < 0) {
          setFlagFunc(col, true);
        }
      });
      return res;
    };
    ColumnModel2.prototype.extractPivotColumns = function(source, oldPrimaryColumns) {
      this.pivotColumns = this.extractColumns(oldPrimaryColumns, this.pivotColumns, function(col, flag) {
        return col.setPivotActive(flag, source);
      }, function(colDef) {
        return colDef.pivotIndex;
      }, function(colDef) {
        return colDef.initialPivotIndex;
      }, function(colDef) {
        return colDef.pivot;
      }, function(colDef) {
        return colDef.initialPivot;
      });
    };
    ColumnModel2.prototype.resetColumnGroupState = function(source) {
      if (source === void 0) {
        source = "api";
      }
      if (!this.primaryColumnTree) {
        return;
      }
      var stateItems = [];
      this.columnUtils.depthFirstOriginalTreeSearch(null, this.primaryColumnTree, function(child) {
        if (child instanceof ProvidedColumnGroup) {
          var colGroupDef = child.getColGroupDef();
          var groupState = {
            groupId: child.getGroupId(),
            open: !colGroupDef ? void 0 : colGroupDef.openByDefault
          };
          stateItems.push(groupState);
        }
      });
      this.setColumnGroupState(stateItems, source);
    };
    ColumnModel2.prototype.getColumnGroupState = function() {
      var columnGroupState = [];
      this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function(node) {
        if (node instanceof ProvidedColumnGroup) {
          columnGroupState.push({
            groupId: node.getGroupId(),
            open: node.isExpanded()
          });
        }
      });
      return columnGroupState;
    };
    ColumnModel2.prototype.setColumnGroupState = function(stateItems, source) {
      var _this = this;
      if (source === void 0) {
        source = "api";
      }
      if (!this.gridBalancedTree) {
        return;
      }
      this.columnAnimationService.start();
      var impactedGroups = [];
      stateItems.forEach(function(stateItem) {
        var groupKey = stateItem.groupId;
        var newValue = stateItem.open;
        var providedColumnGroup = _this.getProvidedColumnGroup(groupKey);
        if (!providedColumnGroup) {
          return;
        }
        if (providedColumnGroup.isExpanded() === newValue) {
          return;
        }
        _this.logger.log("columnGroupOpened(" + providedColumnGroup.getGroupId() + "," + newValue + ")");
        providedColumnGroup.setExpanded(newValue);
        impactedGroups.push(providedColumnGroup);
      });
      this.updateGroupsAndDisplayedColumns(source);
      this.setFirstRightAndLastLeftPinned(source);
      if (impactedGroups.length) {
        var event_4 = {
          type: Events.EVENT_COLUMN_GROUP_OPENED,
          columnGroup: ProvidedColumnGroup.length === 1 ? impactedGroups[0] : void 0,
          columnGroups: impactedGroups
        };
        this.eventService.dispatchEvent(event_4);
      }
      this.columnAnimationService.finish();
    };
    ColumnModel2.prototype.setColumnGroupOpened = function(key, newValue, source) {
      if (source === void 0) {
        source = "api";
      }
      var keyAsString;
      if (key instanceof ProvidedColumnGroup) {
        keyAsString = key.getId();
      } else {
        keyAsString = key || "";
      }
      this.setColumnGroupState([{ groupId: keyAsString, open: newValue }], source);
    };
    ColumnModel2.prototype.getProvidedColumnGroup = function(key) {
      if (typeof key !== "string") {
        console.error("AG Grid: group key must be a string");
      }
      var res = null;
      this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function(node) {
        if (node instanceof ProvidedColumnGroup) {
          if (node.getId() === key) {
            res = node;
          }
        }
      });
      return res;
    };
    ColumnModel2.prototype.calculateColumnsForDisplay = function() {
      var _this = this;
      var columnsForDisplay;
      if (this.pivotMode && missing(this.secondaryColumns)) {
        columnsForDisplay = this.gridColumns.filter(function(column) {
          var isAutoGroupCol = _this.groupAutoColumns && includes(_this.groupAutoColumns, column);
          var isValueCol = _this.valueColumns && includes(_this.valueColumns, column);
          return isAutoGroupCol || isValueCol;
        });
      } else {
        columnsForDisplay = this.gridColumns.filter(function(column) {
          var isAutoGroupCol = _this.groupAutoColumns && includes(_this.groupAutoColumns, column);
          return isAutoGroupCol || column.isVisible();
        });
      }
      return columnsForDisplay;
    };
    ColumnModel2.prototype.checkColSpanActiveInCols = function(columns) {
      var result = false;
      columns.forEach(function(col) {
        if (exists(col.getColDef().colSpan)) {
          result = true;
        }
      });
      return result;
    };
    ColumnModel2.prototype.calculateColumnsForGroupDisplay = function() {
      var _this = this;
      this.groupDisplayColumns = [];
      this.groupDisplayColumnsMap = {};
      var checkFunc = function(col) {
        var colDef = col.getColDef();
        var underlyingColumn = colDef.showRowGroup;
        if (colDef && exists(underlyingColumn)) {
          _this.groupDisplayColumns.push(col);
          if (typeof underlyingColumn === "string") {
            _this.groupDisplayColumnsMap[underlyingColumn] = col;
          } else if (underlyingColumn === true) {
            _this.getRowGroupColumns().forEach(function(rowGroupCol) {
              _this.groupDisplayColumnsMap[rowGroupCol.getId()] = col;
            });
          }
        }
      };
      this.gridColumns.forEach(checkFunc);
    };
    ColumnModel2.prototype.getGroupDisplayColumns = function() {
      return this.groupDisplayColumns;
    };
    ColumnModel2.prototype.getGroupDisplayColumnForGroup = function(rowGroupColumnId) {
      return this.groupDisplayColumnsMap[rowGroupColumnId];
    };
    ColumnModel2.prototype.updateDisplayedColumns = function(source) {
      var columnsForDisplay = this.calculateColumnsForDisplay();
      this.buildDisplayedTrees(columnsForDisplay);
      this.updateGroupsAndDisplayedColumns(source);
      this.setFirstRightAndLastLeftPinned(source);
    };
    ColumnModel2.prototype.isSecondaryColumnsPresent = function() {
      return exists(this.secondaryColumns);
    };
    ColumnModel2.prototype.setSecondaryColumns = function(colDefs, source) {
      var _this = this;
      if (source === void 0) {
        source = "api";
      }
      if (!this.gridColumns) {
        return;
      }
      var newColsPresent = colDefs && colDefs.length > 0;
      if (!newColsPresent && missing(this.secondaryColumns)) {
        return;
      }
      if (newColsPresent) {
        this.processSecondaryColumnDefinitions(colDefs);
        var balancedTreeResult = this.columnFactory.createColumnTree(colDefs, false, this.secondaryBalancedTree || this.previousSecondaryColumns || void 0);
        this.destroyOldColumns(this.secondaryBalancedTree, balancedTreeResult.columnTree);
        this.secondaryBalancedTree = balancedTreeResult.columnTree;
        this.secondaryHeaderRowCount = balancedTreeResult.treeDept + 1;
        this.secondaryColumns = this.getColumnsFromTree(this.secondaryBalancedTree);
        this.secondaryColumnsMap = {};
        this.secondaryColumns.forEach(function(col) {
          return _this.secondaryColumnsMap[col.getId()] = col;
        });
        this.previousSecondaryColumns = null;
      } else {
        this.previousSecondaryColumns = this.secondaryBalancedTree;
        this.secondaryBalancedTree = null;
        this.secondaryHeaderRowCount = -1;
        this.secondaryColumns = null;
        this.secondaryColumnsMap = {};
      }
      this.updateGridColumns();
      this.updateDisplayedColumns(source);
    };
    ColumnModel2.prototype.processSecondaryColumnDefinitions = function(colDefs) {
      var columnCallback = this.gridOptionsService.get("processPivotResultColDef");
      var groupCallback = this.gridOptionsService.get("processPivotResultColGroupDef");
      if (!columnCallback && !groupCallback) {
        return void 0;
      }
      var searchForColDefs = function(colDefs2) {
        colDefs2.forEach(function(abstractColDef) {
          var isGroup = exists(abstractColDef.children);
          if (isGroup) {
            var colGroupDef = abstractColDef;
            if (groupCallback) {
              groupCallback(colGroupDef);
            }
            searchForColDefs(colGroupDef.children);
          } else {
            var colDef = abstractColDef;
            if (columnCallback) {
              columnCallback(colDef);
            }
          }
        });
      };
      if (colDefs) {
        searchForColDefs(colDefs);
      }
    };
    ColumnModel2.prototype.updateGridColumns = function() {
      var _this = this;
      var prevGridCols = this.gridBalancedTree;
      if (this.gridColsArePrimary) {
        this.lastPrimaryOrder = this.gridColumns;
      } else {
        this.lastSecondaryOrder = this.gridColumns;
      }
      var areAutoColsChanged = this.createGroupAutoColumnsIfNeeded();
      if (areAutoColsChanged) {
        var groupAutoColsMap_1 = convertToMap(this.groupAutoColumns.map(function(col) {
          return [col, true];
        }));
        if (this.lastPrimaryOrder) {
          this.lastPrimaryOrder = this.lastPrimaryOrder.filter(function(col) {
            return !groupAutoColsMap_1.has(col);
          });
          this.lastPrimaryOrder = __spreadArray$r(__spreadArray$r([], __read$z(this.groupAutoColumns), false), __read$z(this.lastPrimaryOrder), false);
        }
        if (this.lastSecondaryOrder) {
          this.lastSecondaryOrder = this.lastSecondaryOrder.filter(function(col) {
            return !groupAutoColsMap_1.has(col);
          });
          this.lastSecondaryOrder = __spreadArray$r(__spreadArray$r([], __read$z(this.groupAutoColumns), false), __read$z(this.lastSecondaryOrder), false);
        }
      }
      var sortOrderToRecover;
      if (this.secondaryColumns && this.secondaryBalancedTree) {
        var hasSameColumns = this.secondaryColumns.some(function(col) {
          return _this.gridColumnsMap[col.getColId()] !== void 0;
        });
        this.gridBalancedTree = this.secondaryBalancedTree.slice();
        this.gridHeaderRowCount = this.secondaryHeaderRowCount;
        this.gridColumns = this.secondaryColumns.slice();
        this.gridColsArePrimary = false;
        if (hasSameColumns) {
          sortOrderToRecover = this.lastSecondaryOrder;
        }
      } else if (this.primaryColumns) {
        this.gridBalancedTree = this.primaryColumnTree.slice();
        this.gridHeaderRowCount = this.primaryHeaderRowCount;
        this.gridColumns = this.primaryColumns.slice();
        this.gridColsArePrimary = true;
        sortOrderToRecover = this.lastPrimaryOrder;
      }
      this.addAutoGroupToGridColumns();
      this.orderGridColsLike(sortOrderToRecover);
      this.gridColumns = this.placeLockedColumns(this.gridColumns);
      this.calculateColumnsForGroupDisplay();
      this.refreshQuickFilterColumns();
      this.clearDisplayedAndViewportColumns();
      this.colSpanActive = this.checkColSpanActiveInCols(this.gridColumns);
      this.gridColumnsMap = {};
      this.gridColumns.forEach(function(col) {
        return _this.gridColumnsMap[col.getId()] = col;
      });
      this.setAutoHeightActive();
      if (!areEqual(prevGridCols, this.gridBalancedTree)) {
        var event_5 = {
          type: Events.EVENT_GRID_COLUMNS_CHANGED
        };
        this.eventService.dispatchEvent(event_5);
      }
    };
    ColumnModel2.prototype.setAutoHeightActive = function() {
      this.autoHeightActive = this.gridColumns.filter(function(col) {
        return col.isAutoHeight();
      }).length > 0;
      if (this.autoHeightActive) {
        this.autoHeightActiveAtLeastOnce = true;
        var supportedRowModel = this.gridOptionsService.isRowModelType("clientSide") || this.gridOptionsService.isRowModelType("serverSide");
        if (!supportedRowModel) {
          warnOnce("autoHeight columns only work with Client Side Row Model and Server Side Row Model.");
        }
      }
    };
    ColumnModel2.prototype.orderGridColsLike = function(colsOrder) {
      if (missing(colsOrder)) {
        return;
      }
      var lastOrderMapped = convertToMap(colsOrder.map(function(col, index) {
        return [col, index];
      }));
      var noColsFound = true;
      this.gridColumns.forEach(function(col) {
        if (lastOrderMapped.has(col)) {
          noColsFound = false;
        }
      });
      if (noColsFound) {
        return;
      }
      var gridColsMap = convertToMap(this.gridColumns.map(function(col) {
        return [col, true];
      }));
      var oldColsOrdered = colsOrder.filter(function(col) {
        return gridColsMap.has(col);
      });
      var oldColsMap = convertToMap(oldColsOrdered.map(function(col) {
        return [col, true];
      }));
      var newColsOrdered = this.gridColumns.filter(function(col) {
        return !oldColsMap.has(col);
      });
      var newGridColumns = oldColsOrdered.slice();
      newColsOrdered.forEach(function(newCol) {
        var parent = newCol.getOriginalParent();
        if (!parent) {
          newGridColumns.push(newCol);
          return;
        }
        var siblings = [];
        while (!siblings.length && parent) {
          var leafCols = parent.getLeafColumns();
          leafCols.forEach(function(leafCol) {
            var presentInNewGriColumns = newGridColumns.indexOf(leafCol) >= 0;
            var noYetInSiblings = siblings.indexOf(leafCol) < 0;
            if (presentInNewGriColumns && noYetInSiblings) {
              siblings.push(leafCol);
            }
          });
          parent = parent.getOriginalParent();
        }
        if (!siblings.length) {
          newGridColumns.push(newCol);
          return;
        }
        var indexes = siblings.map(function(col) {
          return newGridColumns.indexOf(col);
        });
        var lastIndex = Math.max.apply(Math, __spreadArray$r([], __read$z(indexes), false));
        insertIntoArray(newGridColumns, newCol, lastIndex + 1);
      });
      this.gridColumns = newGridColumns;
    };
    ColumnModel2.prototype.isPrimaryColumnGroupsPresent = function() {
      return this.primaryHeaderRowCount > 1;
    };
    ColumnModel2.prototype.refreshQuickFilterColumns = function() {
      var _a;
      var columnsForQuickFilter = (_a = this.isPivotMode() ? this.secondaryColumns : this.primaryColumns) !== null && _a !== void 0 ? _a : [];
      if (this.groupAutoColumns) {
        columnsForQuickFilter = columnsForQuickFilter.concat(this.groupAutoColumns);
      }
      this.columnsForQuickFilter = this.gridOptionsService.get("includeHiddenColumnsInQuickFilter") ? columnsForQuickFilter : columnsForQuickFilter.filter(function(col) {
        return col.isVisible() || col.isRowGroupActive();
      });
    };
    ColumnModel2.prototype.placeLockedColumns = function(cols) {
      var left = [];
      var normal = [];
      var right = [];
      cols.forEach(function(col) {
        var position = col.getColDef().lockPosition;
        if (position === "right") {
          right.push(col);
        } else if (position === "left" || position === true) {
          left.push(col);
        } else {
          normal.push(col);
        }
      });
      return __spreadArray$r(__spreadArray$r(__spreadArray$r([], __read$z(left), false), __read$z(normal), false), __read$z(right), false);
    };
    ColumnModel2.prototype.addAutoGroupToGridColumns = function() {
      if (missing(this.groupAutoColumns)) {
        this.destroyOldColumns(this.groupAutoColsBalancedTree);
        this.groupAutoColsBalancedTree = null;
        return;
      }
      this.gridColumns = this.groupAutoColumns ? this.groupAutoColumns.concat(this.gridColumns) : this.gridColumns;
      var newAutoColsTree = this.columnFactory.createForAutoGroups(this.groupAutoColumns, this.gridBalancedTree);
      this.destroyOldColumns(this.groupAutoColsBalancedTree, newAutoColsTree);
      this.groupAutoColsBalancedTree = newAutoColsTree;
      this.gridBalancedTree = newAutoColsTree.concat(this.gridBalancedTree);
    };
    ColumnModel2.prototype.clearDisplayedAndViewportColumns = function() {
      this.viewportRowLeft = {};
      this.viewportRowRight = {};
      this.viewportRowCenter = {};
      this.displayedColumnsLeft = [];
      this.displayedColumnsRight = [];
      this.displayedColumnsCenter = [];
      this.displayedColumns = [];
      this.ariaOrderColumns = [];
      this.viewportColumns = [];
      this.headerViewportColumns = [];
      this.viewportColumnsHash = "";
    };
    ColumnModel2.prototype.updateGroupsAndDisplayedColumns = function(source) {
      this.updateOpenClosedVisibilityInColumnGroups();
      this.deriveDisplayedColumns(source);
      this.refreshFlexedColumns();
      this.extractViewport();
      this.updateBodyWidths();
      var event = {
        type: Events.EVENT_DISPLAYED_COLUMNS_CHANGED
      };
      this.eventService.dispatchEvent(event);
    };
    ColumnModel2.prototype.deriveDisplayedColumns = function(source) {
      this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeLeft, this.displayedColumnsLeft);
      this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeCentre, this.displayedColumnsCenter);
      this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeRight, this.displayedColumnsRight);
      this.joinColumnsAriaOrder();
      this.joinDisplayedColumns();
      this.setLeftValues(source);
      this.displayedAutoHeightCols = this.displayedColumns.filter(function(col) {
        return col.isAutoHeight();
      });
    };
    ColumnModel2.prototype.isAutoRowHeightActive = function() {
      return this.autoHeightActive;
    };
    ColumnModel2.prototype.wasAutoRowHeightEverActive = function() {
      return this.autoHeightActiveAtLeastOnce;
    };
    ColumnModel2.prototype.joinColumnsAriaOrder = function() {
      var e_3, _a;
      var allColumns = this.getAllGridColumns();
      var pinnedLeft = [];
      var center = [];
      var pinnedRight = [];
      try {
        for (var allColumns_1 = __values$a(allColumns), allColumns_1_1 = allColumns_1.next(); !allColumns_1_1.done; allColumns_1_1 = allColumns_1.next()) {
          var col = allColumns_1_1.value;
          var pinned = col.getPinned();
          if (!pinned) {
            center.push(col);
          } else if (pinned === true || pinned === "left") {
            pinnedLeft.push(col);
          } else {
            pinnedRight.push(col);
          }
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (allColumns_1_1 && !allColumns_1_1.done && (_a = allColumns_1.return))
            _a.call(allColumns_1);
        } finally {
          if (e_3)
            throw e_3.error;
        }
      }
      this.ariaOrderColumns = pinnedLeft.concat(center).concat(pinnedRight);
    };
    ColumnModel2.prototype.joinDisplayedColumns = function() {
      if (this.gridOptionsService.get("enableRtl")) {
        this.displayedColumns = this.displayedColumnsRight.concat(this.displayedColumnsCenter).concat(this.displayedColumnsLeft);
      } else {
        this.displayedColumns = this.displayedColumnsLeft.concat(this.displayedColumnsCenter).concat(this.displayedColumnsRight);
      }
    };
    ColumnModel2.prototype.setLeftValues = function(source) {
      this.setLeftValuesOfColumns(source);
      this.setLeftValuesOfGroups();
    };
    ColumnModel2.prototype.setLeftValuesOfColumns = function(source) {
      var _this = this;
      if (!this.primaryColumns) {
        return;
      }
      var allColumns = this.getPrimaryAndSecondaryAndAutoColumns().slice(0);
      var doingRtl = this.gridOptionsService.get("enableRtl");
      [
        this.displayedColumnsLeft,
        this.displayedColumnsRight,
        this.displayedColumnsCenter
      ].forEach(function(columns) {
        if (doingRtl) {
          var left_1 = _this.getWidthOfColsInList(columns);
          columns.forEach(function(column) {
            left_1 -= column.getActualWidth();
            column.setLeft(left_1, source);
          });
        } else {
          var left_2 = 0;
          columns.forEach(function(column) {
            column.setLeft(left_2, source);
            left_2 += column.getActualWidth();
          });
        }
        removeAllFromUnorderedArray(allColumns, columns);
      });
      allColumns.forEach(function(column) {
        column.setLeft(null, source);
      });
    };
    ColumnModel2.prototype.setLeftValuesOfGroups = function() {
      [
        this.displayedTreeLeft,
        this.displayedTreeRight,
        this.displayedTreeCentre
      ].forEach(function(columns) {
        columns.forEach(function(column) {
          if (column instanceof ColumnGroup) {
            var columnGroup = column;
            columnGroup.checkLeft();
          }
        });
      });
    };
    ColumnModel2.prototype.derivedDisplayedColumnsFromDisplayedTree = function(tree, columns) {
      columns.length = 0;
      this.columnUtils.depthFirstDisplayedColumnTreeSearch(tree, function(child) {
        if (child instanceof Column) {
          columns.push(child);
        }
      });
    };
    ColumnModel2.prototype.extractViewportColumns = function() {
      if (this.suppressColumnVirtualisation) {
        this.viewportColumnsCenter = this.displayedColumnsCenter;
        this.headerViewportColumnsCenter = this.displayedColumnsCenter;
      } else {
        this.viewportColumnsCenter = this.displayedColumnsCenter.filter(this.isColumnInRowViewport.bind(this));
        this.headerViewportColumnsCenter = this.displayedColumnsCenter.filter(this.isColumnInHeaderViewport.bind(this));
      }
      this.viewportColumns = this.viewportColumnsCenter.concat(this.displayedColumnsLeft).concat(this.displayedColumnsRight);
      this.headerViewportColumns = this.headerViewportColumnsCenter.concat(this.displayedColumnsLeft).concat(this.displayedColumnsRight);
    };
    ColumnModel2.prototype.getVirtualHeaderGroupRow = function(type, dept) {
      var result;
      switch (type) {
        case "left":
          result = this.viewportRowLeft[dept];
          break;
        case "right":
          result = this.viewportRowRight[dept];
          break;
        default:
          result = this.viewportRowCenter[dept];
          break;
      }
      if (missing(result)) {
        result = [];
      }
      return result;
    };
    ColumnModel2.prototype.calculateHeaderRows = function() {
      this.viewportRowLeft = {};
      this.viewportRowRight = {};
      this.viewportRowCenter = {};
      var virtualColIds = {};
      this.headerViewportColumns.forEach(function(col) {
        return virtualColIds[col.getId()] = true;
      });
      var testGroup = function(children, result, dept) {
        var returnValue = false;
        for (var i = 0; i < children.length; i++) {
          var child = children[i];
          var addThisItem = false;
          if (child instanceof Column) {
            addThisItem = virtualColIds[child.getId()] === true;
          } else {
            var columnGroup = child;
            var displayedChildren = columnGroup.getDisplayedChildren();
            if (displayedChildren) {
              addThisItem = testGroup(displayedChildren, result, dept + 1);
            }
          }
          if (addThisItem) {
            returnValue = true;
            if (!result[dept]) {
              result[dept] = [];
            }
            result[dept].push(child);
          }
        }
        return returnValue;
      };
      testGroup(this.displayedTreeLeft, this.viewportRowLeft, 0);
      testGroup(this.displayedTreeRight, this.viewportRowRight, 0);
      testGroup(this.displayedTreeCentre, this.viewportRowCenter, 0);
    };
    ColumnModel2.prototype.extractViewport = function() {
      var hashColumn = function(c) {
        return "".concat(c.getId(), "-").concat(c.getPinned() || "normal");
      };
      this.extractViewportColumns();
      var newHash = this.viewportColumns.map(hashColumn).join("#");
      var changed = this.viewportColumnsHash !== newHash;
      if (changed) {
        this.viewportColumnsHash = newHash;
        this.calculateHeaderRows();
      }
      return changed;
    };
    ColumnModel2.prototype.refreshFlexedColumns = function(params) {
      var _a;
      if (params === void 0) {
        params = {};
      }
      var source = params.source ? params.source : "flex";
      if (params.viewportWidth != null) {
        this.flexViewportWidth = params.viewportWidth;
      }
      if (!this.flexViewportWidth) {
        return [];
      }
      var flexAfterDisplayIndex = -1;
      if (params.resizingCols) {
        var allResizingCols = new Set(params.resizingCols);
        var displayedCols = this.displayedColumnsCenter;
        for (var i = displayedCols.length - 1; i >= 0; i--) {
          if (allResizingCols.has(displayedCols[i])) {
            flexAfterDisplayIndex = i;
            break;
          }
        }
      }
      var knownColumnsWidth = 0;
      var flexingColumns = [];
      var minimumFlexedWidth = 0;
      var totalFlex = 0;
      for (var i = 0; i < this.displayedColumnsCenter.length; i++) {
        var isFlex = this.displayedColumnsCenter[i].getFlex() && i > flexAfterDisplayIndex;
        if (isFlex) {
          flexingColumns.push(this.displayedColumnsCenter[i]);
          totalFlex += this.displayedColumnsCenter[i].getFlex();
          minimumFlexedWidth += (_a = this.displayedColumnsCenter[i].getMinWidth()) !== null && _a !== void 0 ? _a : 0;
        } else {
          knownColumnsWidth += this.displayedColumnsCenter[i].getActualWidth();
        }
      }
      if (!flexingColumns.length) {
        return [];
      }
      var changedColumns = [];
      if (knownColumnsWidth + minimumFlexedWidth > this.flexViewportWidth) {
        flexingColumns.forEach(function(col2) {
          var _a2;
          return col2.setActualWidth((_a2 = col2.getMinWidth()) !== null && _a2 !== void 0 ? _a2 : 0, source);
        });
        changedColumns = flexingColumns;
        flexingColumns = [];
      }
      var flexingColumnSizes = [];
      var spaceForFlexingColumns;
      outer:
        while (true) {
          spaceForFlexingColumns = this.flexViewportWidth - knownColumnsWidth;
          var spacePerFlex = spaceForFlexingColumns / totalFlex;
          for (var i = 0; i < flexingColumns.length; i++) {
            var col = flexingColumns[i];
            var widthByFlexRule = spacePerFlex * col.getFlex();
            var constrainedWidth = 0;
            var minWidth = col.getMinWidth();
            var maxWidth = col.getMaxWidth();
            if (exists(minWidth) && widthByFlexRule < minWidth) {
              constrainedWidth = minWidth;
            } else if (exists(maxWidth) && widthByFlexRule > maxWidth) {
              constrainedWidth = maxWidth;
            }
            if (constrainedWidth) {
              col.setActualWidth(constrainedWidth, source);
              removeFromUnorderedArray(flexingColumns, col);
              totalFlex -= col.getFlex();
              changedColumns.push(col);
              knownColumnsWidth += col.getActualWidth();
              continue outer;
            }
            flexingColumnSizes[i] = Math.round(widthByFlexRule);
          }
          break;
        }
      var remainingSpace = spaceForFlexingColumns;
      flexingColumns.forEach(function(col2, i2) {
        col2.setActualWidth(Math.min(flexingColumnSizes[i2], remainingSpace), source);
        changedColumns.push(col2);
        remainingSpace -= flexingColumnSizes[i2];
      });
      if (!params.skipSetLeft) {
        this.setLeftValues(source);
      }
      if (params.updateBodyWidths) {
        this.updateBodyWidths();
      }
      if (params.fireResizedEvent) {
        this.dispatchColumnResizedEvent(changedColumns, true, source, flexingColumns);
      }
      return flexingColumns;
    };
    ColumnModel2.prototype.sizeColumnsToFit = function(gridWidth, source, silent, params) {
      var _this = this;
      var _a, _b, _c, _d, _e;
      if (source === void 0) {
        source = "sizeColumnsToFit";
      }
      if (this.shouldQueueResizeOperations) {
        this.resizeOperationQueue.push(function() {
          return _this.sizeColumnsToFit(gridWidth, source, silent, params);
        });
        return;
      }
      var limitsMap = {};
      if (params) {
        (_a = params === null || params === void 0 ? void 0 : params.columnLimits) === null || _a === void 0 ? void 0 : _a.forEach(function(_a2) {
          var key = _a2.key, dimensions = __rest(_a2, ["key"]);
          limitsMap[typeof key === "string" ? key : key.getColId()] = dimensions;
        });
      }
      var allDisplayedColumns = this.getAllDisplayedColumns();
      var doColumnsAlreadyFit = gridWidth === this.getWidthOfColsInList(allDisplayedColumns);
      if (gridWidth <= 0 || !allDisplayedColumns.length || doColumnsAlreadyFit) {
        return;
      }
      var colsToSpread = [];
      var colsToNotSpread = [];
      allDisplayedColumns.forEach(function(column2) {
        if (column2.getColDef().suppressSizeToFit === true) {
          colsToNotSpread.push(column2);
        } else {
          colsToSpread.push(column2);
        }
      });
      var colsToDispatchEventFor = colsToSpread.slice(0);
      var finishedResizing = false;
      var moveToNotSpread = function(column2) {
        removeFromArray(colsToSpread, column2);
        colsToNotSpread.push(column2);
      };
      colsToSpread.forEach(function(column2) {
        var _a2, _b2;
        column2.resetActualWidth(source);
        var widthOverride2 = limitsMap === null || limitsMap === void 0 ? void 0 : limitsMap[column2.getId()];
        var minOverride2 = (_a2 = widthOverride2 === null || widthOverride2 === void 0 ? void 0 : widthOverride2.minWidth) !== null && _a2 !== void 0 ? _a2 : params === null || params === void 0 ? void 0 : params.defaultMinWidth;
        var maxOverride2 = (_b2 = widthOverride2 === null || widthOverride2 === void 0 ? void 0 : widthOverride2.maxWidth) !== null && _b2 !== void 0 ? _b2 : params === null || params === void 0 ? void 0 : params.defaultMaxWidth;
        var colWidth = column2.getActualWidth();
        if (typeof minOverride2 === "number" && colWidth < minOverride2) {
          column2.setActualWidth(minOverride2, source, true);
        } else if (typeof maxOverride2 === "number" && colWidth > maxOverride2) {
          column2.setActualWidth(maxOverride2, source, true);
        }
      });
      while (!finishedResizing) {
        finishedResizing = true;
        var availablePixels = gridWidth - this.getWidthOfColsInList(colsToNotSpread);
        if (availablePixels <= 0) {
          colsToSpread.forEach(function(column2) {
            var _a2, _b2;
            var widthOverride2 = (_b2 = (_a2 = limitsMap === null || limitsMap === void 0 ? void 0 : limitsMap[column2.getId()]) === null || _a2 === void 0 ? void 0 : _a2.minWidth) !== null && _b2 !== void 0 ? _b2 : params === null || params === void 0 ? void 0 : params.defaultMinWidth;
            if (typeof widthOverride2 === "number") {
              column2.setActualWidth(widthOverride2, source, true);
              return;
            }
            column2.setMinimum(source);
          });
        } else {
          var scale = availablePixels / this.getWidthOfColsInList(colsToSpread);
          var pixelsForLastCol = availablePixels;
          for (var i = colsToSpread.length - 1; i >= 0; i--) {
            var column = colsToSpread[i];
            var widthOverride = limitsMap === null || limitsMap === void 0 ? void 0 : limitsMap[column.getId()];
            var minOverride = (_b = widthOverride === null || widthOverride === void 0 ? void 0 : widthOverride.minWidth) !== null && _b !== void 0 ? _b : params === null || params === void 0 ? void 0 : params.defaultMinWidth;
            var maxOverride = (_c = widthOverride === null || widthOverride === void 0 ? void 0 : widthOverride.maxWidth) !== null && _c !== void 0 ? _c : params === null || params === void 0 ? void 0 : params.defaultMaxWidth;
            var colMinWidth = (_d = column.getMinWidth()) !== null && _d !== void 0 ? _d : 0;
            var colMaxWidth = (_e = column.getMaxWidth()) !== null && _e !== void 0 ? _e : Number.MAX_VALUE;
            var minWidth = typeof minOverride === "number" && minOverride > colMinWidth ? minOverride : column.getMinWidth();
            var maxWidth = typeof maxOverride === "number" && maxOverride < colMaxWidth ? maxOverride : column.getMaxWidth();
            var newWidth = Math.round(column.getActualWidth() * scale);
            if (exists(minWidth) && newWidth < minWidth) {
              newWidth = minWidth;
              moveToNotSpread(column);
              finishedResizing = false;
            } else if (exists(maxWidth) && newWidth > maxWidth) {
              newWidth = maxWidth;
              moveToNotSpread(column);
              finishedResizing = false;
            } else if (i === 0) {
              newWidth = pixelsForLastCol;
            }
            column.setActualWidth(newWidth, source, true);
            pixelsForLastCol -= newWidth;
          }
        }
      }
      colsToDispatchEventFor.forEach(function(col) {
        col.fireColumnWidthChangedEvent(source);
      });
      this.setLeftValues(source);
      this.updateBodyWidths();
      if (silent) {
        return;
      }
      this.dispatchColumnResizedEvent(colsToDispatchEventFor, true, source);
    };
    ColumnModel2.prototype.buildDisplayedTrees = function(visibleColumns) {
      var leftVisibleColumns = [];
      var rightVisibleColumns = [];
      var centerVisibleColumns = [];
      visibleColumns.forEach(function(column) {
        switch (column.getPinned()) {
          case "left":
            leftVisibleColumns.push(column);
            break;
          case "right":
            rightVisibleColumns.push(column);
            break;
          default:
            centerVisibleColumns.push(column);
            break;
        }
      });
      var groupInstanceIdCreator = new GroupInstanceIdCreator();
      this.displayedTreeLeft = this.displayedGroupCreator.createDisplayedGroups(leftVisibleColumns, groupInstanceIdCreator, "left", this.displayedTreeLeft);
      this.displayedTreeRight = this.displayedGroupCreator.createDisplayedGroups(rightVisibleColumns, groupInstanceIdCreator, "right", this.displayedTreeRight);
      this.displayedTreeCentre = this.displayedGroupCreator.createDisplayedGroups(centerVisibleColumns, groupInstanceIdCreator, null, this.displayedTreeCentre);
      this.updateDisplayedMap();
    };
    ColumnModel2.prototype.updateDisplayedMap = function() {
      var _this = this;
      this.displayedColumnsAndGroupsMap = {};
      var func = function(child) {
        _this.displayedColumnsAndGroupsMap[child.getUniqueId()] = child;
      };
      this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeCentre, func);
      this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeLeft, func);
      this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeRight, func);
    };
    ColumnModel2.prototype.isDisplayed = function(item) {
      var fromMap = this.displayedColumnsAndGroupsMap[item.getUniqueId()];
      return fromMap === item;
    };
    ColumnModel2.prototype.updateOpenClosedVisibilityInColumnGroups = function() {
      var allColumnGroups = this.getAllDisplayedTrees();
      this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, function(child) {
        if (child instanceof ColumnGroup) {
          child.calculateDisplayedColumns();
        }
      });
    };
    ColumnModel2.prototype.getGroupAutoColumns = function() {
      return this.groupAutoColumns;
    };
    ColumnModel2.prototype.createGroupAutoColumnsIfNeeded = function() {
      var forceRecreateAutoGroups = this.forceRecreateAutoGroups;
      this.forceRecreateAutoGroups = false;
      if (!this.autoGroupsNeedBuilding) {
        return false;
      }
      this.autoGroupsNeedBuilding = false;
      var groupFullWidthRow = this.gridOptionsService.isGroupUseEntireRow(this.pivotMode);
      var suppressAutoColumn = this.pivotMode ? this.gridOptionsService.get("pivotSuppressAutoColumn") : this.isGroupSuppressAutoColumn();
      var groupingActive = this.rowGroupColumns.length > 0 || this.gridOptionsService.get("treeData");
      var needAutoColumns = groupingActive && !suppressAutoColumn && !groupFullWidthRow;
      if (needAutoColumns) {
        var newAutoGroupCols = this.autoGroupColService.createAutoGroupColumns(this.rowGroupColumns);
        var autoColsDifferent = !this.autoColsEqual(newAutoGroupCols, this.groupAutoColumns);
        if (autoColsDifferent || forceRecreateAutoGroups) {
          this.groupAutoColumns = newAutoGroupCols;
          return true;
        }
      } else {
        this.groupAutoColumns = null;
      }
      return false;
    };
    ColumnModel2.prototype.isGroupSuppressAutoColumn = function() {
      var groupDisplayType = this.gridOptionsService.get("groupDisplayType");
      var isCustomRowGroups = groupDisplayType === "custom";
      if (isCustomRowGroups) {
        return true;
      }
      var treeDataDisplayType = this.gridOptionsService.get("treeDataDisplayType");
      return treeDataDisplayType === "custom";
    };
    ColumnModel2.prototype.autoColsEqual = function(colsA, colsB) {
      return areEqual(colsA, colsB, function(a, b) {
        return a.getColId() === b.getColId();
      });
    };
    ColumnModel2.prototype.getWidthOfColsInList = function(columnList) {
      return columnList.reduce(function(width, col) {
        return width + col.getActualWidth();
      }, 0);
    };
    ColumnModel2.prototype.getFirstDisplayedColumn = function() {
      var isRtl = this.gridOptionsService.get("enableRtl");
      var queryOrder = [
        "getDisplayedLeftColumns",
        "getDisplayedCenterColumns",
        "getDisplayedRightColumns"
      ];
      if (isRtl) {
        queryOrder.reverse();
      }
      for (var i = 0; i < queryOrder.length; i++) {
        var container = this[queryOrder[i]]();
        if (container.length) {
          return isRtl ? last(container) : container[0];
        }
      }
      return null;
    };
    ColumnModel2.prototype.setColumnHeaderHeight = function(col, height) {
      var changed = col.setAutoHeaderHeight(height);
      if (changed) {
        var event_6 = {
          type: Events.EVENT_COLUMN_HEADER_HEIGHT_CHANGED,
          column: col,
          columns: [col],
          source: "autosizeColumnHeaderHeight"
        };
        this.eventService.dispatchEvent(event_6);
      }
    };
    ColumnModel2.prototype.getColumnGroupHeaderRowHeight = function() {
      if (this.isPivotMode()) {
        return this.getPivotGroupHeaderHeight();
      }
      return this.getGroupHeaderHeight();
    };
    ColumnModel2.prototype.getColumnHeaderRowHeight = function() {
      var defaultHeight = this.isPivotMode() ? this.getPivotHeaderHeight() : this.getHeaderHeight();
      var displayedHeights = this.getAllDisplayedColumns().filter(function(col) {
        return col.isAutoHeaderHeight();
      }).map(function(col) {
        return col.getAutoHeaderHeight() || 0;
      });
      return Math.max.apply(Math, __spreadArray$r([defaultHeight], __read$z(displayedHeights), false));
    };
    ColumnModel2.prototype.getHeaderHeight = function() {
      var _a;
      return (_a = this.gridOptionsService.get("headerHeight")) !== null && _a !== void 0 ? _a : this.environment.getFromTheme(25, "headerHeight");
    };
    ColumnModel2.prototype.getFloatingFiltersHeight = function() {
      var _a;
      return (_a = this.gridOptionsService.get("floatingFiltersHeight")) !== null && _a !== void 0 ? _a : this.getHeaderHeight();
    };
    ColumnModel2.prototype.getGroupHeaderHeight = function() {
      var _a;
      return (_a = this.gridOptionsService.get("groupHeaderHeight")) !== null && _a !== void 0 ? _a : this.getHeaderHeight();
    };
    ColumnModel2.prototype.getPivotHeaderHeight = function() {
      var _a;
      return (_a = this.gridOptionsService.get("pivotHeaderHeight")) !== null && _a !== void 0 ? _a : this.getHeaderHeight();
    };
    ColumnModel2.prototype.getPivotGroupHeaderHeight = function() {
      var _a;
      return (_a = this.gridOptionsService.get("pivotGroupHeaderHeight")) !== null && _a !== void 0 ? _a : this.getGroupHeaderHeight();
    };
    ColumnModel2.prototype.queueResizeOperations = function() {
      this.shouldQueueResizeOperations = true;
    };
    ColumnModel2.prototype.processResizeOperations = function() {
      this.shouldQueueResizeOperations = false;
      this.resizeOperationQueue.forEach(function(resizeOperation) {
        return resizeOperation();
      });
      this.resizeOperationQueue = [];
    };
    ColumnModel2.prototype.resetColumnDefIntoColumn = function(column, source) {
      var userColDef = column.getUserProvidedColDef();
      if (!userColDef) {
        return false;
      }
      var newColDef = this.columnFactory.addColumnDefaultAndTypes(userColDef, column.getColId());
      column.setColDef(newColDef, userColDef, source);
      return true;
    };
    ColumnModel2.prototype.isColumnGroupingLocked = function(column) {
      var groupLockGroupColumns = this.gridOptionsService.get("groupLockGroupColumns");
      if (!column.isRowGroupActive() || groupLockGroupColumns === 0) {
        return false;
      }
      if (groupLockGroupColumns === -1) {
        return true;
      }
      var colIndex = this.rowGroupColumns.findIndex(function(groupCol) {
        return groupCol.getColId() === column.getColId();
      });
      return groupLockGroupColumns > colIndex;
    };
    ColumnModel2.prototype.generateColumnStateForRowGroupAndPivotIndexes = function(updatedRowGroupColumnState, updatedPivotColumnState) {
      var _this = this;
      var existingColumnStateUpdates = {};
      var orderColumns = function(updatedColumnState, colList, enableProp, initialEnableProp, indexProp, initialIndexProp) {
        if (!colList.length || !_this.primaryColumns) {
          return [];
        }
        var updatedColIdArray = Object.keys(updatedColumnState);
        var updatedColIds = new Set(updatedColIdArray);
        var newColIds = new Set(updatedColIdArray);
        var allColIds = new Set(colList.map(function(column) {
          var colId2 = column.getColId();
          newColIds.delete(colId2);
          return colId2;
        }).concat(updatedColIdArray));
        var colIdsInOriginalOrder = [];
        var originalOrderMap = {};
        var orderIndex = 0;
        for (var i = 0; i < _this.primaryColumns.length; i++) {
          var colId = _this.primaryColumns[i].getColId();
          if (allColIds.has(colId)) {
            colIdsInOriginalOrder.push(colId);
            originalOrderMap[colId] = orderIndex++;
          }
        }
        var index = 1e3;
        var hasAddedNewCols = false;
        var lastIndex = 0;
        var processPrecedingNewCols = function(colId2) {
          var originalOrderIndex = originalOrderMap[colId2];
          for (var i2 = lastIndex; i2 < originalOrderIndex; i2++) {
            var newColId = colIdsInOriginalOrder[i2];
            if (newColIds.has(newColId)) {
              updatedColumnState[newColId][indexProp] = index++;
              newColIds.delete(newColId);
            }
          }
          lastIndex = originalOrderIndex;
        };
        colList.forEach(function(column) {
          var colId2 = column.getColId();
          if (updatedColIds.has(colId2)) {
            processPrecedingNewCols(colId2);
            updatedColumnState[colId2][indexProp] = index++;
          } else {
            var colDef = column.getColDef();
            var missingIndex = colDef[indexProp] === null || colDef[indexProp] === void 0 && colDef[initialIndexProp] == null;
            if (missingIndex) {
              if (!hasAddedNewCols) {
                var propEnabled = colDef[enableProp] || colDef[enableProp] === void 0 && colDef[initialEnableProp];
                if (propEnabled) {
                  processPrecedingNewCols(colId2);
                } else {
                  newColIds.forEach(function(newColId) {
                    updatedColumnState[newColId][indexProp] = index + originalOrderMap[newColId];
                  });
                  index += colIdsInOriginalOrder.length;
                  hasAddedNewCols = true;
                }
              }
              if (!existingColumnStateUpdates[colId2]) {
                existingColumnStateUpdates[colId2] = { colId: colId2 };
              }
              existingColumnStateUpdates[colId2][indexProp] = index++;
            }
          }
        });
      };
      orderColumns(updatedRowGroupColumnState, this.rowGroupColumns, "rowGroup", "initialRowGroup", "rowGroupIndex", "initialRowGroupIndex");
      orderColumns(updatedPivotColumnState, this.pivotColumns, "pivot", "initialPivot", "pivotIndex", "initialPivotIndex");
      return Object.values(existingColumnStateUpdates);
    };
    ColumnModel2.prototype.onColumnsReady = function() {
      var _this = this;
      var autoSizeStrategy = this.gridOptionsService.get("autoSizeStrategy");
      if (!autoSizeStrategy) {
        return;
      }
      var type = autoSizeStrategy.type;
      setTimeout(function() {
        if (type === "fitGridWidth") {
          var propColumnLimits = autoSizeStrategy.columnLimits, defaultMinWidth = autoSizeStrategy.defaultMinWidth, defaultMaxWidth = autoSizeStrategy.defaultMaxWidth;
          var columnLimits = propColumnLimits === null || propColumnLimits === void 0 ? void 0 : propColumnLimits.map(function(_a) {
            var key = _a.colId, minWidth = _a.minWidth, maxWidth = _a.maxWidth;
            return {
              key,
              minWidth,
              maxWidth
            };
          });
          _this.ctrlsService.getGridBodyCtrl().sizeColumnsToFit({
            defaultMinWidth,
            defaultMaxWidth,
            columnLimits
          });
        } else if (type === "fitProvidedWidth") {
          _this.sizeColumnsToFit(autoSizeStrategy.width, "sizeColumnsToFit");
        }
      });
    };
    ColumnModel2.prototype.onFirstDataRendered = function() {
      var _this = this;
      var autoSizeStrategy = this.gridOptionsService.get("autoSizeStrategy");
      if ((autoSizeStrategy === null || autoSizeStrategy === void 0 ? void 0 : autoSizeStrategy.type) !== "fitCellContents") {
        return;
      }
      var columns = autoSizeStrategy.colIds, skipHeader = autoSizeStrategy.skipHeader;
      setTimeout(function() {
        if (columns) {
          _this.autoSizeColumns({
            columns,
            skipHeader,
            source: "autosizeColumns"
          });
        } else {
          _this.autoSizeAllColumns(skipHeader, "autosizeColumns");
        }
      });
    };
    __decorate$2I([
      Autowired("expressionService")
    ], ColumnModel2.prototype, "expressionService", void 0);
    __decorate$2I([
      Autowired("columnFactory")
    ], ColumnModel2.prototype, "columnFactory", void 0);
    __decorate$2I([
      Autowired("displayedGroupCreator")
    ], ColumnModel2.prototype, "displayedGroupCreator", void 0);
    __decorate$2I([
      Autowired("ctrlsService")
    ], ColumnModel2.prototype, "ctrlsService", void 0);
    __decorate$2I([
      Autowired("autoWidthCalculator")
    ], ColumnModel2.prototype, "autoWidthCalculator", void 0);
    __decorate$2I([
      Autowired("columnUtils")
    ], ColumnModel2.prototype, "columnUtils", void 0);
    __decorate$2I([
      Autowired("columnAnimationService")
    ], ColumnModel2.prototype, "columnAnimationService", void 0);
    __decorate$2I([
      Autowired("autoGroupColService")
    ], ColumnModel2.prototype, "autoGroupColService", void 0);
    __decorate$2I([
      Optional("aggFuncService")
    ], ColumnModel2.prototype, "aggFuncService", void 0);
    __decorate$2I([
      Optional("valueCache")
    ], ColumnModel2.prototype, "valueCache", void 0);
    __decorate$2I([
      Optional("animationFrameService")
    ], ColumnModel2.prototype, "animationFrameService", void 0);
    __decorate$2I([
      Autowired("sortController")
    ], ColumnModel2.prototype, "sortController", void 0);
    __decorate$2I([
      Autowired("columnDefFactory")
    ], ColumnModel2.prototype, "columnDefFactory", void 0);
    __decorate$2I([
      PostConstruct
    ], ColumnModel2.prototype, "init", null);
    __decorate$2I([
      PreDestroy
    ], ColumnModel2.prototype, "destroyColumns", null);
    __decorate$2I([
      __param$6(0, Qualifier("loggerFactory"))
    ], ColumnModel2.prototype, "setBeans", null);
    ColumnModel2 = __decorate$2I([
      Bean("columnModel")
    ], ColumnModel2);
    return ColumnModel2;
  }(BeanStub)
);
var __extends$3a = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2H = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ColumnUtils = (
  /** @class */
  function(_super) {
    __extends$3a(ColumnUtils2, _super);
    function ColumnUtils2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ColumnUtils2.prototype.calculateColMinWidth = function(colDef) {
      return colDef.minWidth != null ? colDef.minWidth : this.environment.getMinColWidth();
    };
    ColumnUtils2.prototype.calculateColMaxWidth = function(colDef) {
      return colDef.maxWidth != null ? colDef.maxWidth : Number.MAX_SAFE_INTEGER;
    };
    ColumnUtils2.prototype.calculateColInitialWidth = function(colDef) {
      var minColWidth = this.calculateColMinWidth(colDef);
      var maxColWidth = this.calculateColMaxWidth(colDef);
      var width;
      var colDefWidth = attrToNumber(colDef.width);
      var colDefInitialWidth = attrToNumber(colDef.initialWidth);
      if (colDefWidth != null) {
        width = colDefWidth;
      } else if (colDefInitialWidth != null) {
        width = colDefInitialWidth;
      } else {
        width = 200;
      }
      return Math.max(Math.min(width, maxColWidth), minColWidth);
    };
    ColumnUtils2.prototype.getOriginalPathForColumn = function(column, originalBalancedTree) {
      var result = [];
      var found = false;
      var recursePath = function(balancedColumnTree, dept) {
        for (var i = 0; i < balancedColumnTree.length; i++) {
          if (found) {
            return;
          }
          var node = balancedColumnTree[i];
          if (node instanceof ProvidedColumnGroup) {
            var nextNode = node;
            recursePath(nextNode.getChildren(), dept + 1);
            result[dept] = node;
          } else if (node === column) {
            found = true;
          }
        }
      };
      recursePath(originalBalancedTree, 0);
      return found ? result : null;
    };
    ColumnUtils2.prototype.depthFirstOriginalTreeSearch = function(parent, tree, callback) {
      var _this = this;
      if (!tree) {
        return;
      }
      tree.forEach(function(child) {
        if (child instanceof ProvidedColumnGroup) {
          _this.depthFirstOriginalTreeSearch(child, child.getChildren(), callback);
        }
        callback(child, parent);
      });
    };
    ColumnUtils2.prototype.depthFirstAllColumnTreeSearch = function(tree, callback) {
      var _this = this;
      if (!tree) {
        return;
      }
      tree.forEach(function(child) {
        if (child instanceof ColumnGroup) {
          _this.depthFirstAllColumnTreeSearch(child.getChildren(), callback);
        }
        callback(child);
      });
    };
    ColumnUtils2.prototype.depthFirstDisplayedColumnTreeSearch = function(tree, callback) {
      var _this = this;
      if (!tree) {
        return;
      }
      tree.forEach(function(child) {
        if (child instanceof ColumnGroup) {
          _this.depthFirstDisplayedColumnTreeSearch(child.getDisplayedChildren(), callback);
        }
        callback(child);
      });
    };
    ColumnUtils2 = __decorate$2H([
      Bean("columnUtils")
    ], ColumnUtils2);
    return ColumnUtils2;
  }(BeanStub)
);
var __extends$39 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2G = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DisplayedGroupCreator = (
  /** @class */
  function(_super) {
    __extends$39(DisplayedGroupCreator2, _super);
    function DisplayedGroupCreator2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    DisplayedGroupCreator2.prototype.createDisplayedGroups = function(sortedVisibleColumns, groupInstanceIdCreator, pinned, oldDisplayedGroups) {
      var _this = this;
      var oldColumnsMapped = this.mapOldGroupsById(oldDisplayedGroups);
      var topLevelResultCols = [];
      var groupsOrColsAtCurrentLevel = sortedVisibleColumns;
      var _loop_1 = function() {
        var currentlyIterating = groupsOrColsAtCurrentLevel;
        groupsOrColsAtCurrentLevel = [];
        var lastGroupedColIdx = 0;
        var createGroupToIndex = function(to) {
          var from = lastGroupedColIdx;
          lastGroupedColIdx = to;
          var previousNode2 = currentlyIterating[from];
          var previousNodeProvided2 = previousNode2 instanceof ColumnGroup ? previousNode2.getProvidedColumnGroup() : previousNode2;
          var previousNodeParent2 = previousNodeProvided2.getOriginalParent();
          if (previousNodeParent2 == null) {
            for (var i2 = from; i2 < to; i2++) {
              topLevelResultCols.push(currentlyIterating[i2]);
            }
            return;
          }
          var newGroup = _this.createColumnGroup(previousNodeParent2, groupInstanceIdCreator, oldColumnsMapped, pinned);
          for (var i2 = from; i2 < to; i2++) {
            newGroup.addChild(currentlyIterating[i2]);
          }
          groupsOrColsAtCurrentLevel.push(newGroup);
        };
        for (var i = 1; i < currentlyIterating.length; i++) {
          var thisNode = currentlyIterating[i];
          var thisNodeProvided = thisNode instanceof ColumnGroup ? thisNode.getProvidedColumnGroup() : thisNode;
          var thisNodeParent = thisNodeProvided.getOriginalParent();
          var previousNode = currentlyIterating[lastGroupedColIdx];
          var previousNodeProvided = previousNode instanceof ColumnGroup ? previousNode.getProvidedColumnGroup() : previousNode;
          var previousNodeParent = previousNodeProvided.getOriginalParent();
          if (thisNodeParent !== previousNodeParent) {
            createGroupToIndex(i);
          }
        }
        if (lastGroupedColIdx < currentlyIterating.length) {
          createGroupToIndex(currentlyIterating.length);
        }
      };
      while (groupsOrColsAtCurrentLevel.length) {
        _loop_1();
      }
      this.setupParentsIntoColumns(topLevelResultCols, null);
      return topLevelResultCols;
    };
    DisplayedGroupCreator2.prototype.createColumnGroup = function(providedGroup, groupInstanceIdCreator, oldColumnsMapped, pinned) {
      var groupId = providedGroup.getGroupId();
      var instanceId = groupInstanceIdCreator.getInstanceIdForKey(groupId);
      var uniqueId = ColumnGroup.createUniqueId(groupId, instanceId);
      var columnGroup = oldColumnsMapped[uniqueId];
      if (columnGroup && columnGroup.getProvidedColumnGroup() !== providedGroup) {
        columnGroup = null;
      }
      if (exists(columnGroup)) {
        columnGroup.reset();
      } else {
        columnGroup = new ColumnGroup(providedGroup, groupId, instanceId, pinned);
        this.context.createBean(columnGroup);
      }
      return columnGroup;
    };
    DisplayedGroupCreator2.prototype.mapOldGroupsById = function(displayedGroups) {
      var result = {};
      var recursive = function(columnsOrGroups) {
        columnsOrGroups.forEach(function(columnOrGroup) {
          if (columnOrGroup instanceof ColumnGroup) {
            var columnGroup = columnOrGroup;
            result[columnOrGroup.getUniqueId()] = columnGroup;
            recursive(columnGroup.getChildren());
          }
        });
      };
      if (displayedGroups) {
        recursive(displayedGroups);
      }
      return result;
    };
    DisplayedGroupCreator2.prototype.setupParentsIntoColumns = function(columnsOrGroups, parent) {
      var _this = this;
      columnsOrGroups.forEach(function(columnsOrGroup) {
        columnsOrGroup.setParent(parent);
        if (columnsOrGroup instanceof ColumnGroup) {
          var columnGroup = columnsOrGroup;
          _this.setupParentsIntoColumns(columnGroup.getChildren(), columnGroup);
        }
      });
    };
    DisplayedGroupCreator2 = __decorate$2G([
      Bean("displayedGroupCreator")
    ], DisplayedGroupCreator2);
    return DisplayedGroupCreator2;
  }(BeanStub)
);
var __read$y = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$q = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var INITIAL_GRID_OPTION_KEYS = {
  enableBrowserTooltips: true,
  tooltipTrigger: true,
  tooltipMouseTrack: true,
  tooltipInteraction: true,
  defaultColGroupDef: true,
  suppressAutoSize: true,
  skipHeaderOnAutoSize: true,
  autoSizeStrategy: true,
  components: true,
  stopEditingWhenCellsLoseFocus: true,
  undoRedoCellEditing: true,
  undoRedoCellEditingLimit: true,
  excelStyles: true,
  cacheQuickFilter: true,
  excludeHiddenColumnsFromQuickFilter: true,
  advancedFilterModel: true,
  customChartThemes: true,
  chartThemeOverrides: true,
  enableChartToolPanelsButton: true,
  suppressChartToolPanelsButton: true,
  chartToolPanelsDef: true,
  loadingCellRendererSelector: true,
  localeText: true,
  keepDetailRows: true,
  keepDetailRowsCount: true,
  detailRowHeight: true,
  detailRowAutoHeight: true,
  tabIndex: true,
  valueCache: true,
  valueCacheNeverExpires: true,
  enableCellExpressions: true,
  suppressParentsInRowNodes: true,
  suppressTouch: true,
  suppressAsyncEvents: true,
  suppressBrowserResizeObserver: true,
  suppressPropertyNamesCheck: true,
  debug: true,
  loadingOverlayComponent: true,
  suppressLoadingOverlay: true,
  noRowsOverlayComponent: true,
  paginationPageSizeSelector: true,
  paginateChildRows: true,
  pivotPanelShow: true,
  pivotSuppressAutoColumn: true,
  suppressExpandablePivotGroups: true,
  aggFuncs: true,
  suppressAggFuncInHeader: true,
  suppressAggAtRootLevel: true,
  removePivotHeaderRowWhenSingleValueColumn: true,
  allowShowChangeAfterFilter: true,
  ensureDomOrder: true,
  enableRtl: true,
  suppressColumnVirtualisation: true,
  suppressMaxRenderedRowRestriction: true,
  suppressRowVirtualisation: true,
  rowDragText: true,
  suppressGroupMaintainValueType: true,
  groupLockGroupColumns: true,
  rowGroupPanelSuppressSort: true,
  suppressGroupRowsSticky: true,
  rowModelType: true,
  cacheOverflowSize: true,
  infiniteInitialRowCount: true,
  serverSideInitialRowCount: true,
  suppressServerSideInfiniteScroll: true,
  maxBlocksInCache: true,
  maxConcurrentDatasourceRequests: true,
  blockLoadDebounceMillis: true,
  serverSideOnlyRefreshFilteredGroups: true,
  serverSidePivotResultFieldSeparator: true,
  viewportRowModelPageSize: true,
  viewportRowModelBufferSize: true,
  debounceVerticalScrollbar: true,
  suppressAnimationFrame: true,
  suppressPreventDefaultOnMouseWheel: true,
  scrollbarWidth: true,
  icons: true,
  suppressRowTransform: true,
  gridId: true,
  functionsPassive: true,
  enableGroupEdit: true,
  initialState: true,
  processUnpinnedColumns: true,
  createChartContainer: true,
  getLocaleText: true,
  getRowId: true,
  reactiveCustomComponents: true
};
var PropertyKeys = (
  /** @class */
  function() {
    function PropertyKeys2() {
    }
    PropertyKeys2.STRING_PROPERTIES = [
      "rowSelection",
      "overlayLoadingTemplate",
      "overlayNoRowsTemplate",
      "gridId",
      "quickFilterText",
      "rowModelType",
      "editType",
      "domLayout",
      "clipboardDelimiter",
      "rowGroupPanelShow",
      "multiSortKey",
      "pivotColumnGroupTotals",
      "pivotRowTotals",
      "pivotPanelShow",
      "fillHandleDirection",
      "groupDisplayType",
      "treeDataDisplayType",
      "colResizeDefault",
      "tooltipTrigger",
      "serverSidePivotResultFieldSeparator"
    ];
    PropertyKeys2.OBJECT_PROPERTIES = [
      "components",
      "rowStyle",
      "context",
      "autoGroupColumnDef",
      "localeText",
      "icons",
      "datasource",
      "serverSideDatasource",
      "viewportDatasource",
      "groupRowRendererParams",
      "aggFuncs",
      "fullWidthCellRendererParams",
      "defaultColGroupDef",
      "defaultColDef",
      "defaultCsvExportParams",
      "defaultExcelExportParams",
      "columnTypes",
      "rowClassRules",
      "detailCellRendererParams",
      "loadingCellRendererParams",
      "loadingOverlayComponentParams",
      "noRowsOverlayComponentParams",
      "popupParent",
      "statusBar",
      "sideBar",
      "chartThemeOverrides",
      "customChartThemes",
      "chartToolPanelsDef",
      "dataTypeDefinitions",
      "advancedFilterModel",
      "advancedFilterParent",
      "advancedFilterBuilderParams",
      "initialState",
      "autoSizeStrategy"
    ];
    PropertyKeys2.ARRAY_PROPERTIES = [
      "sortingOrder",
      "alignedGrids",
      "rowData",
      "columnDefs",
      "excelStyles",
      "pinnedTopRowData",
      "pinnedBottomRowData",
      "chartThemes",
      "rowClass",
      "paginationPageSizeSelector"
    ];
    PropertyKeys2.NUMBER_PROPERTIES = [
      "rowHeight",
      "detailRowHeight",
      "rowBuffer",
      "headerHeight",
      "groupHeaderHeight",
      "groupLockGroupColumns",
      "floatingFiltersHeight",
      "pivotHeaderHeight",
      "pivotGroupHeaderHeight",
      "groupDefaultExpanded",
      "pivotDefaultExpanded",
      "viewportRowModelPageSize",
      "viewportRowModelBufferSize",
      "autoSizePadding",
      "maxBlocksInCache",
      "maxConcurrentDatasourceRequests",
      "tooltipShowDelay",
      "tooltipHideDelay",
      "cacheOverflowSize",
      "paginationPageSize",
      "cacheBlockSize",
      "infiniteInitialRowCount",
      "serverSideInitialRowCount",
      "scrollbarWidth",
      "asyncTransactionWaitMillis",
      "blockLoadDebounceMillis",
      "keepDetailRowsCount",
      "undoRedoCellEditingLimit",
      "cellFlashDelay",
      "cellFadeDelay",
      "tabIndex"
    ];
    PropertyKeys2.BOOLEAN_PROPERTIES = [
      "suppressMakeColumnVisibleAfterUnGroup",
      "suppressRowClickSelection",
      "suppressCellFocus",
      "suppressHorizontalScroll",
      "groupSelectsChildren",
      "alwaysShowHorizontalScroll",
      "alwaysShowVerticalScroll",
      "debug",
      "enableBrowserTooltips",
      "enableCellExpressions",
      "groupIncludeTotalFooter",
      "groupSuppressBlankHeader",
      "suppressMenuHide",
      "suppressRowDeselection",
      "unSortIcon",
      "suppressMultiSort",
      "alwaysMultiSort",
      "singleClickEdit",
      "suppressLoadingOverlay",
      "suppressNoRowsOverlay",
      "suppressAutoSize",
      "skipHeaderOnAutoSize",
      "suppressParentsInRowNodes",
      "suppressColumnMoveAnimation",
      "suppressMovableColumns",
      "suppressFieldDotNotation",
      "enableRangeSelection",
      "enableRangeHandle",
      "enableFillHandle",
      "suppressClearOnFillReduction",
      "deltaSort",
      "suppressTouch",
      "suppressAsyncEvents",
      "allowContextMenuWithControlKey",
      "suppressContextMenu",
      "enableCellChangeFlash",
      "suppressDragLeaveHidesColumns",
      "suppressRowGroupHidesColumns",
      "suppressMiddleClickScrolls",
      "suppressPreventDefaultOnMouseWheel",
      "suppressCopyRowsToClipboard",
      "copyHeadersToClipboard",
      "copyGroupHeadersToClipboard",
      "pivotMode",
      "suppressAggFuncInHeader",
      "suppressColumnVirtualisation",
      "alwaysAggregateAtRootLevel",
      "suppressAggAtRootLevel",
      "suppressFocusAfterRefresh",
      "functionsPassive",
      "functionsReadOnly",
      "animateRows",
      "groupSelectsFiltered",
      "groupRemoveSingleChildren",
      "groupRemoveLowestSingleChildren",
      "enableRtl",
      "suppressClickEdit",
      "rowDragEntireRow",
      "rowDragManaged",
      "suppressRowDrag",
      "suppressMoveWhenRowDragging",
      "rowDragMultiRow",
      "enableGroupEdit",
      "embedFullWidthRows",
      "suppressPaginationPanel",
      "groupHideOpenParents",
      "groupAllowUnbalanced",
      "pagination",
      "paginationAutoPageSize",
      "suppressScrollOnNewData",
      "suppressScrollWhenPopupsAreOpen",
      "purgeClosedRowNodes",
      "cacheQuickFilter",
      "includeHiddenColumnsInQuickFilter",
      "excludeHiddenColumnsFromQuickFilter",
      "ensureDomOrder",
      "accentedSort",
      "suppressChangeDetection",
      "valueCache",
      "valueCacheNeverExpires",
      "aggregateOnlyChangedColumns",
      "suppressAnimationFrame",
      "suppressExcelExport",
      "suppressCsvExport",
      "includeHiddenColumnsInAdvancedFilter",
      "suppressMultiRangeSelection",
      "enterMovesDown",
      "enterMovesDownAfterEdit",
      "enterNavigatesVerticallyAfterEdit",
      "enterNavigatesVertically",
      "suppressPropertyNamesCheck",
      "rowMultiSelectWithClick",
      "suppressRowHoverHighlight",
      "suppressRowTransform",
      "suppressClipboardPaste",
      "suppressLastEmptyLineOnPaste",
      "enableCharts",
      "enableChartToolPanelsButton",
      "suppressChartToolPanelsButton",
      "suppressMaintainUnsortedOrder",
      "enableCellTextSelection",
      "suppressBrowserResizeObserver",
      "suppressMaxRenderedRowRestriction",
      "excludeChildrenWhenTreeDataFiltering",
      "tooltipMouseTrack",
      "tooltipInteraction",
      "keepDetailRows",
      "paginateChildRows",
      "preventDefaultOnContextMenu",
      "undoRedoCellEditing",
      "allowDragFromColumnsToolPanel",
      "pivotSuppressAutoColumn",
      "suppressExpandablePivotGroups",
      "debounceVerticalScrollbar",
      "detailRowAutoHeight",
      "serverSideFilterAllLevels",
      "serverSideSortAllLevels",
      "serverSideOnlyRefreshFilteredGroups",
      "serverSideSortOnServer",
      "serverSideFilterOnServer",
      "suppressAggFilteredOnly",
      "showOpenedGroup",
      "suppressClipboardApi",
      "suppressModelUpdateAfterUpdateTransaction",
      "stopEditingWhenCellsLoseFocus",
      "maintainColumnOrder",
      "groupMaintainOrder",
      "columnHoverHighlight",
      "readOnlyEdit",
      "suppressRowVirtualisation",
      "enableCellEditingOnBackspace",
      "resetRowDataOnUpdate",
      "removePivotHeaderRowWhenSingleValueColumn",
      "suppressCopySingleCellRanges",
      "suppressGroupRowsSticky",
      "suppressCutToClipboard",
      "suppressServerSideInfiniteScroll",
      "rowGroupPanelSuppressSort",
      "allowShowChangeAfterFilter",
      "enableAdvancedFilter",
      "masterDetail",
      "treeData",
      "suppressGroupMaintainValueType",
      "reactiveCustomComponents"
    ];
    PropertyKeys2.FUNCTIONAL_PROPERTIES = [
      "doesExternalFilterPass",
      "processPivotResultColDef",
      "processPivotResultColGroupDef",
      "getBusinessKeyForNode",
      "isRowSelectable",
      "rowDragText",
      "groupRowRenderer",
      "fullWidthCellRenderer",
      "loadingCellRenderer",
      "loadingOverlayComponent",
      "noRowsOverlayComponent",
      "detailCellRenderer",
      "quickFilterParser",
      "quickFilterMatcher"
    ];
    PropertyKeys2.CALLBACK_PROPERTIES = [
      "getLocaleText",
      "isExternalFilterPresent",
      "getRowHeight",
      "getRowClass",
      "getRowStyle",
      "getContextMenuItems",
      "getMainMenuItems",
      "processRowPostCreate",
      "processCellForClipboard",
      "getGroupRowAgg",
      "isFullWidthRow",
      "sendToClipboard",
      "navigateToNextHeader",
      "tabToNextHeader",
      "navigateToNextCell",
      "tabToNextCell",
      "processCellFromClipboard",
      "getDocument",
      "postProcessPopup",
      "getChildCount",
      "getDataPath",
      "isRowMaster",
      "postSortRows",
      "processHeaderForClipboard",
      "processUnpinnedColumns",
      "processGroupHeaderForClipboard",
      "paginationNumberFormatter",
      "processDataFromClipboard",
      "getServerSideGroupKey",
      "isServerSideGroup",
      "createChartContainer",
      "getChartToolbarItems",
      "fillOperation",
      "isApplyServerSideTransaction",
      "getServerSideGroupLevelParams",
      "isServerSideGroupOpenByDefault",
      "isGroupOpenByDefault",
      "initialGroupOrderComparator",
      "groupIncludeFooter",
      "loadingCellRendererSelector",
      "getRowId",
      "groupAggFiltering"
    ];
    PropertyKeys2.FUNCTION_PROPERTIES = __spreadArray$q(__spreadArray$q([], __read$y(PropertyKeys2.FUNCTIONAL_PROPERTIES), false), __read$y(PropertyKeys2.CALLBACK_PROPERTIES), false);
    PropertyKeys2.ALL_PROPERTIES = __spreadArray$q(__spreadArray$q(__spreadArray$q(__spreadArray$q(__spreadArray$q(__spreadArray$q([], __read$y(PropertyKeys2.ARRAY_PROPERTIES), false), __read$y(PropertyKeys2.OBJECT_PROPERTIES), false), __read$y(PropertyKeys2.STRING_PROPERTIES), false), __read$y(PropertyKeys2.NUMBER_PROPERTIES), false), __read$y(PropertyKeys2.FUNCTION_PROPERTIES), false), __read$y(PropertyKeys2.BOOLEAN_PROPERTIES), false);
    return PropertyKeys2;
  }()
);
var __assign$p = function() {
  __assign$p = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$p.apply(this, arguments);
};
var __read$x = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$p = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var ComponentUtil = (
  /** @class */
  function() {
    function ComponentUtil2() {
    }
    ComponentUtil2.getCallbackForEvent = function(eventName) {
      if (!eventName || eventName.length < 2) {
        return eventName;
      }
      return "on" + eventName[0].toUpperCase() + eventName.substring(1);
    };
    ComponentUtil2.getGridOptionKeys = function() {
      return this.ALL_PROPERTIES_AND_CALLBACKS;
    };
    ComponentUtil2.combineAttributesAndGridOptions = function(gridOptions, component) {
      if (typeof gridOptions !== "object") {
        gridOptions = {};
      }
      var mergedOptions = __assign$p({}, gridOptions);
      var keys2 = ComponentUtil2.getGridOptionKeys();
      keys2.forEach(function(key) {
        var value = component[key];
        if (typeof value !== "undefined" && value !== ComponentUtil2.VUE_OMITTED_PROPERTY) {
          mergedOptions[key] = value;
        }
      });
      return mergedOptions;
    };
    ComponentUtil2.processOnChange = function(changes, api) {
      if (!changes) {
        return;
      }
      var gridChanges = {};
      var hasChanges = false;
      Object.keys(changes).filter(function(key) {
        return ComponentUtil2.ALL_PROPERTIES_AND_CALLBACKS_SET.has(key);
      }).forEach(function(key) {
        gridChanges[key] = changes[key];
        hasChanges = true;
      });
      if (!hasChanges) {
        return;
      }
      api.__internalUpdateGridOptions(gridChanges);
      var event = {
        type: Events.EVENT_COMPONENT_STATE_CHANGED
      };
      iterateObject(gridChanges, function(key, value) {
        event[key] = value;
      });
      api.dispatchEvent(event);
    };
    var _a;
    _a = ComponentUtil2;
    ComponentUtil2.EVENTS = values(Events);
    ComponentUtil2.VUE_OMITTED_PROPERTY = "AG-VUE-OMITTED-PROPERTY";
    ComponentUtil2.EXCLUDED_INTERNAL_EVENTS = [
      Events.EVENT_SCROLLBAR_WIDTH_CHANGED,
      Events.EVENT_CHECKBOX_CHANGED,
      Events.EVENT_HEIGHT_SCALE_CHANGED,
      Events.EVENT_BODY_HEIGHT_CHANGED,
      Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED,
      Events.EVENT_SCROLL_VISIBILITY_CHANGED,
      Events.EVENT_COLUMN_HOVER_CHANGED,
      Events.EVENT_FLASH_CELLS,
      Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED,
      Events.EVENT_DISPLAYED_ROWS_CHANGED,
      Events.EVENT_LEFT_PINNED_WIDTH_CHANGED,
      Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED,
      Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED,
      Events.EVENT_POPUP_TO_FRONT,
      Events.EVENT_STORE_UPDATED,
      Events.EVENT_COLUMN_PANEL_ITEM_DRAG_START,
      Events.EVENT_COLUMN_PANEL_ITEM_DRAG_END,
      Events.EVENT_FILL_START,
      Events.EVENT_FILL_END,
      Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_START,
      Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_END,
      Events.EVENT_FULL_WIDTH_ROW_FOCUSED,
      Events.EVENT_HEADER_HEIGHT_CHANGED,
      Events.EVENT_COLUMN_HEADER_HEIGHT_CHANGED,
      Events.EVENT_CELL_FOCUS_CLEARED,
      Events.EVENT_GRID_STYLES_CHANGED,
      Events.EVENT_FILTER_DESTROYED,
      Events.EVENT_ROW_DATA_UPDATE_STARTED,
      Events.EVENT_ADVANCED_FILTER_ENABLED_CHANGED,
      Events.EVENT_DATA_TYPES_INFERRED,
      Events.EVENT_FIELD_VALUE_CHANGED,
      Events.EVENT_FIELD_PICKER_VALUE_SELECTED,
      Events.EVENT_SUPPRESS_COLUMN_MOVE_CHANGED,
      Events.EVENT_SUPPRESS_MENU_HIDE_CHANGED,
      Events.EVENT_SUPPRESS_FIELD_DOT_NOTATION,
      Events.EVENT_ROW_COUNT_READY,
      Events.EVENT_SIDE_BAR_UPDATED
    ];
    ComponentUtil2.PUBLIC_EVENTS = ComponentUtil2.EVENTS.filter(function(e) {
      return !includes(ComponentUtil2.EXCLUDED_INTERNAL_EVENTS, e);
    });
    ComponentUtil2.EVENT_CALLBACKS = ComponentUtil2.EVENTS.map(function(event) {
      return ComponentUtil2.getCallbackForEvent(event);
    });
    ComponentUtil2.STRING_PROPERTIES = PropertyKeys.STRING_PROPERTIES;
    ComponentUtil2.OBJECT_PROPERTIES = PropertyKeys.OBJECT_PROPERTIES;
    ComponentUtil2.ARRAY_PROPERTIES = PropertyKeys.ARRAY_PROPERTIES;
    ComponentUtil2.NUMBER_PROPERTIES = PropertyKeys.NUMBER_PROPERTIES;
    ComponentUtil2.BOOLEAN_PROPERTIES = PropertyKeys.BOOLEAN_PROPERTIES;
    ComponentUtil2.FUNCTION_PROPERTIES = PropertyKeys.FUNCTION_PROPERTIES;
    ComponentUtil2.ALL_PROPERTIES = PropertyKeys.ALL_PROPERTIES;
    ComponentUtil2.ALL_PROPERTIES_AND_CALLBACKS = __spreadArray$p(__spreadArray$p([], __read$x(_a.ALL_PROPERTIES), false), __read$x(_a.EVENT_CALLBACKS), false);
    ComponentUtil2.ALL_PROPERTIES_AND_CALLBACKS_SET = new Set(ComponentUtil2.ALL_PROPERTIES_AND_CALLBACKS);
    return ComponentUtil2;
  }()
);
var __extends$38 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2F = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgStackComponentsRegistry = (
  /** @class */
  function(_super) {
    __extends$38(AgStackComponentsRegistry2, _super);
    function AgStackComponentsRegistry2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.componentsMappedByName = {};
      return _this;
    }
    AgStackComponentsRegistry2.prototype.setupComponents = function(components) {
      var _this = this;
      if (components) {
        components.forEach(function(componentMeta) {
          return _this.addComponent(componentMeta);
        });
      }
    };
    AgStackComponentsRegistry2.prototype.addComponent = function(componentMeta) {
      var classEscaped = componentMeta.componentName.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
      var classUpperCase = classEscaped.toUpperCase();
      this.componentsMappedByName[classUpperCase] = componentMeta.componentClass;
    };
    AgStackComponentsRegistry2.prototype.getComponentClass = function(htmlTag) {
      return this.componentsMappedByName[htmlTag];
    };
    AgStackComponentsRegistry2 = __decorate$2F([
      Bean("agStackComponentsRegistry")
    ], AgStackComponentsRegistry2);
    return AgStackComponentsRegistry2;
  }(BeanStub)
);
function toggleAriaAttribute(element, attribute, value) {
  if (value == null || typeof value === "string" && value == "") {
    removeAriaAttribute(element, attribute);
  } else {
    setAriaAttribute(element, attribute, value);
  }
}
function setAriaAttribute(element, attribute, value) {
  element.setAttribute(ariaAttributeName(attribute), value.toString());
}
function removeAriaAttribute(element, attribute) {
  element.removeAttribute(ariaAttributeName(attribute));
}
function ariaAttributeName(attribute) {
  return "aria-".concat(attribute);
}
function setAriaRole(element, role) {
  if (role) {
    element.setAttribute("role", role);
  } else {
    element.removeAttribute("role");
  }
}
function getAriaSortState(sortDirection) {
  var sort;
  if (sortDirection === "asc") {
    sort = "ascending";
  } else if (sortDirection === "desc") {
    sort = "descending";
  } else if (sortDirection === "mixed") {
    sort = "other";
  } else {
    sort = "none";
  }
  return sort;
}
function getAriaLevel(element) {
  return parseInt(element.getAttribute("aria-level"), 10);
}
function getAriaPosInSet(element) {
  return parseInt(element.getAttribute("aria-posinset"), 10);
}
function getAriaLabel(element) {
  return element.getAttribute("aria-label");
}
function setAriaLabel(element, label) {
  toggleAriaAttribute(element, "label", label);
}
function setAriaLabelledBy(element, labelledBy) {
  toggleAriaAttribute(element, "labelledby", labelledBy);
}
function setAriaDescription(element, description) {
  toggleAriaAttribute(element, "description", description);
}
function setAriaDescribedBy(element, describedby) {
  toggleAriaAttribute(element, "describedby", describedby);
}
function setAriaLive(element, live) {
  toggleAriaAttribute(element, "live", live);
}
function setAriaAtomic(element, atomic) {
  toggleAriaAttribute(element, "atomic", atomic);
}
function setAriaRelevant(element, relevant) {
  toggleAriaAttribute(element, "relevant", relevant);
}
function setAriaLevel(element, level) {
  toggleAriaAttribute(element, "level", level);
}
function setAriaDisabled(element, disabled) {
  toggleAriaAttribute(element, "disabled", disabled);
}
function setAriaHidden(element, hidden) {
  toggleAriaAttribute(element, "hidden", hidden);
}
function setAriaActiveDescendant(element, descendantId) {
  toggleAriaAttribute(element, "activedescendant", descendantId);
}
function setAriaExpanded(element, expanded) {
  setAriaAttribute(element, "expanded", expanded);
}
function removeAriaExpanded(element) {
  removeAriaAttribute(element, "expanded");
}
function setAriaSetSize(element, setsize) {
  setAriaAttribute(element, "setsize", setsize);
}
function setAriaPosInSet(element, position) {
  setAriaAttribute(element, "posinset", position);
}
function setAriaMultiSelectable(element, multiSelectable) {
  setAriaAttribute(element, "multiselectable", multiSelectable);
}
function setAriaRowCount(element, rowCount) {
  setAriaAttribute(element, "rowcount", rowCount);
}
function setAriaRowIndex(element, rowIndex) {
  setAriaAttribute(element, "rowindex", rowIndex);
}
function setAriaColCount(element, colCount) {
  setAriaAttribute(element, "colcount", colCount);
}
function setAriaColIndex(element, colIndex) {
  setAriaAttribute(element, "colindex", colIndex);
}
function setAriaColSpan(element, colSpan) {
  setAriaAttribute(element, "colspan", colSpan);
}
function setAriaSort(element, sort) {
  setAriaAttribute(element, "sort", sort);
}
function removeAriaSort(element) {
  removeAriaAttribute(element, "sort");
}
function setAriaSelected(element, selected) {
  toggleAriaAttribute(element, "selected", selected);
}
function setAriaChecked(element, checked) {
  setAriaAttribute(element, "checked", checked === void 0 ? "mixed" : checked);
}
function setAriaControls(controllerElement, controlledElement) {
  toggleAriaAttribute(controllerElement, "controls", controlledElement.id);
  setAriaLabelledBy(controlledElement, controllerElement.id);
}
function getAriaCheckboxStateName(translate, state) {
  return state === void 0 ? translate("ariaIndeterminate", "indeterminate") : state === true ? translate("ariaChecked", "checked") : translate("ariaUnchecked", "unchecked");
}
var AriaUtils = Object.freeze({
  __proto__: null,
  setAriaRole,
  getAriaSortState,
  getAriaLevel,
  getAriaPosInSet,
  getAriaLabel,
  setAriaLabel,
  setAriaLabelledBy,
  setAriaDescription,
  setAriaDescribedBy,
  setAriaLive,
  setAriaAtomic,
  setAriaRelevant,
  setAriaLevel,
  setAriaDisabled,
  setAriaHidden,
  setAriaActiveDescendant,
  setAriaExpanded,
  removeAriaExpanded,
  setAriaSetSize,
  setAriaPosInSet,
  setAriaMultiSelectable,
  setAriaRowCount,
  setAriaRowIndex,
  setAriaColCount,
  setAriaColIndex,
  setAriaColSpan,
  setAriaSort,
  removeAriaSort,
  setAriaSelected,
  setAriaChecked,
  setAriaControls,
  getAriaCheckboxStateName
});
var isSafari;
var safariVersion;
var isChrome;
var isFirefox;
var isMacOs;
var isIOS;
var invisibleScrollbar;
var browserScrollbarWidth;
function isBrowserSafari() {
  if (isSafari === void 0) {
    isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
  }
  return isSafari;
}
function getSafariVersion() {
  if (safariVersion === void 0) {
    if (isBrowserSafari()) {
      var versionMatch = navigator.userAgent.match(/version\/(\d+)/i);
      if (versionMatch) {
        safariVersion = versionMatch[1] != null ? parseFloat(versionMatch[1]) : 0;
      }
    } else {
      safariVersion = 0;
    }
  }
  return safariVersion;
}
function isBrowserChrome() {
  if (isChrome === void 0) {
    var win = window;
    isChrome = !!win.chrome && (!!win.chrome.webstore || !!win.chrome.runtime) || /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
  }
  return isChrome;
}
function isBrowserFirefox() {
  if (isFirefox === void 0) {
    isFirefox = /(firefox)/i.test(navigator.userAgent);
  }
  return isFirefox;
}
function isMacOsUserAgent() {
  if (isMacOs === void 0) {
    isMacOs = /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);
  }
  return isMacOs;
}
function isIOSUserAgent() {
  if (isIOS === void 0) {
    isIOS = /iPad|iPhone|iPod/.test(navigator.platform) || // eslint-disable-next-line
    navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1;
  }
  return isIOS;
}
function browserSupportsPreventScroll() {
  return !isBrowserSafari() || getSafariVersion() >= 15;
}
function getTabIndex(el) {
  if (!el) {
    return null;
  }
  var numberTabIndex = el.tabIndex;
  var tabIndex = el.getAttribute("tabIndex");
  if (numberTabIndex === -1 && (tabIndex === null || tabIndex === "" && !isBrowserFirefox())) {
    return null;
  }
  return numberTabIndex.toString();
}
function getMaxDivHeight() {
  if (!document.body) {
    return -1;
  }
  var res = 1e6;
  var testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? 6e6 : 1e9;
  var div = document.createElement("div");
  document.body.appendChild(div);
  while (true) {
    var test = res * 2;
    div.style.height = test + "px";
    if (test > testUpTo || div.clientHeight !== test) {
      break;
    } else {
      res = test;
    }
  }
  document.body.removeChild(div);
  return res;
}
function getBodyWidth() {
  var _a, _b, _c;
  return (_b = (_a = document.body) === null || _a === void 0 ? void 0 : _a.clientWidth) !== null && _b !== void 0 ? _b : window.innerHeight || ((_c = document.documentElement) === null || _c === void 0 ? void 0 : _c.clientWidth) || -1;
}
function getBodyHeight() {
  var _a, _b, _c;
  return (_b = (_a = document.body) === null || _a === void 0 ? void 0 : _a.clientHeight) !== null && _b !== void 0 ? _b : window.innerHeight || ((_c = document.documentElement) === null || _c === void 0 ? void 0 : _c.clientHeight) || -1;
}
function getScrollbarWidth() {
  if (browserScrollbarWidth == null) {
    initScrollbarWidthAndVisibility();
  }
  return browserScrollbarWidth;
}
function initScrollbarWidthAndVisibility() {
  var body = document.body;
  var div = document.createElement("div");
  div.style.width = div.style.height = "100px";
  div.style.opacity = "0";
  div.style.overflow = "scroll";
  div.style.msOverflowStyle = "scrollbar";
  div.style.position = "absolute";
  body.appendChild(div);
  var width = div.offsetWidth - div.clientWidth;
  if (width === 0 && div.clientWidth === 0) {
    width = null;
  }
  if (div.parentNode) {
    div.parentNode.removeChild(div);
  }
  if (width != null) {
    browserScrollbarWidth = width;
    invisibleScrollbar = width === 0;
  }
}
function isInvisibleScrollbar() {
  if (invisibleScrollbar == null) {
    initScrollbarWidthAndVisibility();
  }
  return invisibleScrollbar;
}
var BrowserUtils = Object.freeze({
  __proto__: null,
  isBrowserSafari,
  getSafariVersion,
  isBrowserChrome,
  isBrowserFirefox,
  isMacOsUserAgent,
  isIOSUserAgent,
  browserSupportsPreventScroll,
  getTabIndex,
  getMaxDivHeight,
  getBodyWidth,
  getBodyHeight,
  getScrollbarWidth,
  isInvisibleScrollbar
});
function padStartWidthZeros(value, totalStringSize) {
  return value.toString().padStart(totalStringSize, "0");
}
function createArrayOfNumbers(first, last2) {
  var result = [];
  for (var i = first; i <= last2; i++) {
    result.push(i);
  }
  return result;
}
function cleanNumber(value) {
  if (typeof value === "string") {
    value = parseInt(value, 10);
  }
  if (typeof value === "number") {
    return Math.floor(value);
  }
  return null;
}
function decToHex(number, bytes) {
  var hex = "";
  for (var i = 0; i < bytes; i++) {
    hex += String.fromCharCode(number & 255);
    number >>>= 8;
  }
  return hex;
}
function formatNumberTwoDecimalPlacesAndCommas(value, thousandSeparator, decimalSeparator) {
  if (typeof value !== "number") {
    return "";
  }
  return formatNumberCommas(Math.round(value * 100) / 100, thousandSeparator, decimalSeparator);
}
function formatNumberCommas(value, thousandSeparator, decimalSeparator) {
  if (typeof value !== "number") {
    return "";
  }
  return value.toString().replace(".", decimalSeparator).replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1".concat(thousandSeparator));
}
function sum(values2) {
  return values2 == null ? null : values2.reduce(function(total, value) {
    return total + value;
  }, 0);
}
var NumberUtils = Object.freeze({
  __proto__: null,
  padStartWidthZeros,
  createArrayOfNumbers,
  cleanNumber,
  decToHex,
  formatNumberTwoDecimalPlacesAndCommas,
  formatNumberCommas,
  sum
});
var __read$w = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
function serialiseDate(date, includeTime, separator) {
  if (includeTime === void 0) {
    includeTime = true;
  }
  if (separator === void 0) {
    separator = "-";
  }
  if (!date) {
    return null;
  }
  var serialised = [date.getFullYear(), date.getMonth() + 1, date.getDate()].map(function(part) {
    return padStartWidthZeros(part, 2);
  }).join(separator);
  if (includeTime) {
    serialised += " " + [date.getHours(), date.getMinutes(), date.getSeconds()].map(function(part) {
      return padStartWidthZeros(part, 2);
    }).join(":");
  }
  return serialised;
}
var calculateOrdinal = function(value) {
  if (value > 3 && value < 21) {
    return "th";
  }
  var remainder = value % 10;
  switch (remainder) {
    case 1:
      return "st";
    case 2:
      return "nd";
    case 3:
      return "rd";
  }
  return "th";
};
function dateToFormattedString(date, format) {
  if (format === void 0) {
    format = "YYYY-MM-DD";
  }
  var fullYear = padStartWidthZeros(date.getFullYear(), 4);
  var months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ];
  var days = [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday"
  ];
  var replace = {
    YYYY: function() {
      return fullYear.slice(fullYear.length - 4, fullYear.length);
    },
    YY: function() {
      return fullYear.slice(fullYear.length - 2, fullYear.length);
    },
    Y: function() {
      return "".concat(date.getFullYear());
    },
    MMMM: function() {
      return months[date.getMonth()];
    },
    MMM: function() {
      return months[date.getMonth()].slice(0, 3);
    },
    MM: function() {
      return padStartWidthZeros(date.getMonth() + 1, 2);
    },
    Mo: function() {
      return "".concat(date.getMonth() + 1).concat(calculateOrdinal(date.getMonth() + 1));
    },
    M: function() {
      return "".concat(date.getMonth() + 1);
    },
    Do: function() {
      return "".concat(date.getDate()).concat(calculateOrdinal(date.getDate()));
    },
    DD: function() {
      return padStartWidthZeros(date.getDate(), 2);
    },
    D: function() {
      return "".concat(date.getDate());
    },
    dddd: function() {
      return days[date.getDay()];
    },
    ddd: function() {
      return days[date.getDay()].slice(0, 3);
    },
    dd: function() {
      return days[date.getDay()].slice(0, 2);
    },
    do: function() {
      return "".concat(date.getDay()).concat(calculateOrdinal(date.getDay()));
    },
    d: function() {
      return "".concat(date.getDay());
    }
  };
  var regexp = new RegExp(Object.keys(replace).join("|"), "g");
  return format.replace(regexp, function(match) {
    if (match in replace) {
      return replace[match]();
    }
    return match;
  });
}
function parseDateTimeFromString(value) {
  if (!value) {
    return null;
  }
  var _a = __read$w(value.split(" "), 2), dateStr = _a[0], timeStr = _a[1];
  if (!dateStr) {
    return null;
  }
  var fields = dateStr.split("-").map(function(f) {
    return parseInt(f, 10);
  });
  if (fields.filter(function(f) {
    return !isNaN(f);
  }).length !== 3) {
    return null;
  }
  var _b = __read$w(fields, 3), year = _b[0], month = _b[1], day = _b[2];
  var date = new Date(year, month - 1, day);
  if (date.getFullYear() !== year || date.getMonth() !== month - 1 || date.getDate() !== day) {
    return null;
  }
  if (!timeStr || timeStr === "00:00:00") {
    return date;
  }
  var _c = __read$w(timeStr.split(":").map(function(part) {
    return parseInt(part, 10);
  }), 3), hours = _c[0], minutes = _c[1], seconds = _c[2];
  if (hours >= 0 && hours < 24) {
    date.setHours(hours);
  }
  if (minutes >= 0 && minutes < 60) {
    date.setMinutes(minutes);
  }
  if (seconds >= 0 && seconds < 60) {
    date.setSeconds(seconds);
  }
  return date;
}
var DateUtils = Object.freeze({
  __proto__: null,
  serialiseDate,
  dateToFormattedString,
  parseDateTimeFromString
});
var __values$9 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read$v = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var rtlNegativeScroll;
function radioCssClass(element, elementClass, otherElementClass) {
  var parent = element.parentElement;
  var sibling = parent && parent.firstChild;
  while (sibling) {
    if (elementClass) {
      sibling.classList.toggle(elementClass, sibling === element);
    }
    if (otherElementClass) {
      sibling.classList.toggle(otherElementClass, sibling !== element);
    }
    sibling = sibling.nextSibling;
  }
}
var FOCUSABLE_SELECTOR = "[tabindex], input, select, button, textarea, [href]";
var FOCUSABLE_EXCLUDE = "[disabled], .ag-disabled:not(.ag-button), .ag-disabled *";
function isFocusableFormField(element) {
  var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;
  var inputSelector = "input, select, button, textarea";
  var isFocusable = matches.call(element, inputSelector);
  var isNotFocusable = matches.call(element, FOCUSABLE_EXCLUDE);
  var isElementVisible = isVisible(element);
  var focusable = isFocusable && !isNotFocusable && isElementVisible;
  return focusable;
}
function setDisplayed(element, displayed, options) {
  if (options === void 0) {
    options = {};
  }
  var skipAriaHidden = options.skipAriaHidden;
  element.classList.toggle("ag-hidden", !displayed);
  if (!skipAriaHidden) {
    setAriaHidden(element, !displayed);
  }
}
function setVisible(element, visible, options) {
  if (options === void 0) {
    options = {};
  }
  var skipAriaHidden = options.skipAriaHidden;
  element.classList.toggle("ag-invisible", !visible);
  if (!skipAriaHidden) {
    setAriaHidden(element, !visible);
  }
}
function setDisabled(element, disabled) {
  var attributeName = "disabled";
  var addOrRemoveDisabledAttribute = disabled ? function(e) {
    return e.setAttribute(attributeName, "");
  } : function(e) {
    return e.removeAttribute(attributeName);
  };
  addOrRemoveDisabledAttribute(element);
  nodeListForEach(element.querySelectorAll("input"), function(input) {
    return addOrRemoveDisabledAttribute(input);
  });
}
function isElementChildOfClass(element, cls, maxNest) {
  var counter = 0;
  while (element) {
    if (element.classList.contains(cls)) {
      return true;
    }
    element = element.parentElement;
    if (typeof maxNest == "number") {
      if (++counter > maxNest) {
        break;
      }
    } else if (element === maxNest) {
      break;
    }
  }
  return false;
}
function getElementSize(el) {
  var _a = window.getComputedStyle(el), height = _a.height, width = _a.width, borderTopWidth = _a.borderTopWidth, borderRightWidth = _a.borderRightWidth, borderBottomWidth = _a.borderBottomWidth, borderLeftWidth = _a.borderLeftWidth, paddingTop = _a.paddingTop, paddingRight = _a.paddingRight, paddingBottom = _a.paddingBottom, paddingLeft = _a.paddingLeft, marginTop = _a.marginTop, marginRight = _a.marginRight, marginBottom = _a.marginBottom, marginLeft = _a.marginLeft, boxSizing = _a.boxSizing;
  return {
    height: parseFloat(height || "0"),
    width: parseFloat(width || "0"),
    borderTopWidth: parseFloat(borderTopWidth || "0"),
    borderRightWidth: parseFloat(borderRightWidth || "0"),
    borderBottomWidth: parseFloat(borderBottomWidth || "0"),
    borderLeftWidth: parseFloat(borderLeftWidth || "0"),
    paddingTop: parseFloat(paddingTop || "0"),
    paddingRight: parseFloat(paddingRight || "0"),
    paddingBottom: parseFloat(paddingBottom || "0"),
    paddingLeft: parseFloat(paddingLeft || "0"),
    marginTop: parseFloat(marginTop || "0"),
    marginRight: parseFloat(marginRight || "0"),
    marginBottom: parseFloat(marginBottom || "0"),
    marginLeft: parseFloat(marginLeft || "0"),
    boxSizing
  };
}
function getInnerHeight(el) {
  var size = getElementSize(el);
  if (size.boxSizing === "border-box") {
    return size.height - size.paddingTop - size.paddingBottom;
  }
  return size.height;
}
function getInnerWidth(el) {
  var size = getElementSize(el);
  if (size.boxSizing === "border-box") {
    return size.width - size.paddingLeft - size.paddingRight;
  }
  return size.width;
}
function getAbsoluteHeight(el) {
  var size = getElementSize(el);
  var marginRight = size.marginBottom + size.marginTop;
  return Math.ceil(el.offsetHeight + marginRight);
}
function getAbsoluteWidth(el) {
  var size = getElementSize(el);
  var marginWidth = size.marginLeft + size.marginRight;
  return Math.ceil(el.offsetWidth + marginWidth);
}
function getElementRectWithOffset(el) {
  var offsetElementRect = el.getBoundingClientRect();
  var _a = getElementSize(el), borderTopWidth = _a.borderTopWidth, borderLeftWidth = _a.borderLeftWidth, borderRightWidth = _a.borderRightWidth, borderBottomWidth = _a.borderBottomWidth;
  return {
    top: offsetElementRect.top + (borderTopWidth || 0),
    left: offsetElementRect.left + (borderLeftWidth || 0),
    right: offsetElementRect.right + (borderRightWidth || 0),
    bottom: offsetElementRect.bottom + (borderBottomWidth || 0)
  };
}
function isRtlNegativeScroll() {
  if (typeof rtlNegativeScroll === "boolean") {
    return rtlNegativeScroll;
  }
  var template = document.createElement("div");
  template.style.direction = "rtl";
  template.style.width = "1px";
  template.style.height = "1px";
  template.style.position = "fixed";
  template.style.top = "0px";
  template.style.overflow = "hidden";
  template.dir = "rtl";
  template.innerHTML = /* html */
  '<div style="width: 2px">\n            <span style="display: inline-block; width: 1px"></span>\n            <span style="display: inline-block; width: 1px"></span>\n        </div>';
  document.body.appendChild(template);
  template.scrollLeft = 1;
  rtlNegativeScroll = Math.floor(template.scrollLeft) === 0;
  document.body.removeChild(template);
  return rtlNegativeScroll;
}
function getScrollLeft(element, rtl) {
  var scrollLeft = element.scrollLeft;
  if (rtl) {
    scrollLeft = Math.abs(scrollLeft);
    if (isBrowserChrome() && !isRtlNegativeScroll()) {
      scrollLeft = element.scrollWidth - element.clientWidth - scrollLeft;
    }
  }
  return scrollLeft;
}
function setScrollLeft(element, value, rtl) {
  if (rtl) {
    if (isRtlNegativeScroll()) {
      value *= -1;
    } else if (isBrowserSafari() || isBrowserChrome()) {
      value = element.scrollWidth - element.clientWidth - value;
    }
  }
  element.scrollLeft = value;
}
function clearElement(el) {
  while (el && el.firstChild) {
    el.removeChild(el.firstChild);
  }
}
function removeFromParent(node) {
  if (node && node.parentNode) {
    node.parentNode.removeChild(node);
  }
}
function isInDOM(element) {
  return !!element.offsetParent;
}
function isVisible(element) {
  var el = element;
  if (el.checkVisibility) {
    return el.checkVisibility({ checkVisibilityCSS: true });
  }
  var isHidden = !isInDOM(element) || window.getComputedStyle(element).visibility !== "visible";
  return !isHidden;
}
function loadTemplate(template) {
  var tempDiv = document.createElement("div");
  tempDiv.innerHTML = (template || "").trim();
  return tempDiv.firstChild;
}
function ensureDomOrder(eContainer, eChild, eChildBefore) {
  if (eChildBefore && eChildBefore.nextSibling === eChild) {
    return;
  }
  if (eChildBefore) {
    if (eChildBefore.nextSibling) {
      eContainer.insertBefore(eChild, eChildBefore.nextSibling);
    } else {
      eContainer.appendChild(eChild);
    }
  } else {
    if (eContainer.firstChild && eContainer.firstChild !== eChild) {
      eContainer.insertAdjacentElement("afterbegin", eChild);
    }
  }
}
function setDomChildOrder(eContainer, orderedChildren) {
  for (var i = 0; i < orderedChildren.length; i++) {
    var correctCellAtIndex = orderedChildren[i];
    var actualCellAtIndex = eContainer.children[i];
    if (actualCellAtIndex !== correctCellAtIndex) {
      eContainer.insertBefore(correctCellAtIndex, actualCellAtIndex);
    }
  }
}
function insertWithDomOrder(eContainer, eToInsert, eChildBefore) {
  if (eChildBefore) {
    eChildBefore.insertAdjacentElement("afterend", eToInsert);
  } else {
    if (eContainer.firstChild) {
      eContainer.insertAdjacentElement("afterbegin", eToInsert);
    } else {
      eContainer.appendChild(eToInsert);
    }
  }
}
function addStylesToElement(eElement, styles) {
  var e_1, _a;
  if (!styles) {
    return;
  }
  try {
    for (var _b = __values$9(Object.entries(styles)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var _d = __read$v(_c.value, 2), key = _d[0], value = _d[1];
      if (!key || !key.length || value == null) {
        continue;
      }
      var parsedKey = camelCaseToHyphenated(key);
      var valueAsString = value.toString();
      var parsedValue = valueAsString.replace(/\s*!important/g, "");
      var priority = parsedValue.length != valueAsString.length ? "important" : void 0;
      eElement.style.setProperty(parsedKey, parsedValue, priority);
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
}
function isHorizontalScrollShowing(element) {
  return element.clientWidth < element.scrollWidth;
}
function isVerticalScrollShowing(element) {
  return element.clientHeight < element.scrollHeight;
}
function setElementWidth(element, width) {
  if (width === "flex") {
    element.style.removeProperty("width");
    element.style.removeProperty("minWidth");
    element.style.removeProperty("maxWidth");
    element.style.flex = "1 1 auto";
  } else {
    setFixedWidth(element, width);
  }
}
function setFixedWidth(element, width) {
  width = formatSize(width);
  element.style.width = width.toString();
  element.style.maxWidth = width.toString();
  element.style.minWidth = width.toString();
}
function setElementHeight(element, height) {
  if (height === "flex") {
    element.style.removeProperty("height");
    element.style.removeProperty("minHeight");
    element.style.removeProperty("maxHeight");
    element.style.flex = "1 1 auto";
  } else {
    setFixedHeight(element, height);
  }
}
function setFixedHeight(element, height) {
  height = formatSize(height);
  element.style.height = height.toString();
  element.style.maxHeight = height.toString();
  element.style.minHeight = height.toString();
}
function formatSize(size) {
  if (typeof size === "number") {
    return "".concat(size, "px");
  }
  return size;
}
function isNodeOrElement(o) {
  return o instanceof Node || o instanceof HTMLElement;
}
function copyNodeList(nodeList) {
  if (nodeList == null) {
    return [];
  }
  var result = [];
  nodeListForEach(nodeList, function(node) {
    return result.push(node);
  });
  return result;
}
function iterateNamedNodeMap(map, callback) {
  if (!map) {
    return;
  }
  for (var i = 0; i < map.length; i++) {
    var attr = map[i];
    callback(attr.name, attr.value);
  }
}
function addOrRemoveAttribute(element, name, value) {
  if (value == null) {
    element.removeAttribute(name);
  } else {
    element.setAttribute(name, value.toString());
  }
}
function nodeListForEach(nodeList, action) {
  if (nodeList == null) {
    return;
  }
  for (var i = 0; i < nodeList.length; i++) {
    action(nodeList[i]);
  }
}
function bindCellRendererToHtmlElement(cellRendererPromise, eTarget) {
  cellRendererPromise.then(function(cellRenderer) {
    var gui = cellRenderer.getGui();
    if (gui != null) {
      if (typeof gui === "object") {
        eTarget.appendChild(gui);
      } else {
        eTarget.innerHTML = gui;
      }
    }
  });
}
var DomUtils = Object.freeze({
  __proto__: null,
  radioCssClass,
  FOCUSABLE_SELECTOR,
  FOCUSABLE_EXCLUDE,
  isFocusableFormField,
  setDisplayed,
  setVisible,
  setDisabled,
  isElementChildOfClass,
  getElementSize,
  getInnerHeight,
  getInnerWidth,
  getAbsoluteHeight,
  getAbsoluteWidth,
  getElementRectWithOffset,
  isRtlNegativeScroll,
  getScrollLeft,
  setScrollLeft,
  clearElement,
  removeFromParent,
  isInDOM,
  isVisible,
  loadTemplate,
  ensureDomOrder,
  setDomChildOrder,
  insertWithDomOrder,
  addStylesToElement,
  isHorizontalScrollShowing,
  isVerticalScrollShowing,
  setElementWidth,
  setFixedWidth,
  setElementHeight,
  setFixedHeight,
  formatSize,
  isNodeOrElement,
  copyNodeList,
  iterateNamedNodeMap,
  addOrRemoveAttribute,
  nodeListForEach,
  bindCellRendererToHtmlElement
});
var __values$8 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
function fuzzyCheckStrings(inputValues, validValues, allSuggestions) {
  var fuzzyMatches = {};
  var invalidInputs = inputValues.filter(function(inputValue) {
    return !validValues.some(function(validValue) {
      return validValue === inputValue;
    });
  });
  if (invalidInputs.length > 0) {
    invalidInputs.forEach(function(invalidInput) {
      return fuzzyMatches[invalidInput] = fuzzySuggestions(invalidInput, allSuggestions).values;
    });
  }
  return fuzzyMatches;
}
function fuzzySuggestions(inputValue, allSuggestions, hideIrrelevant, filterByPercentageOfBestMatch) {
  var e_1, _a;
  var thisSuggestions = allSuggestions.map(function(text, idx) {
    return {
      value: text,
      relevance: stringWeightedDistances(inputValue.toLowerCase(), text.toLocaleLowerCase()),
      idx
    };
  });
  thisSuggestions.sort(function(a, b) {
    return b.relevance - a.relevance;
  });
  if (hideIrrelevant) {
    thisSuggestions = thisSuggestions.filter(function(suggestion2) {
      return suggestion2.relevance !== 0;
    });
  }
  if (thisSuggestions.length > 0 && filterByPercentageOfBestMatch && filterByPercentageOfBestMatch > 0) {
    var bestMatch = thisSuggestions[0].relevance;
    var limit_1 = bestMatch * filterByPercentageOfBestMatch;
    thisSuggestions = thisSuggestions.filter(function(suggestion2) {
      return limit_1 - suggestion2.relevance < 0;
    });
  }
  var values2 = [];
  var indices = [];
  try {
    for (var thisSuggestions_1 = __values$8(thisSuggestions), thisSuggestions_1_1 = thisSuggestions_1.next(); !thisSuggestions_1_1.done; thisSuggestions_1_1 = thisSuggestions_1.next()) {
      var suggestion = thisSuggestions_1_1.value;
      values2.push(suggestion.value);
      indices.push(suggestion.idx);
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (thisSuggestions_1_1 && !thisSuggestions_1_1.done && (_a = thisSuggestions_1.return))
        _a.call(thisSuggestions_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return { values: values2, indices };
}
function stringWeightedDistances(str1, str2) {
  var a = str1.replace(/\s/g, "");
  var b = str2.replace(/\s/g, "");
  var weight = 0;
  var lastIndex = -1;
  for (var i = 0; i < a.length; i++) {
    var idx = b.indexOf(a[i], lastIndex + 1);
    if (idx === -1) {
      continue;
    }
    lastIndex = idx;
    weight += 100 - lastIndex * 100 / 1e4 * 100;
  }
  return weight;
}
var FuzzyMatchUtils = Object.freeze({
  __proto__: null,
  fuzzyCheckStrings,
  fuzzySuggestions
});
var iconNameClassMap = {
  // header column group shown when expanded (click to contract)
  columnGroupOpened: "expanded",
  // header column group shown when contracted (click to expand)
  columnGroupClosed: "contracted",
  // tool panel column group contracted (click to expand)
  columnSelectClosed: "tree-closed",
  // tool panel column group expanded (click to contract)
  columnSelectOpen: "tree-open",
  // column tool panel header expand/collapse all button, shown when some children are expanded and
  //     others are collapsed
  columnSelectIndeterminate: "tree-indeterminate",
  // shown on ghost icon while dragging column to the side of the grid to pin
  columnMovePin: "pin",
  // shown on ghost icon while dragging over part of the page that is not a drop zone
  columnMoveHide: "eye-slash",
  // shown on ghost icon while dragging columns to reorder
  columnMoveMove: "arrows",
  // animating icon shown when dragging a column to the right of the grid causes horizontal scrolling
  columnMoveLeft: "left",
  // animating icon shown when dragging a column to the left of the grid causes horizontal scrolling
  columnMoveRight: "right",
  // shown on ghost icon while dragging over Row Groups drop zone
  columnMoveGroup: "group",
  // shown on ghost icon while dragging over Values drop zone
  columnMoveValue: "aggregation",
  // shown on ghost icon while dragging over pivot drop zone
  columnMovePivot: "pivot",
  // shown on ghost icon while dragging over drop zone that doesn't support it, e.g.
  //     string column over aggregation drop zone
  dropNotAllowed: "not-allowed",
  // shown on row group when contracted (click to expand)
  groupContracted: "tree-closed",
  // shown on row group when expanded (click to contract)
  groupExpanded: "tree-open",
  // set filter tree list group contracted (click to expand)
  setFilterGroupClosed: "tree-closed",
  // set filter tree list group expanded (click to contract)
  setFilterGroupOpen: "tree-open",
  // set filter tree list expand/collapse all button, shown when some children are expanded and
  //     others are collapsed
  setFilterGroupIndeterminate: "tree-indeterminate",
  // context menu chart item
  chart: "chart",
  // chart window title bar
  close: "cross",
  // X (remove) on column 'pill' after adding it to a drop zone list
  cancel: "cancel",
  // indicates the currently active pin state in the "Pin column" sub-menu of the column menu
  check: "tick",
  // "go to first" button in pagination controls
  first: "first",
  // "go to previous" button in pagination controls
  previous: "previous",
  // "go to next" button in pagination controls
  next: "next",
  // "go to last" button in pagination controls
  last: "last",
  // shown on top right of chart when chart is linked to range data (click to unlink)
  linked: "linked",
  // shown on top right of chart when chart is not linked to range data (click to link)
  unlinked: "unlinked",
  // "Choose colour" button on chart settings tab
  colorPicker: "color-picker",
  // rotating spinner shown by the loading cell renderer
  groupLoading: "loading",
  // button to launch enterprise column menu
  menu: "menu",
  // filter tool panel tab
  filter: "filter",
  // column tool panel tab
  columns: "columns",
  // button in chart regular size window title bar (click to maximise)
  maximize: "maximize",
  // button in chart maximised window title bar (click to make regular size)
  minimize: "minimize",
  // "Pin column" item in column header menu
  menuPin: "pin",
  // "Value aggregation" column menu item (shown on numeric columns when grouping is active)"
  menuValue: "aggregation",
  // "Group by {column-name}" item in column header menu
  menuAddRowGroup: "group",
  // "Un-Group by {column-name}" item in column header menu
  menuRemoveRowGroup: "group",
  // context menu copy item
  clipboardCopy: "copy",
  // context menu cut item
  clipboardCut: "cut",
  // context menu paste item
  clipboardPaste: "paste",
  // identifies the pivot drop zone
  pivotPanel: "pivot",
  // "Row groups" drop zone in column tool panel
  rowGroupPanel: "group",
  // columns tool panel Values drop zone
  valuePanel: "aggregation",
  // drag handle used to pick up draggable columns
  columnDrag: "grip",
  // drag handle used to pick up draggable rows
  rowDrag: "grip",
  // context menu export item
  save: "save",
  // csv export
  csvExport: "csv",
  // excel export,
  excelExport: "excel",
  // icon on dropdown editors
  smallDown: "small-down",
  // version of small-right used in RTL mode
  smallLeft: "small-left",
  // separater between column 'pills' when you add multiple columns to the header drop zone
  smallRight: "small-right",
  smallUp: "small-up",
  // show on column header when column is sorted ascending
  sortAscending: "asc",
  // show on column header when column is sorted descending
  sortDescending: "desc",
  // show on column header when column has no sort, only when enabled with gridOptions.unSortIcon=true
  sortUnSort: "none",
  // Builder button in Advanced Filter
  advancedFilterBuilder: "group",
  // drag handle used to pick up Advanced Filter Builder rows
  advancedFilterBuilderDrag: "grip",
  // Advanced Filter Builder row validation error
  advancedFilterBuilderInvalid: "not-allowed",
  // shown on Advanced Filter Builder rows to move them up
  advancedFilterBuilderMoveUp: "up",
  // shown on Advanced Filter Builder rows to move them down
  advancedFilterBuilderMoveDown: "down",
  // shown on Advanced Filter Builder rows to add new rows
  advancedFilterBuilderAdd: "plus",
  // shown on Advanced Filter Builder rows to remove row
  advancedFilterBuilderRemove: "minus"
};
function createIcon(iconName, gridOptionsService, column) {
  var iconContents = createIconNoSpan(iconName, gridOptionsService, column);
  if (iconContents) {
    var className = iconContents.className;
    if (typeof className === "string" && className.indexOf("ag-icon") > -1 || typeof className === "object" && className["ag-icon"]) {
      return iconContents;
    }
  }
  var eResult = document.createElement("span");
  eResult.appendChild(iconContents);
  return eResult;
}
function createIconNoSpan(iconName, gridOptionsService, column, forceCreate) {
  var userProvidedIcon = null;
  var icons = column && column.getColDef().icons;
  if (icons) {
    userProvidedIcon = icons[iconName];
  }
  if (gridOptionsService && !userProvidedIcon) {
    var optionsIcons = gridOptionsService.get("icons");
    if (optionsIcons) {
      userProvidedIcon = optionsIcons[iconName];
    }
  }
  if (userProvidedIcon) {
    var rendererResult = void 0;
    if (typeof userProvidedIcon === "function") {
      rendererResult = userProvidedIcon();
    } else if (typeof userProvidedIcon === "string") {
      rendererResult = userProvidedIcon;
    } else {
      throw new Error("icon from grid options needs to be a string or a function");
    }
    if (typeof rendererResult === "string") {
      return loadTemplate(rendererResult);
    }
    if (isNodeOrElement(rendererResult)) {
      return rendererResult;
    }
    console.warn("AG Grid: iconRenderer should return back a string or a dom object");
  } else {
    var span = document.createElement("span");
    var cssClass = iconNameClassMap[iconName];
    if (!cssClass) {
      if (!forceCreate) {
        console.warn("AG Grid: Did not find icon ".concat(iconName));
        cssClass = "";
      } else {
        cssClass = iconName;
      }
    }
    span.setAttribute("class", "ag-icon ag-icon-".concat(cssClass));
    span.setAttribute("unselectable", "on");
    setAriaRole(span, "presentation");
    return span;
  }
}
var IconUtils = Object.freeze({
  __proto__: null,
  iconNameClassMap,
  createIcon,
  createIconNoSpan
});
var KeyCode = (
  /** @class */
  function() {
    function KeyCode2() {
    }
    KeyCode2.BACKSPACE = "Backspace";
    KeyCode2.TAB = "Tab";
    KeyCode2.ENTER = "Enter";
    KeyCode2.ESCAPE = "Escape";
    KeyCode2.SPACE = " ";
    KeyCode2.LEFT = "ArrowLeft";
    KeyCode2.UP = "ArrowUp";
    KeyCode2.RIGHT = "ArrowRight";
    KeyCode2.DOWN = "ArrowDown";
    KeyCode2.DELETE = "Delete";
    KeyCode2.F2 = "F2";
    KeyCode2.PAGE_UP = "PageUp";
    KeyCode2.PAGE_DOWN = "PageDown";
    KeyCode2.PAGE_HOME = "Home";
    KeyCode2.PAGE_END = "End";
    KeyCode2.A = "KeyA";
    KeyCode2.C = "KeyC";
    KeyCode2.D = "KeyD";
    KeyCode2.V = "KeyV";
    KeyCode2.X = "KeyX";
    KeyCode2.Y = "KeyY";
    KeyCode2.Z = "KeyZ";
    return KeyCode2;
  }()
);
var A_KEYCODE = 65;
var C_KEYCODE = 67;
var V_KEYCODE = 86;
var D_KEYCODE = 68;
var Z_KEYCODE = 90;
var Y_KEYCODE = 89;
function isEventFromPrintableCharacter(event) {
  if (event.altKey || event.ctrlKey || event.metaKey) {
    return false;
  }
  var printableCharacter = event.key.length === 1;
  return printableCharacter;
}
function isUserSuppressingKeyboardEvent(gridOptionsService, keyboardEvent, rowNode, column, editing) {
  var colDefFunc = column ? column.getColDef().suppressKeyboardEvent : void 0;
  if (!colDefFunc) {
    return false;
  }
  var params = gridOptionsService.addGridCommonParams({
    event: keyboardEvent,
    editing,
    column,
    node: rowNode,
    data: rowNode.data,
    colDef: column.getColDef()
  });
  if (colDefFunc) {
    var colDefFuncResult = colDefFunc(params);
    if (colDefFuncResult) {
      return true;
    }
  }
  return false;
}
function isUserSuppressingHeaderKeyboardEvent(gridOptionsService, keyboardEvent, headerRowIndex, column) {
  var colDef = column.getDefinition();
  var colDefFunc = colDef && colDef.suppressHeaderKeyboardEvent;
  if (!exists(colDefFunc)) {
    return false;
  }
  var params = gridOptionsService.addGridCommonParams({
    colDef,
    column,
    headerRowIndex,
    event: keyboardEvent
  });
  return !!colDefFunc(params);
}
function normaliseQwertyAzerty(keyboardEvent) {
  var keyCode = keyboardEvent.keyCode;
  var code;
  switch (keyCode) {
    case A_KEYCODE:
      code = KeyCode.A;
      break;
    case C_KEYCODE:
      code = KeyCode.C;
      break;
    case V_KEYCODE:
      code = KeyCode.V;
      break;
    case D_KEYCODE:
      code = KeyCode.D;
      break;
    case Z_KEYCODE:
      code = KeyCode.Z;
      break;
    case Y_KEYCODE:
      code = KeyCode.Y;
      break;
    default:
      code = keyboardEvent.code;
  }
  return code;
}
function isDeleteKey(key, alwaysReturnFalseOnBackspace) {
  if (alwaysReturnFalseOnBackspace === void 0) {
    alwaysReturnFalseOnBackspace = false;
  }
  if (key === KeyCode.DELETE) {
    return true;
  }
  if (!alwaysReturnFalseOnBackspace && key === KeyCode.BACKSPACE) {
    return isMacOsUserAgent();
  }
  return false;
}
var KeyboardUtils = Object.freeze({
  __proto__: null,
  isEventFromPrintableCharacter,
  isUserSuppressingKeyboardEvent,
  isUserSuppressingHeaderKeyboardEvent,
  normaliseQwertyAzerty,
  isDeleteKey
});
function areEventsNear(e1, e2, pixelCount) {
  if (pixelCount === 0) {
    return false;
  }
  var diffX = Math.abs(e1.clientX - e2.clientX);
  var diffY = Math.abs(e1.clientY - e2.clientY);
  return Math.max(diffX, diffY) <= pixelCount;
}
var MouseUtils = Object.freeze({
  __proto__: null,
  areEventsNear
});
function sortRowNodesByOrder(rowNodes, rowNodeOrder) {
  if (!rowNodes) {
    return false;
  }
  var comparator = function(nodeA, nodeB) {
    var positionA = rowNodeOrder[nodeA.id];
    var positionB = rowNodeOrder[nodeB.id];
    var aHasIndex = positionA !== void 0;
    var bHasIndex = positionB !== void 0;
    var bothNodesAreUserNodes = aHasIndex && bHasIndex;
    var bothNodesAreFillerNodes = !aHasIndex && !bHasIndex;
    if (bothNodesAreUserNodes) {
      return positionA - positionB;
    }
    if (bothNodesAreFillerNodes) {
      return nodeA.__objectId - nodeB.__objectId;
    }
    if (aHasIndex) {
      return 1;
    }
    return -1;
  };
  var rowNodeA;
  var rowNodeB;
  var atLeastOneOutOfOrder = false;
  for (var i = 0; i < rowNodes.length - 1; i++) {
    rowNodeA = rowNodes[i];
    rowNodeB = rowNodes[i + 1];
    if (comparator(rowNodeA, rowNodeB) > 0) {
      atLeastOneOutOfOrder = true;
      break;
    }
  }
  if (atLeastOneOutOfOrder) {
    rowNodes.sort(comparator);
    return true;
  }
  return false;
}
var RowNodeUtils = Object.freeze({
  __proto__: null,
  sortRowNodesByOrder
});
function convertToSet(list) {
  var set2 = /* @__PURE__ */ new Set();
  list.forEach(function(x) {
    return set2.add(x);
  });
  return set2;
}
var SetUtils = Object.freeze({
  __proto__: null,
  convertToSet
});
var __assign$o = function() {
  __assign$o = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$o.apply(this, arguments);
};
var utils = __assign$o(__assign$o(__assign$o(__assign$o(__assign$o(__assign$o(__assign$o(__assign$o(__assign$o(__assign$o(__assign$o(__assign$o(__assign$o(__assign$o(__assign$o(__assign$o(__assign$o(__assign$o({}, AriaUtils), ArrayUtils), BrowserUtils), DateUtils), DomUtils), EventUtils), FunctionUtils), FuzzyMatchUtils), GenericUtils), IconUtils), KeyboardUtils), MapUtils), MouseUtils), NumberUtils), ObjectUtils), RowNodeUtils), SetUtils), StringUtils);
var _ = utils;
var NumberSequence = (
  /** @class */
  function() {
    function NumberSequence2(initValue, step) {
      if (initValue === void 0) {
        initValue = 0;
      }
      if (step === void 0) {
        step = 1;
      }
      this.nextValue = initValue;
      this.step = step;
    }
    NumberSequence2.prototype.next = function() {
      var valToReturn = this.nextValue;
      this.nextValue += this.step;
      return valToReturn;
    };
    NumberSequence2.prototype.peek = function() {
      return this.nextValue;
    };
    NumberSequence2.prototype.skip = function(count) {
      this.nextValue += count;
    };
    return NumberSequence2;
  }()
);
var AgPromiseStatus;
(function(AgPromiseStatus2) {
  AgPromiseStatus2[AgPromiseStatus2["IN_PROGRESS"] = 0] = "IN_PROGRESS";
  AgPromiseStatus2[AgPromiseStatus2["RESOLVED"] = 1] = "RESOLVED";
})(AgPromiseStatus || (AgPromiseStatus = {}));
var AgPromise = (
  /** @class */
  function() {
    function AgPromise2(callback) {
      var _this = this;
      this.status = AgPromiseStatus.IN_PROGRESS;
      this.resolution = null;
      this.waiters = [];
      callback(function(value) {
        return _this.onDone(value);
      }, function(params) {
        return _this.onReject(params);
      });
    }
    AgPromise2.all = function(promises) {
      return new AgPromise2(function(resolve) {
        var remainingToResolve = promises.length;
        var combinedValues = new Array(remainingToResolve);
        promises.forEach(function(promise, index) {
          promise.then(function(value) {
            combinedValues[index] = value;
            remainingToResolve--;
            if (remainingToResolve === 0) {
              resolve(combinedValues);
            }
          });
        });
      });
    };
    AgPromise2.resolve = function(value) {
      if (value === void 0) {
        value = null;
      }
      return new AgPromise2(function(resolve) {
        return resolve(value);
      });
    };
    AgPromise2.prototype.then = function(func) {
      var _this = this;
      return new AgPromise2(function(resolve) {
        if (_this.status === AgPromiseStatus.RESOLVED) {
          resolve(func(_this.resolution));
        } else {
          _this.waiters.push(function(value) {
            return resolve(func(value));
          });
        }
      });
    };
    AgPromise2.prototype.resolveNow = function(ifNotResolvedValue, ifResolved) {
      return this.status === AgPromiseStatus.RESOLVED ? ifResolved(this.resolution) : ifNotResolvedValue;
    };
    AgPromise2.prototype.onDone = function(value) {
      this.status = AgPromiseStatus.RESOLVED;
      this.resolution = value;
      this.waiters.forEach(function(waiter) {
        return waiter(value);
      });
    };
    AgPromise2.prototype.onReject = function(params) {
      console.warn("TBI");
    };
    return AgPromise2;
  }()
);
var Timer = (
  /** @class */
  function() {
    function Timer2() {
      this.timestamp = (/* @__PURE__ */ new Date()).getTime();
    }
    Timer2.prototype.print = function(msg) {
      var duration = (/* @__PURE__ */ new Date()).getTime() - this.timestamp;
      console.info("".concat(msg, " = ").concat(duration));
      this.timestamp = (/* @__PURE__ */ new Date()).getTime();
    };
    return Timer2;
  }()
);
var __extends$37 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$n = function() {
  __assign$n = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$n.apply(this, arguments);
};
var __decorate$2E = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TooltipStates;
(function(TooltipStates2) {
  TooltipStates2[TooltipStates2["NOTHING"] = 0] = "NOTHING";
  TooltipStates2[TooltipStates2["WAITING_TO_SHOW"] = 1] = "WAITING_TO_SHOW";
  TooltipStates2[TooltipStates2["SHOWING"] = 2] = "SHOWING";
})(TooltipStates || (TooltipStates = {}));
var TooltipTrigger;
(function(TooltipTrigger2) {
  TooltipTrigger2[TooltipTrigger2["HOVER"] = 0] = "HOVER";
  TooltipTrigger2[TooltipTrigger2["FOCUS"] = 1] = "FOCUS";
})(TooltipTrigger || (TooltipTrigger = {}));
var CustomTooltipFeature = (
  /** @class */
  function(_super) {
    __extends$37(CustomTooltipFeature2, _super);
    function CustomTooltipFeature2(parentComp, tooltipShowDelayOverride, tooltipHideDelayOverride) {
      var _this = _super.call(this) || this;
      _this.parentComp = parentComp;
      _this.tooltipShowDelayOverride = tooltipShowDelayOverride;
      _this.tooltipHideDelayOverride = tooltipHideDelayOverride;
      _this.SHOW_QUICK_TOOLTIP_DIFF = 1e3;
      _this.FADE_OUT_TOOLTIP_TIMEOUT = 1e3;
      _this.INTERACTIVE_HIDE_DELAY = 100;
      _this.interactionEnabled = false;
      _this.isInteractingWithTooltip = false;
      _this.state = TooltipStates.NOTHING;
      _this.tooltipInstanceCount = 0;
      _this.tooltipMouseTrack = false;
      return _this;
    }
    CustomTooltipFeature2.prototype.postConstruct = function() {
      if (this.gridOptionsService.get("tooltipInteraction")) {
        this.interactionEnabled = true;
      }
      this.tooltipTrigger = this.getTooltipTrigger();
      this.tooltipMouseTrack = this.gridOptionsService.get("tooltipMouseTrack");
      var el = this.parentComp.getGui();
      if (this.tooltipTrigger === TooltipTrigger.HOVER) {
        this.addManagedListener(el, "mouseenter", this.onMouseEnter.bind(this));
        this.addManagedListener(el, "mouseleave", this.onMouseLeave.bind(this));
      }
      if (this.tooltipTrigger === TooltipTrigger.FOCUS) {
        this.addManagedListener(el, "focusin", this.onFocusIn.bind(this));
        this.addManagedListener(el, "focusout", this.onFocusOut.bind(this));
      }
      this.addManagedListener(el, "mousemove", this.onMouseMove.bind(this));
      if (!this.interactionEnabled) {
        this.addManagedListener(el, "mousedown", this.onMouseDown.bind(this));
        this.addManagedListener(el, "keydown", this.onKeyDown.bind(this));
      }
    };
    CustomTooltipFeature2.prototype.getGridOptionsTooltipDelay = function(delayOption) {
      var delay = this.gridOptionsService.get(delayOption);
      if (delay < 0) {
        warnOnce("".concat(delayOption, " should not be lower than 0"));
      }
      return Math.max(200, delay);
    };
    CustomTooltipFeature2.prototype.getTooltipDelay = function(type) {
      var _a, _b;
      if (type === "show") {
        return (_a = this.tooltipShowDelayOverride) !== null && _a !== void 0 ? _a : this.getGridOptionsTooltipDelay("tooltipShowDelay");
      } else {
        return (_b = this.tooltipHideDelayOverride) !== null && _b !== void 0 ? _b : this.getGridOptionsTooltipDelay("tooltipHideDelay");
      }
    };
    CustomTooltipFeature2.prototype.destroy = function() {
      this.setToDoNothing();
      _super.prototype.destroy.call(this);
    };
    CustomTooltipFeature2.prototype.getTooltipTrigger = function() {
      var trigger = this.gridOptionsService.get("tooltipTrigger");
      if (!trigger || trigger === "hover") {
        return TooltipTrigger.HOVER;
      }
      return TooltipTrigger.FOCUS;
    };
    CustomTooltipFeature2.prototype.onMouseEnter = function(e) {
      var _this = this;
      if (this.interactionEnabled && this.interactiveTooltipTimeoutId) {
        this.unlockService();
        this.startHideTimeout();
      }
      if (isIOSUserAgent()) {
        return;
      }
      if (CustomTooltipFeature2.isLocked) {
        this.showTooltipTimeoutId = window.setTimeout(function() {
          _this.prepareToShowTooltip(e);
        }, this.INTERACTIVE_HIDE_DELAY);
      } else {
        this.prepareToShowTooltip(e);
      }
    };
    CustomTooltipFeature2.prototype.onMouseMove = function(e) {
      if (this.lastMouseEvent) {
        this.lastMouseEvent = e;
      }
      if (this.tooltipMouseTrack && this.state === TooltipStates.SHOWING && this.tooltipComp) {
        this.positionTooltip();
      }
    };
    CustomTooltipFeature2.prototype.onMouseDown = function() {
      this.setToDoNothing();
    };
    CustomTooltipFeature2.prototype.onMouseLeave = function() {
      if (this.interactionEnabled) {
        this.lockService();
      } else {
        this.setToDoNothing();
      }
    };
    CustomTooltipFeature2.prototype.onFocusIn = function() {
      this.prepareToShowTooltip();
    };
    CustomTooltipFeature2.prototype.onFocusOut = function(e) {
      var _a;
      var relatedTarget = e.relatedTarget;
      var parentCompGui = this.parentComp.getGui();
      var tooltipGui = (_a = this.tooltipComp) === null || _a === void 0 ? void 0 : _a.getGui();
      if (this.isInteractingWithTooltip || parentCompGui.contains(relatedTarget) || this.interactionEnabled && (tooltipGui === null || tooltipGui === void 0 ? void 0 : tooltipGui.contains(relatedTarget))) {
        return;
      }
      this.setToDoNothing();
    };
    CustomTooltipFeature2.prototype.onKeyDown = function() {
      this.setToDoNothing();
    };
    CustomTooltipFeature2.prototype.prepareToShowTooltip = function(mouseEvent) {
      if (this.state != TooltipStates.NOTHING || CustomTooltipFeature2.isLocked) {
        return false;
      }
      var delay = 0;
      if (mouseEvent) {
        delay = this.isLastTooltipHiddenRecently() ? 200 : this.getTooltipDelay("show");
      }
      this.lastMouseEvent = mouseEvent || null;
      this.showTooltipTimeoutId = window.setTimeout(this.showTooltip.bind(this), delay);
      this.state = TooltipStates.WAITING_TO_SHOW;
      return true;
    };
    CustomTooltipFeature2.prototype.isLastTooltipHiddenRecently = function() {
      var now = (/* @__PURE__ */ new Date()).getTime();
      var then = CustomTooltipFeature2.lastTooltipHideTime;
      return now - then < this.SHOW_QUICK_TOOLTIP_DIFF;
    };
    CustomTooltipFeature2.prototype.setToDoNothing = function() {
      if (this.state === TooltipStates.SHOWING) {
        this.hideTooltip();
      }
      if (this.onBodyScrollEventCallback) {
        this.onBodyScrollEventCallback();
        this.onBodyScrollEventCallback = void 0;
      }
      if (this.onColumnMovedEventCallback) {
        this.onColumnMovedEventCallback();
        this.onColumnMovedEventCallback = void 0;
      }
      this.clearTimeouts();
      this.state = TooltipStates.NOTHING;
      this.lastMouseEvent = null;
    };
    CustomTooltipFeature2.prototype.showTooltip = function() {
      var params = __assign$n({}, this.parentComp.getTooltipParams());
      if (!exists(params.value)) {
        this.setToDoNothing();
        return;
      }
      this.state = TooltipStates.SHOWING;
      this.tooltipInstanceCount++;
      var callback = this.newTooltipComponentCallback.bind(this, this.tooltipInstanceCount);
      var userDetails = this.userComponentFactory.getTooltipCompDetails(params);
      userDetails.newAgStackInstance().then(callback);
    };
    CustomTooltipFeature2.prototype.hideTooltip = function(forceHide) {
      if (!forceHide && this.isInteractingWithTooltip) {
        return;
      }
      if (this.tooltipComp) {
        this.destroyTooltipComp();
        CustomTooltipFeature2.lastTooltipHideTime = (/* @__PURE__ */ new Date()).getTime();
      }
      var event = {
        type: Events.EVENT_TOOLTIP_HIDE,
        parentGui: this.parentComp.getGui()
      };
      this.eventService.dispatchEvent(event);
      this.state = TooltipStates.NOTHING;
    };
    CustomTooltipFeature2.prototype.newTooltipComponentCallback = function(tooltipInstanceCopy, tooltipComp) {
      var compNoLongerNeeded = this.state !== TooltipStates.SHOWING || this.tooltipInstanceCount !== tooltipInstanceCopy;
      if (compNoLongerNeeded) {
        this.getContext().destroyBean(tooltipComp);
        return;
      }
      var eGui = tooltipComp.getGui();
      this.tooltipComp = tooltipComp;
      if (!eGui.classList.contains("ag-tooltip")) {
        eGui.classList.add("ag-tooltip-custom");
      }
      if (this.tooltipTrigger === TooltipTrigger.HOVER) {
        eGui.classList.add("ag-tooltip-animate");
      }
      if (this.interactionEnabled) {
        eGui.classList.add("ag-tooltip-interactive");
      }
      var translate = this.localeService.getLocaleTextFunc();
      var addPopupRes = this.popupService.addPopup({
        eChild: eGui,
        ariaLabel: translate("ariaLabelTooltip", "Tooltip")
      });
      if (addPopupRes) {
        this.tooltipPopupDestroyFunc = addPopupRes.hideFunc;
      }
      this.positionTooltip();
      if (this.tooltipTrigger === TooltipTrigger.FOCUS) {
        this.onBodyScrollEventCallback = this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, this.setToDoNothing.bind(this));
        this.onColumnMovedEventCallback = this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.setToDoNothing.bind(this));
      }
      if (this.interactionEnabled) {
        if (this.tooltipTrigger === TooltipTrigger.HOVER) {
          this.tooltipMouseEnterListener = this.addManagedListener(eGui, "mouseenter", this.onTooltipMouseEnter.bind(this)) || null;
          this.tooltipMouseLeaveListener = this.addManagedListener(eGui, "mouseleave", this.onTooltipMouseLeave.bind(this)) || null;
        } else {
          this.tooltipFocusInListener = this.addManagedListener(eGui, "focusin", this.onTooltipFocusIn.bind(this)) || null;
          this.tooltipFocusOutListener = this.addManagedListener(eGui, "focusout", this.onTooltipFocusOut.bind(this)) || null;
        }
      }
      var event = {
        type: Events.EVENT_TOOLTIP_SHOW,
        tooltipGui: eGui,
        parentGui: this.parentComp.getGui()
      };
      this.eventService.dispatchEvent(event);
      this.startHideTimeout();
    };
    CustomTooltipFeature2.prototype.onTooltipMouseEnter = function() {
      this.isInteractingWithTooltip = true;
      this.unlockService();
    };
    CustomTooltipFeature2.prototype.onTooltipMouseLeave = function() {
      this.isInteractingWithTooltip = false;
      this.lockService();
    };
    CustomTooltipFeature2.prototype.onTooltipFocusIn = function() {
      this.isInteractingWithTooltip = true;
    };
    CustomTooltipFeature2.prototype.onTooltipFocusOut = function(e) {
      var _a;
      var parentGui = this.parentComp.getGui();
      var tooltipGui = (_a = this.tooltipComp) === null || _a === void 0 ? void 0 : _a.getGui();
      var relatedTarget = e.relatedTarget;
      if (tooltipGui === null || tooltipGui === void 0 ? void 0 : tooltipGui.contains(relatedTarget)) {
        return;
      }
      this.isInteractingWithTooltip = false;
      if (parentGui.contains(relatedTarget)) {
        this.startHideTimeout();
      } else {
        this.hideTooltip();
      }
    };
    CustomTooltipFeature2.prototype.positionTooltip = function() {
      var params = {
        type: "tooltip",
        ePopup: this.tooltipComp.getGui(),
        nudgeY: 18,
        skipObserver: this.tooltipMouseTrack
      };
      if (this.lastMouseEvent) {
        this.popupService.positionPopupUnderMouseEvent(__assign$n(__assign$n({}, params), { mouseEvent: this.lastMouseEvent }));
      } else {
        this.popupService.positionPopupByComponent(__assign$n(__assign$n({}, params), { eventSource: this.parentComp.getGui(), position: "under", keepWithinBounds: true, nudgeY: 5 }));
      }
    };
    CustomTooltipFeature2.prototype.destroyTooltipComp = function() {
      var _this = this;
      this.tooltipComp.getGui().classList.add("ag-tooltip-hiding");
      var tooltipPopupDestroyFunc = this.tooltipPopupDestroyFunc;
      var tooltipComp = this.tooltipComp;
      var delay = this.tooltipTrigger === TooltipTrigger.HOVER ? this.FADE_OUT_TOOLTIP_TIMEOUT : 0;
      window.setTimeout(function() {
        tooltipPopupDestroyFunc();
        _this.getContext().destroyBean(tooltipComp);
      }, delay);
      this.clearTooltipListeners();
      this.tooltipPopupDestroyFunc = void 0;
      this.tooltipComp = void 0;
    };
    CustomTooltipFeature2.prototype.clearTooltipListeners = function() {
      [
        this.tooltipMouseEnterListener,
        this.tooltipMouseLeaveListener,
        this.tooltipFocusInListener,
        this.tooltipFocusOutListener
      ].forEach(function(listener) {
        if (listener) {
          listener();
        }
      });
      this.tooltipMouseEnterListener = this.tooltipMouseLeaveListener = this.tooltipFocusInListener = this.tooltipFocusOutListener = null;
    };
    CustomTooltipFeature2.prototype.lockService = function() {
      var _this = this;
      CustomTooltipFeature2.isLocked = true;
      this.interactiveTooltipTimeoutId = window.setTimeout(function() {
        _this.unlockService();
        _this.setToDoNothing();
      }, this.INTERACTIVE_HIDE_DELAY);
    };
    CustomTooltipFeature2.prototype.unlockService = function() {
      CustomTooltipFeature2.isLocked = false;
      this.clearInteractiveTimeout();
    };
    CustomTooltipFeature2.prototype.startHideTimeout = function() {
      this.clearHideTimeout();
      this.hideTooltipTimeoutId = window.setTimeout(this.hideTooltip.bind(this), this.getTooltipDelay("hide"));
    };
    CustomTooltipFeature2.prototype.clearShowTimeout = function() {
      if (!this.showTooltipTimeoutId) {
        return;
      }
      window.clearTimeout(this.showTooltipTimeoutId);
      this.showTooltipTimeoutId = void 0;
    };
    CustomTooltipFeature2.prototype.clearHideTimeout = function() {
      if (!this.hideTooltipTimeoutId) {
        return;
      }
      window.clearTimeout(this.hideTooltipTimeoutId);
      this.hideTooltipTimeoutId = void 0;
    };
    CustomTooltipFeature2.prototype.clearInteractiveTimeout = function() {
      if (!this.interactiveTooltipTimeoutId) {
        return;
      }
      window.clearTimeout(this.interactiveTooltipTimeoutId);
      this.interactiveTooltipTimeoutId = void 0;
    };
    CustomTooltipFeature2.prototype.clearTimeouts = function() {
      this.clearShowTimeout();
      this.clearHideTimeout();
      this.clearInteractiveTimeout();
    };
    CustomTooltipFeature2.isLocked = false;
    __decorate$2E([
      Autowired("popupService")
    ], CustomTooltipFeature2.prototype, "popupService", void 0);
    __decorate$2E([
      Autowired("userComponentFactory")
    ], CustomTooltipFeature2.prototype, "userComponentFactory", void 0);
    __decorate$2E([
      PostConstruct
    ], CustomTooltipFeature2.prototype, "postConstruct", null);
    return CustomTooltipFeature2;
  }(BeanStub)
);
var CssClassManager = (
  /** @class */
  function() {
    function CssClassManager2(getGui) {
      this.cssClassStates = {};
      this.getGui = getGui;
    }
    CssClassManager2.prototype.addCssClass = function(className) {
      var _this = this;
      var list = (className || "").split(" ");
      if (list.length > 1) {
        list.forEach(function(cls) {
          return _this.addCssClass(cls);
        });
        return;
      }
      var updateNeeded = this.cssClassStates[className] !== true;
      if (updateNeeded && className.length) {
        var eGui = this.getGui();
        if (eGui) {
          eGui.classList.add(className);
        }
        this.cssClassStates[className] = true;
      }
    };
    CssClassManager2.prototype.removeCssClass = function(className) {
      var _this = this;
      var list = (className || "").split(" ");
      if (list.length > 1) {
        list.forEach(function(cls) {
          return _this.removeCssClass(cls);
        });
        return;
      }
      var updateNeeded = this.cssClassStates[className] !== false;
      if (updateNeeded && className.length) {
        var eGui = this.getGui();
        if (eGui) {
          eGui.classList.remove(className);
        }
        this.cssClassStates[className] = false;
      }
    };
    CssClassManager2.prototype.containsCssClass = function(className) {
      var eGui = this.getGui();
      if (!eGui) {
        return false;
      }
      return eGui.classList.contains(className);
    };
    CssClassManager2.prototype.addOrRemoveCssClass = function(className, addOrRemove) {
      var _this = this;
      if (!className) {
        return;
      }
      if (className.indexOf(" ") >= 0) {
        var list = (className || "").split(" ");
        if (list.length > 1) {
          list.forEach(function(cls) {
            return _this.addOrRemoveCssClass(cls, addOrRemove);
          });
          return;
        }
      }
      var updateNeeded = this.cssClassStates[className] !== addOrRemove;
      if (updateNeeded && className.length) {
        var eGui = this.getGui();
        if (eGui) {
          eGui.classList.toggle(className, addOrRemove);
        }
        this.cssClassStates[className] = addOrRemove;
      }
    };
    return CssClassManager2;
  }()
);
var __extends$36 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2D = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var compIdSequence = new NumberSequence();
var Component2 = (
  /** @class */
  function(_super) {
    __extends$36(Component3, _super);
    function Component3(template) {
      var _this = _super.call(this) || this;
      _this.displayed = true;
      _this.visible = true;
      _this.compId = compIdSequence.next();
      _this.cssClassManager = new CssClassManager(function() {
        return _this.eGui;
      });
      if (template) {
        _this.setTemplate(template);
      }
      return _this;
    }
    Component3.prototype.preConstructOnComponent = function() {
      this.usingBrowserTooltips = this.gridOptionsService.get("enableBrowserTooltips");
    };
    Component3.prototype.getCompId = function() {
      return this.compId;
    };
    Component3.prototype.getTooltipParams = function() {
      return {
        value: this.tooltipText,
        location: "UNKNOWN"
      };
    };
    Component3.prototype.setTooltip = function(newTooltipText, showDelayOverride, hideDelayOverride) {
      var _this = this;
      var removeTooltip = function() {
        if (_this.usingBrowserTooltips) {
          _this.getGui().removeAttribute("title");
        } else {
          _this.tooltipFeature = _this.destroyBean(_this.tooltipFeature);
        }
      };
      var addTooltip = function() {
        if (_this.usingBrowserTooltips) {
          _this.getGui().setAttribute("title", _this.tooltipText);
        } else {
          _this.tooltipFeature = _this.createBean(new CustomTooltipFeature(_this, showDelayOverride, hideDelayOverride));
        }
      };
      if (this.tooltipText != newTooltipText) {
        if (this.tooltipText) {
          removeTooltip();
        }
        if (newTooltipText != null) {
          this.tooltipText = newTooltipText;
          if (this.tooltipText) {
            addTooltip();
          }
        }
      }
    };
    Component3.prototype.createChildComponentsFromTags = function(parentNode, paramsMap) {
      var _this = this;
      var childNodeList = copyNodeList(parentNode.childNodes);
      childNodeList.forEach(function(childNode) {
        if (!(childNode instanceof HTMLElement)) {
          return;
        }
        var childComp = _this.createComponentFromElement(childNode, function(childComp2) {
          var childGui = childComp2.getGui();
          if (childGui) {
            _this.copyAttributesFromNode(childNode, childComp2.getGui());
          }
        }, paramsMap);
        if (childComp) {
          if (childComp.addItems && childNode.children.length) {
            _this.createChildComponentsFromTags(childNode, paramsMap);
            var items = Array.prototype.slice.call(childNode.children);
            childComp.addItems(items);
          }
          _this.swapComponentForNode(childComp, parentNode, childNode);
        } else if (childNode.childNodes) {
          _this.createChildComponentsFromTags(childNode, paramsMap);
        }
      });
    };
    Component3.prototype.createComponentFromElement = function(element, afterPreCreateCallback, paramsMap) {
      var key = element.nodeName;
      var componentParams = paramsMap ? paramsMap[element.getAttribute("ref")] : void 0;
      var ComponentClass = this.agStackComponentsRegistry.getComponentClass(key);
      if (ComponentClass) {
        Component3.elementGettingCreated = element;
        var newComponent = new ComponentClass(componentParams);
        newComponent.setParentComponent(this);
        this.createBean(newComponent, null, afterPreCreateCallback);
        return newComponent;
      }
      return null;
    };
    Component3.prototype.copyAttributesFromNode = function(source, dest) {
      iterateNamedNodeMap(source.attributes, function(name, value) {
        return dest.setAttribute(name, value);
      });
    };
    Component3.prototype.swapComponentForNode = function(newComponent, parentNode, childNode) {
      var eComponent = newComponent.getGui();
      parentNode.replaceChild(eComponent, childNode);
      parentNode.insertBefore(document.createComment(childNode.nodeName), eComponent);
      this.addDestroyFunc(this.destroyBean.bind(this, newComponent));
      this.swapInComponentForQuerySelectors(newComponent, childNode);
    };
    Component3.prototype.swapInComponentForQuerySelectors = function(newComponent, childNode) {
      var thisNoType = this;
      this.iterateOverQuerySelectors(function(querySelector) {
        if (thisNoType[querySelector.attributeName] === childNode) {
          thisNoType[querySelector.attributeName] = newComponent;
        }
      });
    };
    Component3.prototype.iterateOverQuerySelectors = function(action) {
      var thisPrototype = Object.getPrototypeOf(this);
      while (thisPrototype != null) {
        var metaData = thisPrototype.__agComponentMetaData;
        var currentProtoName = getFunctionName(thisPrototype.constructor);
        if (metaData && metaData[currentProtoName] && metaData[currentProtoName].querySelectors) {
          metaData[currentProtoName].querySelectors.forEach(function(querySelector) {
            return action(querySelector);
          });
        }
        thisPrototype = Object.getPrototypeOf(thisPrototype);
      }
    };
    Component3.prototype.activateTabIndex = function(elements) {
      var tabIndex = this.gridOptionsService.get("tabIndex");
      if (!elements) {
        elements = [];
      }
      if (!elements.length) {
        elements.push(this.getGui());
      }
      elements.forEach(function(el) {
        return el.setAttribute("tabindex", tabIndex.toString());
      });
    };
    Component3.prototype.setTemplate = function(template, paramsMap) {
      var eGui = loadTemplate(template);
      this.setTemplateFromElement(eGui, paramsMap);
    };
    Component3.prototype.setTemplateFromElement = function(element, paramsMap) {
      this.eGui = element;
      this.eGui.__agComponent = this;
      this.wireQuerySelectors();
      if (!!this.getContext()) {
        this.createChildComponentsFromTags(this.getGui(), paramsMap);
      }
    };
    Component3.prototype.createChildComponentsPreConstruct = function() {
      if (!!this.getGui()) {
        this.createChildComponentsFromTags(this.getGui());
      }
    };
    Component3.prototype.wireQuerySelectors = function() {
      var _this = this;
      if (!this.eGui) {
        return;
      }
      var thisNoType = this;
      this.iterateOverQuerySelectors(function(querySelector) {
        var setResult = function(result) {
          return thisNoType[querySelector.attributeName] = result;
        };
        var topLevelRefMatch = querySelector.refSelector && _this.getAttribute("ref") === querySelector.refSelector;
        if (topLevelRefMatch) {
          setResult(_this.eGui);
        } else {
          var resultOfQuery = _this.eGui.querySelector(querySelector.querySelector);
          if (resultOfQuery) {
            setResult(resultOfQuery.__agComponent || resultOfQuery);
          }
        }
      });
    };
    Component3.prototype.getGui = function() {
      return this.eGui;
    };
    Component3.prototype.getFocusableElement = function() {
      return this.eGui;
    };
    Component3.prototype.getAriaElement = function() {
      return this.getFocusableElement();
    };
    Component3.prototype.setParentComponent = function(component) {
      this.parentComponent = component;
    };
    Component3.prototype.getParentComponent = function() {
      return this.parentComponent;
    };
    Component3.prototype.setGui = function(eGui) {
      this.eGui = eGui;
    };
    Component3.prototype.queryForHtmlElement = function(cssSelector) {
      return this.eGui.querySelector(cssSelector);
    };
    Component3.prototype.queryForHtmlInputElement = function(cssSelector) {
      return this.eGui.querySelector(cssSelector);
    };
    Component3.prototype.appendChild = function(newChild, container) {
      if (newChild == null) {
        return;
      }
      if (!container) {
        container = this.eGui;
      }
      if (isNodeOrElement(newChild)) {
        container.appendChild(newChild);
      } else {
        var childComponent = newChild;
        container.appendChild(childComponent.getGui());
      }
    };
    Component3.prototype.isDisplayed = function() {
      return this.displayed;
    };
    Component3.prototype.setVisible = function(visible, options) {
      if (options === void 0) {
        options = {};
      }
      if (visible !== this.visible) {
        this.visible = visible;
        var skipAriaHidden = options.skipAriaHidden;
        setVisible(this.eGui, visible, { skipAriaHidden });
      }
    };
    Component3.prototype.setDisplayed = function(displayed, options) {
      if (options === void 0) {
        options = {};
      }
      if (displayed !== this.displayed) {
        this.displayed = displayed;
        var skipAriaHidden = options.skipAriaHidden;
        setDisplayed(this.eGui, displayed, { skipAriaHidden });
        var event_1 = {
          type: Component3.EVENT_DISPLAYED_CHANGED,
          visible: this.displayed
        };
        this.dispatchEvent(event_1);
      }
    };
    Component3.prototype.destroy = function() {
      if (this.tooltipFeature) {
        this.tooltipFeature = this.destroyBean(this.tooltipFeature);
      }
      if (this.parentComponent) {
        this.parentComponent = void 0;
      }
      var eGui = this.eGui;
      if (eGui && eGui.__agComponent) {
        eGui.__agComponent = void 0;
      }
      _super.prototype.destroy.call(this);
    };
    Component3.prototype.addGuiEventListener = function(event, listener, options) {
      var _this = this;
      this.eGui.addEventListener(event, listener, options);
      this.addDestroyFunc(function() {
        return _this.eGui.removeEventListener(event, listener);
      });
    };
    Component3.prototype.addCssClass = function(className) {
      this.cssClassManager.addCssClass(className);
    };
    Component3.prototype.removeCssClass = function(className) {
      this.cssClassManager.removeCssClass(className);
    };
    Component3.prototype.containsCssClass = function(className) {
      return this.cssClassManager.containsCssClass(className);
    };
    Component3.prototype.addOrRemoveCssClass = function(className, addOrRemove) {
      this.cssClassManager.addOrRemoveCssClass(className, addOrRemove);
    };
    Component3.prototype.getAttribute = function(key) {
      var eGui = this.eGui;
      return eGui ? eGui.getAttribute(key) : null;
    };
    Component3.prototype.getRefElement = function(refName) {
      return this.queryForHtmlElement('[ref="'.concat(refName, '"]'));
    };
    Component3.EVENT_DISPLAYED_CHANGED = "displayedChanged";
    __decorate$2D([
      Autowired("agStackComponentsRegistry")
    ], Component3.prototype, "agStackComponentsRegistry", void 0);
    __decorate$2D([
      PreConstruct
    ], Component3.prototype, "preConstructOnComponent", null);
    __decorate$2D([
      PreConstruct
    ], Component3.prototype, "createChildComponentsPreConstruct", null);
    return Component3;
  }(BeanStub)
);
function RefSelector(ref) {
  return querySelectorFunc.bind(this, "[ref=".concat(ref, "]"), ref);
}
function querySelectorFunc(selector, refSelector, classPrototype, methodOrAttributeName, index) {
  if (selector === null) {
    console.error("AG Grid: QuerySelector selector should not be null");
    return;
  }
  if (typeof index === "number") {
    console.error("AG Grid: QuerySelector should be on an attribute");
    return;
  }
  addToObjectProps(classPrototype, "querySelectors", {
    attributeName: methodOrAttributeName,
    querySelector: selector,
    refSelector
  });
}
function addToObjectProps(target, key, value) {
  var props = getOrCreateProps(target, getFunctionName(target.constructor));
  if (!props[key]) {
    props[key] = [];
  }
  props[key].push(value);
}
function getOrCreateProps(target, instanceName) {
  if (!target.__agComponentMetaData) {
    target.__agComponentMetaData = {};
  }
  if (!target.__agComponentMetaData[instanceName]) {
    target.__agComponentMetaData[instanceName] = {};
  }
  return target.__agComponentMetaData[instanceName];
}
var __extends$35 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2C = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ReadOnlyFloatingFilter = (
  /** @class */
  function(_super) {
    __extends$35(ReadOnlyFloatingFilter2, _super);
    function ReadOnlyFloatingFilter2() {
      return _super.call(
        this,
        /* html */
        '\n            <div class="ag-floating-filter-input" role="presentation">\n                <ag-input-text-field ref="eFloatingFilterText"></ag-input-text-field>\n            </div>'
      ) || this;
    }
    ReadOnlyFloatingFilter2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
    };
    ReadOnlyFloatingFilter2.prototype.init = function(params) {
      this.params = params;
      var displayName = this.columnModel.getDisplayNameForColumn(params.column, "header", true);
      var translate = this.localeService.getLocaleTextFunc();
      this.eFloatingFilterText.setDisabled(true).setInputAriaLabel("".concat(displayName, " ").concat(translate("ariaFilterInput", "Filter Input")));
    };
    ReadOnlyFloatingFilter2.prototype.onParentModelChanged = function(parentModel) {
      var _this = this;
      if (parentModel == null) {
        this.eFloatingFilterText.setValue("");
        return;
      }
      this.params.parentFilterInstance(function(filterInstance) {
        if (filterInstance.getModelAsString) {
          var modelAsString = filterInstance.getModelAsString(parentModel);
          _this.eFloatingFilterText.setValue(modelAsString);
        }
      });
    };
    ReadOnlyFloatingFilter2.prototype.onParamsUpdated = function(params) {
      this.refresh(params);
    };
    ReadOnlyFloatingFilter2.prototype.refresh = function(params) {
      this.init(params);
    };
    __decorate$2C([
      RefSelector("eFloatingFilterText")
    ], ReadOnlyFloatingFilter2.prototype, "eFloatingFilterText", void 0);
    __decorate$2C([
      Autowired("columnModel")
    ], ReadOnlyFloatingFilter2.prototype, "columnModel", void 0);
    return ReadOnlyFloatingFilter2;
  }(Component2)
);
var DateCompWrapper = (
  /** @class */
  function() {
    function DateCompWrapper2(context, userComponentFactory, dateComponentParams, eParent) {
      var _this = this;
      this.alive = true;
      this.context = context;
      this.eParent = eParent;
      var compDetails = userComponentFactory.getDateCompDetails(dateComponentParams);
      var promise = compDetails.newAgStackInstance();
      promise.then(function(dateComp) {
        if (!_this.alive) {
          context.destroyBean(dateComp);
          return;
        }
        _this.dateComp = dateComp;
        if (!dateComp) {
          return;
        }
        eParent.appendChild(dateComp.getGui());
        if (dateComp.afterGuiAttached) {
          dateComp.afterGuiAttached();
        }
        if (_this.tempValue) {
          dateComp.setDate(_this.tempValue);
        }
        if (_this.disabled != null) {
          _this.setDateCompDisabled(_this.disabled);
        }
      });
    }
    DateCompWrapper2.prototype.destroy = function() {
      this.alive = false;
      this.dateComp = this.context.destroyBean(this.dateComp);
    };
    DateCompWrapper2.prototype.getDate = function() {
      return this.dateComp ? this.dateComp.getDate() : this.tempValue;
    };
    DateCompWrapper2.prototype.setDate = function(value) {
      if (this.dateComp) {
        this.dateComp.setDate(value);
      } else {
        this.tempValue = value;
      }
    };
    DateCompWrapper2.prototype.setDisabled = function(disabled) {
      if (this.dateComp) {
        this.setDateCompDisabled(disabled);
      } else {
        this.disabled = disabled;
      }
    };
    DateCompWrapper2.prototype.setDisplayed = function(displayed) {
      setDisplayed(this.eParent, displayed);
    };
    DateCompWrapper2.prototype.setInputPlaceholder = function(placeholder) {
      if (this.dateComp && this.dateComp.setInputPlaceholder) {
        this.dateComp.setInputPlaceholder(placeholder);
      }
    };
    DateCompWrapper2.prototype.setInputAriaLabel = function(label) {
      if (this.dateComp && this.dateComp.setInputAriaLabel) {
        this.dateComp.setInputAriaLabel(label);
      }
    };
    DateCompWrapper2.prototype.afterGuiAttached = function(params) {
      if (this.dateComp && typeof this.dateComp.afterGuiAttached === "function") {
        this.dateComp.afterGuiAttached(params);
      }
    };
    DateCompWrapper2.prototype.updateParams = function(params) {
      var _a, _b;
      var hasRefreshed = false;
      if (((_a = this.dateComp) === null || _a === void 0 ? void 0 : _a.refresh) && typeof this.dateComp.refresh === "function") {
        var result = this.dateComp.refresh(params);
        if (result !== null) {
          hasRefreshed = true;
        }
      }
      if (!hasRefreshed && ((_b = this.dateComp) === null || _b === void 0 ? void 0 : _b.onParamsUpdated) && typeof this.dateComp.onParamsUpdated === "function") {
        this.dateComp.onParamsUpdated(params);
      }
    };
    DateCompWrapper2.prototype.setDateCompDisabled = function(disabled) {
      if (this.dateComp == null) {
        return;
      }
      if (this.dateComp.setDisabled == null) {
        return;
      }
      this.dateComp.setDisabled(disabled);
    };
    return DateCompWrapper2;
  }()
);
var OptionsFactory = (
  /** @class */
  function() {
    function OptionsFactory2() {
      this.customFilterOptions = {};
    }
    OptionsFactory2.prototype.init = function(params, defaultOptions) {
      this.filterOptions = params.filterOptions || defaultOptions;
      this.mapCustomOptions();
      this.selectDefaultItem(params);
    };
    OptionsFactory2.prototype.getFilterOptions = function() {
      return this.filterOptions;
    };
    OptionsFactory2.prototype.mapCustomOptions = function() {
      var _this = this;
      if (!this.filterOptions) {
        return;
      }
      this.filterOptions.forEach(function(filterOption) {
        if (typeof filterOption === "string") {
          return;
        }
        var requiredProperties = [["displayKey"], ["displayName"], ["predicate", "test"]];
        var propertyCheck = function(keys2) {
          if (!keys2.some(function(key) {
            return filterOption[key] != null;
          })) {
            console.warn("AG Grid: ignoring FilterOptionDef as it doesn't contain one of '".concat(keys2, "'"));
            return false;
          }
          return true;
        };
        if (!requiredProperties.every(propertyCheck)) {
          _this.filterOptions = _this.filterOptions.filter(function(v) {
            return v === filterOption;
          }) || [];
          return;
        }
        _this.customFilterOptions[filterOption.displayKey] = filterOption;
      });
    };
    OptionsFactory2.prototype.selectDefaultItem = function(params) {
      if (params.defaultOption) {
        this.defaultOption = params.defaultOption;
      } else if (this.filterOptions.length >= 1) {
        var firstFilterOption = this.filterOptions[0];
        if (typeof firstFilterOption === "string") {
          this.defaultOption = firstFilterOption;
        } else if (firstFilterOption.displayKey) {
          this.defaultOption = firstFilterOption.displayKey;
        } else {
          console.warn("AG Grid: invalid FilterOptionDef supplied as it doesn't contain a 'displayKey'");
        }
      } else {
        console.warn("AG Grid: no filter options for filter");
      }
    };
    OptionsFactory2.prototype.getDefaultOption = function() {
      return this.defaultOption;
    };
    OptionsFactory2.prototype.getCustomOption = function(name) {
      return this.customFilterOptions[name];
    };
    return OptionsFactory2;
  }()
);
var FILTER_LOCALE_TEXT = {
  applyFilter: "Apply",
  clearFilter: "Clear",
  resetFilter: "Reset",
  cancelFilter: "Cancel",
  textFilter: "Text Filter",
  numberFilter: "Number Filter",
  dateFilter: "Date Filter",
  setFilter: "Set Filter",
  filterOoo: "Filter...",
  empty: "Choose one",
  equals: "Equals",
  notEqual: "Does not equal",
  lessThan: "Less than",
  greaterThan: "Greater than",
  inRange: "Between",
  inRangeStart: "From",
  inRangeEnd: "To",
  lessThanOrEqual: "Less than or equal to",
  greaterThanOrEqual: "Greater than or equal to",
  contains: "Contains",
  notContains: "Does not contain",
  startsWith: "Begins with",
  endsWith: "Ends with",
  blank: "Blank",
  notBlank: "Not blank",
  before: "Before",
  after: "After",
  andCondition: "AND",
  orCondition: "OR",
  dateFormatOoo: "yyyy-mm-dd"
};
var __extends$34 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$m = function() {
  __assign$m = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$m.apply(this, arguments);
};
var __decorate$2B = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ManagedFocusFeature = (
  /** @class */
  function(_super) {
    __extends$34(ManagedFocusFeature2, _super);
    function ManagedFocusFeature2(eFocusableElement, callbacks) {
      if (callbacks === void 0) {
        callbacks = {};
      }
      var _this = _super.call(this) || this;
      _this.eFocusableElement = eFocusableElement;
      _this.callbacks = callbacks;
      _this.callbacks = __assign$m({ shouldStopEventPropagation: function() {
        return false;
      }, onTabKeyDown: function(e) {
        if (e.defaultPrevented) {
          return;
        }
        var nextRoot = _this.focusService.findNextFocusableElement(_this.eFocusableElement, false, e.shiftKey);
        if (!nextRoot) {
          return;
        }
        nextRoot.focus();
        e.preventDefault();
      } }, callbacks);
      return _this;
    }
    ManagedFocusFeature2.prototype.postConstruct = function() {
      this.eFocusableElement.classList.add(ManagedFocusFeature2.FOCUS_MANAGED_CLASS);
      this.addKeyDownListeners(this.eFocusableElement);
      if (this.callbacks.onFocusIn) {
        this.addManagedListener(this.eFocusableElement, "focusin", this.callbacks.onFocusIn);
      }
      if (this.callbacks.onFocusOut) {
        this.addManagedListener(this.eFocusableElement, "focusout", this.callbacks.onFocusOut);
      }
    };
    ManagedFocusFeature2.prototype.addKeyDownListeners = function(eGui) {
      var _this = this;
      this.addManagedListener(eGui, "keydown", function(e) {
        if (e.defaultPrevented || isStopPropagationForAgGrid(e)) {
          return;
        }
        if (_this.callbacks.shouldStopEventPropagation(e)) {
          stopPropagationForAgGrid(e);
          return;
        }
        if (e.key === KeyCode.TAB) {
          _this.callbacks.onTabKeyDown(e);
        } else if (_this.callbacks.handleKeyDown) {
          _this.callbacks.handleKeyDown(e);
        }
      });
    };
    ManagedFocusFeature2.FOCUS_MANAGED_CLASS = "ag-focus-managed";
    __decorate$2B([
      Autowired("focusService")
    ], ManagedFocusFeature2.prototype, "focusService", void 0);
    __decorate$2B([
      PostConstruct
    ], ManagedFocusFeature2.prototype, "postConstruct", null);
    return ManagedFocusFeature2;
  }(BeanStub)
);
var __extends$33 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2A = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RESIZE_CONTAINER_STYLE = "ag-resizer-wrapper";
var RESIZE_TEMPLATE = (
  /* html */
  '<div class="'.concat(RESIZE_CONTAINER_STYLE, '">\n        <div ref="eTopLeftResizer" class="ag-resizer ag-resizer-topLeft"></div>\n        <div ref="eTopResizer" class="ag-resizer ag-resizer-top"></div>\n        <div ref="eTopRightResizer" class="ag-resizer ag-resizer-topRight"></div>\n        <div ref="eRightResizer" class="ag-resizer ag-resizer-right"></div>\n        <div ref="eBottomRightResizer" class="ag-resizer ag-resizer-bottomRight"></div>\n        <div ref="eBottomResizer" class="ag-resizer ag-resizer-bottom"></div>\n        <div ref="eBottomLeftResizer" class="ag-resizer ag-resizer-bottomLeft"></div>\n        <div ref="eLeftResizer" class="ag-resizer ag-resizer-left"></div>\n    </div>')
);
var PositionableFeature = (
  /** @class */
  function(_super) {
    __extends$33(PositionableFeature2, _super);
    function PositionableFeature2(element, config) {
      var _this = _super.call(this) || this;
      _this.element = element;
      _this.dragStartPosition = {
        x: 0,
        y: 0
      };
      _this.position = {
        x: 0,
        y: 0
      };
      _this.lastSize = {
        width: -1,
        height: -1
      };
      _this.positioned = false;
      _this.resizersAdded = false;
      _this.resizeListeners = [];
      _this.boundaryEl = null;
      _this.isResizing = false;
      _this.isMoving = false;
      _this.resizable = {};
      _this.movable = false;
      _this.currentResizer = null;
      _this.config = Object.assign({}, { popup: false }, config);
      return _this;
    }
    PositionableFeature2.prototype.center = function() {
      var _a = this.offsetParent, clientHeight = _a.clientHeight, clientWidth = _a.clientWidth;
      var x = clientWidth / 2 - this.getWidth() / 2;
      var y = clientHeight / 2 - this.getHeight() / 2;
      this.offsetElement(x, y);
    };
    PositionableFeature2.prototype.initialisePosition = function() {
      if (this.positioned) {
        return;
      }
      var _a = this.config, centered = _a.centered, forcePopupParentAsOffsetParent = _a.forcePopupParentAsOffsetParent, minWidth = _a.minWidth, width = _a.width, minHeight = _a.minHeight, height = _a.height, x = _a.x, y = _a.y;
      if (!this.offsetParent) {
        this.setOffsetParent();
      }
      var computedMinHeight = 0;
      var computedMinWidth = 0;
      var isElementVisible = isVisible(this.element);
      if (isElementVisible) {
        var boundaryEl = this.findBoundaryElement();
        var offsetParentComputedStyles = window.getComputedStyle(boundaryEl);
        if (offsetParentComputedStyles.minWidth != null) {
          var paddingWidth = boundaryEl.offsetWidth - this.element.offsetWidth;
          computedMinWidth = parseInt(offsetParentComputedStyles.minWidth, 10) - paddingWidth;
        }
        if (offsetParentComputedStyles.minHeight != null) {
          var paddingHeight = boundaryEl.offsetHeight - this.element.offsetHeight;
          computedMinHeight = parseInt(offsetParentComputedStyles.minHeight, 10) - paddingHeight;
        }
      }
      this.minHeight = minHeight || computedMinHeight;
      this.minWidth = minWidth || computedMinWidth;
      if (width) {
        this.setWidth(width);
      }
      if (height) {
        this.setHeight(height);
      }
      if (!width || !height) {
        this.refreshSize();
      }
      if (centered) {
        this.center();
      } else if (x || y) {
        this.offsetElement(x, y);
      } else if (isElementVisible && forcePopupParentAsOffsetParent) {
        var boundaryEl = this.boundaryEl;
        var initialisedDuringPositioning = true;
        if (!boundaryEl) {
          boundaryEl = this.findBoundaryElement();
          initialisedDuringPositioning = false;
        }
        if (boundaryEl) {
          var top_1 = parseFloat(boundaryEl.style.top);
          var left = parseFloat(boundaryEl.style.left);
          if (initialisedDuringPositioning) {
            this.offsetElement(isNaN(left) ? 0 : left, isNaN(top_1) ? 0 : top_1);
          } else {
            this.setPosition(left, top_1);
          }
        }
      }
      this.positioned = !!this.offsetParent;
    };
    PositionableFeature2.prototype.isPositioned = function() {
      return this.positioned;
    };
    PositionableFeature2.prototype.getPosition = function() {
      return this.position;
    };
    PositionableFeature2.prototype.setMovable = function(movable, moveElement) {
      if (!this.config.popup || movable === this.movable) {
        return;
      }
      this.movable = movable;
      var params = this.moveElementDragListener || {
        eElement: moveElement,
        onDragStart: this.onMoveStart.bind(this),
        onDragging: this.onMove.bind(this),
        onDragStop: this.onMoveEnd.bind(this)
      };
      if (movable) {
        this.dragService.addDragSource(params);
        this.moveElementDragListener = params;
      } else {
        this.dragService.removeDragSource(params);
        this.moveElementDragListener = void 0;
      }
    };
    PositionableFeature2.prototype.setResizable = function(resizable) {
      var _this = this;
      this.clearResizeListeners();
      if (resizable) {
        this.addResizers();
      } else {
        this.removeResizers();
      }
      if (typeof resizable === "boolean") {
        if (resizable === false) {
          return;
        }
        resizable = {
          topLeft: resizable,
          top: resizable,
          topRight: resizable,
          right: resizable,
          bottomRight: resizable,
          bottom: resizable,
          bottomLeft: resizable,
          left: resizable
        };
      }
      Object.keys(resizable).forEach(function(side) {
        var resizableStructure = resizable;
        var isSideResizable = !!resizableStructure[side];
        var resizerEl = _this.getResizerElement(side);
        var params = {
          dragStartPixels: 0,
          eElement: resizerEl,
          onDragStart: function(e) {
            return _this.onResizeStart(e, side);
          },
          onDragging: _this.onResize.bind(_this),
          onDragStop: function(e) {
            return _this.onResizeEnd(e, side);
          }
        };
        if (isSideResizable || !_this.isAlive() && !isSideResizable) {
          if (isSideResizable) {
            _this.dragService.addDragSource(params);
            _this.resizeListeners.push(params);
            resizerEl.style.pointerEvents = "all";
          } else {
            resizerEl.style.pointerEvents = "none";
          }
          _this.resizable[side] = isSideResizable;
        }
      });
    };
    PositionableFeature2.prototype.removeSizeFromEl = function() {
      this.element.style.removeProperty("height");
      this.element.style.removeProperty("width");
      this.element.style.removeProperty("flex");
    };
    PositionableFeature2.prototype.restoreLastSize = function() {
      this.element.style.flex = "0 0 auto";
      var _a = this.lastSize, height = _a.height, width = _a.width;
      if (width !== -1) {
        this.element.style.width = "".concat(width, "px");
      }
      if (height !== -1) {
        this.element.style.height = "".concat(height, "px");
      }
    };
    PositionableFeature2.prototype.getHeight = function() {
      return this.element.offsetHeight;
    };
    PositionableFeature2.prototype.setHeight = function(height) {
      var popup = this.config.popup;
      var eGui = this.element;
      var isPercent = false;
      if (typeof height === "string" && height.indexOf("%") !== -1) {
        setFixedHeight(eGui, height);
        height = getAbsoluteHeight(eGui);
        isPercent = true;
      } else {
        height = Math.max(this.minHeight, height);
        if (this.positioned) {
          var availableHeight = this.getAvailableHeight();
          if (availableHeight && height > availableHeight) {
            height = availableHeight;
          }
        }
      }
      if (this.getHeight() === height) {
        return;
      }
      if (!isPercent) {
        if (popup) {
          setFixedHeight(eGui, height);
        } else {
          eGui.style.height = "".concat(height, "px");
          eGui.style.flex = "0 0 auto";
          this.lastSize.height = typeof height === "number" ? height : parseFloat(height);
        }
      } else {
        eGui.style.maxHeight = "unset";
        eGui.style.minHeight = "unset";
      }
    };
    PositionableFeature2.prototype.getAvailableHeight = function() {
      var _a = this.config, popup = _a.popup, forcePopupParentAsOffsetParent = _a.forcePopupParentAsOffsetParent;
      if (!this.positioned) {
        this.initialisePosition();
      }
      var clientHeight = this.offsetParent.clientHeight;
      if (!clientHeight) {
        return null;
      }
      var elRect = this.element.getBoundingClientRect();
      var offsetParentRect = this.offsetParent.getBoundingClientRect();
      var yPosition = popup ? this.position.y : elRect.top;
      var parentTop = popup ? 0 : offsetParentRect.top;
      var additionalHeight = 0;
      if (forcePopupParentAsOffsetParent) {
        var parentEl = this.element.parentElement;
        if (parentEl) {
          var bottom = parentEl.getBoundingClientRect().bottom;
          additionalHeight = bottom - elRect.bottom;
        }
      }
      var availableHeight = clientHeight + parentTop - yPosition - additionalHeight;
      return availableHeight;
    };
    PositionableFeature2.prototype.getWidth = function() {
      return this.element.offsetWidth;
    };
    PositionableFeature2.prototype.setWidth = function(width) {
      var eGui = this.element;
      var popup = this.config.popup;
      var isPercent = false;
      if (typeof width === "string" && width.indexOf("%") !== -1) {
        setFixedWidth(eGui, width);
        width = getAbsoluteWidth(eGui);
        isPercent = true;
      } else if (this.positioned) {
        width = Math.max(this.minWidth, width);
        var clientWidth = this.offsetParent.clientWidth;
        var xPosition = popup ? this.position.x : this.element.getBoundingClientRect().left;
        if (clientWidth && width + xPosition > clientWidth) {
          width = clientWidth - xPosition;
        }
      }
      if (this.getWidth() === width) {
        return;
      }
      if (!isPercent) {
        if (this.config.popup) {
          setFixedWidth(eGui, width);
        } else {
          eGui.style.width = "".concat(width, "px");
          eGui.style.flex = " unset";
          this.lastSize.width = typeof width === "number" ? width : parseFloat(width);
        }
      } else {
        eGui.style.maxWidth = "unset";
        eGui.style.minWidth = "unset";
      }
    };
    PositionableFeature2.prototype.offsetElement = function(x, y) {
      if (x === void 0) {
        x = 0;
      }
      if (y === void 0) {
        y = 0;
      }
      var forcePopupParentAsOffsetParent = this.config.forcePopupParentAsOffsetParent;
      var ePopup = forcePopupParentAsOffsetParent ? this.boundaryEl : this.element;
      if (!ePopup) {
        return;
      }
      this.popupService.positionPopup({
        ePopup,
        keepWithinBounds: true,
        skipObserver: this.movable || this.isResizable(),
        updatePosition: function() {
          return { x, y };
        }
      });
      this.setPosition(parseFloat(ePopup.style.left), parseFloat(ePopup.style.top));
    };
    PositionableFeature2.prototype.constrainSizeToAvailableHeight = function(constrain) {
      var _this = this;
      if (!this.config.forcePopupParentAsOffsetParent) {
        return;
      }
      var applyMaxHeightToElement = function() {
        var availableHeight = _this.getAvailableHeight();
        _this.element.style.setProperty("max-height", "".concat(availableHeight, "px"));
      };
      if (constrain) {
        this.resizeObserverSubscriber = this.resizeObserverService.observeResize(this.popupService.getPopupParent(), applyMaxHeightToElement);
      } else {
        this.element.style.removeProperty("max-height");
        if (this.resizeObserverSubscriber) {
          this.resizeObserverSubscriber();
          this.resizeObserverSubscriber = void 0;
        }
      }
    };
    PositionableFeature2.prototype.setPosition = function(x, y) {
      this.position.x = x;
      this.position.y = y;
    };
    PositionableFeature2.prototype.updateDragStartPosition = function(x, y) {
      this.dragStartPosition = { x, y };
    };
    PositionableFeature2.prototype.calculateMouseMovement = function(params) {
      var e = params.e, isLeft = params.isLeft, isTop = params.isTop, anywhereWithin = params.anywhereWithin, topBuffer = params.topBuffer;
      var xDiff = e.clientX - this.dragStartPosition.x;
      var yDiff = e.clientY - this.dragStartPosition.y;
      var movementX = this.shouldSkipX(e, !!isLeft, !!anywhereWithin, xDiff) ? 0 : xDiff;
      var movementY = this.shouldSkipY(e, !!isTop, topBuffer, yDiff) ? 0 : yDiff;
      return { movementX, movementY };
    };
    PositionableFeature2.prototype.shouldSkipX = function(e, isLeft, anywhereWithin, diff) {
      var elRect = this.element.getBoundingClientRect();
      var parentRect = this.offsetParent.getBoundingClientRect();
      var boundaryElRect = this.boundaryEl.getBoundingClientRect();
      var xPosition = this.config.popup ? this.position.x : elRect.left;
      var skipX = xPosition <= 0 && parentRect.left >= e.clientX || parentRect.right <= e.clientX && parentRect.right <= boundaryElRect.right;
      if (skipX) {
        return true;
      }
      if (isLeft) {
        skipX = // skip if we are moving to the left and the cursor
        // is positioned to the right of the left side anchor
        diff < 0 && e.clientX > xPosition + parentRect.left || // skip if we are moving to the right and the cursor
        // is positioned to the left of the dialog
        diff > 0 && e.clientX < xPosition + parentRect.left;
      } else {
        if (anywhereWithin) {
          skipX = diff < 0 && e.clientX > boundaryElRect.right || diff > 0 && e.clientX < xPosition + parentRect.left;
        } else {
          skipX = // if the movement is bound to the right side of the dialog
          // we skip if we are moving to the left and the cursor
          // is to the right of the dialog
          diff < 0 && e.clientX > boundaryElRect.right || // or skip if we are moving to the right and the cursor
          // is to the left of the right side anchor
          diff > 0 && e.clientX < boundaryElRect.right;
        }
      }
      return skipX;
    };
    PositionableFeature2.prototype.shouldSkipY = function(e, isTop, topBuffer, diff) {
      if (topBuffer === void 0) {
        topBuffer = 0;
      }
      var elRect = this.element.getBoundingClientRect();
      var parentRect = this.offsetParent.getBoundingClientRect();
      var boundaryElRect = this.boundaryEl.getBoundingClientRect();
      var yPosition = this.config.popup ? this.position.y : elRect.top;
      var skipY = yPosition <= 0 && parentRect.top >= e.clientY || parentRect.bottom <= e.clientY && parentRect.bottom <= boundaryElRect.bottom;
      if (skipY) {
        return true;
      }
      if (isTop) {
        skipY = // skip if we are moving to towards top and the cursor is
        // below the top anchor + topBuffer
        // note: topBuffer is used when moving the dialog using the title bar
        diff < 0 && e.clientY > yPosition + parentRect.top + topBuffer || // skip if we are moving to the bottom and the cursor is
        // above the top anchor
        diff > 0 && e.clientY < yPosition + parentRect.top;
      } else {
        skipY = // skip if we are moving towards the top and the cursor
        // is below the bottom anchor
        diff < 0 && e.clientY > boundaryElRect.bottom || // skip if we are moving towards the bottom and the cursor
        // is above the bottom anchor
        diff > 0 && e.clientY < boundaryElRect.bottom;
      }
      return skipY;
    };
    PositionableFeature2.prototype.createResizeMap = function() {
      var eGui = this.element;
      this.resizerMap = {
        topLeft: { element: eGui.querySelector("[ref=eTopLeftResizer]") },
        top: { element: eGui.querySelector("[ref=eTopResizer]") },
        topRight: { element: eGui.querySelector("[ref=eTopRightResizer]") },
        right: { element: eGui.querySelector("[ref=eRightResizer]") },
        bottomRight: { element: eGui.querySelector("[ref=eBottomRightResizer]") },
        bottom: { element: eGui.querySelector("[ref=eBottomResizer]") },
        bottomLeft: { element: eGui.querySelector("[ref=eBottomLeftResizer]") },
        left: { element: eGui.querySelector("[ref=eLeftResizer]") }
      };
    };
    PositionableFeature2.prototype.addResizers = function() {
      if (this.resizersAdded) {
        return;
      }
      var eGui = this.element;
      if (!eGui) {
        return;
      }
      var parser = new DOMParser();
      var resizers = parser.parseFromString(RESIZE_TEMPLATE, "text/html").body;
      eGui.appendChild(resizers.firstChild);
      this.createResizeMap();
      this.resizersAdded = true;
    };
    PositionableFeature2.prototype.removeResizers = function() {
      this.resizerMap = void 0;
      var resizerEl = this.element.querySelector(".".concat(RESIZE_CONTAINER_STYLE));
      if (resizerEl) {
        this.element.removeChild(resizerEl);
      }
      this.resizersAdded = false;
    };
    PositionableFeature2.prototype.getResizerElement = function(side) {
      return this.resizerMap[side].element;
    };
    PositionableFeature2.prototype.onResizeStart = function(e, side) {
      this.boundaryEl = this.findBoundaryElement();
      if (!this.positioned) {
        this.initialisePosition();
      }
      this.currentResizer = {
        isTop: !!side.match(/top/i),
        isRight: !!side.match(/right/i),
        isBottom: !!side.match(/bottom/i),
        isLeft: !!side.match(/left/i)
      };
      this.element.classList.add("ag-resizing");
      this.resizerMap[side].element.classList.add("ag-active");
      var _a = this.config, popup = _a.popup, forcePopupParentAsOffsetParent = _a.forcePopupParentAsOffsetParent;
      if (!popup && !forcePopupParentAsOffsetParent) {
        this.applySizeToSiblings(this.currentResizer.isBottom || this.currentResizer.isTop);
      }
      this.isResizing = true;
      this.updateDragStartPosition(e.clientX, e.clientY);
    };
    PositionableFeature2.prototype.getSiblings = function() {
      var element = this.element;
      var parent = element.parentElement;
      if (!parent) {
        return null;
      }
      return Array.prototype.slice.call(parent.children).filter(function(el) {
        return !el.classList.contains("ag-hidden");
      });
    };
    PositionableFeature2.prototype.getMinSizeOfSiblings = function() {
      var siblings = this.getSiblings() || [];
      var height = 0;
      var width = 0;
      for (var i = 0; i < siblings.length; i++) {
        var currentEl = siblings[i];
        var isFlex = !!currentEl.style.flex && currentEl.style.flex !== "0 0 auto";
        if (currentEl === this.element) {
          continue;
        }
        var nextHeight = this.minHeight || 0;
        var nextWidth = this.minWidth || 0;
        if (isFlex) {
          var computedStyle = window.getComputedStyle(currentEl);
          if (computedStyle.minHeight) {
            nextHeight = parseInt(computedStyle.minHeight, 10);
          }
          if (computedStyle.minWidth) {
            nextWidth = parseInt(computedStyle.minWidth, 10);
          }
        } else {
          nextHeight = currentEl.offsetHeight;
          nextWidth = currentEl.offsetWidth;
        }
        height += nextHeight;
        width += nextWidth;
      }
      return { height, width };
    };
    PositionableFeature2.prototype.applySizeToSiblings = function(vertical) {
      var containerToFlex = null;
      var siblings = this.getSiblings();
      if (!siblings) {
        return;
      }
      for (var i = 0; i < siblings.length; i++) {
        var el = siblings[i];
        if (el === containerToFlex) {
          continue;
        }
        if (vertical) {
          el.style.height = "".concat(el.offsetHeight, "px");
        } else {
          el.style.width = "".concat(el.offsetWidth, "px");
        }
        el.style.flex = "0 0 auto";
        if (el === this.element) {
          containerToFlex = siblings[i + 1];
        }
      }
      if (containerToFlex) {
        containerToFlex.style.removeProperty("height");
        containerToFlex.style.removeProperty("min-height");
        containerToFlex.style.removeProperty("max-height");
        containerToFlex.style.flex = "1 1 auto";
      }
    };
    PositionableFeature2.prototype.isResizable = function() {
      return Object.values(this.resizable).some(function(value) {
        return value;
      });
    };
    PositionableFeature2.prototype.onResize = function(e) {
      if (!this.isResizing || !this.currentResizer) {
        return;
      }
      var _a = this.config, popup = _a.popup, forcePopupParentAsOffsetParent = _a.forcePopupParentAsOffsetParent;
      var _b = this.currentResizer, isTop = _b.isTop, isRight = _b.isRight, isBottom = _b.isBottom, isLeft = _b.isLeft;
      var isHorizontal = isRight || isLeft;
      var isVertical = isBottom || isTop;
      var _c = this.calculateMouseMovement({ e, isLeft, isTop }), movementX = _c.movementX, movementY = _c.movementY;
      var xPosition = this.position.x;
      var yPosition = this.position.y;
      var offsetLeft = 0;
      var offsetTop = 0;
      if (isHorizontal && movementX) {
        var direction = isLeft ? -1 : 1;
        var oldWidth = this.getWidth();
        var newWidth = oldWidth + movementX * direction;
        var skipWidth = false;
        if (isLeft) {
          offsetLeft = oldWidth - newWidth;
          if (xPosition + offsetLeft <= 0 || newWidth <= this.minWidth) {
            skipWidth = true;
            offsetLeft = 0;
          }
        }
        if (!skipWidth) {
          this.setWidth(newWidth);
        }
      }
      if (isVertical && movementY) {
        var direction = isTop ? -1 : 1;
        var oldHeight = this.getHeight();
        var newHeight = oldHeight + movementY * direction;
        var skipHeight = false;
        if (isTop) {
          offsetTop = oldHeight - newHeight;
          if (yPosition + offsetTop <= 0 || newHeight <= this.minHeight) {
            skipHeight = true;
            offsetTop = 0;
          }
        } else {
          if (!this.config.popup && !this.config.forcePopupParentAsOffsetParent && oldHeight < newHeight && this.getMinSizeOfSiblings().height + newHeight > this.element.parentElement.offsetHeight) {
            skipHeight = true;
          }
        }
        if (!skipHeight) {
          this.setHeight(newHeight);
        }
      }
      this.updateDragStartPosition(e.clientX, e.clientY);
      if ((popup || forcePopupParentAsOffsetParent) && offsetLeft || offsetTop) {
        this.offsetElement(xPosition + offsetLeft, yPosition + offsetTop);
      }
    };
    PositionableFeature2.prototype.onResizeEnd = function(e, side) {
      this.isResizing = false;
      this.currentResizer = null;
      this.boundaryEl = null;
      var params = {
        type: "resize"
      };
      this.element.classList.remove("ag-resizing");
      this.resizerMap[side].element.classList.remove("ag-active");
      this.dispatchEvent(params);
    };
    PositionableFeature2.prototype.refreshSize = function() {
      var eGui = this.element;
      if (this.config.popup) {
        if (!this.config.width) {
          this.setWidth(eGui.offsetWidth);
        }
        if (!this.config.height) {
          this.setHeight(eGui.offsetHeight);
        }
      }
    };
    PositionableFeature2.prototype.onMoveStart = function(e) {
      this.boundaryEl = this.findBoundaryElement();
      if (!this.positioned) {
        this.initialisePosition();
      }
      this.isMoving = true;
      this.element.classList.add("ag-moving");
      this.updateDragStartPosition(e.clientX, e.clientY);
    };
    PositionableFeature2.prototype.onMove = function(e) {
      if (!this.isMoving) {
        return;
      }
      var _a = this.position, x = _a.x, y = _a.y;
      var topBuffer;
      if (this.config.calculateTopBuffer) {
        topBuffer = this.config.calculateTopBuffer();
      }
      var _b = this.calculateMouseMovement({
        e,
        isTop: true,
        anywhereWithin: true,
        topBuffer
      }), movementX = _b.movementX, movementY = _b.movementY;
      this.offsetElement(x + movementX, y + movementY);
      this.updateDragStartPosition(e.clientX, e.clientY);
    };
    PositionableFeature2.prototype.onMoveEnd = function() {
      this.isMoving = false;
      this.boundaryEl = null;
      this.element.classList.remove("ag-moving");
    };
    PositionableFeature2.prototype.setOffsetParent = function() {
      if (this.config.forcePopupParentAsOffsetParent) {
        this.offsetParent = this.popupService.getPopupParent();
      } else {
        this.offsetParent = this.element.offsetParent;
      }
    };
    PositionableFeature2.prototype.findBoundaryElement = function() {
      var el = this.element;
      while (el) {
        if (window.getComputedStyle(el).position !== "static") {
          return el;
        }
        el = el.parentElement;
      }
      return this.element;
    };
    PositionableFeature2.prototype.clearResizeListeners = function() {
      while (this.resizeListeners.length) {
        var params = this.resizeListeners.pop();
        this.dragService.removeDragSource(params);
      }
    };
    PositionableFeature2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      if (this.moveElementDragListener) {
        this.dragService.removeDragSource(this.moveElementDragListener);
      }
      this.constrainSizeToAvailableHeight(false);
      this.clearResizeListeners();
      this.removeResizers();
    };
    __decorate$2A([
      Autowired("popupService")
    ], PositionableFeature2.prototype, "popupService", void 0);
    __decorate$2A([
      Autowired("resizeObserverService")
    ], PositionableFeature2.prototype, "resizeObserverService", void 0);
    __decorate$2A([
      Autowired("dragService")
    ], PositionableFeature2.prototype, "dragService", void 0);
    return PositionableFeature2;
  }(BeanStub)
);
var __extends$32 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2z = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ProvidedFilter = (
  /** @class */
  function(_super) {
    __extends$32(ProvidedFilter2, _super);
    function ProvidedFilter2(filterNameKey) {
      var _this = _super.call(this) || this;
      _this.filterNameKey = filterNameKey;
      _this.applyActive = false;
      _this.hidePopup = null;
      _this.debouncePending = false;
      _this.appliedModel = null;
      _this.buttonListeners = [];
      return _this;
    }
    ProvidedFilter2.prototype.postConstruct = function() {
      this.resetTemplate();
      this.createManagedBean(new ManagedFocusFeature(this.getFocusableElement(), {
        handleKeyDown: this.handleKeyDown.bind(this)
      }));
      this.positionableFeature = new PositionableFeature(this.getPositionableElement(), {
        forcePopupParentAsOffsetParent: true
      });
      this.createBean(this.positionableFeature);
    };
    ProvidedFilter2.prototype.handleKeyDown = function(e) {
    };
    ProvidedFilter2.prototype.getFilterTitle = function() {
      return this.translate(this.filterNameKey);
    };
    ProvidedFilter2.prototype.isFilterActive = function() {
      return !!this.appliedModel;
    };
    ProvidedFilter2.prototype.resetTemplate = function(paramsMap) {
      var eGui = this.getGui();
      if (eGui) {
        eGui.removeEventListener("submit", this.onFormSubmit);
      }
      var templateString = (
        /* html */
        '\n            <form class="ag-filter-wrapper">\n                <div class="ag-filter-body-wrapper ag-'.concat(this.getCssIdentifier(), '-body-wrapper" ref="eFilterBody">\n                    ').concat(this.createBodyTemplate(), "\n                </div>\n            </form>")
      );
      this.setTemplate(templateString, paramsMap);
      eGui = this.getGui();
      if (eGui) {
        eGui.addEventListener("submit", this.onFormSubmit);
      }
    };
    ProvidedFilter2.prototype.isReadOnly = function() {
      return !!this.providedFilterParams.readOnly;
    };
    ProvidedFilter2.prototype.init = function(params) {
      var _this = this;
      this.setParams(params);
      this.resetUiToDefaults(true).then(function() {
        _this.updateUiVisibility();
        _this.setupOnBtApplyDebounce();
      });
    };
    ProvidedFilter2.prototype.setParams = function(params) {
      this.providedFilterParams = params;
      this.applyActive = ProvidedFilter2.isUseApplyButton(params);
      this.resetButtonsPanel();
    };
    ProvidedFilter2.prototype.updateParams = function(params) {
      var _this = this;
      this.providedFilterParams = params;
      this.applyActive = ProvidedFilter2.isUseApplyButton(params);
      this.resetUiToActiveModel(this.getModel(), function() {
        _this.updateUiVisibility();
        _this.setupOnBtApplyDebounce();
      });
    };
    ProvidedFilter2.prototype.resetButtonsPanel = function() {
      var _this = this;
      var buttons = this.providedFilterParams.buttons;
      var hasButtons = buttons && buttons.length > 0 && !this.isReadOnly();
      if (!this.eButtonsPanel) {
        if (hasButtons) {
          this.eButtonsPanel = document.createElement("div");
          this.eButtonsPanel.classList.add("ag-filter-apply-panel");
        }
      } else {
        clearElement(this.eButtonsPanel);
        this.buttonListeners.forEach(function(destroyFunc) {
          return destroyFunc === null || destroyFunc === void 0 ? void 0 : destroyFunc();
        });
        this.buttonListeners = [];
      }
      if (!hasButtons) {
        if (this.eButtonsPanel) {
          removeFromParent(this.eButtonsPanel);
        }
        return;
      }
      var fragment = document.createDocumentFragment();
      var addButton = function(type) {
        var text;
        var clickListener;
        switch (type) {
          case "apply":
            text = _this.translate("applyFilter");
            clickListener = function(e) {
              return _this.onBtApply(false, false, e);
            };
            break;
          case "clear":
            text = _this.translate("clearFilter");
            clickListener = function() {
              return _this.onBtClear();
            };
            break;
          case "reset":
            text = _this.translate("resetFilter");
            clickListener = function() {
              return _this.onBtReset();
            };
            break;
          case "cancel":
            text = _this.translate("cancelFilter");
            clickListener = function(e) {
              _this.onBtCancel(e);
            };
            break;
          default:
            console.warn("AG Grid: Unknown button type specified");
            return;
        }
        var buttonType = type === "apply" ? "submit" : "button";
        var button = loadTemplate(
          /* html */
          '<button\n                    type="'.concat(buttonType, '"\n                    ref="').concat(type, 'FilterButton"\n                    class="ag-button ag-standard-button ag-filter-apply-panel-button"\n                >').concat(text, "\n                </button>")
        );
        _this.buttonListeners.push(_this.addManagedListener(button, "click", clickListener));
        fragment.append(button);
      };
      convertToSet(buttons).forEach(function(type) {
        return addButton(type);
      });
      this.eButtonsPanel.append(fragment);
      this.getGui().appendChild(this.eButtonsPanel);
    };
    ProvidedFilter2.prototype.getDefaultDebounceMs = function() {
      return 0;
    };
    ProvidedFilter2.prototype.setupOnBtApplyDebounce = function() {
      var _this = this;
      var debounceMs = ProvidedFilter2.getDebounceMs(this.providedFilterParams, this.getDefaultDebounceMs());
      var debounceFunc = debounce(this.checkApplyDebounce.bind(this), debounceMs);
      this.onBtApplyDebounce = function() {
        _this.debouncePending = true;
        debounceFunc();
      };
    };
    ProvidedFilter2.prototype.checkApplyDebounce = function() {
      if (this.debouncePending) {
        this.debouncePending = false;
        this.onBtApply();
      }
    };
    ProvidedFilter2.prototype.getModel = function() {
      return this.appliedModel ? this.appliedModel : null;
    };
    ProvidedFilter2.prototype.setModel = function(model) {
      var _this = this;
      var promise = model != null ? this.setModelIntoUi(model) : this.resetUiToDefaults();
      return promise.then(function() {
        _this.updateUiVisibility();
        _this.applyModel("api");
      });
    };
    ProvidedFilter2.prototype.onBtCancel = function(e) {
      var _this = this;
      this.resetUiToActiveModel(this.getModel(), function() {
        _this.handleCancelEnd(e);
      });
    };
    ProvidedFilter2.prototype.handleCancelEnd = function(e) {
      if (this.providedFilterParams.closeOnApply) {
        this.close(e);
      }
    };
    ProvidedFilter2.prototype.resetUiToActiveModel = function(currentModel, afterUiUpdatedFunc) {
      var _this = this;
      var afterAppliedFunc = function() {
        _this.onUiChanged(false, "prevent");
        afterUiUpdatedFunc === null || afterUiUpdatedFunc === void 0 ? void 0 : afterUiUpdatedFunc();
      };
      if (currentModel != null) {
        this.setModelIntoUi(currentModel).then(afterAppliedFunc);
      } else {
        this.resetUiToDefaults().then(afterAppliedFunc);
      }
    };
    ProvidedFilter2.prototype.onBtClear = function() {
      var _this = this;
      this.resetUiToDefaults().then(function() {
        return _this.onUiChanged();
      });
    };
    ProvidedFilter2.prototype.onBtReset = function() {
      this.onBtClear();
      this.onBtApply();
    };
    ProvidedFilter2.prototype.applyModel = function(source) {
      var newModel = this.getModelFromUi();
      if (!this.isModelValid(newModel)) {
        return false;
      }
      var previousModel = this.appliedModel;
      this.appliedModel = newModel;
      return !this.areModelsEqual(previousModel, newModel);
    };
    ProvidedFilter2.prototype.isModelValid = function(model) {
      return true;
    };
    ProvidedFilter2.prototype.onFormSubmit = function(e) {
      e.preventDefault();
    };
    ProvidedFilter2.prototype.onBtApply = function(afterFloatingFilter, afterDataChange, e) {
      if (afterFloatingFilter === void 0) {
        afterFloatingFilter = false;
      }
      if (afterDataChange === void 0) {
        afterDataChange = false;
      }
      if (e) {
        e.preventDefault();
      }
      if (this.applyModel(afterDataChange ? "rowDataUpdated" : "ui")) {
        var source = "columnFilter";
        this.providedFilterParams.filterChangedCallback({ afterFloatingFilter, afterDataChange, source });
      }
      var closeOnApply = this.providedFilterParams.closeOnApply;
      if (closeOnApply && this.applyActive && !afterFloatingFilter && !afterDataChange) {
        this.close(e);
      }
    };
    ProvidedFilter2.prototype.onNewRowsLoaded = function() {
    };
    ProvidedFilter2.prototype.close = function(e) {
      if (!this.hidePopup) {
        return;
      }
      var keyboardEvent = e;
      var key = keyboardEvent && keyboardEvent.key;
      var params;
      if (key === "Enter" || key === "Space") {
        params = { keyboardEvent };
      }
      this.hidePopup(params);
      this.hidePopup = null;
    };
    ProvidedFilter2.prototype.onUiChanged = function(fromFloatingFilter, apply) {
      if (fromFloatingFilter === void 0) {
        fromFloatingFilter = false;
      }
      this.updateUiVisibility();
      this.providedFilterParams.filterModifiedCallback();
      if (this.applyActive && !this.isReadOnly()) {
        var isValid = this.isModelValid(this.getModelFromUi());
        var applyFilterButton = this.getRefElement("applyFilterButton");
        if (applyFilterButton) {
          setDisabled(applyFilterButton, !isValid);
        }
      }
      if (fromFloatingFilter && !apply || apply === "immediately") {
        this.onBtApply(fromFloatingFilter);
      } else if (!this.applyActive && !apply || apply === "debounce") {
        this.onBtApplyDebounce();
      }
    };
    ProvidedFilter2.prototype.afterGuiAttached = function(params) {
      if (params) {
        this.hidePopup = params.hidePopup;
      }
      this.refreshFilterResizer(params === null || params === void 0 ? void 0 : params.container);
    };
    ProvidedFilter2.prototype.refreshFilterResizer = function(containerType) {
      if (!this.positionableFeature || containerType === "toolPanel") {
        return;
      }
      var isFloatingFilter = containerType === "floatingFilter";
      var _a = this, positionableFeature = _a.positionableFeature, gridOptionsService = _a.gridOptionsService;
      if (isFloatingFilter) {
        positionableFeature.restoreLastSize();
        positionableFeature.setResizable(gridOptionsService.get("enableRtl") ? { bottom: true, bottomLeft: true, left: true } : { bottom: true, bottomRight: true, right: true });
      } else {
        this.positionableFeature.removeSizeFromEl();
        this.positionableFeature.setResizable(false);
      }
      this.positionableFeature.constrainSizeToAvailableHeight(true);
    };
    ProvidedFilter2.prototype.afterGuiDetached = function() {
      this.checkApplyDebounce();
      if (this.positionableFeature) {
        this.positionableFeature.constrainSizeToAvailableHeight(false);
      }
    };
    ProvidedFilter2.getDebounceMs = function(params, debounceDefault) {
      if (ProvidedFilter2.isUseApplyButton(params)) {
        if (params.debounceMs != null) {
          console.warn("AG Grid: debounceMs is ignored when apply button is present");
        }
        return 0;
      }
      return params.debounceMs != null ? params.debounceMs : debounceDefault;
    };
    ProvidedFilter2.isUseApplyButton = function(params) {
      return !!params.buttons && params.buttons.indexOf("apply") >= 0;
    };
    ProvidedFilter2.prototype.refresh = function(newParams) {
      this.providedFilterParams = newParams;
      return true;
    };
    ProvidedFilter2.prototype.destroy = function() {
      var eGui = this.getGui();
      if (eGui) {
        eGui.removeEventListener("submit", this.onFormSubmit);
      }
      this.hidePopup = null;
      if (this.positionableFeature) {
        this.positionableFeature = this.destroyBean(this.positionableFeature);
      }
      this.appliedModel = null;
      _super.prototype.destroy.call(this);
    };
    ProvidedFilter2.prototype.translate = function(key) {
      var translate = this.localeService.getLocaleTextFunc();
      return translate(key, FILTER_LOCALE_TEXT[key]);
    };
    ProvidedFilter2.prototype.getCellValue = function(rowNode) {
      return this.providedFilterParams.getValue(rowNode);
    };
    ProvidedFilter2.prototype.getPositionableElement = function() {
      return this.eFilterBody;
    };
    __decorate$2z([
      Autowired("rowModel")
    ], ProvidedFilter2.prototype, "rowModel", void 0);
    __decorate$2z([
      RefSelector("eFilterBody")
    ], ProvidedFilter2.prototype, "eFilterBody", void 0);
    __decorate$2z([
      PostConstruct
    ], ProvidedFilter2.prototype, "postConstruct", null);
    return ProvidedFilter2;
  }(Component2)
);
var __extends$31 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2y = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgAbstractLabel = (
  /** @class */
  function(_super) {
    __extends$31(AgAbstractLabel2, _super);
    function AgAbstractLabel2(config, template) {
      var _this = _super.call(this, template) || this;
      _this.labelSeparator = "";
      _this.labelAlignment = "left";
      _this.disabled = false;
      _this.label = "";
      _this.config = config || {};
      return _this;
    }
    AgAbstractLabel2.prototype.postConstruct = function() {
      this.addCssClass("ag-labeled");
      this.eLabel.classList.add("ag-label");
      var _a = this.config, labelSeparator = _a.labelSeparator, label = _a.label, labelWidth = _a.labelWidth, labelAlignment = _a.labelAlignment;
      if (labelSeparator != null) {
        this.setLabelSeparator(labelSeparator);
      }
      if (label != null) {
        this.setLabel(label);
      }
      if (labelWidth != null) {
        this.setLabelWidth(labelWidth);
      }
      this.setLabelAlignment(labelAlignment || this.labelAlignment);
      this.refreshLabel();
    };
    AgAbstractLabel2.prototype.refreshLabel = function() {
      clearElement(this.eLabel);
      if (typeof this.label === "string") {
        this.eLabel.innerText = this.label + this.labelSeparator;
      } else if (this.label) {
        this.eLabel.appendChild(this.label);
      }
      if (this.label === "") {
        setDisplayed(this.eLabel, false);
        setAriaRole(this.eLabel, "presentation");
      } else {
        setDisplayed(this.eLabel, true);
        setAriaRole(this.eLabel, null);
      }
    };
    AgAbstractLabel2.prototype.setLabelSeparator = function(labelSeparator) {
      if (this.labelSeparator === labelSeparator) {
        return this;
      }
      this.labelSeparator = labelSeparator;
      if (this.label != null) {
        this.refreshLabel();
      }
      return this;
    };
    AgAbstractLabel2.prototype.getLabelId = function() {
      this.eLabel.id = this.eLabel.id || "ag-".concat(this.getCompId(), "-label");
      return this.eLabel.id;
    };
    AgAbstractLabel2.prototype.getLabel = function() {
      return this.label;
    };
    AgAbstractLabel2.prototype.setLabel = function(label) {
      if (this.label === label) {
        return this;
      }
      this.label = label;
      this.refreshLabel();
      return this;
    };
    AgAbstractLabel2.prototype.setLabelAlignment = function(alignment) {
      var eGui = this.getGui();
      var eGuiClassList = eGui.classList;
      eGuiClassList.toggle("ag-label-align-left", alignment === "left");
      eGuiClassList.toggle("ag-label-align-right", alignment === "right");
      eGuiClassList.toggle("ag-label-align-top", alignment === "top");
      return this;
    };
    AgAbstractLabel2.prototype.setLabelEllipsis = function(hasEllipsis) {
      this.eLabel.classList.toggle("ag-label-ellipsis", hasEllipsis);
      return this;
    };
    AgAbstractLabel2.prototype.setLabelWidth = function(width) {
      if (this.label == null) {
        return this;
      }
      setElementWidth(this.eLabel, width);
      return this;
    };
    AgAbstractLabel2.prototype.setDisabled = function(disabled) {
      disabled = !!disabled;
      var element = this.getGui();
      setDisabled(element, disabled);
      element.classList.toggle("ag-disabled", disabled);
      this.disabled = disabled;
      return this;
    };
    AgAbstractLabel2.prototype.isDisabled = function() {
      return !!this.disabled;
    };
    __decorate$2y([
      PostConstruct
    ], AgAbstractLabel2.prototype, "postConstruct", null);
    return AgAbstractLabel2;
  }(Component2)
);
var __extends$30 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AgAbstractField = (
  /** @class */
  function(_super) {
    __extends$30(AgAbstractField2, _super);
    function AgAbstractField2(config, template, className) {
      var _this = _super.call(this, config, template) || this;
      _this.className = className;
      return _this;
    }
    AgAbstractField2.prototype.postConstruct = function() {
      _super.prototype.postConstruct.call(this);
      if (this.className) {
        this.addCssClass(this.className);
      }
      this.refreshAriaLabelledBy();
    };
    AgAbstractField2.prototype.refreshAriaLabelledBy = function() {
      var ariaEl = this.getAriaElement();
      var labelId = this.getLabelId();
      if (getAriaLabel(ariaEl) !== null) {
        setAriaLabelledBy(ariaEl, "");
      } else {
        setAriaLabelledBy(ariaEl, labelId !== null && labelId !== void 0 ? labelId : "");
      }
    };
    AgAbstractField2.prototype.setAriaLabel = function(label) {
      setAriaLabel(this.getAriaElement(), label);
      this.refreshAriaLabelledBy();
      return this;
    };
    AgAbstractField2.prototype.onValueChange = function(callbackFn) {
      var _this = this;
      this.addManagedListener(this, Events.EVENT_FIELD_VALUE_CHANGED, function() {
        return callbackFn(_this.getValue());
      });
      return this;
    };
    AgAbstractField2.prototype.getWidth = function() {
      return this.getGui().clientWidth;
    };
    AgAbstractField2.prototype.setWidth = function(width) {
      setFixedWidth(this.getGui(), width);
      return this;
    };
    AgAbstractField2.prototype.getPreviousValue = function() {
      return this.previousValue;
    };
    AgAbstractField2.prototype.getValue = function() {
      return this.value;
    };
    AgAbstractField2.prototype.setValue = function(value, silent) {
      if (this.value === value) {
        return this;
      }
      this.previousValue = this.value;
      this.value = value;
      if (!silent) {
        this.dispatchEvent({ type: Events.EVENT_FIELD_VALUE_CHANGED });
      }
      return this;
    };
    return AgAbstractField2;
  }(AgAbstractLabel)
);
var __extends$2$ = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2x = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TEMPLATE$1 = (
  /* html */
  '\n    <div class="ag-picker-field" role="presentation">\n        <div ref="eLabel"></div>\n            <div ref="eWrapper" class="ag-wrapper ag-picker-field-wrapper ag-picker-collapsed">\n            <div ref="eDisplayField" class="ag-picker-field-display"></div>\n            <div ref="eIcon" class="ag-picker-field-icon" aria-hidden="true"></div>\n        </div>\n    </div>'
);
var AgPickerField = (
  /** @class */
  function(_super) {
    __extends$2$(AgPickerField2, _super);
    function AgPickerField2(config) {
      var _this = _super.call(this, config, (config === null || config === void 0 ? void 0 : config.template) || TEMPLATE$1, config === null || config === void 0 ? void 0 : config.className) || this;
      _this.isPickerDisplayed = false;
      _this.skipClick = false;
      _this.pickerGap = 4;
      _this.hideCurrentPicker = null;
      _this.ariaRole = config === null || config === void 0 ? void 0 : config.ariaRole;
      _this.onPickerFocusIn = _this.onPickerFocusIn.bind(_this);
      _this.onPickerFocusOut = _this.onPickerFocusOut.bind(_this);
      if (!config) {
        return _this;
      }
      var pickerGap = config.pickerGap, maxPickerHeight = config.maxPickerHeight, variableWidth = config.variableWidth, minPickerWidth = config.minPickerWidth, maxPickerWidth = config.maxPickerWidth;
      if (pickerGap != null) {
        _this.pickerGap = pickerGap;
      }
      _this.variableWidth = !!variableWidth;
      if (maxPickerHeight != null) {
        _this.setPickerMaxHeight(maxPickerHeight);
      }
      if (minPickerWidth != null) {
        _this.setPickerMinWidth(minPickerWidth);
      }
      if (maxPickerWidth != null) {
        _this.setPickerMaxWidth(maxPickerWidth);
      }
      return _this;
    }
    AgPickerField2.prototype.postConstruct = function() {
      _super.prototype.postConstruct.call(this);
      this.setupAria();
      var displayId = "ag-".concat(this.getCompId(), "-display");
      this.eDisplayField.setAttribute("id", displayId);
      var ariaEl = this.getAriaElement();
      this.addManagedListener(ariaEl, "keydown", this.onKeyDown.bind(this));
      this.addManagedListener(this.eLabel, "mousedown", this.onLabelOrWrapperMouseDown.bind(this));
      this.addManagedListener(this.eWrapper, "mousedown", this.onLabelOrWrapperMouseDown.bind(this));
      var pickerIcon = this.config.pickerIcon;
      if (pickerIcon) {
        var icon = createIconNoSpan(pickerIcon, this.gridOptionsService);
        if (icon) {
          this.eIcon.appendChild(icon);
        }
      }
    };
    AgPickerField2.prototype.setupAria = function() {
      var ariaEl = this.getAriaElement();
      ariaEl.setAttribute("tabindex", this.gridOptionsService.get("tabIndex").toString());
      setAriaExpanded(ariaEl, false);
      if (this.ariaRole) {
        setAriaRole(ariaEl, this.ariaRole);
      }
    };
    AgPickerField2.prototype.onLabelOrWrapperMouseDown = function(e) {
      if (e) {
        var focusableEl = this.getFocusableElement();
        if (focusableEl !== this.eWrapper && (e === null || e === void 0 ? void 0 : e.target) === focusableEl) {
          return;
        }
        e.preventDefault();
        this.getFocusableElement().focus();
      }
      if (this.skipClick) {
        this.skipClick = false;
        return;
      }
      if (this.isDisabled()) {
        return;
      }
      if (this.isPickerDisplayed) {
        this.hidePicker();
      } else {
        this.showPicker();
      }
    };
    AgPickerField2.prototype.onKeyDown = function(e) {
      switch (e.key) {
        case KeyCode.UP:
        case KeyCode.DOWN:
        case KeyCode.ENTER:
        case KeyCode.SPACE:
          e.preventDefault();
          this.onLabelOrWrapperMouseDown();
          break;
        case KeyCode.ESCAPE:
          if (this.isPickerDisplayed) {
            e.preventDefault();
            e.stopPropagation();
            if (this.hideCurrentPicker) {
              this.hideCurrentPicker();
            }
          }
          break;
      }
    };
    AgPickerField2.prototype.showPicker = function() {
      this.isPickerDisplayed = true;
      if (!this.pickerComponent) {
        this.pickerComponent = this.createPickerComponent();
      }
      var pickerGui = this.pickerComponent.getGui();
      pickerGui.addEventListener("focusin", this.onPickerFocusIn);
      pickerGui.addEventListener("focusout", this.onPickerFocusOut);
      this.hideCurrentPicker = this.renderAndPositionPicker();
      this.toggleExpandedStyles(true);
    };
    AgPickerField2.prototype.renderAndPositionPicker = function() {
      var _this = this;
      var eDocument = this.gridOptionsService.getDocument();
      var ePicker = this.pickerComponent.getGui();
      if (!this.gridOptionsService.get("suppressScrollWhenPopupsAreOpen")) {
        this.destroyMouseWheelFunc = this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, function() {
          _this.hidePicker();
        });
      }
      var translate = this.localeService.getLocaleTextFunc();
      var _a = this.config, pickerAriaLabelKey = _a.pickerAriaLabelKey, pickerAriaLabelValue = _a.pickerAriaLabelValue, _b = _a.modalPicker, modalPicker = _b === void 0 ? true : _b;
      var popupParams = {
        modal: modalPicker,
        eChild: ePicker,
        closeOnEsc: true,
        closedCallback: function() {
          var shouldRestoreFocus = eDocument.activeElement === eDocument.body;
          _this.beforeHidePicker();
          if (shouldRestoreFocus && _this.isAlive()) {
            _this.getFocusableElement().focus();
          }
        },
        ariaLabel: translate(pickerAriaLabelKey, pickerAriaLabelValue)
      };
      var addPopupRes = this.popupService.addPopup(popupParams);
      var _c = this, maxPickerHeight = _c.maxPickerHeight, minPickerWidth = _c.minPickerWidth, maxPickerWidth = _c.maxPickerWidth, variableWidth = _c.variableWidth;
      if (variableWidth) {
        if (minPickerWidth) {
          ePicker.style.minWidth = minPickerWidth;
        }
        ePicker.style.width = formatSize(getAbsoluteWidth(this.eWrapper));
        if (maxPickerWidth) {
          ePicker.style.maxWidth = maxPickerWidth;
        }
      } else {
        setElementWidth(ePicker, maxPickerWidth !== null && maxPickerWidth !== void 0 ? maxPickerWidth : getAbsoluteWidth(this.eWrapper));
      }
      var maxHeight = maxPickerHeight !== null && maxPickerHeight !== void 0 ? maxPickerHeight : "".concat(getInnerHeight(this.popupService.getPopupParent()), "px");
      ePicker.style.setProperty("max-height", maxHeight);
      ePicker.style.position = "absolute";
      this.alignPickerToComponent();
      return addPopupRes.hideFunc;
    };
    AgPickerField2.prototype.alignPickerToComponent = function() {
      if (!this.pickerComponent) {
        return;
      }
      var pickerType = this.config.pickerType;
      var pickerGap = this.pickerGap;
      var alignSide = this.gridOptionsService.get("enableRtl") ? "right" : "left";
      this.popupService.positionPopupByComponent({
        type: pickerType,
        eventSource: this.eWrapper,
        ePopup: this.pickerComponent.getGui(),
        position: "under",
        alignSide,
        keepWithinBounds: true,
        nudgeY: pickerGap
      });
    };
    AgPickerField2.prototype.beforeHidePicker = function() {
      if (this.destroyMouseWheelFunc) {
        this.destroyMouseWheelFunc();
        this.destroyMouseWheelFunc = void 0;
      }
      this.toggleExpandedStyles(false);
      var pickerGui = this.pickerComponent.getGui();
      pickerGui.removeEventListener("focusin", this.onPickerFocusIn);
      pickerGui.removeEventListener("focusout", this.onPickerFocusOut);
      this.isPickerDisplayed = false;
      this.pickerComponent = void 0;
      this.hideCurrentPicker = null;
    };
    AgPickerField2.prototype.toggleExpandedStyles = function(expanded) {
      if (!this.isAlive()) {
        return;
      }
      var ariaEl = this.getAriaElement();
      setAriaExpanded(ariaEl, expanded);
      this.eWrapper.classList.toggle("ag-picker-expanded", expanded);
      this.eWrapper.classList.toggle("ag-picker-collapsed", !expanded);
    };
    AgPickerField2.prototype.onPickerFocusIn = function() {
      this.togglePickerHasFocus(true);
    };
    AgPickerField2.prototype.onPickerFocusOut = function(e) {
      var _a;
      if (!((_a = this.pickerComponent) === null || _a === void 0 ? void 0 : _a.getGui().contains(e.relatedTarget))) {
        this.togglePickerHasFocus(false);
      }
    };
    AgPickerField2.prototype.togglePickerHasFocus = function(focused) {
      if (!this.pickerComponent) {
        return;
      }
      this.eWrapper.classList.toggle("ag-picker-has-focus", focused);
    };
    AgPickerField2.prototype.hidePicker = function() {
      if (this.hideCurrentPicker) {
        this.hideCurrentPicker();
      }
    };
    AgPickerField2.prototype.setInputWidth = function(width) {
      setElementWidth(this.eWrapper, width);
      return this;
    };
    AgPickerField2.prototype.getFocusableElement = function() {
      return this.eWrapper;
    };
    AgPickerField2.prototype.setPickerGap = function(gap) {
      this.pickerGap = gap;
      return this;
    };
    AgPickerField2.prototype.setPickerMinWidth = function(width) {
      if (typeof width === "number") {
        width = "".concat(width, "px");
      }
      this.minPickerWidth = width == null ? void 0 : width;
      return this;
    };
    AgPickerField2.prototype.setPickerMaxWidth = function(width) {
      if (typeof width === "number") {
        width = "".concat(width, "px");
      }
      this.maxPickerWidth = width == null ? void 0 : width;
      return this;
    };
    AgPickerField2.prototype.setPickerMaxHeight = function(height) {
      if (typeof height === "number") {
        height = "".concat(height, "px");
      }
      this.maxPickerHeight = height == null ? void 0 : height;
      return this;
    };
    AgPickerField2.prototype.destroy = function() {
      this.hidePicker();
      _super.prototype.destroy.call(this);
    };
    __decorate$2x([
      Autowired("popupService")
    ], AgPickerField2.prototype, "popupService", void 0);
    __decorate$2x([
      RefSelector("eLabel")
    ], AgPickerField2.prototype, "eLabel", void 0);
    __decorate$2x([
      RefSelector("eWrapper")
    ], AgPickerField2.prototype, "eWrapper", void 0);
    __decorate$2x([
      RefSelector("eDisplayField")
    ], AgPickerField2.prototype, "eDisplayField", void 0);
    __decorate$2x([
      RefSelector("eIcon")
    ], AgPickerField2.prototype, "eIcon", void 0);
    return AgPickerField2;
  }(AgAbstractField)
);
var __extends$2_ = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2w = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgList = (
  /** @class */
  function(_super) {
    __extends$2_(AgList2, _super);
    function AgList2(cssIdentifier) {
      if (cssIdentifier === void 0) {
        cssIdentifier = "default";
      }
      var _this = _super.call(
        this,
        /* html */
        '<div class="ag-list ag-'.concat(cssIdentifier, '-list" role="listbox"></div>')
      ) || this;
      _this.cssIdentifier = cssIdentifier;
      _this.options = [];
      _this.itemEls = [];
      return _this;
    }
    AgList2.prototype.init = function() {
      this.addManagedListener(this.getGui(), "keydown", this.handleKeyDown.bind(this));
    };
    AgList2.prototype.handleKeyDown = function(e) {
      var key = e.key;
      switch (key) {
        case KeyCode.ENTER:
          if (!this.highlightedEl) {
            this.setValue(this.getValue());
          } else {
            var pos = this.itemEls.indexOf(this.highlightedEl);
            this.setValueByIndex(pos);
          }
          break;
        case KeyCode.DOWN:
        case KeyCode.UP:
          var isDown = key === KeyCode.DOWN;
          var itemToHighlight = void 0;
          e.preventDefault();
          if (!this.highlightedEl) {
            itemToHighlight = this.itemEls[isDown ? 0 : this.itemEls.length - 1];
          } else {
            var currentIdx = this.itemEls.indexOf(this.highlightedEl);
            var nextPos = currentIdx + (isDown ? 1 : -1);
            nextPos = Math.min(Math.max(nextPos, 0), this.itemEls.length - 1);
            itemToHighlight = this.itemEls[nextPos];
          }
          this.highlightItem(itemToHighlight);
          break;
      }
    };
    AgList2.prototype.addOptions = function(listOptions) {
      var _this = this;
      listOptions.forEach(function(listOption) {
        return _this.addOption(listOption);
      });
      return this;
    };
    AgList2.prototype.addOption = function(listOption) {
      var value = listOption.value, text = listOption.text;
      var sanitisedText = escapeString(text || value);
      this.options.push({ value, text: sanitisedText });
      this.renderOption(value, sanitisedText);
      this.updateIndices();
      return this;
    };
    AgList2.prototype.updateIndices = function() {
      var options = this.getGui().querySelectorAll(".ag-list-item");
      options.forEach(function(option, idx) {
        setAriaPosInSet(option, idx + 1);
        setAriaSetSize(option, options.length);
      });
    };
    AgList2.prototype.renderOption = function(value, text) {
      var _this = this;
      var itemEl = document.createElement("div");
      setAriaRole(itemEl, "option");
      itemEl.classList.add("ag-list-item", "ag-".concat(this.cssIdentifier, "-list-item"));
      itemEl.innerHTML = "<span>".concat(text, "</span>");
      itemEl.tabIndex = -1;
      this.itemEls.push(itemEl);
      this.addManagedListener(itemEl, "mouseover", function() {
        return _this.highlightItem(itemEl);
      });
      this.addManagedListener(itemEl, "mouseleave", function() {
        return _this.clearHighlighted();
      });
      this.addManagedListener(itemEl, "click", function() {
        return _this.setValue(value);
      });
      this.getGui().appendChild(itemEl);
    };
    AgList2.prototype.setValue = function(value, silent) {
      if (this.value === value) {
        this.fireItemSelected();
        return this;
      }
      if (value == null) {
        this.reset();
        return this;
      }
      var idx = this.options.findIndex(function(option2) {
        return option2.value === value;
      });
      if (idx !== -1) {
        var option = this.options[idx];
        this.value = option.value;
        this.displayValue = option.text != null ? option.text : option.value;
        this.highlightItem(this.itemEls[idx]);
        if (!silent) {
          this.fireChangeEvent();
        }
      }
      return this;
    };
    AgList2.prototype.setValueByIndex = function(idx) {
      return this.setValue(this.options[idx].value);
    };
    AgList2.prototype.getValue = function() {
      return this.value;
    };
    AgList2.prototype.getDisplayValue = function() {
      return this.displayValue;
    };
    AgList2.prototype.refreshHighlighted = function() {
      var _this = this;
      this.clearHighlighted();
      var idx = this.options.findIndex(function(option) {
        return option.value === _this.value;
      });
      if (idx !== -1) {
        this.highlightItem(this.itemEls[idx]);
      }
    };
    AgList2.prototype.reset = function() {
      this.value = null;
      this.displayValue = null;
      this.clearHighlighted();
      this.fireChangeEvent();
    };
    AgList2.prototype.highlightItem = function(el) {
      if (!isVisible(el)) {
        return;
      }
      this.clearHighlighted();
      this.highlightedEl = el;
      this.highlightedEl.classList.add(AgList2.ACTIVE_CLASS);
      setAriaSelected(this.highlightedEl, true);
      this.highlightedEl.focus();
    };
    AgList2.prototype.clearHighlighted = function() {
      if (!this.highlightedEl || !isVisible(this.highlightedEl)) {
        return;
      }
      this.highlightedEl.classList.remove(AgList2.ACTIVE_CLASS);
      setAriaSelected(this.highlightedEl, false);
      this.highlightedEl = null;
    };
    AgList2.prototype.fireChangeEvent = function() {
      this.dispatchEvent({ type: Events.EVENT_FIELD_VALUE_CHANGED });
      this.fireItemSelected();
    };
    AgList2.prototype.fireItemSelected = function() {
      this.dispatchEvent({ type: AgList2.EVENT_ITEM_SELECTED });
    };
    AgList2.EVENT_ITEM_SELECTED = "selectedItem";
    AgList2.ACTIVE_CLASS = "ag-active-item";
    __decorate$2w([
      PostConstruct
    ], AgList2.prototype, "init", null);
    return AgList2;
  }(Component2)
);
var __extends$2Z = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$l = function() {
  __assign$l = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$l.apply(this, arguments);
};
var AgSelect = (
  /** @class */
  function(_super) {
    __extends$2Z(AgSelect2, _super);
    function AgSelect2(config) {
      return _super.call(this, __assign$l({ pickerAriaLabelKey: "ariaLabelSelectField", pickerAriaLabelValue: "Select Field", pickerType: "ag-list", className: "ag-select", pickerIcon: "smallDown", ariaRole: "combobox" }, config)) || this;
    }
    AgSelect2.prototype.postConstruct = function() {
      _super.prototype.postConstruct.call(this);
      this.createListComponent();
      this.eWrapper.tabIndex = this.gridOptionsService.get("tabIndex");
    };
    AgSelect2.prototype.createListComponent = function() {
      var _this = this;
      this.listComponent = this.createBean(new AgList("select"));
      this.listComponent.setParentComponent(this);
      var eListAriaEl = this.listComponent.getAriaElement();
      var listId = "ag-select-list-".concat(this.listComponent.getCompId());
      eListAriaEl.setAttribute("id", listId);
      setAriaControls(this.getAriaElement(), eListAriaEl);
      this.listComponent.addGuiEventListener("keydown", function(e) {
        if (e.key === KeyCode.TAB) {
          e.preventDefault();
          e.stopImmediatePropagation();
          _this.getGui().dispatchEvent(new KeyboardEvent("keydown", {
            key: e.key,
            shiftKey: e.shiftKey,
            ctrlKey: e.ctrlKey,
            bubbles: true
          }));
        }
      });
      this.listComponent.addManagedListener(this.listComponent, AgList.EVENT_ITEM_SELECTED, function() {
        _this.hidePicker();
        _this.dispatchEvent({ type: AgSelect2.EVENT_ITEM_SELECTED });
      });
      this.listComponent.addManagedListener(this.listComponent, Events.EVENT_FIELD_VALUE_CHANGED, function() {
        if (!_this.listComponent) {
          return;
        }
        _this.setValue(_this.listComponent.getValue(), false, true);
        _this.hidePicker();
      });
    };
    AgSelect2.prototype.createPickerComponent = function() {
      return this.listComponent;
    };
    AgSelect2.prototype.showPicker = function() {
      if (!this.listComponent) {
        return;
      }
      _super.prototype.showPicker.call(this);
      this.listComponent.refreshHighlighted();
    };
    AgSelect2.prototype.addOptions = function(options) {
      var _this = this;
      options.forEach(function(option) {
        return _this.addOption(option);
      });
      return this;
    };
    AgSelect2.prototype.addOption = function(option) {
      this.listComponent.addOption(option);
      return this;
    };
    AgSelect2.prototype.setValue = function(value, silent, fromPicker) {
      if (this.value === value || !this.listComponent) {
        return this;
      }
      if (!fromPicker) {
        this.listComponent.setValue(value, true);
      }
      var newValue = this.listComponent.getValue();
      if (newValue === this.getValue()) {
        return this;
      }
      this.eDisplayField.innerHTML = this.listComponent.getDisplayValue();
      return _super.prototype.setValue.call(this, value, silent);
    };
    AgSelect2.prototype.destroy = function() {
      if (this.listComponent) {
        this.destroyBean(this.listComponent);
        this.listComponent = void 0;
      }
      _super.prototype.destroy.call(this);
    };
    AgSelect2.EVENT_ITEM_SELECTED = "selectedItem";
    return AgSelect2;
  }(AgPickerField)
);
var __extends$2Y = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2v = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgAbstractInputField = (
  /** @class */
  function(_super) {
    __extends$2Y(AgAbstractInputField2, _super);
    function AgAbstractInputField2(config, className, inputType, displayFieldTag) {
      if (inputType === void 0) {
        inputType = "text";
      }
      if (displayFieldTag === void 0) {
        displayFieldTag = "input";
      }
      var _this = _super.call(
        this,
        config,
        /* html */
        '\n            <div role="presentation">\n                <div ref="eLabel" class="ag-input-field-label"></div>\n                <div ref="eWrapper" class="ag-wrapper ag-input-wrapper" role="presentation">\n                    <'.concat(displayFieldTag, ' ref="eInput" class="ag-input-field-input"></').concat(displayFieldTag, ">\n                </div>\n            </div>"),
        className
      ) || this;
      _this.inputType = inputType;
      _this.displayFieldTag = displayFieldTag;
      return _this;
    }
    AgAbstractInputField2.prototype.postConstruct = function() {
      _super.prototype.postConstruct.call(this);
      this.setInputType();
      this.eLabel.classList.add("".concat(this.className, "-label"));
      this.eWrapper.classList.add("".concat(this.className, "-input-wrapper"));
      this.eInput.classList.add("".concat(this.className, "-input"));
      this.addCssClass("ag-input-field");
      this.eInput.id = this.eInput.id || "ag-".concat(this.getCompId(), "-input");
      var _a = this.config, width = _a.width, value = _a.value;
      if (width != null) {
        this.setWidth(width);
      }
      if (value != null) {
        this.setValue(value);
      }
      this.addInputListeners();
      this.activateTabIndex([this.eInput]);
    };
    AgAbstractInputField2.prototype.addInputListeners = function() {
      var _this = this;
      this.addManagedListener(this.eInput, "input", function(e) {
        return _this.setValue(e.target.value);
      });
    };
    AgAbstractInputField2.prototype.setInputType = function() {
      if (this.displayFieldTag === "input") {
        this.eInput.setAttribute("type", this.inputType);
      }
    };
    AgAbstractInputField2.prototype.getInputElement = function() {
      return this.eInput;
    };
    AgAbstractInputField2.prototype.setInputWidth = function(width) {
      setElementWidth(this.eWrapper, width);
      return this;
    };
    AgAbstractInputField2.prototype.setInputName = function(name) {
      this.getInputElement().setAttribute("name", name);
      return this;
    };
    AgAbstractInputField2.prototype.getFocusableElement = function() {
      return this.eInput;
    };
    AgAbstractInputField2.prototype.setMaxLength = function(length) {
      var eInput = this.eInput;
      eInput.maxLength = length;
      return this;
    };
    AgAbstractInputField2.prototype.setInputPlaceholder = function(placeholder) {
      addOrRemoveAttribute(this.eInput, "placeholder", placeholder);
      return this;
    };
    AgAbstractInputField2.prototype.setInputAriaLabel = function(label) {
      setAriaLabel(this.eInput, label);
      this.refreshAriaLabelledBy();
      return this;
    };
    AgAbstractInputField2.prototype.setDisabled = function(disabled) {
      setDisabled(this.eInput, disabled);
      return _super.prototype.setDisabled.call(this, disabled);
    };
    AgAbstractInputField2.prototype.setAutoComplete = function(value) {
      if (value === true) {
        addOrRemoveAttribute(this.eInput, "autocomplete", null);
      } else {
        var autoCompleteValue = typeof value === "string" ? value : "off";
        addOrRemoveAttribute(this.eInput, "autocomplete", autoCompleteValue);
      }
      return this;
    };
    __decorate$2v([
      RefSelector("eLabel")
    ], AgAbstractInputField2.prototype, "eLabel", void 0);
    __decorate$2v([
      RefSelector("eWrapper")
    ], AgAbstractInputField2.prototype, "eWrapper", void 0);
    __decorate$2v([
      RefSelector("eInput")
    ], AgAbstractInputField2.prototype, "eInput", void 0);
    return AgAbstractInputField2;
  }(AgAbstractField)
);
var __extends$2X = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AgCheckbox = (
  /** @class */
  function(_super) {
    __extends$2X(AgCheckbox2, _super);
    function AgCheckbox2(config, className, inputType) {
      if (className === void 0) {
        className = "ag-checkbox";
      }
      if (inputType === void 0) {
        inputType = "checkbox";
      }
      var _this = _super.call(this, config, className, inputType) || this;
      _this.labelAlignment = "right";
      _this.selected = false;
      _this.readOnly = false;
      _this.passive = false;
      return _this;
    }
    AgCheckbox2.prototype.addInputListeners = function() {
      this.addManagedListener(this.eInput, "click", this.onCheckboxClick.bind(this));
      this.addManagedListener(this.eLabel, "click", this.toggle.bind(this));
    };
    AgCheckbox2.prototype.getNextValue = function() {
      return this.selected === void 0 ? true : !this.selected;
    };
    AgCheckbox2.prototype.setPassive = function(passive) {
      this.passive = passive;
    };
    AgCheckbox2.prototype.isReadOnly = function() {
      return this.readOnly;
    };
    AgCheckbox2.prototype.setReadOnly = function(readOnly) {
      this.eWrapper.classList.toggle("ag-disabled", readOnly);
      this.eInput.disabled = readOnly;
      this.readOnly = readOnly;
    };
    AgCheckbox2.prototype.setDisabled = function(disabled) {
      this.eWrapper.classList.toggle("ag-disabled", disabled);
      return _super.prototype.setDisabled.call(this, disabled);
    };
    AgCheckbox2.prototype.toggle = function() {
      if (this.eInput.disabled) {
        return;
      }
      var previousValue = this.isSelected();
      var nextValue = this.getNextValue();
      if (this.passive) {
        this.dispatchChange(nextValue, previousValue);
      } else {
        this.setValue(nextValue);
      }
    };
    AgCheckbox2.prototype.getValue = function() {
      return this.isSelected();
    };
    AgCheckbox2.prototype.setValue = function(value, silent) {
      this.refreshSelectedClass(value);
      this.setSelected(value, silent);
      return this;
    };
    AgCheckbox2.prototype.setName = function(name) {
      var input = this.getInputElement();
      input.name = name;
      return this;
    };
    AgCheckbox2.prototype.isSelected = function() {
      return this.selected;
    };
    AgCheckbox2.prototype.setSelected = function(selected, silent) {
      if (this.isSelected() === selected) {
        return;
      }
      this.previousValue = this.isSelected();
      selected = this.selected = typeof selected === "boolean" ? selected : void 0;
      this.eInput.checked = selected;
      this.eInput.indeterminate = selected === void 0;
      if (!silent) {
        this.dispatchChange(this.selected, this.previousValue);
      }
    };
    AgCheckbox2.prototype.dispatchChange = function(selected, previousValue, event) {
      this.dispatchEvent({ type: Events.EVENT_FIELD_VALUE_CHANGED, selected, previousValue, event });
      var input = this.getInputElement();
      var checkboxChangedEvent = {
        type: Events.EVENT_CHECKBOX_CHANGED,
        id: input.id,
        name: input.name,
        selected,
        previousValue
      };
      this.eventService.dispatchEvent(checkboxChangedEvent);
    };
    AgCheckbox2.prototype.onCheckboxClick = function(e) {
      if (this.passive || this.eInput.disabled) {
        return;
      }
      var previousValue = this.isSelected();
      var selected = this.selected = e.target.checked;
      this.refreshSelectedClass(selected);
      this.dispatchChange(selected, previousValue, e);
    };
    AgCheckbox2.prototype.refreshSelectedClass = function(value) {
      this.eWrapper.classList.toggle("ag-checked", value === true);
      this.eWrapper.classList.toggle("ag-indeterminate", value == null);
    };
    return AgCheckbox2;
  }(AgAbstractInputField)
);
var __extends$2W = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AgRadioButton = (
  /** @class */
  function(_super) {
    __extends$2W(AgRadioButton2, _super);
    function AgRadioButton2(config) {
      return _super.call(this, config, "ag-radio-button", "radio") || this;
    }
    AgRadioButton2.prototype.isSelected = function() {
      return this.eInput.checked;
    };
    AgRadioButton2.prototype.toggle = function() {
      if (this.eInput.disabled) {
        return;
      }
      if (!this.isSelected()) {
        this.setValue(true);
      }
    };
    AgRadioButton2.prototype.addInputListeners = function() {
      _super.prototype.addInputListeners.call(this);
      this.addManagedListener(this.eventService, Events.EVENT_CHECKBOX_CHANGED, this.onChange.bind(this));
    };
    AgRadioButton2.prototype.onChange = function(event) {
      if (event.selected && event.name && this.eInput.name && this.eInput.name === event.name && event.id && this.eInput.id !== event.id) {
        this.setValue(false, true);
      }
    };
    return AgRadioButton2;
  }(AgCheckbox)
);
var __extends$2V = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __read$u = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$o = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var SimpleFilterModelFormatter = (
  /** @class */
  function() {
    function SimpleFilterModelFormatter2(localeService, optionsFactory, valueFormatter) {
      this.localeService = localeService;
      this.optionsFactory = optionsFactory;
      this.valueFormatter = valueFormatter;
    }
    SimpleFilterModelFormatter2.prototype.getModelAsString = function(model) {
      var _this = this;
      if (!model) {
        return null;
      }
      var isCombined = model.operator != null;
      var translate = this.localeService.getLocaleTextFunc();
      if (isCombined) {
        var combinedModel = model;
        var conditions = combinedModel.conditions;
        if (!conditions) {
          var condition1 = combinedModel.condition1, condition2 = combinedModel.condition2;
          conditions = [condition1, condition2];
        }
        var customOptions = conditions.map(function(condition3) {
          return _this.getModelAsString(condition3);
        });
        var joinOperatorTranslateKey = combinedModel.operator === "AND" ? "andCondition" : "orCondition";
        return customOptions.join(" ".concat(translate(joinOperatorTranslateKey, FILTER_LOCALE_TEXT[joinOperatorTranslateKey]), " "));
      } else if (model.type === SimpleFilter.BLANK || model.type === SimpleFilter.NOT_BLANK) {
        return translate(model.type, model.type);
      } else {
        var condition = model;
        var customOption = this.optionsFactory.getCustomOption(condition.type);
        var _a = customOption || {}, displayKey = _a.displayKey, displayName = _a.displayName, numberOfInputs = _a.numberOfInputs;
        if (displayKey && displayName && numberOfInputs === 0) {
          translate(displayKey, displayName);
          return displayName;
        }
        return this.conditionToString(condition, customOption);
      }
    };
    SimpleFilterModelFormatter2.prototype.updateParams = function(params) {
      this.optionsFactory = params.optionsFactory;
    };
    SimpleFilterModelFormatter2.prototype.formatValue = function(value) {
      var _a;
      return this.valueFormatter ? (_a = this.valueFormatter(value !== null && value !== void 0 ? value : null)) !== null && _a !== void 0 ? _a : "" : String(value);
    };
    return SimpleFilterModelFormatter2;
  }()
);
var SimpleFilter = (
  /** @class */
  function(_super) {
    __extends$2V(SimpleFilter2, _super);
    function SimpleFilter2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.eTypes = [];
      _this.eJoinOperatorPanels = [];
      _this.eJoinOperatorsAnd = [];
      _this.eJoinOperatorsOr = [];
      _this.eConditionBodies = [];
      _this.listener = function() {
        return _this.onUiChanged();
      };
      _this.lastUiCompletePosition = null;
      _this.joinOperatorId = 0;
      return _this;
    }
    SimpleFilter2.prototype.getNumberOfInputs = function(type) {
      var customOpts = this.optionsFactory.getCustomOption(type);
      if (customOpts) {
        var numberOfInputs = customOpts.numberOfInputs;
        return numberOfInputs != null ? numberOfInputs : 1;
      }
      var zeroInputTypes = [
        SimpleFilter2.EMPTY,
        SimpleFilter2.NOT_BLANK,
        SimpleFilter2.BLANK
      ];
      if (type && zeroInputTypes.indexOf(type) >= 0) {
        return 0;
      } else if (type === SimpleFilter2.IN_RANGE) {
        return 2;
      }
      return 1;
    };
    SimpleFilter2.prototype.onFloatingFilterChanged = function(type, value) {
      this.setTypeFromFloatingFilter(type);
      this.setValueFromFloatingFilter(value);
      this.onUiChanged(true);
    };
    SimpleFilter2.prototype.setTypeFromFloatingFilter = function(type) {
      var _this = this;
      this.eTypes.forEach(function(eType, position) {
        if (position === 0) {
          eType.setValue(type, true);
        } else {
          eType.setValue(_this.optionsFactory.getDefaultOption(), true);
        }
      });
    };
    SimpleFilter2.prototype.getModelFromUi = function() {
      var conditions = this.getUiCompleteConditions();
      if (conditions.length === 0) {
        return null;
      }
      if (this.maxNumConditions > 1 && conditions.length > 1) {
        return {
          filterType: this.getFilterType(),
          operator: this.getJoinOperator(),
          condition1: conditions[0],
          condition2: conditions[1],
          conditions
        };
      }
      return conditions[0];
    };
    SimpleFilter2.prototype.getConditionTypes = function() {
      return this.eTypes.map(function(eType) {
        return eType.getValue();
      });
    };
    SimpleFilter2.prototype.getConditionType = function(position) {
      return this.eTypes[position].getValue();
    };
    SimpleFilter2.prototype.getJoinOperator = function() {
      if (this.eJoinOperatorsOr.length === 0) {
        return this.defaultJoinOperator;
      }
      return this.eJoinOperatorsOr[0].getValue() === true ? "OR" : "AND";
    };
    SimpleFilter2.prototype.areModelsEqual = function(a, b) {
      var _this = this;
      if (!a && !b) {
        return true;
      }
      if (!a && b || a && !b) {
        return false;
      }
      var aIsSimple = !a.operator;
      var bIsSimple = !b.operator;
      var oneSimpleOneCombined = !aIsSimple && bIsSimple || aIsSimple && !bIsSimple;
      if (oneSimpleOneCombined) {
        return false;
      }
      var res;
      if (aIsSimple) {
        var aSimple = a;
        var bSimple = b;
        res = this.areSimpleModelsEqual(aSimple, bSimple);
      } else {
        var aCombined = a;
        var bCombined = b;
        res = aCombined.operator === bCombined.operator && areEqual(aCombined.conditions, bCombined.conditions, function(aModel, bModel) {
          return _this.areSimpleModelsEqual(aModel, bModel);
        });
      }
      return res;
    };
    SimpleFilter2.prototype.shouldRefresh = function(newParams) {
      var _a, _b, _c;
      var model = this.getModel();
      var conditions = model ? (_a = model.conditions) !== null && _a !== void 0 ? _a : [model] : null;
      var newOptionsList = (_c = (_b = newParams.filterOptions) === null || _b === void 0 ? void 0 : _b.map(function(option) {
        return typeof option === "string" ? option : option.displayKey;
      })) !== null && _c !== void 0 ? _c : this.getDefaultFilterOptions();
      var allConditionsExistInNewOptionsList = !conditions || conditions.every(function(condition) {
        return newOptionsList.find(function(option) {
          return option === condition.type;
        }) !== void 0;
      });
      if (!allConditionsExistInNewOptionsList) {
        return false;
      }
      if (typeof newParams.maxNumConditions === "number" && conditions && conditions.length > newParams.maxNumConditions) {
        return false;
      }
      return true;
    };
    SimpleFilter2.prototype.refresh = function(newParams) {
      if (!this.shouldRefresh(newParams)) {
        return false;
      }
      var parentRefreshed = _super.prototype.refresh.call(this, newParams);
      if (!parentRefreshed) {
        return false;
      }
      this.setParams(newParams);
      this.removeConditionsAndOperators(0);
      this.createOption();
      this.setModel(this.getModel());
      return true;
    };
    SimpleFilter2.prototype.setModelIntoUi = function(model) {
      var _this = this;
      var isCombined = model.operator;
      if (isCombined) {
        var combinedModel = model;
        if (!combinedModel.conditions) {
          combinedModel.conditions = [
            combinedModel.condition1,
            combinedModel.condition2
          ];
        }
        var numConditions = this.validateAndUpdateConditions(combinedModel.conditions);
        var numPrevConditions = this.getNumConditions();
        if (numConditions < numPrevConditions) {
          this.removeConditionsAndOperators(numConditions);
        } else if (numConditions > numPrevConditions) {
          for (var i = numPrevConditions; i < numConditions; i++) {
            this.createJoinOperatorPanel();
            this.createOption();
          }
        }
        var orChecked_1 = combinedModel.operator === "OR";
        this.eJoinOperatorsAnd.forEach(function(eJoinOperatorAnd) {
          return eJoinOperatorAnd.setValue(!orChecked_1, true);
        });
        this.eJoinOperatorsOr.forEach(function(eJoinOperatorOr) {
          return eJoinOperatorOr.setValue(orChecked_1, true);
        });
        combinedModel.conditions.forEach(function(condition, position) {
          _this.eTypes[position].setValue(condition.type, true);
          _this.setConditionIntoUi(condition, position);
        });
      } else {
        var simpleModel = model;
        if (this.getNumConditions() > 1) {
          this.removeConditionsAndOperators(1);
        }
        this.eTypes[0].setValue(simpleModel.type, true);
        this.setConditionIntoUi(simpleModel, 0);
      }
      this.lastUiCompletePosition = this.getNumConditions() - 1;
      this.createMissingConditionsAndOperators();
      this.onUiChanged();
      return AgPromise.resolve();
    };
    SimpleFilter2.prototype.validateAndUpdateConditions = function(conditions) {
      var numConditions = conditions.length;
      if (numConditions > this.maxNumConditions) {
        conditions.splice(this.maxNumConditions);
        warnOnce('Filter Model contains more conditions than "filterParams.maxNumConditions". Additional conditions have been ignored.');
        numConditions = this.maxNumConditions;
      }
      return numConditions;
    };
    SimpleFilter2.prototype.doesFilterPass = function(params) {
      var _this = this;
      var _a;
      var model = this.getModel();
      if (model == null) {
        return true;
      }
      var operator = model.operator;
      var models = [];
      if (operator) {
        var combinedModel = model;
        models.push.apply(models, __spreadArray$o([], __read$u((_a = combinedModel.conditions) !== null && _a !== void 0 ? _a : []), false));
      } else {
        models.push(model);
      }
      var combineFunction = operator && operator === "OR" ? "some" : "every";
      return models[combineFunction](function(m) {
        return _this.individualConditionPasses(params, m);
      });
    };
    SimpleFilter2.prototype.setParams = function(params) {
      _super.prototype.setParams.call(this, params);
      this.setNumConditions(params);
      this.defaultJoinOperator = this.getDefaultJoinOperator(params.defaultJoinOperator);
      this.filterPlaceholder = params.filterPlaceholder;
      this.optionsFactory = new OptionsFactory();
      this.optionsFactory.init(params, this.getDefaultFilterOptions());
      this.createFilterListOptions();
      this.createOption();
      this.createMissingConditionsAndOperators();
      if (this.isReadOnly()) {
        this.eFilterBody.setAttribute("tabindex", "-1");
      }
    };
    SimpleFilter2.prototype.setNumConditions = function(params) {
      var _a, _b;
      if (params.suppressAndOrCondition != null) {
        warnOnce('Since v29.2 "filterParams.suppressAndOrCondition" is deprecated. Use "filterParams.maxNumConditions = 1" instead.');
      }
      if (params.alwaysShowBothConditions != null) {
        warnOnce('Since v29.2 "filterParams.alwaysShowBothConditions" is deprecated. Use "filterParams.numAlwaysVisibleConditions = 2" instead.');
      }
      this.maxNumConditions = (_a = params.maxNumConditions) !== null && _a !== void 0 ? _a : params.suppressAndOrCondition ? 1 : 2;
      if (this.maxNumConditions < 1) {
        warnOnce('"filterParams.maxNumConditions" must be greater than or equal to zero.');
        this.maxNumConditions = 1;
      }
      this.numAlwaysVisibleConditions = (_b = params.numAlwaysVisibleConditions) !== null && _b !== void 0 ? _b : params.alwaysShowBothConditions ? 2 : 1;
      if (this.numAlwaysVisibleConditions < 1) {
        warnOnce('"filterParams.numAlwaysVisibleConditions" must be greater than or equal to zero.');
        this.numAlwaysVisibleConditions = 1;
      }
      if (this.numAlwaysVisibleConditions > this.maxNumConditions) {
        warnOnce('"filterParams.numAlwaysVisibleConditions" cannot be greater than "filterParams.maxNumConditions".');
        this.numAlwaysVisibleConditions = this.maxNumConditions;
      }
    };
    SimpleFilter2.prototype.createOption = function() {
      var _this = this;
      var eType = this.createManagedBean(new AgSelect());
      this.eTypes.push(eType);
      eType.addCssClass("ag-filter-select");
      this.eFilterBody.appendChild(eType.getGui());
      var eConditionBody = this.createValueElement();
      this.eConditionBodies.push(eConditionBody);
      this.eFilterBody.appendChild(eConditionBody);
      this.putOptionsIntoDropdown(eType);
      this.resetType(eType);
      var position = this.getNumConditions() - 1;
      this.forEachPositionInput(position, function(element) {
        return _this.resetInput(element);
      });
      this.addChangedListeners(eType, position);
    };
    SimpleFilter2.prototype.createJoinOperatorPanel = function() {
      var eJoinOperatorPanel = document.createElement("div");
      this.eJoinOperatorPanels.push(eJoinOperatorPanel);
      eJoinOperatorPanel.classList.add("ag-filter-condition");
      var eJoinOperatorAnd = this.createJoinOperator(this.eJoinOperatorsAnd, eJoinOperatorPanel, "and");
      var eJoinOperatorOr = this.createJoinOperator(this.eJoinOperatorsOr, eJoinOperatorPanel, "or");
      this.eFilterBody.appendChild(eJoinOperatorPanel);
      var index = this.eJoinOperatorPanels.length - 1;
      var uniqueGroupId = this.joinOperatorId++;
      this.resetJoinOperatorAnd(eJoinOperatorAnd, index, uniqueGroupId);
      this.resetJoinOperatorOr(eJoinOperatorOr, index, uniqueGroupId);
      if (!this.isReadOnly()) {
        eJoinOperatorAnd.onValueChange(this.listener);
        eJoinOperatorOr.onValueChange(this.listener);
      }
    };
    SimpleFilter2.prototype.createJoinOperator = function(eJoinOperators, eJoinOperatorPanel, andOr) {
      var eJoinOperator = this.createManagedBean(new AgRadioButton());
      eJoinOperators.push(eJoinOperator);
      eJoinOperator.addCssClass("ag-filter-condition-operator");
      eJoinOperator.addCssClass("ag-filter-condition-operator-".concat(andOr));
      eJoinOperatorPanel.appendChild(eJoinOperator.getGui());
      return eJoinOperator;
    };
    SimpleFilter2.prototype.getDefaultJoinOperator = function(defaultJoinOperator) {
      return defaultJoinOperator === "AND" || defaultJoinOperator === "OR" ? defaultJoinOperator : "AND";
    };
    SimpleFilter2.prototype.createFilterListOptions = function() {
      var _this = this;
      var filterOptions = this.optionsFactory.getFilterOptions();
      this.filterListOptions = filterOptions.map(function(option) {
        return typeof option === "string" ? _this.createBoilerplateListOption(option) : _this.createCustomListOption(option);
      });
    };
    SimpleFilter2.prototype.putOptionsIntoDropdown = function(eType) {
      this.filterListOptions.forEach(function(listOption) {
        eType.addOption(listOption);
      });
      eType.setDisabled(this.filterListOptions.length <= 1);
    };
    SimpleFilter2.prototype.createBoilerplateListOption = function(option) {
      return { value: option, text: this.translate(option) };
    };
    SimpleFilter2.prototype.createCustomListOption = function(option) {
      var displayKey = option.displayKey;
      var customOption = this.optionsFactory.getCustomOption(option.displayKey);
      return {
        value: displayKey,
        text: customOption ? this.localeService.getLocaleTextFunc()(customOption.displayKey, customOption.displayName) : this.translate(displayKey)
      };
    };
    SimpleFilter2.prototype.isAllowTwoConditions = function() {
      return this.maxNumConditions >= 2;
    };
    SimpleFilter2.prototype.createBodyTemplate = function() {
      return "";
    };
    SimpleFilter2.prototype.getCssIdentifier = function() {
      return "simple-filter";
    };
    SimpleFilter2.prototype.updateUiVisibility = function() {
      var joinOperator = this.getJoinOperator();
      this.updateNumConditions();
      this.updateConditionStatusesAndValues(this.lastUiCompletePosition, joinOperator);
    };
    SimpleFilter2.prototype.updateNumConditions = function() {
      var _a;
      var lastUiCompletePosition = -1;
      var areAllConditionsUiComplete = true;
      for (var position = 0; position < this.getNumConditions(); position++) {
        if (this.isConditionUiComplete(position)) {
          lastUiCompletePosition = position;
        } else {
          areAllConditionsUiComplete = false;
        }
      }
      if (this.shouldAddNewConditionAtEnd(areAllConditionsUiComplete)) {
        this.createJoinOperatorPanel();
        this.createOption();
      } else {
        var activePosition = (_a = this.lastUiCompletePosition) !== null && _a !== void 0 ? _a : this.getNumConditions() - 2;
        if (lastUiCompletePosition < activePosition) {
          this.removeConditionsAndOperators(activePosition + 1);
          var removeStartPosition = lastUiCompletePosition + 1;
          var numConditionsToRemove = activePosition - removeStartPosition;
          if (numConditionsToRemove > 0) {
            this.removeConditionsAndOperators(removeStartPosition, numConditionsToRemove);
          }
          this.createMissingConditionsAndOperators();
        }
      }
      this.lastUiCompletePosition = lastUiCompletePosition;
    };
    SimpleFilter2.prototype.updateConditionStatusesAndValues = function(lastUiCompletePosition, joinOperator) {
      var _this = this;
      this.eTypes.forEach(function(eType, position) {
        var disabled = _this.isConditionDisabled(position, lastUiCompletePosition);
        eType.setDisabled(disabled || _this.filterListOptions.length <= 1);
        if (position === 1) {
          setDisabled(_this.eJoinOperatorPanels[0], disabled);
          _this.eJoinOperatorsAnd[0].setDisabled(disabled);
          _this.eJoinOperatorsOr[0].setDisabled(disabled);
        }
      });
      this.eConditionBodies.forEach(function(element, index) {
        setDisplayed(element, _this.isConditionBodyVisible(index));
      });
      var orChecked = (joinOperator !== null && joinOperator !== void 0 ? joinOperator : this.getJoinOperator()) === "OR";
      this.eJoinOperatorsAnd.forEach(function(eJoinOperatorAnd, index) {
        eJoinOperatorAnd.setValue(!orChecked, true);
      });
      this.eJoinOperatorsOr.forEach(function(eJoinOperatorOr, index) {
        eJoinOperatorOr.setValue(orChecked, true);
      });
      this.forEachInput(function(element, index, position, numberOfInputs) {
        _this.setElementDisplayed(element, index < numberOfInputs);
        _this.setElementDisabled(element, _this.isConditionDisabled(position, lastUiCompletePosition));
      });
      this.resetPlaceholder();
    };
    SimpleFilter2.prototype.shouldAddNewConditionAtEnd = function(areAllConditionsUiComplete) {
      return areAllConditionsUiComplete && this.getNumConditions() < this.maxNumConditions && !this.isReadOnly();
    };
    SimpleFilter2.prototype.removeConditionsAndOperators = function(startPosition, deleteCount) {
      if (startPosition >= this.getNumConditions()) {
        return;
      }
      this.removeComponents(this.eTypes, startPosition, deleteCount);
      this.removeElements(this.eConditionBodies, startPosition, deleteCount);
      this.removeValueElements(startPosition, deleteCount);
      var joinOperatorIndex = Math.max(startPosition - 1, 0);
      this.removeElements(this.eJoinOperatorPanels, joinOperatorIndex, deleteCount);
      this.removeComponents(this.eJoinOperatorsAnd, joinOperatorIndex, deleteCount);
      this.removeComponents(this.eJoinOperatorsOr, joinOperatorIndex, deleteCount);
    };
    SimpleFilter2.prototype.removeElements = function(elements, startPosition, deleteCount) {
      var removedElements = this.removeItems(elements, startPosition, deleteCount);
      removedElements.forEach(function(element) {
        return removeFromParent(element);
      });
    };
    SimpleFilter2.prototype.removeComponents = function(components, startPosition, deleteCount) {
      var _this = this;
      var removedComponents = this.removeItems(components, startPosition, deleteCount);
      removedComponents.forEach(function(comp) {
        removeFromParent(comp.getGui());
        _this.destroyBean(comp);
      });
    };
    SimpleFilter2.prototype.removeItems = function(items, startPosition, deleteCount) {
      return deleteCount == null ? items.splice(startPosition) : items.splice(startPosition, deleteCount);
    };
    SimpleFilter2.prototype.afterGuiAttached = function(params) {
      _super.prototype.afterGuiAttached.call(this, params);
      this.resetPlaceholder();
      if (!(params === null || params === void 0 ? void 0 : params.suppressFocus)) {
        if (this.isReadOnly()) {
          this.eFilterBody.focus();
        } else {
          var firstInput = this.getInputs(0)[0];
          if (!firstInput) {
            return;
          }
          if (firstInput instanceof AgAbstractInputField) {
            firstInput.getInputElement().focus();
          }
        }
      }
    };
    SimpleFilter2.prototype.afterGuiDetached = function() {
      _super.prototype.afterGuiDetached.call(this);
      var appliedModel = this.getModel();
      this.resetUiToActiveModel(appliedModel);
      var lastUiCompletePosition = -1;
      var updatedLastUiCompletePosition = -1;
      var conditionsRemoved = false;
      var joinOperator = this.getJoinOperator();
      for (var position = this.getNumConditions() - 1; position >= 0; position--) {
        if (this.isConditionUiComplete(position)) {
          if (lastUiCompletePosition === -1) {
            lastUiCompletePosition = position;
            updatedLastUiCompletePosition = position;
          }
        } else {
          var shouldRemovePositionAtEnd = position >= this.numAlwaysVisibleConditions && !this.isConditionUiComplete(position - 1);
          var positionBeforeLastUiCompletePosition = position < lastUiCompletePosition;
          if (shouldRemovePositionAtEnd || positionBeforeLastUiCompletePosition) {
            this.removeConditionsAndOperators(position, 1);
            conditionsRemoved = true;
            if (positionBeforeLastUiCompletePosition) {
              updatedLastUiCompletePosition--;
            }
          }
        }
      }
      var shouldUpdateConditionStatusesAndValues = false;
      if (this.getNumConditions() < this.numAlwaysVisibleConditions) {
        this.createMissingConditionsAndOperators();
        shouldUpdateConditionStatusesAndValues = true;
      }
      if (this.shouldAddNewConditionAtEnd(updatedLastUiCompletePosition === this.getNumConditions() - 1)) {
        this.createJoinOperatorPanel();
        this.createOption();
        shouldUpdateConditionStatusesAndValues = true;
      }
      if (shouldUpdateConditionStatusesAndValues) {
        this.updateConditionStatusesAndValues(updatedLastUiCompletePosition, joinOperator);
      }
      if (conditionsRemoved) {
        this.updateJoinOperatorsDisabled();
      }
      this.lastUiCompletePosition = updatedLastUiCompletePosition;
    };
    SimpleFilter2.prototype.getPlaceholderText = function(defaultPlaceholder, position) {
      var placeholder = this.translate(defaultPlaceholder);
      if (isFunction(this.filterPlaceholder)) {
        var filterPlaceholderFn = this.filterPlaceholder;
        var filterOptionKey = this.eTypes[position].getValue();
        var filterOption = this.translate(filterOptionKey);
        placeholder = filterPlaceholderFn({
          filterOptionKey,
          filterOption,
          placeholder
        });
      } else if (typeof this.filterPlaceholder === "string") {
        placeholder = this.filterPlaceholder;
      }
      return placeholder;
    };
    SimpleFilter2.prototype.resetPlaceholder = function() {
      var _this = this;
      var globalTranslate = this.localeService.getLocaleTextFunc();
      this.forEachInput(function(element, index, position, numberOfInputs) {
        if (!(element instanceof AgAbstractInputField)) {
          return;
        }
        var placeholder = index === 0 && numberOfInputs > 1 ? "inRangeStart" : index === 0 ? "filterOoo" : "inRangeEnd";
        var ariaLabel = index === 0 && numberOfInputs > 1 ? globalTranslate("ariaFilterFromValue", "Filter from value") : index === 0 ? globalTranslate("ariaFilterValue", "Filter Value") : globalTranslate("ariaFilterToValue", "Filter to Value");
        element.setInputPlaceholder(_this.getPlaceholderText(placeholder, position));
        element.setInputAriaLabel(ariaLabel);
      });
    };
    SimpleFilter2.prototype.setElementValue = function(element, value, fromFloatingFilter) {
      if (element instanceof AgAbstractInputField) {
        element.setValue(value != null ? String(value) : null, true);
      }
    };
    SimpleFilter2.prototype.setElementDisplayed = function(element, displayed) {
      if (element instanceof Component2) {
        setDisplayed(element.getGui(), displayed);
      }
    };
    SimpleFilter2.prototype.setElementDisabled = function(element, disabled) {
      if (element instanceof Component2) {
        setDisabled(element.getGui(), disabled);
      }
    };
    SimpleFilter2.prototype.attachElementOnChange = function(element, listener) {
      if (element instanceof AgAbstractInputField) {
        element.onValueChange(listener);
      }
    };
    SimpleFilter2.prototype.forEachInput = function(cb) {
      var _this = this;
      this.getConditionTypes().forEach(function(type, position) {
        _this.forEachPositionTypeInput(position, type, cb);
      });
    };
    SimpleFilter2.prototype.forEachPositionInput = function(position, cb) {
      var type = this.getConditionType(position);
      this.forEachPositionTypeInput(position, type, cb);
    };
    SimpleFilter2.prototype.forEachPositionTypeInput = function(position, type, cb) {
      var numberOfInputs = this.getNumberOfInputs(type);
      var inputs = this.getInputs(position);
      for (var index = 0; index < inputs.length; index++) {
        var input = inputs[index];
        if (input != null) {
          cb(input, index, position, numberOfInputs);
        }
      }
    };
    SimpleFilter2.prototype.isConditionDisabled = function(position, lastUiCompletePosition) {
      if (this.isReadOnly()) {
        return true;
      }
      if (position === 0) {
        return false;
      }
      return position > lastUiCompletePosition + 1;
    };
    SimpleFilter2.prototype.isConditionBodyVisible = function(position) {
      var type = this.getConditionType(position);
      var numberOfInputs = this.getNumberOfInputs(type);
      return numberOfInputs > 0;
    };
    SimpleFilter2.prototype.isConditionUiComplete = function(position) {
      if (position >= this.getNumConditions()) {
        return false;
      }
      var type = this.getConditionType(position);
      if (type === SimpleFilter2.EMPTY) {
        return false;
      }
      if (this.getValues(position).some(function(v) {
        return v == null;
      })) {
        return false;
      }
      return true;
    };
    SimpleFilter2.prototype.getNumConditions = function() {
      return this.eTypes.length;
    };
    SimpleFilter2.prototype.getUiCompleteConditions = function() {
      var conditions = [];
      for (var position = 0; position < this.getNumConditions(); position++) {
        if (this.isConditionUiComplete(position)) {
          conditions.push(this.createCondition(position));
        }
      }
      return conditions;
    };
    SimpleFilter2.prototype.createMissingConditionsAndOperators = function() {
      if (this.isReadOnly()) {
        return;
      }
      for (var i = this.getNumConditions(); i < this.numAlwaysVisibleConditions; i++) {
        this.createJoinOperatorPanel();
        this.createOption();
      }
    };
    SimpleFilter2.prototype.resetUiToDefaults = function(silent) {
      var _this = this;
      this.removeConditionsAndOperators(this.isReadOnly() ? 1 : this.numAlwaysVisibleConditions);
      this.eTypes.forEach(function(eType) {
        return _this.resetType(eType);
      });
      this.eJoinOperatorsAnd.forEach(function(eJoinOperatorAnd, index) {
        return _this.resetJoinOperatorAnd(eJoinOperatorAnd, index, _this.joinOperatorId + index);
      });
      this.eJoinOperatorsOr.forEach(function(eJoinOperatorOr, index) {
        return _this.resetJoinOperatorOr(eJoinOperatorOr, index, _this.joinOperatorId + index);
      });
      this.joinOperatorId++;
      this.forEachInput(function(element) {
        return _this.resetInput(element);
      });
      this.resetPlaceholder();
      this.createMissingConditionsAndOperators();
      this.lastUiCompletePosition = null;
      if (!silent) {
        this.onUiChanged();
      }
      return AgPromise.resolve();
    };
    SimpleFilter2.prototype.resetType = function(eType) {
      var translate = this.localeService.getLocaleTextFunc();
      var filteringLabel = translate("ariaFilteringOperator", "Filtering operator");
      eType.setValue(this.optionsFactory.getDefaultOption(), true).setAriaLabel(filteringLabel).setDisabled(this.isReadOnly() || this.filterListOptions.length <= 1);
    };
    SimpleFilter2.prototype.resetJoinOperatorAnd = function(eJoinOperatorAnd, index, uniqueGroupId) {
      this.resetJoinOperator(eJoinOperatorAnd, index, this.isDefaultOperator("AND"), this.translate("andCondition"), uniqueGroupId);
    };
    SimpleFilter2.prototype.resetJoinOperatorOr = function(eJoinOperatorOr, index, uniqueGroupId) {
      this.resetJoinOperator(eJoinOperatorOr, index, this.isDefaultOperator("OR"), this.translate("orCondition"), uniqueGroupId);
    };
    SimpleFilter2.prototype.resetJoinOperator = function(eJoinOperator, index, value, label, uniqueGroupId) {
      this.updateJoinOperatorDisabled(eJoinOperator.setValue(value, true).setName("ag-simple-filter-and-or-".concat(this.getCompId(), "-").concat(uniqueGroupId)).setLabel(label), index);
    };
    SimpleFilter2.prototype.updateJoinOperatorsDisabled = function() {
      var _this = this;
      this.eJoinOperatorsAnd.forEach(function(eJoinOperator, index) {
        return _this.updateJoinOperatorDisabled(eJoinOperator, index);
      });
      this.eJoinOperatorsOr.forEach(function(eJoinOperator, index) {
        return _this.updateJoinOperatorDisabled(eJoinOperator, index);
      });
    };
    SimpleFilter2.prototype.updateJoinOperatorDisabled = function(eJoinOperator, index) {
      eJoinOperator.setDisabled(this.isReadOnly() || index > 0);
    };
    SimpleFilter2.prototype.resetInput = function(element) {
      this.setElementValue(element, null);
      this.setElementDisabled(element, this.isReadOnly());
    };
    SimpleFilter2.prototype.setConditionIntoUi = function(model, position) {
      var _this = this;
      var values2 = this.mapValuesFromModel(model);
      this.forEachInput(function(element, index, elPosition, _2) {
        if (elPosition !== position) {
          return;
        }
        _this.setElementValue(element, values2[index] != null ? values2[index] : null);
      });
    };
    SimpleFilter2.prototype.setValueFromFloatingFilter = function(value) {
      var _this = this;
      this.forEachInput(function(element, index, position, _2) {
        _this.setElementValue(element, index === 0 && position === 0 ? value : null, true);
      });
    };
    SimpleFilter2.prototype.isDefaultOperator = function(operator) {
      return operator === this.defaultJoinOperator;
    };
    SimpleFilter2.prototype.addChangedListeners = function(eType, position) {
      var _this = this;
      if (this.isReadOnly()) {
        return;
      }
      eType.onValueChange(this.listener);
      this.forEachPositionInput(position, function(element) {
        _this.attachElementOnChange(element, _this.listener);
      });
    };
    SimpleFilter2.prototype.individualConditionPasses = function(params, filterModel) {
      var cellValue = this.getCellValue(params.node);
      var values2 = this.mapValuesFromModel(filterModel);
      var customFilterOption = this.optionsFactory.getCustomOption(filterModel.type);
      var customFilterResult = this.evaluateCustomFilter(customFilterOption, values2, cellValue);
      if (customFilterResult != null) {
        return customFilterResult;
      }
      if (cellValue == null) {
        return this.evaluateNullValue(filterModel.type);
      }
      return this.evaluateNonNullValue(values2, cellValue, filterModel, params);
    };
    SimpleFilter2.prototype.evaluateCustomFilter = function(customFilterOption, values2, cellValue) {
      if (customFilterOption == null) {
        return;
      }
      var predicate = customFilterOption.predicate;
      if (predicate != null && !values2.some(function(v) {
        return v == null;
      })) {
        return predicate(values2, cellValue);
      }
      return;
    };
    SimpleFilter2.prototype.isBlank = function(cellValue) {
      return cellValue == null || typeof cellValue === "string" && cellValue.trim().length === 0;
    };
    SimpleFilter2.prototype.hasInvalidInputs = function() {
      return false;
    };
    SimpleFilter2.EMPTY = "empty";
    SimpleFilter2.BLANK = "blank";
    SimpleFilter2.NOT_BLANK = "notBlank";
    SimpleFilter2.EQUALS = "equals";
    SimpleFilter2.NOT_EQUAL = "notEqual";
    SimpleFilter2.LESS_THAN = "lessThan";
    SimpleFilter2.LESS_THAN_OR_EQUAL = "lessThanOrEqual";
    SimpleFilter2.GREATER_THAN = "greaterThan";
    SimpleFilter2.GREATER_THAN_OR_EQUAL = "greaterThanOrEqual";
    SimpleFilter2.IN_RANGE = "inRange";
    SimpleFilter2.CONTAINS = "contains";
    SimpleFilter2.NOT_CONTAINS = "notContains";
    SimpleFilter2.STARTS_WITH = "startsWith";
    SimpleFilter2.ENDS_WITH = "endsWith";
    return SimpleFilter2;
  }(ProvidedFilter)
);
var __extends$2U = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ScalarFilter = (
  /** @class */
  function(_super) {
    __extends$2U(ScalarFilter2, _super);
    function ScalarFilter2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ScalarFilter2.prototype.setParams = function(params) {
      _super.prototype.setParams.call(this, params);
      this.scalarFilterParams = params;
    };
    ScalarFilter2.prototype.evaluateNullValue = function(filterType) {
      switch (filterType) {
        case ScalarFilter2.EQUALS:
        case ScalarFilter2.NOT_EQUAL:
          if (this.scalarFilterParams.includeBlanksInEquals) {
            return true;
          }
          break;
        case ScalarFilter2.GREATER_THAN:
        case ScalarFilter2.GREATER_THAN_OR_EQUAL:
          if (this.scalarFilterParams.includeBlanksInGreaterThan) {
            return true;
          }
          break;
        case ScalarFilter2.LESS_THAN:
        case ScalarFilter2.LESS_THAN_OR_EQUAL:
          if (this.scalarFilterParams.includeBlanksInLessThan) {
            return true;
          }
          break;
        case ScalarFilter2.IN_RANGE:
          if (this.scalarFilterParams.includeBlanksInRange) {
            return true;
          }
          break;
        case ScalarFilter2.BLANK:
          return true;
        case ScalarFilter2.NOT_BLANK:
          return false;
      }
      return false;
    };
    ScalarFilter2.prototype.evaluateNonNullValue = function(values2, cellValue, filterModel) {
      var comparator = this.comparator();
      var compareResult = values2[0] != null ? comparator(values2[0], cellValue) : 0;
      switch (filterModel.type) {
        case ScalarFilter2.EQUALS:
          return compareResult === 0;
        case ScalarFilter2.NOT_EQUAL:
          return compareResult !== 0;
        case ScalarFilter2.GREATER_THAN:
          return compareResult > 0;
        case ScalarFilter2.GREATER_THAN_OR_EQUAL:
          return compareResult >= 0;
        case ScalarFilter2.LESS_THAN:
          return compareResult < 0;
        case ScalarFilter2.LESS_THAN_OR_EQUAL:
          return compareResult <= 0;
        case ScalarFilter2.IN_RANGE: {
          var compareToResult = comparator(values2[1], cellValue);
          return this.scalarFilterParams.inRangeInclusive ? compareResult >= 0 && compareToResult <= 0 : compareResult > 0 && compareToResult < 0;
        }
        case ScalarFilter2.BLANK:
          return this.isBlank(cellValue);
        case ScalarFilter2.NOT_BLANK:
          return !this.isBlank(cellValue);
        default:
          console.warn('AG Grid: Unexpected type of filter "' + filterModel.type + '", it looks like the filter was configured with incorrect Filter Options');
          return true;
      }
    };
    return ScalarFilter2;
  }(SimpleFilter)
);
var __extends$2T = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$k = function() {
  __assign$k = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$k.apply(this, arguments);
};
var __decorate$2u = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DEFAULT_MIN_YEAR = 1e3;
var DEFAULT_MAX_YEAR = Infinity;
var DateFilterModelFormatter = (
  /** @class */
  function(_super) {
    __extends$2T(DateFilterModelFormatter2, _super);
    function DateFilterModelFormatter2(dateFilterParams, localeService, optionsFactory) {
      var _this = _super.call(this, localeService, optionsFactory) || this;
      _this.dateFilterParams = dateFilterParams;
      return _this;
    }
    DateFilterModelFormatter2.prototype.conditionToString = function(condition, options) {
      var type = condition.type;
      var numberOfInputs = (options || {}).numberOfInputs;
      var isRange = type == SimpleFilter.IN_RANGE || numberOfInputs === 2;
      var dateFrom = parseDateTimeFromString(condition.dateFrom);
      var dateTo = parseDateTimeFromString(condition.dateTo);
      var format = this.dateFilterParams.inRangeFloatingFilterDateFormat;
      if (isRange) {
        var formattedFrom = dateFrom !== null ? dateToFormattedString(dateFrom, format) : "null";
        var formattedTo = dateTo !== null ? dateToFormattedString(dateTo, format) : "null";
        return "".concat(formattedFrom, "-").concat(formattedTo);
      }
      if (dateFrom != null) {
        return dateToFormattedString(dateFrom, format);
      }
      return "".concat(type);
    };
    DateFilterModelFormatter2.prototype.updateParams = function(params) {
      _super.prototype.updateParams.call(this, params);
      this.dateFilterParams = params.dateFilterParams;
    };
    return DateFilterModelFormatter2;
  }(SimpleFilterModelFormatter)
);
var DateFilter = (
  /** @class */
  function(_super) {
    __extends$2T(DateFilter2, _super);
    function DateFilter2() {
      var _this = _super.call(this, "dateFilter") || this;
      _this.eConditionPanelsFrom = [];
      _this.eConditionPanelsTo = [];
      _this.dateConditionFromComps = [];
      _this.dateConditionToComps = [];
      _this.minValidYear = DEFAULT_MIN_YEAR;
      _this.maxValidYear = DEFAULT_MAX_YEAR;
      _this.minValidDate = null;
      _this.maxValidDate = null;
      return _this;
    }
    DateFilter2.prototype.afterGuiAttached = function(params) {
      _super.prototype.afterGuiAttached.call(this, params);
      this.dateConditionFromComps[0].afterGuiAttached(params);
    };
    DateFilter2.prototype.mapValuesFromModel = function(filterModel) {
      var _a = filterModel || {}, dateFrom = _a.dateFrom, dateTo = _a.dateTo, type = _a.type;
      return [
        dateFrom && parseDateTimeFromString(dateFrom) || null,
        dateTo && parseDateTimeFromString(dateTo) || null
      ].slice(0, this.getNumberOfInputs(type));
    };
    DateFilter2.prototype.comparator = function() {
      return this.dateFilterParams.comparator ? this.dateFilterParams.comparator : this.defaultComparator.bind(this);
    };
    DateFilter2.prototype.defaultComparator = function(filterDate, cellValue) {
      var cellAsDate = cellValue;
      if (cellValue == null || cellAsDate < filterDate) {
        return -1;
      }
      if (cellAsDate > filterDate) {
        return 1;
      }
      return 0;
    };
    DateFilter2.prototype.setParams = function(params) {
      this.dateFilterParams = params;
      _super.prototype.setParams.call(this, params);
      var yearParser = function(param, fallback) {
        if (params[param] != null) {
          if (!isNaN(params[param])) {
            return params[param] == null ? fallback : Number(params[param]);
          } else {
            console.warn("AG Grid: DateFilter ".concat(param, " is not a number"));
          }
        }
        return fallback;
      };
      this.minValidYear = yearParser("minValidYear", DEFAULT_MIN_YEAR);
      this.maxValidYear = yearParser("maxValidYear", DEFAULT_MAX_YEAR);
      if (this.minValidYear > this.maxValidYear) {
        console.warn("AG Grid: DateFilter minValidYear should be <= maxValidYear");
      }
      if (params.minValidDate) {
        this.minValidDate = params.minValidDate instanceof Date ? params.minValidDate : parseDateTimeFromString(params.minValidDate);
      } else {
        this.minValidDate = null;
      }
      if (params.maxValidDate) {
        this.maxValidDate = params.maxValidDate instanceof Date ? params.maxValidDate : parseDateTimeFromString(params.maxValidDate);
      } else {
        this.maxValidDate = null;
      }
      if (this.minValidDate && this.maxValidDate && this.minValidDate > this.maxValidDate) {
        console.warn("AG Grid: DateFilter minValidDate should be <= maxValidDate");
      }
      this.filterModelFormatter = new DateFilterModelFormatter(this.dateFilterParams, this.localeService, this.optionsFactory);
    };
    DateFilter2.prototype.createDateCompWrapper = function(element) {
      var _this = this;
      var dateCompWrapper = new DateCompWrapper(this.getContext(), this.userComponentFactory, {
        onDateChanged: function() {
          return _this.onUiChanged();
        },
        filterParams: this.dateFilterParams
      }, element);
      this.addDestroyFunc(function() {
        return dateCompWrapper.destroy();
      });
      return dateCompWrapper;
    };
    DateFilter2.prototype.setElementValue = function(element, value) {
      element.setDate(value);
    };
    DateFilter2.prototype.setElementDisplayed = function(element, displayed) {
      element.setDisplayed(displayed);
    };
    DateFilter2.prototype.setElementDisabled = function(element, disabled) {
      element.setDisabled(disabled);
    };
    DateFilter2.prototype.getDefaultFilterOptions = function() {
      return DateFilter2.DEFAULT_FILTER_OPTIONS;
    };
    DateFilter2.prototype.createValueElement = function() {
      var eCondition = document.createElement("div");
      eCondition.classList.add("ag-filter-body");
      this.createFromToElement(eCondition, this.eConditionPanelsFrom, this.dateConditionFromComps, "from");
      this.createFromToElement(eCondition, this.eConditionPanelsTo, this.dateConditionToComps, "to");
      return eCondition;
    };
    DateFilter2.prototype.createFromToElement = function(eCondition, eConditionPanels, dateConditionComps, fromTo) {
      var eConditionPanel = document.createElement("div");
      eConditionPanel.classList.add("ag-filter-".concat(fromTo));
      eConditionPanel.classList.add("ag-filter-date-".concat(fromTo));
      eConditionPanels.push(eConditionPanel);
      eCondition.appendChild(eConditionPanel);
      dateConditionComps.push(this.createDateCompWrapper(eConditionPanel));
    };
    DateFilter2.prototype.removeValueElements = function(startPosition, deleteCount) {
      this.removeDateComps(this.dateConditionFromComps, startPosition, deleteCount);
      this.removeDateComps(this.dateConditionToComps, startPosition, deleteCount);
      this.removeItems(this.eConditionPanelsFrom, startPosition, deleteCount);
      this.removeItems(this.eConditionPanelsTo, startPosition, deleteCount);
    };
    DateFilter2.prototype.removeDateComps = function(components, startPosition, deleteCount) {
      var removedComponents = this.removeItems(components, startPosition, deleteCount);
      removedComponents.forEach(function(comp) {
        return comp.destroy();
      });
    };
    DateFilter2.prototype.isValidDateValue = function(value) {
      if (value === null) {
        return false;
      }
      if (this.minValidDate) {
        if (value < this.minValidDate) {
          return false;
        }
      } else {
        if (value.getUTCFullYear() < this.minValidYear) {
          return false;
        }
      }
      if (this.maxValidDate) {
        if (value > this.maxValidDate) {
          return false;
        }
      } else {
        if (value.getUTCFullYear() > this.maxValidYear) {
          return false;
        }
      }
      return true;
    };
    DateFilter2.prototype.isConditionUiComplete = function(position) {
      var _this = this;
      if (!_super.prototype.isConditionUiComplete.call(this, position)) {
        return false;
      }
      var valid = true;
      this.forEachInput(function(element, index, elPosition, numberOfInputs) {
        if (elPosition !== position || !valid || index >= numberOfInputs) {
          return;
        }
        valid = valid && _this.isValidDateValue(element.getDate());
      });
      return valid;
    };
    DateFilter2.prototype.areSimpleModelsEqual = function(aSimple, bSimple) {
      return aSimple.dateFrom === bSimple.dateFrom && aSimple.dateTo === bSimple.dateTo && aSimple.type === bSimple.type;
    };
    DateFilter2.prototype.getFilterType = function() {
      return "date";
    };
    DateFilter2.prototype.createCondition = function(position) {
      var type = this.getConditionType(position);
      var model = {};
      var values2 = this.getValues(position);
      if (values2.length > 0) {
        model.dateFrom = serialiseDate(values2[0]);
      }
      if (values2.length > 1) {
        model.dateTo = serialiseDate(values2[1]);
      }
      return __assign$k({ dateFrom: null, dateTo: null, filterType: this.getFilterType(), type }, model);
    };
    DateFilter2.prototype.resetPlaceholder = function() {
      var globalTranslate = this.localeService.getLocaleTextFunc();
      var placeholder = this.translate("dateFormatOoo");
      var ariaLabel = globalTranslate("ariaFilterValue", "Filter Value");
      this.forEachInput(function(element) {
        element.setInputPlaceholder(placeholder);
        element.setInputAriaLabel(ariaLabel);
      });
    };
    DateFilter2.prototype.getInputs = function(position) {
      if (position >= this.dateConditionFromComps.length) {
        return [null, null];
      }
      return [this.dateConditionFromComps[position], this.dateConditionToComps[position]];
    };
    DateFilter2.prototype.getValues = function(position) {
      var result = [];
      this.forEachPositionInput(position, function(element, index, _elPosition, numberOfInputs) {
        if (index < numberOfInputs) {
          result.push(element.getDate());
        }
      });
      return result;
    };
    DateFilter2.prototype.translate = function(key) {
      if (key === ScalarFilter.LESS_THAN) {
        return _super.prototype.translate.call(this, "before");
      }
      if (key === ScalarFilter.GREATER_THAN) {
        return _super.prototype.translate.call(this, "after");
      }
      return _super.prototype.translate.call(this, key);
    };
    DateFilter2.prototype.getModelAsString = function(model) {
      var _a;
      return (_a = this.filterModelFormatter.getModelAsString(model)) !== null && _a !== void 0 ? _a : "";
    };
    DateFilter2.DEFAULT_FILTER_OPTIONS = [
      ScalarFilter.EQUALS,
      ScalarFilter.NOT_EQUAL,
      ScalarFilter.LESS_THAN,
      ScalarFilter.GREATER_THAN,
      ScalarFilter.IN_RANGE,
      ScalarFilter.BLANK,
      ScalarFilter.NOT_BLANK
    ];
    __decorate$2u([
      Autowired("userComponentFactory")
    ], DateFilter2.prototype, "userComponentFactory", void 0);
    return DateFilter2;
  }(ScalarFilter)
);
var __extends$2S = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var SimpleFloatingFilter = (
  /** @class */
  function(_super) {
    __extends$2S(SimpleFloatingFilter2, _super);
    function SimpleFloatingFilter2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    SimpleFloatingFilter2.prototype.getDefaultDebounceMs = function() {
      return 0;
    };
    SimpleFloatingFilter2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
    };
    SimpleFloatingFilter2.prototype.isEventFromFloatingFilter = function(event) {
      return event && event.afterFloatingFilter;
    };
    SimpleFloatingFilter2.prototype.isEventFromDataChange = function(event) {
      return event === null || event === void 0 ? void 0 : event.afterDataChange;
    };
    SimpleFloatingFilter2.prototype.getLastType = function() {
      return this.lastType;
    };
    SimpleFloatingFilter2.prototype.isReadOnly = function() {
      return this.readOnly;
    };
    SimpleFloatingFilter2.prototype.setLastTypeFromModel = function(model) {
      if (!model) {
        this.lastType = this.optionsFactory.getDefaultOption();
        return;
      }
      var isCombined = model.operator;
      var condition;
      if (isCombined) {
        var combinedModel = model;
        condition = combinedModel.conditions[0];
      } else {
        condition = model;
      }
      this.lastType = condition.type;
    };
    SimpleFloatingFilter2.prototype.canWeEditAfterModelFromParentFilter = function(model) {
      if (!model) {
        return this.isTypeEditable(this.lastType);
      }
      var isCombined = model.operator;
      if (isCombined) {
        return false;
      }
      var simpleModel = model;
      return this.isTypeEditable(simpleModel.type);
    };
    SimpleFloatingFilter2.prototype.init = function(params) {
      this.setSimpleParams(params, false);
    };
    SimpleFloatingFilter2.prototype.setSimpleParams = function(params, update) {
      if (update === void 0) {
        update = true;
      }
      this.optionsFactory = new OptionsFactory();
      this.optionsFactory.init(params.filterParams, this.getDefaultFilterOptions());
      if (!update) {
        this.lastType = this.optionsFactory.getDefaultOption();
      }
      this.readOnly = !!params.filterParams.readOnly;
      var editable = this.isTypeEditable(this.lastType);
      this.setEditable(editable);
    };
    SimpleFloatingFilter2.prototype.onParamsUpdated = function(params) {
      this.refresh(params);
    };
    SimpleFloatingFilter2.prototype.refresh = function(params) {
      this.setSimpleParams(params);
    };
    SimpleFloatingFilter2.prototype.doesFilterHaveSingleInput = function(filterType) {
      var customFilterOption = this.optionsFactory.getCustomOption(filterType);
      var numberOfInputs = (customFilterOption || {}).numberOfInputs;
      return numberOfInputs == null || numberOfInputs == 1;
    };
    SimpleFloatingFilter2.prototype.isTypeEditable = function(type) {
      var uneditableTypes = [
        SimpleFilter.IN_RANGE,
        SimpleFilter.EMPTY,
        SimpleFilter.BLANK,
        SimpleFilter.NOT_BLANK
      ];
      return !!type && !this.isReadOnly() && this.doesFilterHaveSingleInput(type) && uneditableTypes.indexOf(type) < 0;
    };
    return SimpleFloatingFilter2;
  }(Component2)
);
var __extends$2R = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2t = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DateFloatingFilter = (
  /** @class */
  function(_super) {
    __extends$2R(DateFloatingFilter2, _super);
    function DateFloatingFilter2() {
      return _super.call(
        this,
        /* html */
        '\n            <div class="ag-floating-filter-input" role="presentation">\n                <ag-input-text-field ref="eReadOnlyText"></ag-input-text-field>\n                <div ref="eDateWrapper" style="display: flex;"></div>\n            </div>'
      ) || this;
    }
    DateFloatingFilter2.prototype.getDefaultFilterOptions = function() {
      return DateFilter.DEFAULT_FILTER_OPTIONS;
    };
    DateFloatingFilter2.prototype.init = function(params) {
      _super.prototype.init.call(this, params);
      this.params = params;
      this.filterParams = params.filterParams;
      this.createDateComponent();
      this.filterModelFormatter = new DateFilterModelFormatter(this.filterParams, this.localeService, this.optionsFactory);
      var translate = this.localeService.getLocaleTextFunc();
      this.eReadOnlyText.setDisabled(true).setInputAriaLabel(translate("ariaDateFilterInput", "Date Filter Input"));
    };
    DateFloatingFilter2.prototype.onParamsUpdated = function(params) {
      this.refresh(params);
    };
    DateFloatingFilter2.prototype.refresh = function(params) {
      _super.prototype.refresh.call(this, params);
      this.params = params;
      this.filterParams = params.filterParams;
      this.updateDateComponent();
      this.filterModelFormatter.updateParams({ optionsFactory: this.optionsFactory, dateFilterParams: this.filterParams });
      this.updateCompOnModelChange(params.currentParentModel());
    };
    DateFloatingFilter2.prototype.updateCompOnModelChange = function(model) {
      var allowEditing = !this.isReadOnly() && this.canWeEditAfterModelFromParentFilter(model);
      this.setEditable(allowEditing);
      if (allowEditing) {
        if (model) {
          var dateModel = model;
          this.dateComp.setDate(parseDateTimeFromString(dateModel.dateFrom));
        } else {
          this.dateComp.setDate(null);
        }
        this.eReadOnlyText.setValue("");
      } else {
        this.eReadOnlyText.setValue(this.filterModelFormatter.getModelAsString(model));
        this.dateComp.setDate(null);
      }
    };
    DateFloatingFilter2.prototype.setEditable = function(editable) {
      setDisplayed(this.eDateWrapper, editable);
      setDisplayed(this.eReadOnlyText.getGui(), !editable);
    };
    DateFloatingFilter2.prototype.onParentModelChanged = function(model, event) {
      if (this.isEventFromFloatingFilter(event) || this.isEventFromDataChange(event)) {
        return;
      }
      _super.prototype.setLastTypeFromModel.call(this, model);
      this.updateCompOnModelChange(model);
    };
    DateFloatingFilter2.prototype.onDateChanged = function() {
      var _this = this;
      var filterValueDate = this.dateComp.getDate();
      var filterValueText = serialiseDate(filterValueDate);
      this.params.parentFilterInstance(function(filterInstance) {
        if (filterInstance) {
          var date = parseDateTimeFromString(filterValueText);
          filterInstance.onFloatingFilterChanged(_this.getLastType() || null, date);
        }
      });
    };
    DateFloatingFilter2.prototype.getDateComponentParams = function() {
      var debounceMs = ProvidedFilter.getDebounceMs(this.params.filterParams, this.getDefaultDebounceMs());
      return {
        onDateChanged: debounce(this.onDateChanged.bind(this), debounceMs),
        filterParams: this.params.column.getColDef().filterParams
      };
    };
    DateFloatingFilter2.prototype.createDateComponent = function() {
      var _this = this;
      this.dateComp = new DateCompWrapper(this.getContext(), this.userComponentFactory, this.getDateComponentParams(), this.eDateWrapper);
      this.addDestroyFunc(function() {
        return _this.dateComp.destroy();
      });
    };
    DateFloatingFilter2.prototype.updateDateComponent = function() {
      var params = this.gridOptionsService.addGridCommonParams(this.getDateComponentParams());
      this.dateComp.updateParams(params);
    };
    DateFloatingFilter2.prototype.getFilterModelFormatter = function() {
      return this.filterModelFormatter;
    };
    __decorate$2t([
      Autowired("userComponentFactory")
    ], DateFloatingFilter2.prototype, "userComponentFactory", void 0);
    __decorate$2t([
      RefSelector("eReadOnlyText")
    ], DateFloatingFilter2.prototype, "eReadOnlyText", void 0);
    __decorate$2t([
      RefSelector("eDateWrapper")
    ], DateFloatingFilter2.prototype, "eDateWrapper", void 0);
    return DateFloatingFilter2;
  }(SimpleFloatingFilter)
);
var __extends$2Q = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2s = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __read$t = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var DefaultDateComponent = (
  /** @class */
  function(_super) {
    __extends$2Q(DefaultDateComponent2, _super);
    function DefaultDateComponent2() {
      return _super.call(
        this,
        /* html */
        '\n            <div class="ag-filter-filter">\n                <ag-input-text-field class="ag-date-filter" ref="eDateInput"></ag-input-text-field>\n            </div>'
      ) || this;
    }
    DefaultDateComponent2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
    };
    DefaultDateComponent2.prototype.init = function(params) {
      var _this = this;
      this.params = params;
      this.setParams(params);
      var eDocument = this.gridOptionsService.getDocument();
      var inputElement = this.eDateInput.getInputElement();
      this.addManagedListener(inputElement, "mousedown", function() {
        if (_this.eDateInput.isDisabled() || _this.usingSafariDatePicker) {
          return;
        }
        inputElement.focus();
      });
      this.addManagedListener(inputElement, "input", function(e) {
        if (e.target !== eDocument.activeElement) {
          return;
        }
        if (_this.eDateInput.isDisabled()) {
          return;
        }
        _this.params.onDateChanged();
      });
    };
    DefaultDateComponent2.prototype.setParams = function(params) {
      var inputElement = this.eDateInput.getInputElement();
      var shouldUseBrowserDatePicker = this.shouldUseBrowserDatePicker(params);
      this.usingSafariDatePicker = shouldUseBrowserDatePicker && isBrowserSafari();
      inputElement.type = shouldUseBrowserDatePicker ? "date" : "text";
      var _a = params.filterParams || {}, minValidYear = _a.minValidYear, maxValidYear = _a.maxValidYear, minValidDate = _a.minValidDate, maxValidDate = _a.maxValidDate;
      if (minValidDate && minValidYear) {
        warnOnce("DateFilter should not have both minValidDate and minValidYear parameters set at the same time! minValidYear will be ignored.");
      }
      if (maxValidDate && maxValidYear) {
        warnOnce("DateFilter should not have both maxValidDate and maxValidYear parameters set at the same time! maxValidYear will be ignored.");
      }
      if (minValidDate && maxValidDate) {
        var _b = __read$t([minValidDate, maxValidDate].map(function(v) {
          return v instanceof Date ? v : parseDateTimeFromString(v);
        }), 2), parsedMinValidDate = _b[0], parsedMaxValidDate = _b[1];
        if (parsedMinValidDate && parsedMaxValidDate && parsedMinValidDate.getTime() > parsedMaxValidDate.getTime()) {
          warnOnce("DateFilter parameter minValidDate should always be lower than or equal to parameter maxValidDate.");
        }
      }
      if (minValidDate) {
        if (minValidDate instanceof Date) {
          inputElement.min = dateToFormattedString(minValidDate);
        } else {
          inputElement.min = minValidDate;
        }
      } else {
        if (minValidYear) {
          inputElement.min = "".concat(minValidYear, "-01-01");
        }
      }
      if (maxValidDate) {
        if (maxValidDate instanceof Date) {
          inputElement.max = dateToFormattedString(maxValidDate);
        } else {
          inputElement.max = maxValidDate;
        }
      } else {
        if (maxValidYear) {
          inputElement.max = "".concat(maxValidYear, "-12-31");
        }
      }
    };
    DefaultDateComponent2.prototype.onParamsUpdated = function(params) {
      this.refresh(params);
    };
    DefaultDateComponent2.prototype.refresh = function(params) {
      this.params = params;
      this.setParams(params);
    };
    DefaultDateComponent2.prototype.getDate = function() {
      return parseDateTimeFromString(this.eDateInput.getValue());
    };
    DefaultDateComponent2.prototype.setDate = function(date) {
      this.eDateInput.setValue(serialiseDate(date, false));
    };
    DefaultDateComponent2.prototype.setInputPlaceholder = function(placeholder) {
      this.eDateInput.setInputPlaceholder(placeholder);
    };
    DefaultDateComponent2.prototype.setDisabled = function(disabled) {
      this.eDateInput.setDisabled(disabled);
    };
    DefaultDateComponent2.prototype.afterGuiAttached = function(params) {
      if (!params || !params.suppressFocus) {
        this.eDateInput.getInputElement().focus();
      }
    };
    DefaultDateComponent2.prototype.shouldUseBrowserDatePicker = function(params) {
      if (params.filterParams && params.filterParams.browserDatePicker != null) {
        return params.filterParams.browserDatePicker;
      }
      return isBrowserChrome() || isBrowserFirefox() || isBrowserSafari() && getSafariVersion() >= 14.1;
    };
    __decorate$2s([
      RefSelector("eDateInput")
    ], DefaultDateComponent2.prototype, "eDateInput", void 0);
    return DefaultDateComponent2;
  }(Component2)
);
var __extends$2P = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AgInputTextField = (
  /** @class */
  function(_super) {
    __extends$2P(AgInputTextField2, _super);
    function AgInputTextField2(config, className, inputType) {
      if (className === void 0) {
        className = "ag-text-field";
      }
      if (inputType === void 0) {
        inputType = "text";
      }
      return _super.call(this, config, className, inputType) || this;
    }
    AgInputTextField2.prototype.postConstruct = function() {
      _super.prototype.postConstruct.call(this);
      if (this.config.allowedCharPattern) {
        this.preventDisallowedCharacters();
      }
    };
    AgInputTextField2.prototype.setValue = function(value, silent) {
      if (this.eInput.value !== value) {
        this.eInput.value = exists(value) ? value : "";
      }
      return _super.prototype.setValue.call(this, value, silent);
    };
    AgInputTextField2.prototype.setStartValue = function(value) {
      this.setValue(value, true);
    };
    AgInputTextField2.prototype.preventDisallowedCharacters = function() {
      var pattern = new RegExp("[".concat(this.config.allowedCharPattern, "]"));
      var preventCharacters = function(event) {
        if (!isEventFromPrintableCharacter(event)) {
          return;
        }
        if (event.key && !pattern.test(event.key)) {
          event.preventDefault();
        }
      };
      this.addManagedListener(this.eInput, "keydown", preventCharacters);
      this.addManagedListener(this.eInput, "paste", function(e) {
        var _a;
        var text = (_a = e.clipboardData) === null || _a === void 0 ? void 0 : _a.getData("text");
        if (text && text.split("").some(function(c) {
          return !pattern.test(c);
        })) {
          e.preventDefault();
        }
      });
    };
    return AgInputTextField2;
  }(AgAbstractInputField)
);
var __extends$2O = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AgInputNumberField = (
  /** @class */
  function(_super) {
    __extends$2O(AgInputNumberField2, _super);
    function AgInputNumberField2(config) {
      return _super.call(this, config, "ag-number-field", "number") || this;
    }
    AgInputNumberField2.prototype.postConstruct = function() {
      var _this = this;
      _super.prototype.postConstruct.call(this);
      this.addManagedListener(this.eInput, "blur", function() {
        var floatedValue = parseFloat(_this.eInput.value);
        var value = isNaN(floatedValue) ? "" : _this.normalizeValue(floatedValue.toString());
        if (_this.value !== value) {
          _this.setValue(value);
        }
      });
      this.addManagedListener(this.eInput, "wheel", this.onWheel.bind(this));
      this.eInput.step = "any";
    };
    AgInputNumberField2.prototype.onWheel = function(e) {
      if (document.activeElement === this.eInput) {
        e.preventDefault();
      }
    };
    AgInputNumberField2.prototype.normalizeValue = function(value) {
      if (value === "") {
        return "";
      }
      if (this.precision != null) {
        value = this.adjustPrecision(value);
      }
      var val = parseFloat(value);
      if (this.min != null && val < this.min) {
        value = this.min.toString();
      } else if (this.max != null && val > this.max) {
        value = this.max.toString();
      }
      return value;
    };
    AgInputNumberField2.prototype.adjustPrecision = function(value, isScientificNotation) {
      if (this.precision == null) {
        return value;
      }
      if (isScientificNotation) {
        var floatString = parseFloat(value).toFixed(this.precision);
        return parseFloat(floatString).toString();
      }
      var parts = String(value).split(".");
      if (parts.length > 1) {
        if (parts[1].length <= this.precision) {
          return value;
        } else if (this.precision > 0) {
          return "".concat(parts[0], ".").concat(parts[1].slice(0, this.precision));
        }
      }
      return parts[0];
    };
    AgInputNumberField2.prototype.setMin = function(min) {
      if (this.min === min) {
        return this;
      }
      this.min = min;
      addOrRemoveAttribute(this.eInput, "min", min);
      return this;
    };
    AgInputNumberField2.prototype.setMax = function(max) {
      if (this.max === max) {
        return this;
      }
      this.max = max;
      addOrRemoveAttribute(this.eInput, "max", max);
      return this;
    };
    AgInputNumberField2.prototype.setPrecision = function(precision) {
      this.precision = precision;
      return this;
    };
    AgInputNumberField2.prototype.setStep = function(step) {
      if (this.step === step) {
        return this;
      }
      this.step = step;
      addOrRemoveAttribute(this.eInput, "step", step);
      return this;
    };
    AgInputNumberField2.prototype.setValue = function(value, silent) {
      var _this = this;
      return this.setValueOrInputValue(function(v) {
        return _super.prototype.setValue.call(_this, v, silent);
      }, function() {
        return _this;
      }, value);
    };
    AgInputNumberField2.prototype.setStartValue = function(value) {
      var _this = this;
      return this.setValueOrInputValue(function(v) {
        return _super.prototype.setValue.call(_this, v, true);
      }, function(v) {
        _this.eInput.value = v;
      }, value);
    };
    AgInputNumberField2.prototype.setValueOrInputValue = function(setValueFunc, setInputValueOnlyFunc, value) {
      if (exists(value)) {
        var setInputValueOnly = this.isScientificNotation(value);
        if (setInputValueOnly && this.eInput.validity.valid) {
          return setValueFunc(value);
        }
        if (!setInputValueOnly) {
          value = this.adjustPrecision(value);
          var normalizedValue = this.normalizeValue(value);
          setInputValueOnly = value != normalizedValue;
        }
        if (setInputValueOnly) {
          return setInputValueOnlyFunc(value);
        }
      }
      return setValueFunc(value);
    };
    AgInputNumberField2.prototype.getValue = function() {
      if (!this.eInput.validity.valid) {
        return void 0;
      }
      var inputValue = this.eInput.value;
      if (this.isScientificNotation(inputValue)) {
        return this.adjustPrecision(inputValue, true);
      }
      return _super.prototype.getValue.call(this);
    };
    AgInputNumberField2.prototype.isScientificNotation = function(value) {
      return typeof value === "string" && value.includes("e");
    };
    return AgInputNumberField2;
  }(AgInputTextField)
);
var __extends$2N = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var NumberFilterModelFormatter = (
  /** @class */
  function(_super) {
    __extends$2N(NumberFilterModelFormatter2, _super);
    function NumberFilterModelFormatter2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    NumberFilterModelFormatter2.prototype.conditionToString = function(condition, options) {
      var numberOfInputs = (options || {}).numberOfInputs;
      var isRange = condition.type == SimpleFilter.IN_RANGE || numberOfInputs === 2;
      if (isRange) {
        return "".concat(this.formatValue(condition.filter), "-").concat(this.formatValue(condition.filterTo));
      }
      if (condition.filter != null) {
        return this.formatValue(condition.filter);
      }
      return "".concat(condition.type);
    };
    return NumberFilterModelFormatter2;
  }(SimpleFilterModelFormatter)
);
function getAllowedCharPattern(filterParams) {
  var allowedCharPattern = (filterParams !== null && filterParams !== void 0 ? filterParams : {}).allowedCharPattern;
  return allowedCharPattern !== null && allowedCharPattern !== void 0 ? allowedCharPattern : null;
}
var NumberFilter = (
  /** @class */
  function(_super) {
    __extends$2N(NumberFilter2, _super);
    function NumberFilter2() {
      var _this = _super.call(this, "numberFilter") || this;
      _this.eValuesFrom = [];
      _this.eValuesTo = [];
      return _this;
    }
    NumberFilter2.prototype.refresh = function(params) {
      if (this.numberFilterParams.allowedCharPattern !== params.allowedCharPattern) {
        return false;
      }
      return _super.prototype.refresh.call(this, params);
    };
    NumberFilter2.prototype.mapValuesFromModel = function(filterModel) {
      var _a = filterModel || {}, filter = _a.filter, filterTo = _a.filterTo, type = _a.type;
      return [
        this.processValue(filter),
        this.processValue(filterTo)
      ].slice(0, this.getNumberOfInputs(type));
    };
    NumberFilter2.prototype.getDefaultDebounceMs = function() {
      return 500;
    };
    NumberFilter2.prototype.comparator = function() {
      return function(left, right) {
        if (left === right) {
          return 0;
        }
        return left < right ? 1 : -1;
      };
    };
    NumberFilter2.prototype.setParams = function(params) {
      this.numberFilterParams = params;
      _super.prototype.setParams.call(this, params);
      this.filterModelFormatter = new NumberFilterModelFormatter(this.localeService, this.optionsFactory, this.numberFilterParams.numberFormatter);
    };
    NumberFilter2.prototype.getDefaultFilterOptions = function() {
      return NumberFilter2.DEFAULT_FILTER_OPTIONS;
    };
    NumberFilter2.prototype.setElementValue = function(element, value, fromFloatingFilter) {
      var valueToSet = !fromFloatingFilter && this.numberFilterParams.numberFormatter ? this.numberFilterParams.numberFormatter(value !== null && value !== void 0 ? value : null) : value;
      _super.prototype.setElementValue.call(this, element, valueToSet);
    };
    NumberFilter2.prototype.createValueElement = function() {
      var allowedCharPattern = getAllowedCharPattern(this.numberFilterParams);
      var eCondition = document.createElement("div");
      eCondition.classList.add("ag-filter-body");
      setAriaRole(eCondition, "presentation");
      this.createFromToElement(eCondition, this.eValuesFrom, "from", allowedCharPattern);
      this.createFromToElement(eCondition, this.eValuesTo, "to", allowedCharPattern);
      return eCondition;
    };
    NumberFilter2.prototype.createFromToElement = function(eCondition, eValues, fromTo, allowedCharPattern) {
      var eValue = this.createManagedBean(allowedCharPattern ? new AgInputTextField({ allowedCharPattern }) : new AgInputNumberField());
      eValue.addCssClass("ag-filter-".concat(fromTo));
      eValue.addCssClass("ag-filter-filter");
      eValues.push(eValue);
      eCondition.appendChild(eValue.getGui());
    };
    NumberFilter2.prototype.removeValueElements = function(startPosition, deleteCount) {
      this.removeComponents(this.eValuesFrom, startPosition, deleteCount);
      this.removeComponents(this.eValuesTo, startPosition, deleteCount);
    };
    NumberFilter2.prototype.getValues = function(position) {
      var _this = this;
      var result = [];
      this.forEachPositionInput(position, function(element, index, _elPosition, numberOfInputs) {
        if (index < numberOfInputs) {
          result.push(_this.processValue(_this.stringToFloat(element.getValue())));
        }
      });
      return result;
    };
    NumberFilter2.prototype.areSimpleModelsEqual = function(aSimple, bSimple) {
      return aSimple.filter === bSimple.filter && aSimple.filterTo === bSimple.filterTo && aSimple.type === bSimple.type;
    };
    NumberFilter2.prototype.getFilterType = function() {
      return "number";
    };
    NumberFilter2.prototype.processValue = function(value) {
      if (value == null) {
        return null;
      }
      return isNaN(value) ? null : value;
    };
    NumberFilter2.prototype.stringToFloat = function(value) {
      if (typeof value === "number") {
        return value;
      }
      var filterText = makeNull(value);
      if (filterText != null && filterText.trim() === "") {
        filterText = null;
      }
      if (this.numberFilterParams.numberParser) {
        return this.numberFilterParams.numberParser(filterText);
      }
      return filterText == null || filterText.trim() === "-" ? null : parseFloat(filterText);
    };
    NumberFilter2.prototype.createCondition = function(position) {
      var type = this.getConditionType(position);
      var model = {
        filterType: this.getFilterType(),
        type
      };
      var values2 = this.getValues(position);
      if (values2.length > 0) {
        model.filter = values2[0];
      }
      if (values2.length > 1) {
        model.filterTo = values2[1];
      }
      return model;
    };
    NumberFilter2.prototype.getInputs = function(position) {
      if (position >= this.eValuesFrom.length) {
        return [null, null];
      }
      return [this.eValuesFrom[position], this.eValuesTo[position]];
    };
    NumberFilter2.prototype.getModelAsString = function(model) {
      var _a;
      return (_a = this.filterModelFormatter.getModelAsString(model)) !== null && _a !== void 0 ? _a : "";
    };
    NumberFilter2.prototype.hasInvalidInputs = function() {
      var invalidInputs = false;
      this.forEachInput(function(element) {
        if (!element.getInputElement().validity.valid) {
          invalidInputs = true;
          return;
        }
      });
      return invalidInputs;
    };
    NumberFilter2.DEFAULT_FILTER_OPTIONS = [
      ScalarFilter.EQUALS,
      ScalarFilter.NOT_EQUAL,
      ScalarFilter.GREATER_THAN,
      ScalarFilter.GREATER_THAN_OR_EQUAL,
      ScalarFilter.LESS_THAN,
      ScalarFilter.LESS_THAN_OR_EQUAL,
      ScalarFilter.IN_RANGE,
      ScalarFilter.BLANK,
      ScalarFilter.NOT_BLANK
    ];
    return NumberFilter2;
  }(ScalarFilter)
);
var __extends$2M = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$j = function() {
  __assign$j = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$j.apply(this, arguments);
};
var TextFilterModelFormatter = (
  /** @class */
  function(_super) {
    __extends$2M(TextFilterModelFormatter2, _super);
    function TextFilterModelFormatter2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    TextFilterModelFormatter2.prototype.conditionToString = function(condition, options) {
      var numberOfInputs = (options || {}).numberOfInputs;
      var isRange = condition.type == SimpleFilter.IN_RANGE || numberOfInputs === 2;
      if (isRange) {
        return "".concat(condition.filter, "-").concat(condition.filterTo);
      }
      if (condition.filter != null) {
        return "".concat(condition.filter);
      }
      return "".concat(condition.type);
    };
    return TextFilterModelFormatter2;
  }(SimpleFilterModelFormatter)
);
var TextFilter = (
  /** @class */
  function(_super) {
    __extends$2M(TextFilter2, _super);
    function TextFilter2() {
      var _this = _super.call(this, "textFilter") || this;
      _this.eValuesFrom = [];
      _this.eValuesTo = [];
      return _this;
    }
    TextFilter2.trimInput = function(value) {
      var trimmedInput = value && value.trim();
      return trimmedInput === "" ? value : trimmedInput;
    };
    TextFilter2.prototype.getDefaultDebounceMs = function() {
      return 500;
    };
    TextFilter2.prototype.setParams = function(params) {
      this.textFilterParams = params;
      _super.prototype.setParams.call(this, params);
      this.matcher = this.getTextMatcher();
      this.formatter = this.textFilterParams.textFormatter || (this.textFilterParams.caseSensitive ? TextFilter2.DEFAULT_FORMATTER : TextFilter2.DEFAULT_LOWERCASE_FORMATTER);
      this.filterModelFormatter = new TextFilterModelFormatter(this.localeService, this.optionsFactory);
    };
    TextFilter2.prototype.getTextMatcher = function() {
      var legacyComparator = this.textFilterParams.textCustomComparator;
      if (legacyComparator) {
        _.warnOnce("textCustomComparator is deprecated, use textMatcher instead.");
        return function(_a) {
          var filterOption = _a.filterOption, value = _a.value, filterText = _a.filterText;
          return legacyComparator(filterOption, value, filterText);
        };
      }
      return this.textFilterParams.textMatcher || TextFilter2.DEFAULT_MATCHER;
    };
    TextFilter2.prototype.createCondition = function(position) {
      var type = this.getConditionType(position);
      var model = {
        filterType: this.getFilterType(),
        type
      };
      var values2 = this.getValuesWithSideEffects(position, true);
      if (values2.length > 0) {
        model.filter = values2[0];
      }
      if (values2.length > 1) {
        model.filterTo = values2[1];
      }
      return model;
    };
    TextFilter2.prototype.getFilterType = function() {
      return "text";
    };
    TextFilter2.prototype.areSimpleModelsEqual = function(aSimple, bSimple) {
      return aSimple.filter === bSimple.filter && aSimple.filterTo === bSimple.filterTo && aSimple.type === bSimple.type;
    };
    TextFilter2.prototype.getInputs = function(position) {
      if (position >= this.eValuesFrom.length) {
        return [null, null];
      }
      return [this.eValuesFrom[position], this.eValuesTo[position]];
    };
    TextFilter2.prototype.getValues = function(position) {
      return this.getValuesWithSideEffects(position, false);
    };
    TextFilter2.prototype.getValuesWithSideEffects = function(position, applySideEffects) {
      var _this = this;
      var result = [];
      this.forEachPositionInput(position, function(element, index, _elPosition, numberOfInputs) {
        var _a;
        if (index < numberOfInputs) {
          var value = makeNull(element.getValue());
          if (applySideEffects && _this.textFilterParams.trimInput) {
            value = (_a = TextFilter2.trimInput(value)) !== null && _a !== void 0 ? _a : null;
            element.setValue(value, true);
          }
          result.push(value);
        }
      });
      return result;
    };
    TextFilter2.prototype.getDefaultFilterOptions = function() {
      return TextFilter2.DEFAULT_FILTER_OPTIONS;
    };
    TextFilter2.prototype.createValueElement = function() {
      var eCondition = document.createElement("div");
      eCondition.classList.add("ag-filter-body");
      setAriaRole(eCondition, "presentation");
      this.createFromToElement(eCondition, this.eValuesFrom, "from");
      this.createFromToElement(eCondition, this.eValuesTo, "to");
      return eCondition;
    };
    TextFilter2.prototype.createFromToElement = function(eCondition, eValues, fromTo) {
      var eValue = this.createManagedBean(new AgInputTextField());
      eValue.addCssClass("ag-filter-".concat(fromTo));
      eValue.addCssClass("ag-filter-filter");
      eValues.push(eValue);
      eCondition.appendChild(eValue.getGui());
    };
    TextFilter2.prototype.removeValueElements = function(startPosition, deleteCount) {
      this.removeComponents(this.eValuesFrom, startPosition, deleteCount);
      this.removeComponents(this.eValuesTo, startPosition, deleteCount);
    };
    TextFilter2.prototype.mapValuesFromModel = function(filterModel) {
      var _a = filterModel || {}, filter = _a.filter, filterTo = _a.filterTo, type = _a.type;
      return [
        filter || null,
        filterTo || null
      ].slice(0, this.getNumberOfInputs(type));
    };
    TextFilter2.prototype.evaluateNullValue = function(filterType) {
      var filterTypesAllowNulls = [
        SimpleFilter.NOT_EQUAL,
        SimpleFilter.NOT_CONTAINS,
        SimpleFilter.BLANK
      ];
      return filterType ? filterTypesAllowNulls.indexOf(filterType) >= 0 : false;
    };
    TextFilter2.prototype.evaluateNonNullValue = function(values2, cellValue, filterModel, params) {
      var _this = this;
      var formattedValues = values2.map(function(v) {
        return _this.formatter(v);
      }) || [];
      var cellValueFormatted = this.formatter(cellValue);
      var _a = this.textFilterParams, api = _a.api, colDef = _a.colDef, column = _a.column, columnApi = _a.columnApi, context = _a.context, textFormatter = _a.textFormatter;
      if (filterModel.type === SimpleFilter.BLANK) {
        return this.isBlank(cellValue);
      } else if (filterModel.type === SimpleFilter.NOT_BLANK) {
        return !this.isBlank(cellValue);
      }
      var matcherParams = {
        api,
        colDef,
        column,
        columnApi,
        context,
        node: params.node,
        data: params.data,
        filterOption: filterModel.type,
        value: cellValueFormatted,
        textFormatter
      };
      return formattedValues.some(function(v) {
        return _this.matcher(__assign$j(__assign$j({}, matcherParams), { filterText: v }));
      });
    };
    TextFilter2.prototype.getModelAsString = function(model) {
      var _a;
      return (_a = this.filterModelFormatter.getModelAsString(model)) !== null && _a !== void 0 ? _a : "";
    };
    TextFilter2.DEFAULT_FILTER_OPTIONS = [
      SimpleFilter.CONTAINS,
      SimpleFilter.NOT_CONTAINS,
      SimpleFilter.EQUALS,
      SimpleFilter.NOT_EQUAL,
      SimpleFilter.STARTS_WITH,
      SimpleFilter.ENDS_WITH,
      SimpleFilter.BLANK,
      SimpleFilter.NOT_BLANK
    ];
    TextFilter2.DEFAULT_FORMATTER = function(from) {
      return from;
    };
    TextFilter2.DEFAULT_LOWERCASE_FORMATTER = function(from) {
      return from == null ? null : from.toString().toLowerCase();
    };
    TextFilter2.DEFAULT_MATCHER = function(_a) {
      var filterOption = _a.filterOption, value = _a.value, filterText = _a.filterText;
      if (filterText == null) {
        return false;
      }
      switch (filterOption) {
        case TextFilter2.CONTAINS:
          return value.indexOf(filterText) >= 0;
        case TextFilter2.NOT_CONTAINS:
          return value.indexOf(filterText) < 0;
        case TextFilter2.EQUALS:
          return value === filterText;
        case TextFilter2.NOT_EQUAL:
          return value != filterText;
        case TextFilter2.STARTS_WITH:
          return value.indexOf(filterText) === 0;
        case TextFilter2.ENDS_WITH:
          var index = value.lastIndexOf(filterText);
          return index >= 0 && index === value.length - filterText.length;
        default:
          return false;
      }
    };
    return TextFilter2;
  }(SimpleFilter)
);
var __extends$2L = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2r = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FloatingFilterTextInputService = (
  /** @class */
  function(_super) {
    __extends$2L(FloatingFilterTextInputService2, _super);
    function FloatingFilterTextInputService2(params) {
      var _this = _super.call(this) || this;
      _this.params = params;
      _this.valueChangedListener = function() {
      };
      return _this;
    }
    FloatingFilterTextInputService2.prototype.setupGui = function(parentElement) {
      var _this = this;
      var _a;
      this.eFloatingFilterTextInput = this.createManagedBean(new AgInputTextField((_a = this.params) === null || _a === void 0 ? void 0 : _a.config));
      var eInput = this.eFloatingFilterTextInput.getGui();
      parentElement.appendChild(eInput);
      this.addManagedListener(eInput, "input", function(e) {
        return _this.valueChangedListener(e);
      });
      this.addManagedListener(eInput, "keydown", function(e) {
        return _this.valueChangedListener(e);
      });
    };
    FloatingFilterTextInputService2.prototype.setEditable = function(editable) {
      this.eFloatingFilterTextInput.setDisabled(!editable);
    };
    FloatingFilterTextInputService2.prototype.setAutoComplete = function(autoComplete) {
      this.eFloatingFilterTextInput.setAutoComplete(autoComplete);
    };
    FloatingFilterTextInputService2.prototype.getValue = function() {
      return this.eFloatingFilterTextInput.getValue();
    };
    FloatingFilterTextInputService2.prototype.setValue = function(value, silent) {
      this.eFloatingFilterTextInput.setValue(value, silent);
    };
    FloatingFilterTextInputService2.prototype.setValueChangedListener = function(listener) {
      this.valueChangedListener = listener;
    };
    FloatingFilterTextInputService2.prototype.setParams = function(params) {
      this.setAriaLabel(params.ariaLabel);
      if (params.autoComplete !== void 0) {
        this.setAutoComplete(params.autoComplete);
      }
    };
    FloatingFilterTextInputService2.prototype.setAriaLabel = function(ariaLabel) {
      this.eFloatingFilterTextInput.setInputAriaLabel(ariaLabel);
    };
    return FloatingFilterTextInputService2;
  }(BeanStub)
);
var TextInputFloatingFilter = (
  /** @class */
  function(_super) {
    __extends$2L(TextInputFloatingFilter2, _super);
    function TextInputFloatingFilter2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    TextInputFloatingFilter2.prototype.postConstruct = function() {
      this.setTemplate(
        /* html */
        '\n            <div class="ag-floating-filter-input" role="presentation" ref="eFloatingFilterInputContainer"></div>\n        '
      );
    };
    TextInputFloatingFilter2.prototype.getDefaultDebounceMs = function() {
      return 500;
    };
    TextInputFloatingFilter2.prototype.onParentModelChanged = function(model, event) {
      if (this.isEventFromFloatingFilter(event) || this.isEventFromDataChange(event)) {
        return;
      }
      this.setLastTypeFromModel(model);
      this.setEditable(this.canWeEditAfterModelFromParentFilter(model));
      this.floatingFilterInputService.setValue(this.getFilterModelFormatter().getModelAsString(model));
    };
    TextInputFloatingFilter2.prototype.init = function(params) {
      this.setupFloatingFilterInputService(params);
      _super.prototype.init.call(this, params);
      this.setTextInputParams(params);
    };
    TextInputFloatingFilter2.prototype.setupFloatingFilterInputService = function(params) {
      this.floatingFilterInputService = this.createFloatingFilterInputService(params);
      this.floatingFilterInputService.setupGui(this.eFloatingFilterInputContainer);
    };
    TextInputFloatingFilter2.prototype.setTextInputParams = function(params) {
      var _a;
      this.params = params;
      var autoComplete = (_a = params.browserAutoComplete) !== null && _a !== void 0 ? _a : false;
      this.floatingFilterInputService.setParams({
        ariaLabel: this.getAriaLabel(params),
        autoComplete
      });
      this.applyActive = ProvidedFilter.isUseApplyButton(this.params.filterParams);
      if (!this.isReadOnly()) {
        var debounceMs = ProvidedFilter.getDebounceMs(this.params.filterParams, this.getDefaultDebounceMs());
        var toDebounce = debounce(this.syncUpWithParentFilter.bind(this), debounceMs);
        this.floatingFilterInputService.setValueChangedListener(toDebounce);
      }
    };
    TextInputFloatingFilter2.prototype.onParamsUpdated = function(params) {
      this.refresh(params);
    };
    TextInputFloatingFilter2.prototype.refresh = function(params) {
      _super.prototype.refresh.call(this, params);
      this.setTextInputParams(params);
    };
    TextInputFloatingFilter2.prototype.recreateFloatingFilterInputService = function(params) {
      var value = this.floatingFilterInputService.getValue();
      clearElement(this.eFloatingFilterInputContainer);
      this.destroyBean(this.floatingFilterInputService);
      this.setupFloatingFilterInputService(params);
      this.floatingFilterInputService.setValue(value, true);
    };
    TextInputFloatingFilter2.prototype.getAriaLabel = function(params) {
      var displayName = this.columnModel.getDisplayNameForColumn(params.column, "header", true);
      var translate = this.localeService.getLocaleTextFunc();
      return "".concat(displayName, " ").concat(translate("ariaFilterInput", "Filter Input"));
    };
    TextInputFloatingFilter2.prototype.syncUpWithParentFilter = function(e) {
      var _this = this;
      var isEnterKey = e.key === KeyCode.ENTER;
      if (this.applyActive && !isEnterKey) {
        return;
      }
      var value = this.floatingFilterInputService.getValue();
      if (this.params.filterParams.trimInput) {
        value = TextFilter.trimInput(value);
        this.floatingFilterInputService.setValue(value, true);
      }
      this.params.parentFilterInstance(function(filterInstance) {
        if (filterInstance) {
          filterInstance.onFloatingFilterChanged(_this.getLastType() || null, value || null);
        }
      });
    };
    TextInputFloatingFilter2.prototype.setEditable = function(editable) {
      this.floatingFilterInputService.setEditable(editable);
    };
    __decorate$2r([
      Autowired("columnModel")
    ], TextInputFloatingFilter2.prototype, "columnModel", void 0);
    __decorate$2r([
      RefSelector("eFloatingFilterInputContainer")
    ], TextInputFloatingFilter2.prototype, "eFloatingFilterInputContainer", void 0);
    __decorate$2r([
      PostConstruct
    ], TextInputFloatingFilter2.prototype, "postConstruct", null);
    return TextInputFloatingFilter2;
  }(SimpleFloatingFilter)
);
var __extends$2K = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var FloatingFilterNumberInputService = (
  /** @class */
  function(_super) {
    __extends$2K(FloatingFilterNumberInputService2, _super);
    function FloatingFilterNumberInputService2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.valueChangedListener = function() {
      };
      _this.numberInputActive = true;
      return _this;
    }
    FloatingFilterNumberInputService2.prototype.setupGui = function(parentElement) {
      var _this = this;
      this.eFloatingFilterNumberInput = this.createManagedBean(new AgInputNumberField());
      this.eFloatingFilterTextInput = this.createManagedBean(new AgInputTextField());
      this.eFloatingFilterTextInput.setDisabled(true);
      var eNumberInput = this.eFloatingFilterNumberInput.getGui();
      var eTextInput = this.eFloatingFilterTextInput.getGui();
      parentElement.appendChild(eNumberInput);
      parentElement.appendChild(eTextInput);
      this.setupListeners(eNumberInput, function(e) {
        return _this.valueChangedListener(e);
      });
      this.setupListeners(eTextInput, function(e) {
        return _this.valueChangedListener(e);
      });
    };
    FloatingFilterNumberInputService2.prototype.setEditable = function(editable) {
      this.numberInputActive = editable;
      this.eFloatingFilterNumberInput.setDisplayed(this.numberInputActive);
      this.eFloatingFilterTextInput.setDisplayed(!this.numberInputActive);
    };
    FloatingFilterNumberInputService2.prototype.setAutoComplete = function(autoComplete) {
      this.eFloatingFilterNumberInput.setAutoComplete(autoComplete);
      this.eFloatingFilterTextInput.setAutoComplete(autoComplete);
    };
    FloatingFilterNumberInputService2.prototype.getValue = function() {
      return this.getActiveInputElement().getValue();
    };
    FloatingFilterNumberInputService2.prototype.setValue = function(value, silent) {
      this.getActiveInputElement().setValue(value, silent);
    };
    FloatingFilterNumberInputService2.prototype.getActiveInputElement = function() {
      return this.numberInputActive ? this.eFloatingFilterNumberInput : this.eFloatingFilterTextInput;
    };
    FloatingFilterNumberInputService2.prototype.setValueChangedListener = function(listener) {
      this.valueChangedListener = listener;
    };
    FloatingFilterNumberInputService2.prototype.setupListeners = function(element, listener) {
      this.addManagedListener(element, "input", listener);
      this.addManagedListener(element, "keydown", listener);
    };
    FloatingFilterNumberInputService2.prototype.setParams = function(params) {
      this.setAriaLabel(params.ariaLabel);
      if (params.autoComplete !== void 0) {
        this.setAutoComplete(params.autoComplete);
      }
    };
    FloatingFilterNumberInputService2.prototype.setAriaLabel = function(ariaLabel) {
      this.eFloatingFilterNumberInput.setInputAriaLabel(ariaLabel);
      this.eFloatingFilterTextInput.setInputAriaLabel(ariaLabel);
    };
    return FloatingFilterNumberInputService2;
  }(BeanStub)
);
var NumberFloatingFilter = (
  /** @class */
  function(_super) {
    __extends$2K(NumberFloatingFilter2, _super);
    function NumberFloatingFilter2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    NumberFloatingFilter2.prototype.init = function(params) {
      var _a;
      _super.prototype.init.call(this, params);
      this.filterModelFormatter = new NumberFilterModelFormatter(this.localeService, this.optionsFactory, (_a = params.filterParams) === null || _a === void 0 ? void 0 : _a.numberFormatter);
    };
    NumberFloatingFilter2.prototype.onParamsUpdated = function(params) {
      this.refresh(params);
    };
    NumberFloatingFilter2.prototype.refresh = function(params) {
      var allowedCharPattern = getAllowedCharPattern(params.filterParams);
      if (allowedCharPattern !== this.allowedCharPattern) {
        this.recreateFloatingFilterInputService(params);
      }
      _super.prototype.refresh.call(this, params);
      this.filterModelFormatter.updateParams({ optionsFactory: this.optionsFactory });
    };
    NumberFloatingFilter2.prototype.getDefaultFilterOptions = function() {
      return NumberFilter.DEFAULT_FILTER_OPTIONS;
    };
    NumberFloatingFilter2.prototype.getFilterModelFormatter = function() {
      return this.filterModelFormatter;
    };
    NumberFloatingFilter2.prototype.createFloatingFilterInputService = function(params) {
      this.allowedCharPattern = getAllowedCharPattern(params.filterParams);
      if (this.allowedCharPattern) {
        return this.createManagedBean(new FloatingFilterTextInputService({
          config: { allowedCharPattern: this.allowedCharPattern }
        }));
      }
      return this.createManagedBean(new FloatingFilterNumberInputService());
    };
    return NumberFloatingFilter2;
  }(TextInputFloatingFilter)
);
var __extends$2J = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TextFloatingFilter = (
  /** @class */
  function(_super) {
    __extends$2J(TextFloatingFilter2, _super);
    function TextFloatingFilter2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    TextFloatingFilter2.prototype.init = function(params) {
      _super.prototype.init.call(this, params);
      this.filterModelFormatter = new TextFilterModelFormatter(this.localeService, this.optionsFactory);
    };
    TextFloatingFilter2.prototype.onParamsUpdated = function(params) {
      this.refresh(params);
    };
    TextFloatingFilter2.prototype.refresh = function(params) {
      _super.prototype.refresh.call(this, params);
      this.filterModelFormatter.updateParams({ optionsFactory: this.optionsFactory });
    };
    TextFloatingFilter2.prototype.getDefaultFilterOptions = function() {
      return TextFilter.DEFAULT_FILTER_OPTIONS;
    };
    TextFloatingFilter2.prototype.getFilterModelFormatter = function() {
      return this.filterModelFormatter;
    };
    TextFloatingFilter2.prototype.createFloatingFilterInputService = function() {
      return this.createManagedBean(new FloatingFilterTextInputService());
    };
    return TextFloatingFilter2;
  }(TextInputFloatingFilter)
);
var TouchListener = (
  /** @class */
  function() {
    function TouchListener2(eElement, preventMouseClick) {
      if (preventMouseClick === void 0) {
        preventMouseClick = false;
      }
      var _this = this;
      this.destroyFuncs = [];
      this.touching = false;
      this.eventService = new EventService();
      this.eElement = eElement;
      this.preventMouseClick = preventMouseClick;
      var startListener = this.onTouchStart.bind(this);
      var moveListener = this.onTouchMove.bind(this);
      var endListener = this.onTouchEnd.bind(this);
      this.eElement.addEventListener("touchstart", startListener, { passive: true });
      this.eElement.addEventListener("touchmove", moveListener, { passive: true });
      this.eElement.addEventListener("touchend", endListener, { passive: false });
      this.destroyFuncs.push(function() {
        _this.eElement.removeEventListener("touchstart", startListener, { passive: true });
        _this.eElement.removeEventListener("touchmove", moveListener, { passive: true });
        _this.eElement.removeEventListener("touchend", endListener, { passive: false });
      });
    }
    TouchListener2.prototype.getActiveTouch = function(touchList) {
      for (var i = 0; i < touchList.length; i++) {
        var matches = touchList[i].identifier === this.touchStart.identifier;
        if (matches) {
          return touchList[i];
        }
      }
      return null;
    };
    TouchListener2.prototype.addEventListener = function(eventType, listener) {
      this.eventService.addEventListener(eventType, listener);
    };
    TouchListener2.prototype.removeEventListener = function(eventType, listener) {
      this.eventService.removeEventListener(eventType, listener);
    };
    TouchListener2.prototype.onTouchStart = function(touchEvent) {
      var _this = this;
      if (this.touching) {
        return;
      }
      this.touchStart = touchEvent.touches[0];
      this.touching = true;
      this.moved = false;
      var touchStartCopy = this.touchStart;
      window.setTimeout(function() {
        var touchesMatch = _this.touchStart === touchStartCopy;
        if (_this.touching && touchesMatch && !_this.moved) {
          _this.moved = true;
          var event_1 = {
            type: TouchListener2.EVENT_LONG_TAP,
            touchStart: _this.touchStart,
            touchEvent
          };
          _this.eventService.dispatchEvent(event_1);
        }
      }, 500);
    };
    TouchListener2.prototype.onTouchMove = function(touchEvent) {
      if (!this.touching) {
        return;
      }
      var touch = this.getActiveTouch(touchEvent.touches);
      if (!touch) {
        return;
      }
      var eventIsFarAway = !areEventsNear(touch, this.touchStart, 4);
      if (eventIsFarAway) {
        this.moved = true;
      }
    };
    TouchListener2.prototype.onTouchEnd = function(touchEvent) {
      if (!this.touching) {
        return;
      }
      if (!this.moved) {
        var event_2 = {
          type: TouchListener2.EVENT_TAP,
          touchStart: this.touchStart
        };
        this.eventService.dispatchEvent(event_2);
        this.checkForDoubleTap();
      }
      if (this.preventMouseClick && touchEvent.cancelable) {
        touchEvent.preventDefault();
      }
      this.touching = false;
    };
    TouchListener2.prototype.checkForDoubleTap = function() {
      var now = (/* @__PURE__ */ new Date()).getTime();
      if (this.lastTapTime && this.lastTapTime > 0) {
        var interval = now - this.lastTapTime;
        if (interval > TouchListener2.DOUBLE_TAP_MILLIS) {
          var event_3 = {
            type: TouchListener2.EVENT_DOUBLE_TAP,
            touchStart: this.touchStart
          };
          this.eventService.dispatchEvent(event_3);
          this.lastTapTime = null;
        } else {
          this.lastTapTime = now;
        }
      } else {
        this.lastTapTime = now;
      }
    };
    TouchListener2.prototype.destroy = function() {
      this.destroyFuncs.forEach(function(func) {
        return func();
      });
    };
    TouchListener2.EVENT_TAP = "tap";
    TouchListener2.EVENT_DOUBLE_TAP = "doubleTap";
    TouchListener2.EVENT_LONG_TAP = "longTap";
    TouchListener2.DOUBLE_TAP_MILLIS = 500;
    return TouchListener2;
  }()
);
var __extends$2I = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2q = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SortIndicatorComp = (
  /** @class */
  function(_super) {
    __extends$2I(SortIndicatorComp2, _super);
    function SortIndicatorComp2(skipTemplate) {
      var _this = _super.call(this) || this;
      if (!skipTemplate) {
        _this.setTemplate(SortIndicatorComp2.TEMPLATE);
      }
      return _this;
    }
    SortIndicatorComp2.prototype.attachCustomElements = function(eSortOrder, eSortAsc, eSortDesc, eSortMixed, eSortNone) {
      this.eSortOrder = eSortOrder;
      this.eSortAsc = eSortAsc;
      this.eSortDesc = eSortDesc;
      this.eSortMixed = eSortMixed;
      this.eSortNone = eSortNone;
    };
    SortIndicatorComp2.prototype.setupSort = function(column, suppressOrder) {
      var _this = this;
      if (suppressOrder === void 0) {
        suppressOrder = false;
      }
      this.column = column;
      this.suppressOrder = suppressOrder;
      this.setupMultiSortIndicator();
      if (!this.column.isSortable()) {
        return;
      }
      this.addInIcon("sortAscending", this.eSortAsc, column);
      this.addInIcon("sortDescending", this.eSortDesc, column);
      this.addInIcon("sortUnSort", this.eSortNone, column);
      this.addManagedPropertyListener("unSortIcon", function() {
        return _this.updateIcons();
      });
      this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, function() {
        return _this.updateIcons();
      });
      this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, function() {
        return _this.onSortChanged();
      });
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, function() {
        return _this.onSortChanged();
      });
      this.onSortChanged();
    };
    SortIndicatorComp2.prototype.addInIcon = function(iconName, eParent, column) {
      if (eParent == null) {
        return;
      }
      var eIcon = createIconNoSpan(iconName, this.gridOptionsService, column);
      if (eIcon) {
        eParent.appendChild(eIcon);
      }
    };
    SortIndicatorComp2.prototype.onSortChanged = function() {
      this.updateIcons();
      if (!this.suppressOrder) {
        this.updateSortOrder();
      }
    };
    SortIndicatorComp2.prototype.updateIcons = function() {
      var sortDirection = this.sortController.getDisplaySortForColumn(this.column);
      if (this.eSortAsc) {
        var isAscending = sortDirection === "asc";
        setDisplayed(this.eSortAsc, isAscending, { skipAriaHidden: true });
      }
      if (this.eSortDesc) {
        var isDescending = sortDirection === "desc";
        setDisplayed(this.eSortDesc, isDescending, { skipAriaHidden: true });
      }
      if (this.eSortNone) {
        var alwaysHideNoSort = !this.column.getColDef().unSortIcon && !this.gridOptionsService.get("unSortIcon");
        var isNone = sortDirection === null || sortDirection === void 0;
        setDisplayed(this.eSortNone, !alwaysHideNoSort && isNone, { skipAriaHidden: true });
      }
    };
    SortIndicatorComp2.prototype.setupMultiSortIndicator = function() {
      var _this = this;
      this.addInIcon("sortUnSort", this.eSortMixed, this.column);
      var isColumnShowingRowGroup = this.column.getColDef().showRowGroup;
      var areGroupsCoupled = this.gridOptionsService.isColumnsSortingCoupledToGroup();
      if (areGroupsCoupled && isColumnShowingRowGroup) {
        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, function() {
          return _this.updateMultiSortIndicator();
        });
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, function() {
          return _this.updateMultiSortIndicator();
        });
        this.updateMultiSortIndicator();
      }
    };
    SortIndicatorComp2.prototype.updateMultiSortIndicator = function() {
      if (this.eSortMixed) {
        var isMixedSort = this.sortController.getDisplaySortForColumn(this.column) === "mixed";
        setDisplayed(this.eSortMixed, isMixedSort, { skipAriaHidden: true });
      }
    };
    SortIndicatorComp2.prototype.updateSortOrder = function() {
      var _this = this;
      var _a;
      if (!this.eSortOrder) {
        return;
      }
      var allColumnsWithSorting = this.sortController.getColumnsWithSortingOrdered();
      var indexThisCol = (_a = this.sortController.getDisplaySortIndexForColumn(this.column)) !== null && _a !== void 0 ? _a : -1;
      var moreThanOneColSorting = allColumnsWithSorting.some(function(col) {
        var _a2;
        return (_a2 = _this.sortController.getDisplaySortIndexForColumn(col)) !== null && _a2 !== void 0 ? _a2 : -1 >= 1;
      });
      var showIndex = indexThisCol >= 0 && moreThanOneColSorting;
      setDisplayed(this.eSortOrder, showIndex, { skipAriaHidden: true });
      if (indexThisCol >= 0) {
        this.eSortOrder.textContent = (indexThisCol + 1).toString();
      } else {
        clearElement(this.eSortOrder);
      }
    };
    SortIndicatorComp2.TEMPLATE = '<span class="ag-sort-indicator-container">\n            <span ref="eSortOrder" class="ag-sort-indicator-icon ag-sort-order ag-hidden" aria-hidden="true"></span>\n            <span ref="eSortAsc" class="ag-sort-indicator-icon ag-sort-ascending-icon ag-hidden" aria-hidden="true"></span>\n            <span ref="eSortDesc" class="ag-sort-indicator-icon ag-sort-descending-icon ag-hidden" aria-hidden="true"></span>\n            <span ref="eSortMixed" class="ag-sort-indicator-icon ag-sort-mixed-icon ag-hidden" aria-hidden="true"></span>\n            <span ref="eSortNone" class="ag-sort-indicator-icon ag-sort-none-icon ag-hidden" aria-hidden="true"></span>\n        </span>';
    __decorate$2q([
      RefSelector("eSortOrder")
    ], SortIndicatorComp2.prototype, "eSortOrder", void 0);
    __decorate$2q([
      RefSelector("eSortAsc")
    ], SortIndicatorComp2.prototype, "eSortAsc", void 0);
    __decorate$2q([
      RefSelector("eSortDesc")
    ], SortIndicatorComp2.prototype, "eSortDesc", void 0);
    __decorate$2q([
      RefSelector("eSortMixed")
    ], SortIndicatorComp2.prototype, "eSortMixed", void 0);
    __decorate$2q([
      RefSelector("eSortNone")
    ], SortIndicatorComp2.prototype, "eSortNone", void 0);
    __decorate$2q([
      Autowired("columnModel")
    ], SortIndicatorComp2.prototype, "columnModel", void 0);
    __decorate$2q([
      Autowired("sortController")
    ], SortIndicatorComp2.prototype, "sortController", void 0);
    return SortIndicatorComp2;
  }(Component2)
);
var __extends$2H = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2p = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HeaderComp = (
  /** @class */
  function(_super) {
    __extends$2H(HeaderComp2, _super);
    function HeaderComp2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.lastMovingChanged = 0;
      return _this;
    }
    HeaderComp2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
    };
    HeaderComp2.prototype.refresh = function(params) {
      this.params = params;
      if (this.workOutTemplate() != this.currentTemplate) {
        return false;
      }
      if (this.workOutShowMenu() != this.currentShowMenu) {
        return false;
      }
      if (this.workOutSort() != this.currentSort) {
        return false;
      }
      if (this.shouldSuppressMenuHide() != this.currentSuppressMenuHide) {
        return false;
      }
      this.setDisplayName(params);
      return true;
    };
    HeaderComp2.prototype.workOutTemplate = function() {
      var template = firstExistingValue(this.params.template, HeaderComp2.TEMPLATE);
      template = template && template.trim ? template.trim() : template;
      return template;
    };
    HeaderComp2.prototype.init = function(params) {
      this.params = params;
      this.currentTemplate = this.workOutTemplate();
      this.setTemplate(this.currentTemplate);
      this.setupTap();
      this.setupIcons(params.column);
      this.setMenu();
      this.setupSort();
      this.setupFilterIcon();
      this.setDisplayName(params);
    };
    HeaderComp2.prototype.setDisplayName = function(params) {
      if (this.currentDisplayName != params.displayName) {
        this.currentDisplayName = params.displayName;
        var displayNameSanitised = escapeString(this.currentDisplayName, true);
        if (this.eText) {
          this.eText.textContent = displayNameSanitised;
        }
      }
    };
    HeaderComp2.prototype.setupIcons = function(column) {
      this.addInIcon("menu", this.eMenu, column);
      this.addInIcon("filter", this.eFilter, column);
    };
    HeaderComp2.prototype.addInIcon = function(iconName, eParent, column) {
      if (eParent == null) {
        return;
      }
      var eIcon = createIconNoSpan(iconName, this.gridOptionsService, column);
      if (eIcon) {
        eParent.appendChild(eIcon);
      }
    };
    HeaderComp2.prototype.setupTap = function() {
      var _this = this;
      var _a = this, gridOptionsService = _a.gridOptionsService, api = _a.api;
      if (gridOptionsService.get("suppressTouch")) {
        return;
      }
      var touchListener = new TouchListener(this.getGui(), true);
      var suppressMenuHide = gridOptionsService.get("suppressMenuHide");
      var tapMenuButton = suppressMenuHide && exists(this.eMenu);
      var menuTouchListener = tapMenuButton ? new TouchListener(this.eMenu, true) : touchListener;
      if (this.params.enableMenu) {
        var eventType = tapMenuButton ? "EVENT_TAP" : "EVENT_LONG_TAP";
        var showMenuFn = function(event) {
          api.showColumnMenuAfterMouseClick(_this.params.column, event.touchStart);
        };
        this.addManagedListener(menuTouchListener, TouchListener[eventType], showMenuFn);
      }
      if (this.params.enableSorting) {
        var tapListener = function(event) {
          var target = event.touchStart.target;
          if (suppressMenuHide && _this.eMenu.contains(target)) {
            return;
          }
          _this.sortController.progressSort(_this.params.column, false, "uiColumnSorted");
        };
        this.addManagedListener(touchListener, TouchListener.EVENT_TAP, tapListener);
      }
      this.addDestroyFunc(function() {
        return touchListener.destroy();
      });
      if (tapMenuButton) {
        this.addDestroyFunc(function() {
          return menuTouchListener.destroy();
        });
      }
    };
    HeaderComp2.prototype.workOutShowMenu = function() {
      var menuHides = !this.gridOptionsService.get("suppressMenuHide");
      var onIpadAndMenuHides = isIOSUserAgent() && menuHides;
      var showMenu = this.params.enableMenu && !onIpadAndMenuHides;
      return showMenu;
    };
    HeaderComp2.prototype.shouldSuppressMenuHide = function() {
      return this.gridOptionsService.get("suppressMenuHide");
    };
    HeaderComp2.prototype.setMenu = function() {
      var _this = this;
      if (!this.eMenu) {
        return;
      }
      this.currentShowMenu = this.workOutShowMenu();
      if (!this.currentShowMenu) {
        removeFromParent(this.eMenu);
        return;
      }
      this.currentSuppressMenuHide = this.shouldSuppressMenuHide();
      this.addManagedListener(this.eMenu, "click", function() {
        return _this.showMenu(_this.eMenu);
      });
      this.eMenu.classList.toggle("ag-header-menu-always-show", this.currentSuppressMenuHide);
    };
    HeaderComp2.prototype.showMenu = function(eventSource) {
      if (!eventSource) {
        eventSource = this.eMenu;
      }
      this.menuFactory.showMenuAfterButtonClick(this.params.column, eventSource, "columnMenu");
    };
    HeaderComp2.prototype.workOutSort = function() {
      return this.params.enableSorting;
    };
    HeaderComp2.prototype.setupSort = function() {
      var _this = this;
      this.currentSort = this.params.enableSorting;
      if (!this.eSortIndicator) {
        this.eSortIndicator = this.context.createBean(new SortIndicatorComp(true));
        this.eSortIndicator.attachCustomElements(this.eSortOrder, this.eSortAsc, this.eSortDesc, this.eSortMixed, this.eSortNone);
      }
      this.eSortIndicator.setupSort(this.params.column);
      if (!this.currentSort) {
        return;
      }
      this.addManagedListener(this.params.column, Column.EVENT_MOVING_CHANGED, function() {
        _this.lastMovingChanged = (/* @__PURE__ */ new Date()).getTime();
      });
      if (this.eLabel) {
        this.addManagedListener(this.eLabel, "click", function(event) {
          var moving = _this.params.column.isMoving();
          var nowTime = (/* @__PURE__ */ new Date()).getTime();
          var movedRecently = nowTime - _this.lastMovingChanged < 50;
          var columnMoving = moving || movedRecently;
          if (!columnMoving) {
            var sortUsingCtrl = _this.gridOptionsService.get("multiSortKey") === "ctrl";
            var multiSort = sortUsingCtrl ? event.ctrlKey || event.metaKey : event.shiftKey;
            _this.params.progressSort(multiSort);
          }
        });
      }
      var onSortingChanged = function() {
        _this.addOrRemoveCssClass("ag-header-cell-sorted-asc", _this.params.column.isSortAscending());
        _this.addOrRemoveCssClass("ag-header-cell-sorted-desc", _this.params.column.isSortDescending());
        _this.addOrRemoveCssClass("ag-header-cell-sorted-none", _this.params.column.isSortNone());
        if (_this.params.column.getColDef().showRowGroup) {
          var sourceColumns = _this.columnModel.getSourceColumnsForGroupColumn(_this.params.column);
          var sortDirectionsMatch = sourceColumns === null || sourceColumns === void 0 ? void 0 : sourceColumns.every(function(sourceCol) {
            return _this.params.column.getSort() == sourceCol.getSort();
          });
          var isMultiSorting = !sortDirectionsMatch;
          _this.addOrRemoveCssClass("ag-header-cell-sorted-mixed", isMultiSorting);
        }
      };
      this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, onSortingChanged);
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, onSortingChanged);
    };
    HeaderComp2.prototype.setupFilterIcon = function() {
      if (!this.eFilter) {
        return;
      }
      this.addManagedListener(this.params.column, Column.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
      this.onFilterChanged();
    };
    HeaderComp2.prototype.onFilterChanged = function() {
      var filterPresent = this.params.column.isFilterActive();
      setDisplayed(this.eFilter, filterPresent, { skipAriaHidden: true });
    };
    HeaderComp2.TEMPLATE = '<div class="ag-cell-label-container" role="presentation">\n            <span ref="eMenu" class="ag-header-icon ag-header-cell-menu-button" aria-hidden="true"></span>\n            <div ref="eLabel" class="ag-header-cell-label" role="presentation">\n                <span ref="eText" class="ag-header-cell-text"></span>\n                <span ref="eFilter" class="ag-header-icon ag-header-label-icon ag-filter-icon" aria-hidden="true"></span>\n                <ag-sort-indicator ref="eSortIndicator"></ag-sort-indicator>\n            </div>\n        </div>';
    __decorate$2p([
      Autowired("sortController")
    ], HeaderComp2.prototype, "sortController", void 0);
    __decorate$2p([
      Autowired("menuFactory")
    ], HeaderComp2.prototype, "menuFactory", void 0);
    __decorate$2p([
      Autowired("columnModel")
    ], HeaderComp2.prototype, "columnModel", void 0);
    __decorate$2p([
      Autowired("gridApi")
    ], HeaderComp2.prototype, "api", void 0);
    __decorate$2p([
      RefSelector("eFilter")
    ], HeaderComp2.prototype, "eFilter", void 0);
    __decorate$2p([
      RefSelector("eSortIndicator")
    ], HeaderComp2.prototype, "eSortIndicator", void 0);
    __decorate$2p([
      RefSelector("eMenu")
    ], HeaderComp2.prototype, "eMenu", void 0);
    __decorate$2p([
      RefSelector("eLabel")
    ], HeaderComp2.prototype, "eLabel", void 0);
    __decorate$2p([
      RefSelector("eText")
    ], HeaderComp2.prototype, "eText", void 0);
    __decorate$2p([
      RefSelector("eSortOrder")
    ], HeaderComp2.prototype, "eSortOrder", void 0);
    __decorate$2p([
      RefSelector("eSortAsc")
    ], HeaderComp2.prototype, "eSortAsc", void 0);
    __decorate$2p([
      RefSelector("eSortDesc")
    ], HeaderComp2.prototype, "eSortDesc", void 0);
    __decorate$2p([
      RefSelector("eSortMixed")
    ], HeaderComp2.prototype, "eSortMixed", void 0);
    __decorate$2p([
      RefSelector("eSortNone")
    ], HeaderComp2.prototype, "eSortNone", void 0);
    return HeaderComp2;
  }(Component2)
);
var __extends$2G = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2o = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HeaderGroupComp = (
  /** @class */
  function(_super) {
    __extends$2G(HeaderGroupComp2, _super);
    function HeaderGroupComp2() {
      return _super.call(this, HeaderGroupComp2.TEMPLATE) || this;
    }
    HeaderGroupComp2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
    };
    HeaderGroupComp2.prototype.init = function(params) {
      this.params = params;
      this.checkWarnings();
      this.setupLabel();
      this.addGroupExpandIcon();
      this.setupExpandIcons();
    };
    HeaderGroupComp2.prototype.checkWarnings = function() {
      var paramsAny = this.params;
      if (paramsAny.template) {
        warnOnce("A template was provided for Header Group Comp - templates are only supported for Header Comps (not groups)");
      }
    };
    HeaderGroupComp2.prototype.setupExpandIcons = function() {
      var _this = this;
      this.addInIcon("columnGroupOpened", "agOpened");
      this.addInIcon("columnGroupClosed", "agClosed");
      var expandAction = function(event) {
        if (isStopPropagationForAgGrid(event)) {
          return;
        }
        var newExpandedValue = !_this.params.columnGroup.isExpanded();
        _this.columnModel.setColumnGroupOpened(_this.params.columnGroup.getProvidedColumnGroup(), newExpandedValue, "uiColumnExpanded");
      };
      this.addTouchAndClickListeners(this.eCloseIcon, expandAction);
      this.addTouchAndClickListeners(this.eOpenIcon, expandAction);
      var stopPropagationAction = function(event) {
        stopPropagationForAgGrid(event);
      };
      this.addManagedListener(this.eCloseIcon, "dblclick", stopPropagationAction);
      this.addManagedListener(this.eOpenIcon, "dblclick", stopPropagationAction);
      this.addManagedListener(this.getGui(), "dblclick", expandAction);
      this.updateIconVisibility();
      var providedColumnGroup = this.params.columnGroup.getProvidedColumnGroup();
      this.addManagedListener(providedColumnGroup, ProvidedColumnGroup.EVENT_EXPANDED_CHANGED, this.updateIconVisibility.bind(this));
      this.addManagedListener(providedColumnGroup, ProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED, this.updateIconVisibility.bind(this));
    };
    HeaderGroupComp2.prototype.addTouchAndClickListeners = function(eElement, action) {
      var touchListener = new TouchListener(eElement, true);
      this.addManagedListener(touchListener, TouchListener.EVENT_TAP, action);
      this.addDestroyFunc(function() {
        return touchListener.destroy();
      });
      this.addManagedListener(eElement, "click", action);
    };
    HeaderGroupComp2.prototype.updateIconVisibility = function() {
      var columnGroup = this.params.columnGroup;
      if (columnGroup.isExpandable()) {
        var expanded = this.params.columnGroup.isExpanded();
        setDisplayed(this.eOpenIcon, expanded);
        setDisplayed(this.eCloseIcon, !expanded);
      } else {
        setDisplayed(this.eOpenIcon, false);
        setDisplayed(this.eCloseIcon, false);
      }
    };
    HeaderGroupComp2.prototype.addInIcon = function(iconName, refName) {
      var eIcon = createIconNoSpan(iconName, this.gridOptionsService, null);
      if (eIcon) {
        this.getRefElement(refName).appendChild(eIcon);
      }
    };
    HeaderGroupComp2.prototype.addGroupExpandIcon = function() {
      if (!this.params.columnGroup.isExpandable()) {
        setDisplayed(this.eOpenIcon, false);
        setDisplayed(this.eCloseIcon, false);
        return;
      }
    };
    HeaderGroupComp2.prototype.setupLabel = function() {
      var _a;
      var _b = this.params, displayName = _b.displayName, columnGroup = _b.columnGroup;
      if (exists(displayName)) {
        var displayNameSanitised = escapeString(displayName, true);
        this.getRefElement("agLabel").textContent = displayNameSanitised;
      }
      this.addOrRemoveCssClass("ag-sticky-label", !((_a = columnGroup.getColGroupDef()) === null || _a === void 0 ? void 0 : _a.suppressStickyLabel));
    };
    HeaderGroupComp2.TEMPLATE = '<div class="ag-header-group-cell-label" ref="agContainer" role="presentation">\n            <span ref="agLabel" class="ag-header-group-text" role="presentation"></span>\n            <span ref="agOpened" class="ag-header-icon ag-header-expand-icon ag-header-expand-icon-expanded"></span>\n            <span ref="agClosed" class="ag-header-icon ag-header-expand-icon ag-header-expand-icon-collapsed"></span>\n        </div>';
    __decorate$2o([
      Autowired("columnModel")
    ], HeaderGroupComp2.prototype, "columnModel", void 0);
    __decorate$2o([
      RefSelector("agOpened")
    ], HeaderGroupComp2.prototype, "eOpenIcon", void 0);
    __decorate$2o([
      RefSelector("agClosed")
    ], HeaderGroupComp2.prototype, "eCloseIcon", void 0);
    return HeaderGroupComp2;
  }(Component2)
);
var __extends$2F = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PopupComponent = (
  /** @class */
  function(_super) {
    __extends$2F(PopupComponent2, _super);
    function PopupComponent2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    PopupComponent2.prototype.isPopup = function() {
      return true;
    };
    PopupComponent2.prototype.setParentComponent = function(container) {
      container.addCssClass("ag-has-popup");
      _super.prototype.setParentComponent.call(this, container);
    };
    PopupComponent2.prototype.destroy = function() {
      var parentComp = this.parentComponent;
      var hasParent = parentComp && parentComp.isAlive();
      if (hasParent) {
        parentComp.getGui().classList.remove("ag-has-popup");
      }
      _super.prototype.destroy.call(this);
    };
    return PopupComponent2;
  }(Component2)
);
var __extends$2E = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2n = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var LargeTextCellEditor = (
  /** @class */
  function(_super) {
    __extends$2E(LargeTextCellEditor2, _super);
    function LargeTextCellEditor2() {
      return _super.call(this, LargeTextCellEditor2.TEMPLATE) || this;
    }
    LargeTextCellEditor2.prototype.init = function(params) {
      this.params = params;
      this.focusAfterAttached = params.cellStartedEdit;
      this.eTextArea.setMaxLength(params.maxLength || 200).setCols(params.cols || 60).setRows(params.rows || 10);
      if (exists(params.value, true)) {
        this.eTextArea.setValue(params.value.toString(), true);
      }
      this.addGuiEventListener("keydown", this.onKeyDown.bind(this));
      this.activateTabIndex();
    };
    LargeTextCellEditor2.prototype.onKeyDown = function(event) {
      var key = event.key;
      if (key === KeyCode.LEFT || key === KeyCode.UP || key === KeyCode.RIGHT || key === KeyCode.DOWN || event.shiftKey && key === KeyCode.ENTER) {
        event.stopPropagation();
      }
    };
    LargeTextCellEditor2.prototype.afterGuiAttached = function() {
      var translate = this.localeService.getLocaleTextFunc();
      this.eTextArea.setInputAriaLabel(translate("ariaInputEditor", "Input Editor"));
      if (this.focusAfterAttached) {
        this.eTextArea.getFocusableElement().focus();
      }
    };
    LargeTextCellEditor2.prototype.getValue = function() {
      var value = this.eTextArea.getValue();
      if (!exists(value) && !exists(this.params.value)) {
        return this.params.value;
      }
      return this.params.parseValue(value);
    };
    LargeTextCellEditor2.TEMPLATE = '<div class="ag-large-text">\n            <ag-input-text-area ref="eTextArea" class="ag-large-text-input"></ag-input-text-area>\n        </div>';
    __decorate$2n([
      RefSelector("eTextArea")
    ], LargeTextCellEditor2.prototype, "eTextArea", void 0);
    return LargeTextCellEditor2;
  }(PopupComponent)
);
var __extends$2D = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2m = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SelectCellEditor = (
  /** @class */
  function(_super) {
    __extends$2D(SelectCellEditor2, _super);
    function SelectCellEditor2() {
      var _this = _super.call(
        this,
        /* html */
        '<div class="ag-cell-edit-wrapper">\n                <ag-select class="ag-cell-editor" ref="eSelect"></ag-select>\n            </div>'
      ) || this;
      _this.startedByEnter = false;
      return _this;
    }
    SelectCellEditor2.prototype.init = function(params) {
      this.focusAfterAttached = params.cellStartedEdit;
      var _a = this, eSelect = _a.eSelect, valueFormatterService = _a.valueFormatterService, gridOptionsService = _a.gridOptionsService;
      var values2 = params.values, value = params.value, eventKey = params.eventKey;
      if (missing(values2)) {
        console.warn("AG Grid: no values found for select cellEditor");
        return;
      }
      this.startedByEnter = eventKey != null ? eventKey === KeyCode.ENTER : false;
      var hasValue = false;
      values2.forEach(function(currentValue) {
        var option = { value: currentValue };
        var valueFormatted = valueFormatterService.formatValue(params.column, null, currentValue);
        var valueFormattedExits = valueFormatted !== null && valueFormatted !== void 0;
        option.text = valueFormattedExits ? valueFormatted : currentValue;
        eSelect.addOption(option);
        hasValue = hasValue || value === currentValue;
      });
      if (hasValue) {
        eSelect.setValue(params.value, true);
      } else if (params.values.length) {
        eSelect.setValue(params.values[0], true);
      }
      var valueListGap = params.valueListGap, valueListMaxWidth = params.valueListMaxWidth, valueListMaxHeight = params.valueListMaxHeight;
      if (valueListGap != null) {
        eSelect.setPickerGap(valueListGap);
      }
      if (valueListMaxHeight != null) {
        eSelect.setPickerMaxHeight(valueListMaxHeight);
      }
      if (valueListMaxWidth != null) {
        eSelect.setPickerMaxWidth(valueListMaxWidth);
      }
      if (gridOptionsService.get("editType") !== "fullRow") {
        this.addManagedListener(this.eSelect, AgSelect.EVENT_ITEM_SELECTED, function() {
          return params.stopEditing();
        });
      }
    };
    SelectCellEditor2.prototype.afterGuiAttached = function() {
      var _this = this;
      if (this.focusAfterAttached) {
        this.eSelect.getFocusableElement().focus();
      }
      if (this.startedByEnter) {
        setTimeout(function() {
          if (_this.isAlive()) {
            _this.eSelect.showPicker();
          }
        });
      }
    };
    SelectCellEditor2.prototype.focusIn = function() {
      this.eSelect.getFocusableElement().focus();
    };
    SelectCellEditor2.prototype.getValue = function() {
      return this.eSelect.getValue();
    };
    SelectCellEditor2.prototype.isPopup = function() {
      return false;
    };
    __decorate$2m([
      Autowired("valueFormatterService")
    ], SelectCellEditor2.prototype, "valueFormatterService", void 0);
    __decorate$2m([
      RefSelector("eSelect")
    ], SelectCellEditor2.prototype, "eSelect", void 0);
    return SelectCellEditor2;
  }(PopupComponent)
);
var __extends$2C = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2l = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SimpleCellEditor = (
  /** @class */
  function(_super) {
    __extends$2C(SimpleCellEditor2, _super);
    function SimpleCellEditor2(cellEditorInput) {
      var _this = _super.call(
        this,
        /* html */
        '\n            <div class="ag-cell-edit-wrapper">\n                '.concat(cellEditorInput.getTemplate(), "\n            </div>")
      ) || this;
      _this.cellEditorInput = cellEditorInput;
      return _this;
    }
    SimpleCellEditor2.prototype.init = function(params) {
      this.params = params;
      var eInput = this.eInput;
      this.cellEditorInput.init(eInput, params);
      var startValue;
      if (params.cellStartedEdit) {
        this.focusAfterAttached = true;
        var eventKey = params.eventKey;
        if (eventKey === KeyCode.BACKSPACE || params.eventKey === KeyCode.DELETE) {
          startValue = "";
        } else if (eventKey && eventKey.length === 1) {
          startValue = eventKey;
        } else {
          startValue = this.cellEditorInput.getStartValue();
          if (eventKey !== KeyCode.F2) {
            this.highlightAllOnFocus = true;
          }
        }
      } else {
        this.focusAfterAttached = false;
        startValue = this.cellEditorInput.getStartValue();
      }
      if (startValue != null) {
        eInput.setStartValue(startValue);
      }
      this.addManagedListener(eInput.getGui(), "keydown", function(event) {
        var key = event.key;
        if (key === KeyCode.PAGE_UP || key === KeyCode.PAGE_DOWN) {
          event.preventDefault();
        }
      });
    };
    SimpleCellEditor2.prototype.afterGuiAttached = function() {
      var _a, _b;
      var translate = this.localeService.getLocaleTextFunc();
      var eInput = this.eInput;
      eInput.setInputAriaLabel(translate("ariaInputEditor", "Input Editor"));
      if (!this.focusAfterAttached) {
        return;
      }
      if (!isBrowserSafari()) {
        eInput.getFocusableElement().focus();
      }
      var inputEl = eInput.getInputElement();
      if (this.highlightAllOnFocus) {
        inputEl.select();
      } else {
        (_b = (_a = this.cellEditorInput).setCaret) === null || _b === void 0 ? void 0 : _b.call(_a);
      }
    };
    SimpleCellEditor2.prototype.focusIn = function() {
      var eInput = this.eInput;
      var focusEl = eInput.getFocusableElement();
      var inputEl = eInput.getInputElement();
      focusEl.focus();
      inputEl.select();
    };
    SimpleCellEditor2.prototype.getValue = function() {
      return this.cellEditorInput.getValue();
    };
    SimpleCellEditor2.prototype.isPopup = function() {
      return false;
    };
    __decorate$2l([
      RefSelector("eInput")
    ], SimpleCellEditor2.prototype, "eInput", void 0);
    return SimpleCellEditor2;
  }(PopupComponent)
);
var __extends$2B = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TextCellEditorInput = (
  /** @class */
  function() {
    function TextCellEditorInput2() {
    }
    TextCellEditorInput2.prototype.getTemplate = function() {
      return (
        /* html */
        '<ag-input-text-field class="ag-cell-editor" ref="eInput"></ag-input-text-field>'
      );
    };
    TextCellEditorInput2.prototype.init = function(eInput, params) {
      this.eInput = eInput;
      this.params = params;
      if (params.maxLength != null) {
        eInput.setMaxLength(params.maxLength);
      }
    };
    TextCellEditorInput2.prototype.getValue = function() {
      var value = this.eInput.getValue();
      if (!exists(value) && !exists(this.params.value)) {
        return this.params.value;
      }
      return this.params.parseValue(value);
    };
    TextCellEditorInput2.prototype.getStartValue = function() {
      var formatValue = this.params.useFormatter || this.params.column.getColDef().refData;
      return formatValue ? this.params.formatValue(this.params.value) : this.params.value;
    };
    TextCellEditorInput2.prototype.setCaret = function() {
      var value = this.eInput.getValue();
      var len = exists(value) && value.length || 0;
      if (len) {
        this.eInput.getInputElement().setSelectionRange(len, len);
      }
    };
    return TextCellEditorInput2;
  }()
);
var TextCellEditor = (
  /** @class */
  function(_super) {
    __extends$2B(TextCellEditor2, _super);
    function TextCellEditor2() {
      return _super.call(this, new TextCellEditorInput()) || this;
    }
    return TextCellEditor2;
  }(SimpleCellEditor)
);
var __extends$2A = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2k = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ARROW_UP = "↑";
var ARROW_DOWN = "↓";
var AnimateShowChangeCellRenderer = (
  /** @class */
  function(_super) {
    __extends$2A(AnimateShowChangeCellRenderer2, _super);
    function AnimateShowChangeCellRenderer2() {
      var _this = _super.call(this) || this;
      _this.refreshCount = 0;
      var template = document.createElement("span");
      var delta = document.createElement("span");
      delta.setAttribute("class", "ag-value-change-delta");
      var value = document.createElement("span");
      value.setAttribute("class", "ag-value-change-value");
      template.appendChild(delta);
      template.appendChild(value);
      _this.setTemplateFromElement(template);
      return _this;
    }
    AnimateShowChangeCellRenderer2.prototype.init = function(params) {
      this.eValue = this.queryForHtmlElement(".ag-value-change-value");
      this.eDelta = this.queryForHtmlElement(".ag-value-change-delta");
      this.refresh(params, true);
    };
    AnimateShowChangeCellRenderer2.prototype.showDelta = function(params, delta) {
      var absDelta = Math.abs(delta);
      var valueFormatted = params.formatValue(absDelta);
      var valueToUse = exists(valueFormatted) ? valueFormatted : absDelta;
      var deltaUp = delta >= 0;
      if (deltaUp) {
        this.eDelta.textContent = ARROW_UP + valueToUse;
      } else {
        this.eDelta.textContent = ARROW_DOWN + valueToUse;
      }
      this.eDelta.classList.toggle("ag-value-change-delta-up", deltaUp);
      this.eDelta.classList.toggle("ag-value-change-delta-down", !deltaUp);
    };
    AnimateShowChangeCellRenderer2.prototype.setTimerToRemoveDelta = function() {
      var _this = this;
      this.refreshCount++;
      var refreshCountCopy = this.refreshCount;
      this.getFrameworkOverrides().wrapIncoming(function() {
        window.setTimeout(function() {
          if (refreshCountCopy === _this.refreshCount) {
            _this.hideDeltaValue();
          }
        }, 2e3);
      });
    };
    AnimateShowChangeCellRenderer2.prototype.hideDeltaValue = function() {
      this.eValue.classList.remove("ag-value-change-value-highlight");
      clearElement(this.eDelta);
    };
    AnimateShowChangeCellRenderer2.prototype.refresh = function(params, isInitialRender) {
      if (isInitialRender === void 0) {
        isInitialRender = false;
      }
      var value = params.value;
      if (value === this.lastValue) {
        return false;
      }
      if (exists(params.valueFormatted)) {
        this.eValue.textContent = params.valueFormatted;
      } else if (exists(params.value)) {
        this.eValue.textContent = value;
      } else {
        clearElement(this.eValue);
      }
      if (this.filterManager.isSuppressFlashingCellsBecauseFiltering()) {
        return false;
      }
      if (typeof value === "number" && typeof this.lastValue === "number") {
        var delta = value - this.lastValue;
        this.showDelta(params, delta);
      }
      if (this.lastValue) {
        this.eValue.classList.add("ag-value-change-value-highlight");
      }
      if (!isInitialRender) {
        this.setTimerToRemoveDelta();
      }
      this.lastValue = value;
      return true;
    };
    __decorate$2k([
      Autowired("filterManager")
    ], AnimateShowChangeCellRenderer2.prototype, "filterManager", void 0);
    return AnimateShowChangeCellRenderer2;
  }(Component2)
);
var __extends$2z = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2j = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AnimateSlideCellRenderer = (
  /** @class */
  function(_super) {
    __extends$2z(AnimateSlideCellRenderer2, _super);
    function AnimateSlideCellRenderer2() {
      var _this = _super.call(this) || this;
      _this.refreshCount = 0;
      var template = document.createElement("span");
      var slide = document.createElement("span");
      slide.setAttribute("class", "ag-value-slide-current");
      template.appendChild(slide);
      _this.setTemplateFromElement(template);
      _this.eCurrent = _this.queryForHtmlElement(".ag-value-slide-current");
      return _this;
    }
    AnimateSlideCellRenderer2.prototype.init = function(params) {
      this.refresh(params, true);
    };
    AnimateSlideCellRenderer2.prototype.addSlideAnimation = function() {
      var _this = this;
      this.refreshCount++;
      var refreshCountCopy = this.refreshCount;
      if (this.ePrevious) {
        this.getGui().removeChild(this.ePrevious);
      }
      var prevElement = document.createElement("span");
      prevElement.setAttribute("class", "ag-value-slide-previous ag-value-slide-out");
      this.ePrevious = prevElement;
      this.ePrevious.textContent = this.eCurrent.textContent;
      this.getGui().insertBefore(this.ePrevious, this.eCurrent);
      this.getFrameworkOverrides().wrapIncoming(function() {
        window.setTimeout(function() {
          if (refreshCountCopy !== _this.refreshCount) {
            return;
          }
          _this.ePrevious.classList.add("ag-value-slide-out-end");
        }, 50);
        window.setTimeout(function() {
          if (refreshCountCopy !== _this.refreshCount) {
            return;
          }
          _this.getGui().removeChild(_this.ePrevious);
          _this.ePrevious = null;
        }, 3e3);
      });
    };
    AnimateSlideCellRenderer2.prototype.refresh = function(params, isInitialRender) {
      if (isInitialRender === void 0) {
        isInitialRender = false;
      }
      var value = params.value;
      if (missing(value)) {
        value = "";
      }
      if (value === this.lastValue) {
        return false;
      }
      if (this.filterManager.isSuppressFlashingCellsBecauseFiltering()) {
        return false;
      }
      if (!isInitialRender) {
        this.addSlideAnimation();
      }
      this.lastValue = value;
      if (exists(params.valueFormatted)) {
        this.eCurrent.textContent = params.valueFormatted;
      } else if (exists(params.value)) {
        this.eCurrent.textContent = value;
      } else {
        clearElement(this.eCurrent);
      }
      return true;
    };
    __decorate$2j([
      Autowired("filterManager")
    ], AnimateSlideCellRenderer2.prototype, "filterManager", void 0);
    return AnimateSlideCellRenderer2;
  }(Component2)
);
var __assign$i = function() {
  __assign$i = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$i.apply(this, arguments);
};
var RowNode = (
  /** @class */
  function() {
    function RowNode2(beans) {
      this.rowIndex = null;
      this.key = null;
      this.childrenMapped = {};
      this.displayed = false;
      this.rowTop = null;
      this.oldRowTop = null;
      this.selectable = true;
      this.__objectId = RowNode2.OBJECT_ID_SEQUENCE++;
      this.__autoHeights = {};
      this.alreadyRendered = false;
      this.highlighted = null;
      this.hovered = false;
      this.selected = false;
      this.beans = beans;
    }
    RowNode2.prototype.setData = function(data) {
      this.setDataCommon(data, false);
    };
    RowNode2.prototype.updateData = function(data) {
      this.setDataCommon(data, true);
    };
    RowNode2.prototype.setDataCommon = function(data, update) {
      var oldData = this.data;
      this.data = data;
      this.beans.valueCache.onDataChanged();
      this.updateDataOnDetailNode();
      this.checkRowSelectable();
      this.resetQuickFilterAggregateText();
      var event = this.createDataChangedEvent(data, oldData, update);
      this.dispatchLocalEvent(event);
    };
    RowNode2.prototype.updateDataOnDetailNode = function() {
      if (this.detailNode) {
        this.detailNode.data = this.data;
      }
    };
    RowNode2.prototype.createDataChangedEvent = function(newData, oldData, update) {
      return {
        type: RowNode2.EVENT_DATA_CHANGED,
        node: this,
        oldData,
        newData,
        update
      };
    };
    RowNode2.prototype.createLocalRowEvent = function(type) {
      return {
        type,
        node: this
      };
    };
    RowNode2.prototype.getRowIndexString = function() {
      if (this.rowPinned === "top") {
        return "t-" + this.rowIndex;
      }
      if (this.rowPinned === "bottom") {
        return "b-" + this.rowIndex;
      }
      return this.rowIndex.toString();
    };
    RowNode2.prototype.createDaemonNode = function() {
      var oldNode = new RowNode2(this.beans);
      oldNode.id = this.id;
      oldNode.data = this.data;
      oldNode.__daemon = true;
      oldNode.selected = this.selected;
      oldNode.level = this.level;
      return oldNode;
    };
    RowNode2.prototype.setDataAndId = function(data, id) {
      var oldNode = exists(this.id) ? this.createDaemonNode() : null;
      var oldData = this.data;
      this.data = data;
      this.updateDataOnDetailNode();
      this.setId(id);
      this.checkRowSelectable();
      this.beans.selectionService.syncInRowNode(this, oldNode);
      var event = this.createDataChangedEvent(data, oldData, false);
      this.dispatchLocalEvent(event);
    };
    RowNode2.prototype.checkRowSelectable = function() {
      var isRowSelectableFunc = this.beans.gridOptionsService.get("isRowSelectable");
      this.setRowSelectable(isRowSelectableFunc ? isRowSelectableFunc(this) : true);
    };
    RowNode2.prototype.setRowSelectable = function(newVal, suppressSelectionUpdate) {
      if (this.selectable !== newVal) {
        this.selectable = newVal;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_SELECTABLE_CHANGED));
        }
        if (suppressSelectionUpdate) {
          return;
        }
        var isGroupSelectsChildren = this.beans.gridOptionsService.get("groupSelectsChildren");
        if (isGroupSelectsChildren) {
          var selected = this.calculateSelectedFromChildren();
          this.setSelectedParams({
            newValue: selected !== null && selected !== void 0 ? selected : false,
            source: "selectableChanged"
          });
          return;
        }
        if (this.isSelected() && !this.selectable) {
          this.setSelectedParams({
            newValue: false,
            source: "selectableChanged"
          });
        }
      }
    };
    RowNode2.prototype.setId = function(id) {
      var getRowIdFunc = this.beans.gridOptionsService.getCallback("getRowId");
      if (getRowIdFunc) {
        if (this.data) {
          var parentKeys = this.getGroupKeys(true);
          this.id = getRowIdFunc({
            data: this.data,
            parentKeys: parentKeys.length > 0 ? parentKeys : void 0,
            level: this.level
          });
          if (this.id !== null && typeof this.id === "string" && this.id.startsWith(RowNode2.ID_PREFIX_ROW_GROUP)) {
            console.error("AG Grid: Row IDs cannot start with ".concat(RowNode2.ID_PREFIX_ROW_GROUP, ", this is a reserved prefix for AG Grid's row grouping feature."));
          }
          if (this.id !== null && typeof this.id !== "string") {
            this.id = "" + this.id;
          }
        } else {
          this.id = void 0;
        }
      } else {
        this.id = id;
      }
    };
    RowNode2.prototype.getGroupKeys = function(excludeSelf) {
      if (excludeSelf === void 0) {
        excludeSelf = false;
      }
      var keys2 = [];
      var pointer = this;
      if (excludeSelf) {
        pointer = pointer.parent;
      }
      while (pointer && pointer.level >= 0) {
        keys2.push(pointer.key);
        pointer = pointer.parent;
      }
      keys2.reverse();
      return keys2;
    };
    RowNode2.prototype.isPixelInRange = function(pixel) {
      if (!exists(this.rowTop) || !exists(this.rowHeight)) {
        return false;
      }
      return pixel >= this.rowTop && pixel < this.rowTop + this.rowHeight;
    };
    RowNode2.prototype.setFirstChild = function(firstChild) {
      if (this.firstChild === firstChild) {
        return;
      }
      this.firstChild = firstChild;
      if (this.eventService) {
        this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_FIRST_CHILD_CHANGED));
      }
    };
    RowNode2.prototype.setLastChild = function(lastChild) {
      if (this.lastChild === lastChild) {
        return;
      }
      this.lastChild = lastChild;
      if (this.eventService) {
        this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_LAST_CHILD_CHANGED));
      }
    };
    RowNode2.prototype.setChildIndex = function(childIndex) {
      if (this.childIndex === childIndex) {
        return;
      }
      this.childIndex = childIndex;
      if (this.eventService) {
        this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_CHILD_INDEX_CHANGED));
      }
    };
    RowNode2.prototype.setRowTop = function(rowTop) {
      this.oldRowTop = this.rowTop;
      if (this.rowTop === rowTop) {
        return;
      }
      this.rowTop = rowTop;
      if (this.eventService) {
        this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_TOP_CHANGED));
      }
      this.setDisplayed(rowTop !== null);
    };
    RowNode2.prototype.clearRowTopAndRowIndex = function() {
      this.oldRowTop = null;
      this.setRowTop(null);
      this.setRowIndex(null);
    };
    RowNode2.prototype.setDisplayed = function(displayed) {
      if (this.displayed === displayed) {
        return;
      }
      this.displayed = displayed;
      if (this.eventService) {
        this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_DISPLAYED_CHANGED));
      }
    };
    RowNode2.prototype.setDragging = function(dragging) {
      if (this.dragging === dragging) {
        return;
      }
      this.dragging = dragging;
      if (this.eventService) {
        this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_DRAGGING_CHANGED));
      }
    };
    RowNode2.prototype.setHighlighted = function(highlighted) {
      if (highlighted === this.highlighted) {
        return;
      }
      this.highlighted = highlighted;
      if (this.eventService) {
        this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_HIGHLIGHT_CHANGED));
      }
    };
    RowNode2.prototype.setHovered = function(hovered) {
      if (this.hovered === hovered) {
        return;
      }
      this.hovered = hovered;
    };
    RowNode2.prototype.isHovered = function() {
      return this.hovered;
    };
    RowNode2.prototype.setAllChildrenCount = function(allChildrenCount) {
      if (this.allChildrenCount === allChildrenCount) {
        return;
      }
      this.allChildrenCount = allChildrenCount;
      if (this.eventService) {
        this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_ALL_CHILDREN_COUNT_CHANGED));
      }
    };
    RowNode2.prototype.setMaster = function(master) {
      if (this.master === master) {
        return;
      }
      if (this.master && !master) {
        this.expanded = false;
      }
      this.master = master;
      if (this.eventService) {
        this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_MASTER_CHANGED));
      }
    };
    RowNode2.prototype.setGroup = function(group) {
      if (this.group === group) {
        return;
      }
      if (this.group && !group) {
        this.expanded = false;
      }
      this.group = group;
      this.updateHasChildren();
      if (this.eventService) {
        this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_GROUP_CHANGED));
      }
    };
    RowNode2.prototype.setRowHeight = function(rowHeight, estimated) {
      if (estimated === void 0) {
        estimated = false;
      }
      this.rowHeight = rowHeight;
      this.rowHeightEstimated = estimated;
      if (this.eventService) {
        this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_HEIGHT_CHANGED));
      }
    };
    RowNode2.prototype.setRowAutoHeight = function(cellHeight, column) {
      if (!this.__autoHeights) {
        this.__autoHeights = {};
      }
      this.__autoHeights[column.getId()] = cellHeight;
      if (cellHeight != null) {
        if (this.checkAutoHeightsDebounced == null) {
          this.checkAutoHeightsDebounced = debounce(this.checkAutoHeights.bind(this), 1);
        }
        this.checkAutoHeightsDebounced();
      }
    };
    RowNode2.prototype.checkAutoHeights = function() {
      var _this = this;
      var notAllPresent = false;
      var nonePresent = true;
      var newRowHeight = 0;
      var autoHeights = this.__autoHeights;
      if (autoHeights == null) {
        return;
      }
      var displayedAutoHeightCols = this.beans.columnModel.getAllDisplayedAutoHeightCols();
      displayedAutoHeightCols.forEach(function(col) {
        var cellHeight = autoHeights[col.getId()];
        if (cellHeight == null) {
          if (_this.beans.columnModel.isColSpanActive()) {
            var activeColsForRow = [];
            switch (col.getPinned()) {
              case "left":
                activeColsForRow = _this.beans.columnModel.getDisplayedLeftColumnsForRow(_this);
                break;
              case "right":
                activeColsForRow = _this.beans.columnModel.getDisplayedRightColumnsForRow(_this);
                break;
              case null:
                activeColsForRow = _this.beans.columnModel.getViewportCenterColumnsForRow(_this);
                break;
            }
            if (activeColsForRow.includes(col)) {
              notAllPresent = true;
              return;
            }
            cellHeight = -1;
          } else {
            notAllPresent = true;
            return;
          }
        } else {
          nonePresent = false;
        }
        if (cellHeight > newRowHeight) {
          newRowHeight = cellHeight;
        }
      });
      if (notAllPresent) {
        return;
      }
      if (nonePresent || newRowHeight < 10) {
        newRowHeight = this.beans.gridOptionsService.getRowHeightForNode(this).height;
      }
      if (newRowHeight == this.rowHeight) {
        return;
      }
      this.setRowHeight(newRowHeight);
      var rowModel = this.beans.rowModel;
      if (rowModel.onRowHeightChangedDebounced) {
        rowModel.onRowHeightChangedDebounced();
      }
    };
    RowNode2.prototype.setRowIndex = function(rowIndex) {
      if (this.rowIndex === rowIndex) {
        return;
      }
      this.rowIndex = rowIndex;
      if (this.eventService) {
        this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_ROW_INDEX_CHANGED));
      }
    };
    RowNode2.prototype.setUiLevel = function(uiLevel) {
      if (this.uiLevel === uiLevel) {
        return;
      }
      this.uiLevel = uiLevel;
      if (this.eventService) {
        this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_UI_LEVEL_CHANGED));
      }
    };
    RowNode2.prototype.setExpanded = function(expanded, e) {
      if (this.expanded === expanded) {
        return;
      }
      this.expanded = expanded;
      if (this.eventService) {
        this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_EXPANDED_CHANGED));
      }
      var event = Object.assign({}, this.createGlobalRowEvent(Events.EVENT_ROW_GROUP_OPENED), {
        expanded,
        event: e || null
      });
      this.beans.rowNodeEventThrottle.dispatchExpanded(event);
      if (this.sibling) {
        this.beans.rowRenderer.refreshCells({ rowNodes: [this] });
      }
    };
    RowNode2.prototype.createGlobalRowEvent = function(type) {
      return this.beans.gridOptionsService.addGridCommonParams({
        type,
        node: this,
        data: this.data,
        rowIndex: this.rowIndex,
        rowPinned: this.rowPinned
      });
    };
    RowNode2.prototype.dispatchLocalEvent = function(event) {
      if (this.eventService) {
        this.eventService.dispatchEvent(event);
      }
    };
    RowNode2.prototype.setDataValue = function(colKey, newValue, eventSource) {
      var _this = this;
      var getColumnFromKey = function() {
        var _a;
        if (typeof colKey !== "string") {
          return colKey;
        }
        return (_a = _this.beans.columnModel.getGridColumn(colKey)) !== null && _a !== void 0 ? _a : _this.beans.columnModel.getPrimaryColumn(colKey);
      };
      var column = getColumnFromKey();
      var oldValue = this.getValueFromValueService(column);
      if (this.beans.gridOptionsService.get("readOnlyEdit")) {
        this.dispatchEventForSaveValueReadOnly(column, oldValue, newValue, eventSource);
        return false;
      }
      var valueChanged = this.beans.valueService.setValue(this, column, newValue, eventSource);
      this.dispatchCellChangedEvent(column, newValue, oldValue);
      this.checkRowSelectable();
      return valueChanged;
    };
    RowNode2.prototype.getValueFromValueService = function(column) {
      var lockedClosedGroup = this.leafGroup && this.beans.columnModel.isPivotMode();
      var isOpenGroup = this.group && this.expanded && !this.footer && !lockedClosedGroup;
      var getGroupIncludeFooter = this.beans.gridOptionsService.getGroupIncludeFooter();
      var groupFootersEnabled = getGroupIncludeFooter({ node: this });
      var groupAlwaysShowAggData = this.beans.gridOptionsService.get("groupSuppressBlankHeader");
      var ignoreAggData = isOpenGroup && groupFootersEnabled && !groupAlwaysShowAggData;
      var value = this.beans.valueService.getValue(column, this, false, ignoreAggData);
      return value;
    };
    RowNode2.prototype.dispatchEventForSaveValueReadOnly = function(column, oldValue, newValue, eventSource) {
      var event = this.beans.gridOptionsService.addGridCommonParams({
        type: Events.EVENT_CELL_EDIT_REQUEST,
        event: null,
        rowIndex: this.rowIndex,
        rowPinned: this.rowPinned,
        column,
        colDef: column.getColDef(),
        data: this.data,
        node: this,
        oldValue,
        newValue,
        value: newValue,
        source: eventSource
      });
      this.beans.eventService.dispatchEvent(event);
    };
    RowNode2.prototype.setGroupValue = function(colKey, newValue) {
      var column = this.beans.columnModel.getGridColumn(colKey);
      if (missing(this.groupData)) {
        this.groupData = {};
      }
      var columnId = column.getColId();
      var oldValue = this.groupData[columnId];
      if (oldValue === newValue) {
        return;
      }
      this.groupData[columnId] = newValue;
      this.dispatchCellChangedEvent(column, newValue, oldValue);
    };
    RowNode2.prototype.setAggData = function(newAggData) {
      var _this = this;
      var colIds = getAllKeysInObjects([this.aggData, newAggData]);
      var oldAggData = this.aggData;
      this.aggData = newAggData;
      if (this.eventService) {
        colIds.forEach(function(colId) {
          var value = _this.aggData ? _this.aggData[colId] : void 0;
          var oldValue = oldAggData ? oldAggData[colId] : void 0;
          if (value === oldValue) {
            return;
          }
          var column = _this.beans.columnModel.lookupGridColumn(colId);
          if (!column) {
            return;
          }
          _this.dispatchCellChangedEvent(column, value, oldValue);
        });
      }
    };
    RowNode2.prototype.updateHasChildren = function() {
      var newValue = this.group && !this.footer || this.childrenAfterGroup && this.childrenAfterGroup.length > 0;
      var isSsrm = this.beans.gridOptionsService.isRowModelType("serverSide");
      if (isSsrm) {
        var isTreeData = this.beans.gridOptionsService.get("treeData");
        var isGroupFunc = this.beans.gridOptionsService.get("isServerSideGroup");
        newValue = !this.stub && !this.footer && (isTreeData ? !!isGroupFunc && isGroupFunc(this.data) : !!this.group);
      }
      if (newValue !== this.__hasChildren) {
        this.__hasChildren = !!newValue;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_HAS_CHILDREN_CHANGED));
        }
      }
    };
    RowNode2.prototype.hasChildren = function() {
      if (this.__hasChildren == null) {
        this.updateHasChildren();
      }
      return this.__hasChildren;
    };
    RowNode2.prototype.isEmptyRowGroupNode = function() {
      return this.group && missingOrEmpty(this.childrenAfterGroup);
    };
    RowNode2.prototype.dispatchCellChangedEvent = function(column, newValue, oldValue) {
      var cellChangedEvent = {
        type: RowNode2.EVENT_CELL_CHANGED,
        node: this,
        column,
        newValue,
        oldValue
      };
      this.dispatchLocalEvent(cellChangedEvent);
    };
    RowNode2.prototype.resetQuickFilterAggregateText = function() {
      this.quickFilterAggregateText = null;
    };
    RowNode2.prototype.isExpandable = function() {
      if (this.footer) {
        return false;
      }
      if (this.beans.columnModel.isPivotMode()) {
        return this.hasChildren() && !this.leafGroup;
      }
      return this.hasChildren() || !!this.master;
    };
    RowNode2.prototype.isSelected = function() {
      if (this.footer) {
        return this.sibling.isSelected();
      }
      return this.selected;
    };
    RowNode2.prototype.depthFirstSearch = function(callback) {
      if (this.childrenAfterGroup) {
        this.childrenAfterGroup.forEach(function(child) {
          return child.depthFirstSearch(callback);
        });
      }
      callback(this);
    };
    RowNode2.prototype.calculateSelectedFromChildren = function() {
      var _a;
      var atLeastOneSelected = false;
      var atLeastOneDeSelected = false;
      var atLeastOneMixed = false;
      if (!((_a = this.childrenAfterGroup) === null || _a === void 0 ? void 0 : _a.length)) {
        return this.selectable ? this.selected : null;
      }
      for (var i = 0; i < this.childrenAfterGroup.length; i++) {
        var child = this.childrenAfterGroup[i];
        var childState = child.isSelected();
        if (!child.selectable) {
          var selectable = child.calculateSelectedFromChildren();
          if (selectable === null) {
            continue;
          }
          childState = selectable;
        }
        switch (childState) {
          case true:
            atLeastOneSelected = true;
            break;
          case false:
            atLeastOneDeSelected = true;
            break;
          default:
            atLeastOneMixed = true;
            break;
        }
      }
      if (atLeastOneMixed || atLeastOneSelected && atLeastOneDeSelected) {
        return void 0;
      }
      if (atLeastOneSelected) {
        return true;
      }
      if (atLeastOneDeSelected) {
        return false;
      }
      if (!this.selectable) {
        return null;
      }
      return this.selected;
    };
    RowNode2.prototype.setSelectedInitialValue = function(selected) {
      this.selected = selected;
    };
    RowNode2.prototype.selectThisNode = function(newValue, e, source) {
      if (source === void 0) {
        source = "api";
      }
      var selectionNotAllowed = !this.selectable && newValue;
      var selectionNotChanged = this.selected === newValue;
      if (selectionNotAllowed || selectionNotChanged) {
        return false;
      }
      this.selected = newValue;
      if (this.eventService) {
        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode2.EVENT_ROW_SELECTED));
        var sibling = this.sibling;
        if (sibling && sibling.footer) {
          sibling.dispatchLocalEvent(sibling.createLocalRowEvent(RowNode2.EVENT_ROW_SELECTED));
        }
      }
      var event = __assign$i(__assign$i({}, this.createGlobalRowEvent(Events.EVENT_ROW_SELECTED)), { event: e || null, source });
      this.beans.eventService.dispatchEvent(event);
      return true;
    };
    RowNode2.prototype.setSelected = function(newValue, clearSelection, source) {
      if (clearSelection === void 0) {
        clearSelection = false;
      }
      if (source === void 0) {
        source = "api";
      }
      if (typeof source === "boolean") {
        console.warn("AG Grid: since version v30, rowNode.setSelected() property `suppressFinishActions` has been removed, please use `gridApi.setNodesSelected()` for bulk actions, and the event `source` property for ignoring events instead.");
        return;
      }
      this.setSelectedParams({
        newValue,
        clearSelection,
        rangeSelect: false,
        source
      });
    };
    RowNode2.prototype.setSelectedParams = function(params) {
      if (this.rowPinned) {
        console.warn("AG Grid: cannot select pinned rows");
        return 0;
      }
      if (this.id === void 0) {
        console.warn("AG Grid: cannot select node until id for node is known");
        return 0;
      }
      return this.beans.selectionService.setNodesSelected(__assign$i(__assign$i({}, params), { nodes: [this.footer ? this.sibling : this] }));
    };
    RowNode2.prototype.isRowPinned = function() {
      return this.rowPinned === "top" || this.rowPinned === "bottom";
    };
    RowNode2.prototype.isParentOfNode = function(potentialParent) {
      var parentNode = this.parent;
      while (parentNode) {
        if (parentNode === potentialParent) {
          return true;
        }
        parentNode = parentNode.parent;
      }
      return false;
    };
    RowNode2.prototype.addEventListener = function(eventType, userListener) {
      var _a, _b;
      if (!this.eventService) {
        this.eventService = new EventService();
      }
      if (this.beans.frameworkOverrides.shouldWrapOutgoing && !this.frameworkEventListenerService) {
        this.eventService.setFrameworkOverrides(this.beans.frameworkOverrides);
        this.frameworkEventListenerService = new FrameworkEventListenerService(this.beans.frameworkOverrides);
      }
      var listener = (_b = (_a = this.frameworkEventListenerService) === null || _a === void 0 ? void 0 : _a.wrap(userListener)) !== null && _b !== void 0 ? _b : userListener;
      this.eventService.addEventListener(eventType, listener);
    };
    RowNode2.prototype.removeEventListener = function(eventType, userListener) {
      var _a, _b;
      if (!this.eventService) {
        return;
      }
      var listener = (_b = (_a = this.frameworkEventListenerService) === null || _a === void 0 ? void 0 : _a.unwrap(userListener)) !== null && _b !== void 0 ? _b : userListener;
      this.eventService.removeEventListener(eventType, listener);
      if (this.eventService.noRegisteredListenersExist()) {
        this.eventService = null;
      }
    };
    RowNode2.prototype.onMouseEnter = function() {
      this.dispatchLocalEvent(this.createLocalRowEvent(RowNode2.EVENT_MOUSE_ENTER));
    };
    RowNode2.prototype.onMouseLeave = function() {
      this.dispatchLocalEvent(this.createLocalRowEvent(RowNode2.EVENT_MOUSE_LEAVE));
    };
    RowNode2.prototype.getFirstChildOfFirstChild = function(rowGroupColumn) {
      var currentRowNode = this;
      var isCandidate = true;
      var foundFirstChildPath = false;
      var nodeToSwapIn = null;
      while (isCandidate && !foundFirstChildPath) {
        var parentRowNode = currentRowNode.parent;
        var firstChild = exists(parentRowNode) && currentRowNode.firstChild;
        if (firstChild) {
          if (parentRowNode.rowGroupColumn === rowGroupColumn) {
            foundFirstChildPath = true;
            nodeToSwapIn = parentRowNode;
          }
        } else {
          isCandidate = false;
        }
        currentRowNode = parentRowNode;
      }
      return foundFirstChildPath ? nodeToSwapIn : null;
    };
    RowNode2.prototype.isFullWidthCell = function() {
      if (this.detail) {
        return true;
      }
      var isFullWidthCellFunc = this.beans.gridOptionsService.getCallback("isFullWidthRow");
      return isFullWidthCellFunc ? isFullWidthCellFunc({ rowNode: this }) : false;
    };
    RowNode2.prototype.getRoute = function() {
      if (this.key == null) {
        return;
      }
      var res = [];
      var pointer = this;
      while (pointer.key != null) {
        res.push(pointer.key);
        pointer = pointer.parent;
      }
      return res.reverse();
    };
    RowNode2.prototype.createFooter = function() {
      var _this = this;
      if (this.sibling) {
        return;
      }
      var ignoredProperties = /* @__PURE__ */ new Set([
        "eventService",
        "__objectId",
        "sticky"
      ]);
      var footerNode = new RowNode2(this.beans);
      Object.keys(this).forEach(function(key) {
        if (ignoredProperties.has(key)) {
          return;
        }
        footerNode[key] = _this[key];
      });
      footerNode.footer = true;
      footerNode.setRowTop(null);
      footerNode.setRowIndex(null);
      footerNode.oldRowTop = null;
      footerNode.id = "rowGroupFooter_" + this.id;
      footerNode.sibling = this;
      this.sibling = footerNode;
    };
    RowNode2.prototype.destroyFooter = function() {
      if (!this.sibling) {
        return;
      }
      this.sibling.setRowTop(null);
      this.sibling.setRowIndex(null);
      this.sibling = void 0;
    };
    RowNode2.ID_PREFIX_ROW_GROUP = "row-group-";
    RowNode2.ID_PREFIX_TOP_PINNED = "t-";
    RowNode2.ID_PREFIX_BOTTOM_PINNED = "b-";
    RowNode2.OBJECT_ID_SEQUENCE = 0;
    RowNode2.EVENT_ROW_SELECTED = "rowSelected";
    RowNode2.EVENT_DATA_CHANGED = "dataChanged";
    RowNode2.EVENT_CELL_CHANGED = "cellChanged";
    RowNode2.EVENT_ALL_CHILDREN_COUNT_CHANGED = "allChildrenCountChanged";
    RowNode2.EVENT_MASTER_CHANGED = "masterChanged";
    RowNode2.EVENT_GROUP_CHANGED = "groupChanged";
    RowNode2.EVENT_MOUSE_ENTER = "mouseEnter";
    RowNode2.EVENT_MOUSE_LEAVE = "mouseLeave";
    RowNode2.EVENT_HEIGHT_CHANGED = "heightChanged";
    RowNode2.EVENT_TOP_CHANGED = "topChanged";
    RowNode2.EVENT_DISPLAYED_CHANGED = "displayedChanged";
    RowNode2.EVENT_FIRST_CHILD_CHANGED = "firstChildChanged";
    RowNode2.EVENT_LAST_CHILD_CHANGED = "lastChildChanged";
    RowNode2.EVENT_CHILD_INDEX_CHANGED = "childIndexChanged";
    RowNode2.EVENT_ROW_INDEX_CHANGED = "rowIndexChanged";
    RowNode2.EVENT_EXPANDED_CHANGED = "expandedChanged";
    RowNode2.EVENT_HAS_CHILDREN_CHANGED = "hasChildrenChanged";
    RowNode2.EVENT_SELECTABLE_CHANGED = "selectableChanged";
    RowNode2.EVENT_UI_LEVEL_CHANGED = "uiLevelChanged";
    RowNode2.EVENT_HIGHLIGHT_CHANGED = "rowHighlightChanged";
    RowNode2.EVENT_DRAGGING_CHANGED = "draggingChanged";
    return RowNode2;
  }()
);
var __extends$2y = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$h = function() {
  __assign$h = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$h.apply(this, arguments);
};
var __decorate$2i = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CheckboxSelectionComponent = (
  /** @class */
  function(_super) {
    __extends$2y(CheckboxSelectionComponent2, _super);
    function CheckboxSelectionComponent2() {
      return _super.call(
        this,
        /* html*/
        '\n            <div class="ag-selection-checkbox" role="presentation">\n                <ag-checkbox role="presentation" ref="eCheckbox"></ag-checkbox>\n            </div>'
      ) || this;
    }
    CheckboxSelectionComponent2.prototype.postConstruct = function() {
      this.eCheckbox.setPassive(true);
      var el = this.eCheckbox.getInputElement();
      setAriaLive(el, "polite");
      setAriaRelevant(el, "text");
    };
    CheckboxSelectionComponent2.prototype.getCheckboxId = function() {
      return this.eCheckbox.getInputElement().id;
    };
    CheckboxSelectionComponent2.prototype.onDataChanged = function() {
      this.onSelectionChanged();
    };
    CheckboxSelectionComponent2.prototype.onSelectableChanged = function() {
      this.showOrHideSelect();
    };
    CheckboxSelectionComponent2.prototype.onSelectionChanged = function() {
      var translate = this.localeService.getLocaleTextFunc();
      var state = this.rowNode.isSelected();
      var stateName = getAriaCheckboxStateName(translate, state);
      var ariaLabel = translate("ariaRowToggleSelection", "Press Space to toggle row selection");
      this.eCheckbox.setValue(state, true);
      this.eCheckbox.setInputAriaLabel("".concat(ariaLabel, " (").concat(stateName, ")"));
    };
    CheckboxSelectionComponent2.prototype.onClicked = function(newValue, groupSelectsFiltered, event) {
      return this.rowNode.setSelectedParams({ newValue, rangeSelect: event.shiftKey, groupSelectsFiltered, event, source: "checkboxSelected" });
    };
    CheckboxSelectionComponent2.prototype.init = function(params) {
      var _this = this;
      this.rowNode = params.rowNode;
      this.column = params.column;
      this.overrides = params.overrides;
      this.onSelectionChanged();
      this.addManagedListener(this.eCheckbox.getInputElement(), "dblclick", function(event) {
        stopPropagationForAgGrid(event);
      });
      this.addManagedListener(this.eCheckbox.getInputElement(), "click", function(event) {
        stopPropagationForAgGrid(event);
        var groupSelectsFiltered = _this.gridOptionsService.get("groupSelectsFiltered");
        var isSelected = _this.eCheckbox.getValue();
        if (_this.shouldHandleIndeterminateState(isSelected, groupSelectsFiltered)) {
          var result = _this.onClicked(true, groupSelectsFiltered, event || {});
          if (result === 0) {
            _this.onClicked(false, groupSelectsFiltered, event);
          }
        } else if (isSelected) {
          _this.onClicked(false, groupSelectsFiltered, event);
        } else {
          _this.onClicked(true, groupSelectsFiltered, event || {});
        }
      });
      this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_SELECTED, this.onSelectionChanged.bind(this));
      this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.onDataChanged.bind(this));
      this.addManagedListener(this.rowNode, RowNode.EVENT_SELECTABLE_CHANGED, this.onSelectableChanged.bind(this));
      var isRowSelectableFunc = this.gridOptionsService.get("isRowSelectable");
      var checkboxVisibleIsDynamic = isRowSelectableFunc || typeof this.getIsVisible() === "function";
      if (checkboxVisibleIsDynamic) {
        var showOrHideSelectListener = this.showOrHideSelect.bind(this);
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, showOrHideSelectListener);
        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, showOrHideSelectListener);
        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, showOrHideSelectListener);
        this.showOrHideSelect();
      }
      this.eCheckbox.getInputElement().setAttribute("tabindex", "-1");
    };
    CheckboxSelectionComponent2.prototype.shouldHandleIndeterminateState = function(isSelected, groupSelectsFiltered) {
      return groupSelectsFiltered && (this.eCheckbox.getPreviousValue() === void 0 || isSelected === void 0) && this.gridOptionsService.isRowModelType("clientSide");
    };
    CheckboxSelectionComponent2.prototype.showOrHideSelect = function() {
      var _a, _b, _c, _d;
      var selectable = this.rowNode.selectable;
      var isVisible2 = this.getIsVisible();
      if (selectable) {
        if (typeof isVisible2 === "function") {
          var extraParams = (_a = this.overrides) === null || _a === void 0 ? void 0 : _a.callbackParams;
          var params = (_b = this.column) === null || _b === void 0 ? void 0 : _b.createColumnFunctionCallbackParams(this.rowNode);
          selectable = params ? isVisible2(__assign$h(__assign$h({}, extraParams), params)) : false;
        } else {
          selectable = isVisible2 !== null && isVisible2 !== void 0 ? isVisible2 : false;
        }
      }
      var disableInsteadOfHide = (_c = this.column) === null || _c === void 0 ? void 0 : _c.getColDef().showDisabledCheckboxes;
      if (disableInsteadOfHide) {
        this.eCheckbox.setDisabled(!selectable);
        this.setVisible(true);
        this.setDisplayed(true);
        return;
      }
      if ((_d = this.overrides) === null || _d === void 0 ? void 0 : _d.removeHidden) {
        this.setDisplayed(selectable);
        return;
      }
      this.setVisible(selectable);
    };
    CheckboxSelectionComponent2.prototype.getIsVisible = function() {
      var _a, _b;
      if (this.overrides) {
        return this.overrides.isVisible;
      }
      return (_b = (_a = this.column) === null || _a === void 0 ? void 0 : _a.getColDef()) === null || _b === void 0 ? void 0 : _b.checkboxSelection;
    };
    __decorate$2i([
      RefSelector("eCheckbox")
    ], CheckboxSelectionComponent2.prototype, "eCheckbox", void 0);
    __decorate$2i([
      PostConstruct
    ], CheckboxSelectionComponent2.prototype, "postConstruct", null);
    return CheckboxSelectionComponent2;
  }(Component2)
);
var VerticalDirection;
(function(VerticalDirection2) {
  VerticalDirection2[VerticalDirection2["Up"] = 0] = "Up";
  VerticalDirection2[VerticalDirection2["Down"] = 1] = "Down";
})(VerticalDirection || (VerticalDirection = {}));
var HorizontalDirection;
(function(HorizontalDirection2) {
  HorizontalDirection2[HorizontalDirection2["Left"] = 0] = "Left";
  HorizontalDirection2[HorizontalDirection2["Right"] = 1] = "Right";
})(HorizontalDirection || (HorizontalDirection = {}));
var __extends$2x = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2h = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __values$7 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var DragSourceType;
(function(DragSourceType2) {
  DragSourceType2[DragSourceType2["ToolPanel"] = 0] = "ToolPanel";
  DragSourceType2[DragSourceType2["HeaderCell"] = 1] = "HeaderCell";
  DragSourceType2[DragSourceType2["RowDrag"] = 2] = "RowDrag";
  DragSourceType2[DragSourceType2["ChartPanel"] = 3] = "ChartPanel";
  DragSourceType2[DragSourceType2["AdvancedFilterBuilder"] = 4] = "AdvancedFilterBuilder";
})(DragSourceType || (DragSourceType = {}));
var DragAndDropService = (
  /** @class */
  function(_super) {
    __extends$2x(DragAndDropService2, _super);
    function DragAndDropService2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.dragSourceAndParamsList = [];
      _this.dropTargets = [];
      return _this;
    }
    DragAndDropService_1 = DragAndDropService2;
    DragAndDropService2.prototype.init = function() {
      this.ePinnedIcon = createIcon("columnMovePin", this.gridOptionsService, null);
      this.eHideIcon = createIcon("columnMoveHide", this.gridOptionsService, null);
      this.eMoveIcon = createIcon("columnMoveMove", this.gridOptionsService, null);
      this.eLeftIcon = createIcon("columnMoveLeft", this.gridOptionsService, null);
      this.eRightIcon = createIcon("columnMoveRight", this.gridOptionsService, null);
      this.eGroupIcon = createIcon("columnMoveGroup", this.gridOptionsService, null);
      this.eAggregateIcon = createIcon("columnMoveValue", this.gridOptionsService, null);
      this.ePivotIcon = createIcon("columnMovePivot", this.gridOptionsService, null);
      this.eDropNotAllowedIcon = createIcon("dropNotAllowed", this.gridOptionsService, null);
    };
    DragAndDropService2.prototype.addDragSource = function(dragSource, allowTouch) {
      if (allowTouch === void 0) {
        allowTouch = false;
      }
      var params = {
        eElement: dragSource.eElement,
        dragStartPixels: dragSource.dragStartPixels,
        onDragStart: this.onDragStart.bind(this, dragSource),
        onDragStop: this.onDragStop.bind(this),
        onDragging: this.onDragging.bind(this),
        includeTouch: allowTouch
      };
      this.dragSourceAndParamsList.push({ params, dragSource });
      this.dragService.addDragSource(params);
    };
    DragAndDropService2.prototype.removeDragSource = function(dragSource) {
      var sourceAndParams = this.dragSourceAndParamsList.find(function(item) {
        return item.dragSource === dragSource;
      });
      if (sourceAndParams) {
        this.dragService.removeDragSource(sourceAndParams.params);
        removeFromArray(this.dragSourceAndParamsList, sourceAndParams);
      }
    };
    DragAndDropService2.prototype.clearDragSourceParamsList = function() {
      var _this = this;
      this.dragSourceAndParamsList.forEach(function(sourceAndParams) {
        return _this.dragService.removeDragSource(sourceAndParams.params);
      });
      this.dragSourceAndParamsList.length = 0;
      this.dropTargets.length = 0;
    };
    DragAndDropService2.prototype.nudge = function() {
      if (this.dragging) {
        this.onDragging(this.eventLastTime, true);
      }
    };
    DragAndDropService2.prototype.onDragStart = function(dragSource, mouseEvent) {
      this.dragging = true;
      this.dragSource = dragSource;
      this.eventLastTime = mouseEvent;
      this.dragItem = this.dragSource.getDragItem();
      if (this.dragSource.onDragStarted) {
        this.dragSource.onDragStarted();
      }
      this.createGhost();
    };
    DragAndDropService2.prototype.onDragStop = function(mouseEvent) {
      this.eventLastTime = null;
      this.dragging = false;
      if (this.dragSource.onDragStopped) {
        this.dragSource.onDragStopped();
      }
      if (this.lastDropTarget && this.lastDropTarget.onDragStop) {
        var draggingEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, null, null, false);
        this.lastDropTarget.onDragStop(draggingEvent);
      }
      this.lastDropTarget = null;
      this.dragItem = null;
      this.removeGhost();
    };
    DragAndDropService2.prototype.onDragging = function(mouseEvent, fromNudge) {
      var _this = this;
      var _a, _b, _c, _d;
      var hDirection = this.getHorizontalDirection(mouseEvent);
      var vDirection = this.getVerticalDirection(mouseEvent);
      this.eventLastTime = mouseEvent;
      this.positionGhost(mouseEvent);
      var validDropTargets = this.dropTargets.filter(function(target) {
        return _this.isMouseOnDropTarget(mouseEvent, target);
      });
      var dropTarget = this.findCurrentDropTarget(mouseEvent, validDropTargets);
      if (dropTarget !== this.lastDropTarget) {
        this.leaveLastTargetIfExists(mouseEvent, hDirection, vDirection, fromNudge);
        if (this.lastDropTarget !== null && dropTarget === null) {
          (_b = (_a = this.dragSource).onGridExit) === null || _b === void 0 ? void 0 : _b.call(_a, this.dragItem);
        }
        if (this.lastDropTarget === null && dropTarget !== null) {
          (_d = (_c = this.dragSource).onGridEnter) === null || _d === void 0 ? void 0 : _d.call(_c, this.dragItem);
        }
        this.enterDragTargetIfExists(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
        this.lastDropTarget = dropTarget;
      } else if (dropTarget && dropTarget.onDragging) {
        var draggingEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
        dropTarget.onDragging(draggingEvent);
      }
    };
    DragAndDropService2.prototype.getAllContainersFromDropTarget = function(dropTarget) {
      var secondaryContainers = dropTarget.getSecondaryContainers ? dropTarget.getSecondaryContainers() : null;
      var containers = [[dropTarget.getContainer()]];
      return secondaryContainers ? containers.concat(secondaryContainers) : containers;
    };
    DragAndDropService2.prototype.allContainersIntersect = function(mouseEvent, containers) {
      var e_1, _a;
      try {
        for (var containers_1 = __values$7(containers), containers_1_1 = containers_1.next(); !containers_1_1.done; containers_1_1 = containers_1.next()) {
          var container = containers_1_1.value;
          var rect = container.getBoundingClientRect();
          if (rect.width === 0 || rect.height === 0) {
            return false;
          }
          var horizontalFit = mouseEvent.clientX >= rect.left && mouseEvent.clientX < rect.right;
          var verticalFit = mouseEvent.clientY >= rect.top && mouseEvent.clientY < rect.bottom;
          if (!horizontalFit || !verticalFit) {
            return false;
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (containers_1_1 && !containers_1_1.done && (_a = containers_1.return))
            _a.call(containers_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return true;
    };
    DragAndDropService2.prototype.isMouseOnDropTarget = function(mouseEvent, dropTarget) {
      var e_2, _a;
      var allContainersFromDropTarget = this.getAllContainersFromDropTarget(dropTarget);
      var mouseOverTarget = false;
      try {
        for (var allContainersFromDropTarget_1 = __values$7(allContainersFromDropTarget), allContainersFromDropTarget_1_1 = allContainersFromDropTarget_1.next(); !allContainersFromDropTarget_1_1.done; allContainersFromDropTarget_1_1 = allContainersFromDropTarget_1.next()) {
          var currentContainers = allContainersFromDropTarget_1_1.value;
          if (this.allContainersIntersect(mouseEvent, currentContainers)) {
            mouseOverTarget = true;
            break;
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (allContainersFromDropTarget_1_1 && !allContainersFromDropTarget_1_1.done && (_a = allContainersFromDropTarget_1.return))
            _a.call(allContainersFromDropTarget_1);
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
      if (dropTarget.targetContainsSource && !dropTarget.getContainer().contains(this.dragSource.eElement)) {
        return false;
      }
      return mouseOverTarget && dropTarget.isInterestedIn(this.dragSource.type, this.dragSource.eElement);
    };
    DragAndDropService2.prototype.findCurrentDropTarget = function(mouseEvent, validDropTargets) {
      var e_3, _a, e_4, _b;
      var len = validDropTargets.length;
      if (len === 0) {
        return null;
      }
      if (len === 1) {
        return validDropTargets[0];
      }
      var rootNode = this.gridOptionsService.getRootNode();
      var elementStack = rootNode.elementsFromPoint(mouseEvent.clientX, mouseEvent.clientY);
      try {
        for (var elementStack_1 = __values$7(elementStack), elementStack_1_1 = elementStack_1.next(); !elementStack_1_1.done; elementStack_1_1 = elementStack_1.next()) {
          var el = elementStack_1_1.value;
          try {
            for (var validDropTargets_1 = (e_4 = void 0, __values$7(validDropTargets)), validDropTargets_1_1 = validDropTargets_1.next(); !validDropTargets_1_1.done; validDropTargets_1_1 = validDropTargets_1.next()) {
              var dropTarget = validDropTargets_1_1.value;
              var containers = flatten(this.getAllContainersFromDropTarget(dropTarget));
              if (containers.indexOf(el) !== -1) {
                return dropTarget;
              }
            }
          } catch (e_4_1) {
            e_4 = { error: e_4_1 };
          } finally {
            try {
              if (validDropTargets_1_1 && !validDropTargets_1_1.done && (_b = validDropTargets_1.return))
                _b.call(validDropTargets_1);
            } finally {
              if (e_4)
                throw e_4.error;
            }
          }
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (elementStack_1_1 && !elementStack_1_1.done && (_a = elementStack_1.return))
            _a.call(elementStack_1);
        } finally {
          if (e_3)
            throw e_3.error;
        }
      }
      return null;
    };
    DragAndDropService2.prototype.enterDragTargetIfExists = function(dropTarget, mouseEvent, hDirection, vDirection, fromNudge) {
      if (!dropTarget) {
        return;
      }
      if (dropTarget.onDragEnter) {
        var dragEnterEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
        dropTarget.onDragEnter(dragEnterEvent);
      }
      this.setGhostIcon(dropTarget.getIconName ? dropTarget.getIconName() : null);
    };
    DragAndDropService2.prototype.leaveLastTargetIfExists = function(mouseEvent, hDirection, vDirection, fromNudge) {
      if (!this.lastDropTarget) {
        return;
      }
      if (this.lastDropTarget.onDragLeave) {
        var dragLeaveEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, hDirection, vDirection, fromNudge);
        this.lastDropTarget.onDragLeave(dragLeaveEvent);
      }
      this.setGhostIcon(null);
    };
    DragAndDropService2.prototype.addDropTarget = function(dropTarget) {
      this.dropTargets.push(dropTarget);
    };
    DragAndDropService2.prototype.removeDropTarget = function(dropTarget) {
      this.dropTargets = this.dropTargets.filter(function(target) {
        return target.getContainer() !== dropTarget.getContainer();
      });
    };
    DragAndDropService2.prototype.hasExternalDropZones = function() {
      return this.dropTargets.some(function(zones) {
        return zones.external;
      });
    };
    DragAndDropService2.prototype.findExternalZone = function(params) {
      var externalTargets = this.dropTargets.filter(function(target) {
        return target.external;
      });
      return externalTargets.find(function(zone) {
        return zone.getContainer() === params.getContainer();
      }) || null;
    };
    DragAndDropService2.prototype.getHorizontalDirection = function(event) {
      var clientX = this.eventLastTime && this.eventLastTime.clientX;
      var eClientX = event.clientX;
      if (clientX === eClientX) {
        return null;
      }
      return clientX > eClientX ? HorizontalDirection.Left : HorizontalDirection.Right;
    };
    DragAndDropService2.prototype.getVerticalDirection = function(event) {
      var clientY = this.eventLastTime && this.eventLastTime.clientY;
      var eClientY = event.clientY;
      if (clientY === eClientY) {
        return null;
      }
      return clientY > eClientY ? VerticalDirection.Up : VerticalDirection.Down;
    };
    DragAndDropService2.prototype.createDropTargetEvent = function(dropTarget, event, hDirection, vDirection, fromNudge) {
      var dropZoneTarget = dropTarget.getContainer();
      var rect = dropZoneTarget.getBoundingClientRect();
      var _a = this, api = _a.gridApi, columnApi = _a.columnApi, dragItem = _a.dragItem, dragSource = _a.dragSource;
      var x = event.clientX - rect.left;
      var y = event.clientY - rect.top;
      return { event, x, y, vDirection, hDirection, dragSource, fromNudge, dragItem, api, columnApi, dropZoneTarget };
    };
    DragAndDropService2.prototype.positionGhost = function(event) {
      var ghost = this.eGhost;
      if (!ghost) {
        return;
      }
      var ghostRect = ghost.getBoundingClientRect();
      var ghostHeight = ghostRect.height;
      var browserWidth = getBodyWidth() - 2;
      var browserHeight = getBodyHeight() - 2;
      var offsetParentSize = getElementRectWithOffset(ghost.offsetParent);
      var clientY = event.clientY, clientX = event.clientX;
      var top = clientY - offsetParentSize.top - ghostHeight / 2;
      var left = clientX - offsetParentSize.left - 10;
      var eDocument = this.gridOptionsService.getDocument();
      var win = eDocument.defaultView || window;
      var windowScrollY = win.pageYOffset || eDocument.documentElement.scrollTop;
      var windowScrollX = win.pageXOffset || eDocument.documentElement.scrollLeft;
      if (browserWidth > 0 && left + ghost.clientWidth > browserWidth + windowScrollX) {
        left = browserWidth + windowScrollX - ghost.clientWidth;
      }
      if (left < 0) {
        left = 0;
      }
      if (browserHeight > 0 && top + ghost.clientHeight > browserHeight + windowScrollY) {
        top = browserHeight + windowScrollY - ghost.clientHeight;
      }
      if (top < 0) {
        top = 0;
      }
      ghost.style.left = "".concat(left, "px");
      ghost.style.top = "".concat(top, "px");
    };
    DragAndDropService2.prototype.removeGhost = function() {
      if (this.eGhost && this.eGhostParent) {
        this.eGhostParent.removeChild(this.eGhost);
      }
      this.eGhost = null;
    };
    DragAndDropService2.prototype.createGhost = function() {
      this.eGhost = loadTemplate(DragAndDropService_1.GHOST_TEMPLATE);
      this.mouseEventService.stampTopLevelGridCompWithGridInstance(this.eGhost);
      var theme = this.environment.getTheme().theme;
      if (theme) {
        this.eGhost.classList.add(theme);
      }
      this.eGhostIcon = this.eGhost.querySelector(".ag-dnd-ghost-icon");
      this.setGhostIcon(null);
      var eText = this.eGhost.querySelector(".ag-dnd-ghost-label");
      var dragItemName = this.dragSource.dragItemName;
      if (isFunction(dragItemName)) {
        dragItemName = dragItemName();
      }
      eText.innerHTML = escapeString(dragItemName) || "";
      this.eGhost.style.height = "25px";
      this.eGhost.style.top = "20px";
      this.eGhost.style.left = "20px";
      var eDocument = this.gridOptionsService.getDocument();
      var rootNode = null;
      var targetEl = null;
      try {
        rootNode = eDocument.fullscreenElement;
      } catch (e) {
      } finally {
        if (!rootNode) {
          rootNode = this.gridOptionsService.getRootNode();
        }
        var body = rootNode.querySelector("body");
        if (body) {
          targetEl = body;
        } else if (rootNode instanceof ShadowRoot) {
          targetEl = rootNode;
        } else if (rootNode instanceof Document) {
          targetEl = rootNode === null || rootNode === void 0 ? void 0 : rootNode.documentElement;
        } else {
          targetEl = rootNode;
        }
      }
      this.eGhostParent = targetEl;
      if (!this.eGhostParent) {
        console.warn("AG Grid: could not find document body, it is needed for dragging columns");
      } else {
        this.eGhostParent.appendChild(this.eGhost);
      }
    };
    DragAndDropService2.prototype.setGhostIcon = function(iconName, shake) {
      if (shake === void 0) {
        shake = false;
      }
      clearElement(this.eGhostIcon);
      var eIcon = null;
      if (!iconName) {
        iconName = this.dragSource.getDefaultIconName ? this.dragSource.getDefaultIconName() : DragAndDropService_1.ICON_NOT_ALLOWED;
      }
      switch (iconName) {
        case DragAndDropService_1.ICON_PINNED:
          eIcon = this.ePinnedIcon;
          break;
        case DragAndDropService_1.ICON_MOVE:
          eIcon = this.eMoveIcon;
          break;
        case DragAndDropService_1.ICON_LEFT:
          eIcon = this.eLeftIcon;
          break;
        case DragAndDropService_1.ICON_RIGHT:
          eIcon = this.eRightIcon;
          break;
        case DragAndDropService_1.ICON_GROUP:
          eIcon = this.eGroupIcon;
          break;
        case DragAndDropService_1.ICON_AGGREGATE:
          eIcon = this.eAggregateIcon;
          break;
        case DragAndDropService_1.ICON_PIVOT:
          eIcon = this.ePivotIcon;
          break;
        case DragAndDropService_1.ICON_NOT_ALLOWED:
          eIcon = this.eDropNotAllowedIcon;
          break;
        case DragAndDropService_1.ICON_HIDE:
          eIcon = this.eHideIcon;
          break;
      }
      this.eGhostIcon.classList.toggle("ag-shake-left-to-right", shake);
      if (eIcon === this.eHideIcon && this.gridOptionsService.get("suppressDragLeaveHidesColumns")) {
        return;
      }
      if (eIcon) {
        this.eGhostIcon.appendChild(eIcon);
      }
    };
    var DragAndDropService_1;
    DragAndDropService2.ICON_PINNED = "pinned";
    DragAndDropService2.ICON_MOVE = "move";
    DragAndDropService2.ICON_LEFT = "left";
    DragAndDropService2.ICON_RIGHT = "right";
    DragAndDropService2.ICON_GROUP = "group";
    DragAndDropService2.ICON_AGGREGATE = "aggregate";
    DragAndDropService2.ICON_PIVOT = "pivot";
    DragAndDropService2.ICON_NOT_ALLOWED = "notAllowed";
    DragAndDropService2.ICON_HIDE = "hide";
    DragAndDropService2.GHOST_TEMPLATE = '<div class="ag-dnd-ghost ag-unselectable">\n            <span class="ag-dnd-ghost-icon ag-shake-left-to-right"></span>\n            <div class="ag-dnd-ghost-label"></div>\n        </div>';
    __decorate$2h([
      Autowired("dragService")
    ], DragAndDropService2.prototype, "dragService", void 0);
    __decorate$2h([
      Autowired("mouseEventService")
    ], DragAndDropService2.prototype, "mouseEventService", void 0);
    __decorate$2h([
      Autowired("columnApi")
    ], DragAndDropService2.prototype, "columnApi", void 0);
    __decorate$2h([
      Autowired("gridApi")
    ], DragAndDropService2.prototype, "gridApi", void 0);
    __decorate$2h([
      PostConstruct
    ], DragAndDropService2.prototype, "init", null);
    __decorate$2h([
      PreDestroy
    ], DragAndDropService2.prototype, "clearDragSourceParamsList", null);
    DragAndDropService2 = DragAndDropService_1 = __decorate$2h([
      Bean("dragAndDropService")
    ], DragAndDropService2);
    return DragAndDropService2;
  }(BeanStub)
);
var __extends$2w = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2g = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RowDragComp = (
  /** @class */
  function(_super) {
    __extends$2w(RowDragComp2, _super);
    function RowDragComp2(cellValueFn, rowNode, column, customGui, dragStartPixels, suppressVisibilityChange) {
      var _this = _super.call(this) || this;
      _this.cellValueFn = cellValueFn;
      _this.rowNode = rowNode;
      _this.column = column;
      _this.customGui = customGui;
      _this.dragStartPixels = dragStartPixels;
      _this.suppressVisibilityChange = suppressVisibilityChange;
      _this.dragSource = null;
      return _this;
    }
    RowDragComp2.prototype.isCustomGui = function() {
      return this.customGui != null;
    };
    RowDragComp2.prototype.postConstruct = function() {
      if (!this.customGui) {
        this.setTemplate(
          /* html */
          '<div class="ag-drag-handle ag-row-drag" aria-hidden="true"></div>'
        );
        this.getGui().appendChild(createIconNoSpan("rowDrag", this.gridOptionsService, null));
        this.addDragSource();
      } else {
        this.setDragElement(this.customGui, this.dragStartPixels);
      }
      this.checkCompatibility();
      if (!this.suppressVisibilityChange) {
        var strategy = this.gridOptionsService.get("rowDragManaged") ? new ManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column) : new NonManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column);
        this.createManagedBean(strategy, this.beans.context);
      }
    };
    RowDragComp2.prototype.setDragElement = function(dragElement, dragStartPixels) {
      this.setTemplateFromElement(dragElement);
      this.addDragSource(dragStartPixels);
    };
    RowDragComp2.prototype.getSelectedNodes = function() {
      var isRowDragMultiRow = this.gridOptionsService.get("rowDragMultiRow");
      if (!isRowDragMultiRow) {
        return [this.rowNode];
      }
      var selection = this.beans.selectionService.getSelectedNodes();
      return selection.indexOf(this.rowNode) !== -1 ? selection : [this.rowNode];
    };
    RowDragComp2.prototype.checkCompatibility = function() {
      var managed = this.gridOptionsService.get("rowDragManaged");
      var treeData = this.gridOptionsService.get("treeData");
      if (treeData && managed) {
        warnOnce("If using row drag with tree data, you cannot have rowDragManaged=true");
      }
    };
    RowDragComp2.prototype.getDragItem = function() {
      return {
        rowNode: this.rowNode,
        rowNodes: this.getSelectedNodes(),
        columns: this.column ? [this.column] : void 0,
        defaultTextValue: this.cellValueFn()
      };
    };
    RowDragComp2.prototype.getRowDragText = function(column) {
      if (column) {
        var colDef = column.getColDef();
        if (colDef.rowDragText) {
          return colDef.rowDragText;
        }
      }
      return this.gridOptionsService.get("rowDragText");
    };
    RowDragComp2.prototype.addDragSource = function(dragStartPixels) {
      var _this = this;
      if (dragStartPixels === void 0) {
        dragStartPixels = 4;
      }
      if (this.dragSource) {
        this.removeDragSource();
      }
      var translate = this.localeService.getLocaleTextFunc();
      this.dragSource = {
        type: DragSourceType.RowDrag,
        eElement: this.getGui(),
        dragItemName: function() {
          var _a;
          var dragItem = _this.getDragItem();
          var dragItemCount = ((_a = dragItem.rowNodes) === null || _a === void 0 ? void 0 : _a.length) || 1;
          var rowDragText = _this.getRowDragText(_this.column);
          if (rowDragText) {
            return rowDragText(dragItem, dragItemCount);
          }
          return dragItemCount === 1 ? _this.cellValueFn() : "".concat(dragItemCount, " ").concat(translate("rowDragRows", "rows"));
        },
        getDragItem: function() {
          return _this.getDragItem();
        },
        dragStartPixels,
        dragSourceDomDataKey: this.gridOptionsService.getDomDataKey()
      };
      this.beans.dragAndDropService.addDragSource(this.dragSource, true);
    };
    RowDragComp2.prototype.removeDragSource = function() {
      if (this.dragSource) {
        this.beans.dragAndDropService.removeDragSource(this.dragSource);
      }
      this.dragSource = null;
    };
    __decorate$2g([
      Autowired("beans")
    ], RowDragComp2.prototype, "beans", void 0);
    __decorate$2g([
      PostConstruct
    ], RowDragComp2.prototype, "postConstruct", null);
    __decorate$2g([
      PreDestroy
    ], RowDragComp2.prototype, "removeDragSource", null);
    return RowDragComp2;
  }(Component2)
);
var VisibilityStrategy = (
  /** @class */
  function(_super) {
    __extends$2w(VisibilityStrategy2, _super);
    function VisibilityStrategy2(parent, rowNode, column) {
      var _this = _super.call(this) || this;
      _this.parent = parent;
      _this.rowNode = rowNode;
      _this.column = column;
      return _this;
    }
    VisibilityStrategy2.prototype.setDisplayedOrVisible = function(neverDisplayed) {
      var displayedOptions = { skipAriaHidden: true };
      if (neverDisplayed) {
        this.parent.setDisplayed(false, displayedOptions);
      } else {
        var shown = true;
        var isShownSometimes = false;
        if (this.column) {
          shown = this.column.isRowDrag(this.rowNode) || this.parent.isCustomGui();
          isShownSometimes = isFunction(this.column.getColDef().rowDrag);
        }
        if (isShownSometimes) {
          this.parent.setDisplayed(true, displayedOptions);
          this.parent.setVisible(shown, displayedOptions);
        } else {
          this.parent.setDisplayed(shown, displayedOptions);
          this.parent.setVisible(true, displayedOptions);
        }
      }
    };
    return VisibilityStrategy2;
  }(BeanStub)
);
var NonManagedVisibilityStrategy = (
  /** @class */
  function(_super) {
    __extends$2w(NonManagedVisibilityStrategy2, _super);
    function NonManagedVisibilityStrategy2(parent, beans, rowNode, column) {
      var _this = _super.call(this, parent, rowNode, column) || this;
      _this.beans = beans;
      return _this;
    }
    NonManagedVisibilityStrategy2.prototype.postConstruct = function() {
      this.addManagedPropertyListener("suppressRowDrag", this.onSuppressRowDrag.bind(this));
      this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));
      this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));
      this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));
      this.addManagedListener(this.beans.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.workOutVisibility.bind(this));
      this.workOutVisibility();
    };
    NonManagedVisibilityStrategy2.prototype.onSuppressRowDrag = function() {
      this.workOutVisibility();
    };
    NonManagedVisibilityStrategy2.prototype.workOutVisibility = function() {
      var neverDisplayed = this.gridOptionsService.get("suppressRowDrag");
      this.setDisplayedOrVisible(neverDisplayed);
    };
    __decorate$2g([
      PostConstruct
    ], NonManagedVisibilityStrategy2.prototype, "postConstruct", null);
    return NonManagedVisibilityStrategy2;
  }(VisibilityStrategy)
);
var ManagedVisibilityStrategy = (
  /** @class */
  function(_super) {
    __extends$2w(ManagedVisibilityStrategy2, _super);
    function ManagedVisibilityStrategy2(parent, beans, rowNode, column) {
      var _this = _super.call(this, parent, rowNode, column) || this;
      _this.beans = beans;
      return _this;
    }
    ManagedVisibilityStrategy2.prototype.postConstruct = function() {
      this.addManagedListener(this.beans.eventService, Events.EVENT_SORT_CHANGED, this.workOutVisibility.bind(this));
      this.addManagedListener(this.beans.eventService, Events.EVENT_FILTER_CHANGED, this.workOutVisibility.bind(this));
      this.addManagedListener(this.beans.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.workOutVisibility.bind(this));
      this.addManagedListener(this.beans.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.workOutVisibility.bind(this));
      this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));
      this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));
      this.addManagedPropertyListener("suppressRowDrag", this.onSuppressRowDrag.bind(this));
      this.workOutVisibility();
    };
    ManagedVisibilityStrategy2.prototype.onSuppressRowDrag = function() {
      this.workOutVisibility();
    };
    ManagedVisibilityStrategy2.prototype.workOutVisibility = function() {
      var gridBodyCon = this.beans.ctrlsService.getGridBodyCtrl();
      var rowDragFeature = gridBodyCon.getRowDragFeature();
      var shouldPreventRowMove = rowDragFeature && rowDragFeature.shouldPreventRowMove();
      var suppressRowDrag = this.gridOptionsService.get("suppressRowDrag");
      var hasExternalDropZones = this.beans.dragAndDropService.hasExternalDropZones();
      var neverDisplayed = shouldPreventRowMove && !hasExternalDropZones || suppressRowDrag;
      this.setDisplayedOrVisible(neverDisplayed);
    };
    __decorate$2g([
      PostConstruct
    ], ManagedVisibilityStrategy2.prototype, "postConstruct", null);
    return ManagedVisibilityStrategy2;
  }(VisibilityStrategy)
);
var __extends$2v = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$g = function() {
  __assign$g = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$g.apply(this, arguments);
};
var __decorate$2f = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var GroupCellRendererCtrl = (
  /** @class */
  function(_super) {
    __extends$2v(GroupCellRendererCtrl2, _super);
    function GroupCellRendererCtrl2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    GroupCellRendererCtrl2.prototype.init = function(comp, eGui, eCheckbox, eExpanded, eContracted, compClass, params) {
      var _a, _b, _c, _d;
      this.params = params;
      this.eGui = eGui;
      this.eCheckbox = eCheckbox;
      this.eExpanded = eExpanded;
      this.eContracted = eContracted;
      this.comp = comp;
      this.compClass = compClass;
      var node = params.node;
      params.value;
      var colDef = params.colDef;
      var topLevelFooter = this.isTopLevelFooter();
      if (!topLevelFooter) {
        var embeddedRowMismatch = this.isEmbeddedRowMismatch();
        if (embeddedRowMismatch) {
          return;
        }
        if (node.footer && this.gridOptionsService.get("groupHideOpenParents")) {
          var showRowGroup = colDef && colDef.showRowGroup;
          var rowGroupColumnId = node.rowGroupColumn && node.rowGroupColumn.getColId();
          if (showRowGroup !== rowGroupColumnId) {
            return;
          }
        }
      }
      this.setupShowingValueForOpenedParent();
      this.findDisplayedGroupNode();
      if (!topLevelFooter) {
        var showingFooterTotal = params.node.footer && params.node.rowGroupIndex === this.columnModel.getRowGroupColumns().findIndex(function(c) {
          var _a2;
          return c.getColId() === ((_a2 = params.colDef) === null || _a2 === void 0 ? void 0 : _a2.showRowGroup);
        });
        var isAlwaysShowing = this.gridOptionsService.get("groupDisplayType") != "multipleColumns" || this.gridOptionsService.get("treeData");
        var showOpenGroupValue = isAlwaysShowing || this.gridOptionsService.get("showOpenedGroup") && !params.node.footer && (!params.node.group || params.node.rowGroupIndex != null && params.node.rowGroupIndex > this.columnModel.getRowGroupColumns().findIndex(function(c) {
          var _a2;
          return c.getColId() === ((_a2 = params.colDef) === null || _a2 === void 0 ? void 0 : _a2.showRowGroup);
        }));
        var leafWithValues = !node.group && (((_a = this.params.colDef) === null || _a === void 0 ? void 0 : _a.field) || ((_b = this.params.colDef) === null || _b === void 0 ? void 0 : _b.valueGetter));
        var isExpandable = this.isExpandable();
        var showPivotModeLeafValue = this.columnModel.isPivotMode() && node.leafGroup && ((_c = node.rowGroupColumn) === null || _c === void 0 ? void 0 : _c.getColId()) === ((_d = params.column) === null || _d === void 0 ? void 0 : _d.getColDef().showRowGroup);
        var canSkipRenderingCell = !this.showingValueForOpenedParent && !isExpandable && !leafWithValues && !showOpenGroupValue && !showingFooterTotal && !showPivotModeLeafValue;
        if (canSkipRenderingCell) {
          return;
        }
      }
      this.addExpandAndContract();
      this.addFullWidthRowDraggerIfNeeded();
      this.addCheckboxIfNeeded();
      this.addValueElement();
      this.setupIndent();
      this.refreshAriaExpanded();
    };
    GroupCellRendererCtrl2.prototype.getCellAriaRole = function() {
      var _a, _b;
      var colDefAriaRole = (_a = this.params.colDef) === null || _a === void 0 ? void 0 : _a.cellAriaRole;
      var columnColDefAriaRole = (_b = this.params.column) === null || _b === void 0 ? void 0 : _b.getColDef().cellAriaRole;
      return colDefAriaRole || columnColDefAriaRole || "gridcell";
    };
    GroupCellRendererCtrl2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.expandListener = null;
    };
    GroupCellRendererCtrl2.prototype.refreshAriaExpanded = function() {
      var _a = this.params, node = _a.node, eGridCell = _a.eGridCell;
      if (this.expandListener) {
        this.expandListener = this.expandListener();
      }
      if (!this.isExpandable()) {
        removeAriaExpanded(eGridCell);
        return;
      }
      var listener = function() {
        setAriaExpanded(eGridCell, !!node.expanded);
      };
      this.expandListener = this.addManagedListener(node, RowNode.EVENT_EXPANDED_CHANGED, listener) || null;
      listener();
    };
    GroupCellRendererCtrl2.prototype.isTopLevelFooter = function() {
      if (!this.gridOptionsService.get("groupIncludeTotalFooter")) {
        return false;
      }
      if (this.params.value != null || this.params.node.level != -1) {
        return false;
      }
      var colDef = this.params.colDef;
      var doingFullWidth = colDef == null;
      if (doingFullWidth) {
        return true;
      }
      if (colDef.showRowGroup === true) {
        return true;
      }
      var rowGroupCols = this.columnModel.getRowGroupColumns();
      if (!rowGroupCols || rowGroupCols.length === 0) {
        return true;
      }
      var firstRowGroupCol = rowGroupCols[0];
      return firstRowGroupCol.getId() === colDef.showRowGroup;
    };
    GroupCellRendererCtrl2.prototype.isEmbeddedRowMismatch = function() {
      if (!this.params.fullWidth || !this.gridOptionsService.get("embedFullWidthRows")) {
        return false;
      }
      var pinnedLeftCell = this.params.pinned === "left";
      var pinnedRightCell = this.params.pinned === "right";
      var bodyCell = !pinnedLeftCell && !pinnedRightCell;
      if (this.gridOptionsService.get("enableRtl")) {
        if (this.columnModel.isPinningLeft()) {
          return !pinnedRightCell;
        }
        return !bodyCell;
      }
      if (this.columnModel.isPinningLeft()) {
        return !pinnedLeftCell;
      }
      return !bodyCell;
    };
    GroupCellRendererCtrl2.prototype.findDisplayedGroupNode = function() {
      var column = this.params.column;
      var rowNode = this.params.node;
      if (this.showingValueForOpenedParent) {
        var pointer = rowNode.parent;
        while (pointer != null) {
          if (pointer.rowGroupColumn && column.isRowGroupDisplayed(pointer.rowGroupColumn.getId())) {
            this.displayedGroupNode = pointer;
            break;
          }
          pointer = pointer.parent;
        }
      }
      if (missing(this.displayedGroupNode)) {
        this.displayedGroupNode = rowNode;
      }
    };
    GroupCellRendererCtrl2.prototype.setupShowingValueForOpenedParent = function() {
      var rowNode = this.params.node;
      var column = this.params.column;
      if (!this.gridOptionsService.get("groupHideOpenParents")) {
        this.showingValueForOpenedParent = false;
        return;
      }
      if (!rowNode.groupData) {
        this.showingValueForOpenedParent = false;
        return;
      }
      var showingGroupNode = rowNode.rowGroupColumn != null;
      if (showingGroupNode) {
        var keyOfGroupingColumn = rowNode.rowGroupColumn.getId();
        var configuredToShowThisGroupLevel = column.isRowGroupDisplayed(keyOfGroupingColumn);
        if (configuredToShowThisGroupLevel) {
          this.showingValueForOpenedParent = false;
          return;
        }
      }
      var valPresent = rowNode.groupData[column.getId()] != null;
      this.showingValueForOpenedParent = valPresent;
    };
    GroupCellRendererCtrl2.prototype.addValueElement = function() {
      if (this.displayedGroupNode.footer) {
        this.addFooterValue();
      } else {
        this.addGroupValue();
        this.addChildCount();
      }
    };
    GroupCellRendererCtrl2.prototype.addGroupValue = function() {
      var _a;
      var paramsAdjusted = this.adjustParamsWithDetailsFromRelatedColumn();
      var innerCompDetails = this.getInnerCompDetails(paramsAdjusted);
      var valueFormatted = paramsAdjusted.valueFormatted, value = paramsAdjusted.value;
      var valueWhenNoRenderer = valueFormatted;
      if (valueWhenNoRenderer == null) {
        var isGroupColForNode = this.displayedGroupNode.rowGroupColumn && ((_a = this.params.column) === null || _a === void 0 ? void 0 : _a.isRowGroupDisplayed(this.displayedGroupNode.rowGroupColumn.getId()));
        if (this.displayedGroupNode.key === "" && this.displayedGroupNode.group && isGroupColForNode) {
          var localeTextFunc = this.localeService.getLocaleTextFunc();
          valueWhenNoRenderer = localeTextFunc("blanks", "(Blanks)");
        } else {
          valueWhenNoRenderer = value !== null && value !== void 0 ? value : null;
        }
      }
      this.comp.setInnerRenderer(innerCompDetails, valueWhenNoRenderer);
    };
    GroupCellRendererCtrl2.prototype.adjustParamsWithDetailsFromRelatedColumn = function() {
      var relatedColumn = this.displayedGroupNode.rowGroupColumn;
      var column = this.params.column;
      if (!relatedColumn) {
        return this.params;
      }
      var notFullWidth = column != null;
      if (notFullWidth) {
        var showingThisRowGroup = column.isRowGroupDisplayed(relatedColumn.getId());
        if (!showingThisRowGroup) {
          return this.params;
        }
      }
      var params = this.params;
      var _a = this.params, value = _a.value, node = _a.node;
      var valueFormatted = this.valueFormatterService.formatValue(relatedColumn, node, value);
      var paramsAdjusted = __assign$g(__assign$g({}, params), { valueFormatted });
      return paramsAdjusted;
    };
    GroupCellRendererCtrl2.prototype.addFooterValue = function() {
      var footerValueGetter = this.params.footerValueGetter;
      var footerValue = "";
      if (footerValueGetter) {
        var paramsClone = cloneObject(this.params);
        paramsClone.value = this.params.value;
        if (typeof footerValueGetter === "function") {
          footerValue = footerValueGetter(paramsClone);
        } else if (typeof footerValueGetter === "string") {
          footerValue = this.expressionService.evaluate(footerValueGetter, paramsClone);
        } else {
          console.warn("AG Grid: footerValueGetter should be either a function or a string (expression)");
        }
      } else {
        var localeTextFunc = this.localeService.getLocaleTextFunc();
        var footerTotalPrefix = localeTextFunc("footerTotal", "Total");
        footerValue = footerTotalPrefix + " " + (this.params.value != null ? this.params.value : "");
      }
      var innerCompDetails = this.getInnerCompDetails(this.params);
      this.comp.setInnerRenderer(innerCompDetails, footerValue);
    };
    GroupCellRendererCtrl2.prototype.getInnerCompDetails = function(params) {
      var _this = this;
      if (params.fullWidth) {
        return this.userComponentFactory.getFullWidthGroupRowInnerCellRenderer(this.gridOptionsService.get("groupRowRendererParams"), params);
      }
      var innerCompDetails = this.userComponentFactory.getInnerRendererDetails(params, params);
      var isGroupRowRenderer = function(details) {
        return details && details.componentClass == _this.compClass;
      };
      if (innerCompDetails && !isGroupRowRenderer(innerCompDetails)) {
        return innerCompDetails;
      }
      var relatedColumn = this.displayedGroupNode.rowGroupColumn;
      var relatedColDef = relatedColumn ? relatedColumn.getColDef() : void 0;
      if (!relatedColDef) {
        return;
      }
      var relatedCompDetails = this.userComponentFactory.getCellRendererDetails(relatedColDef, params);
      if (relatedCompDetails && !isGroupRowRenderer(relatedCompDetails)) {
        return relatedCompDetails;
      }
      if (isGroupRowRenderer(relatedCompDetails) && relatedColDef.cellRendererParams && relatedColDef.cellRendererParams.innerRenderer) {
        var res = this.userComponentFactory.getInnerRendererDetails(relatedColDef.cellRendererParams, params);
        return res;
      }
    };
    GroupCellRendererCtrl2.prototype.addChildCount = function() {
      if (this.params.suppressCount) {
        return;
      }
      this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, this.updateChildCount.bind(this));
      this.updateChildCount();
    };
    GroupCellRendererCtrl2.prototype.updateChildCount = function() {
      var allChildrenCount = this.displayedGroupNode.allChildrenCount;
      var showingGroupForThisNode = this.isShowRowGroupForThisRow();
      var showCount = showingGroupForThisNode && allChildrenCount != null && allChildrenCount >= 0;
      var countString = showCount ? "(".concat(allChildrenCount, ")") : "";
      this.comp.setChildCount(countString);
    };
    GroupCellRendererCtrl2.prototype.isShowRowGroupForThisRow = function() {
      if (this.gridOptionsService.get("treeData")) {
        return true;
      }
      var rowGroupColumn = this.displayedGroupNode.rowGroupColumn;
      if (!rowGroupColumn) {
        return false;
      }
      var column = this.params.column;
      var thisColumnIsInterested = column == null || column.isRowGroupDisplayed(rowGroupColumn.getId());
      return thisColumnIsInterested;
    };
    GroupCellRendererCtrl2.prototype.addExpandAndContract = function() {
      var _a;
      var params = this.params;
      var eExpandedIcon = createIconNoSpan("groupExpanded", this.gridOptionsService, null);
      var eContractedIcon = createIconNoSpan("groupContracted", this.gridOptionsService, null);
      if (eExpandedIcon) {
        this.eExpanded.appendChild(eExpandedIcon);
      }
      if (eContractedIcon) {
        this.eContracted.appendChild(eContractedIcon);
      }
      var eGroupCell = params.eGridCell;
      var isDoubleClickEdit = ((_a = this.params.column) === null || _a === void 0 ? void 0 : _a.isCellEditable(params.node)) && this.gridOptionsService.get("enableGroupEdit");
      if (!isDoubleClickEdit && this.isExpandable() && !params.suppressDoubleClickExpand) {
        this.addManagedListener(eGroupCell, "dblclick", this.onCellDblClicked.bind(this));
      }
      this.addManagedListener(this.eExpanded, "click", this.onExpandClicked.bind(this));
      this.addManagedListener(this.eContracted, "click", this.onExpandClicked.bind(this));
      this.addManagedListener(eGroupCell, "keydown", this.onKeyDown.bind(this));
      this.addManagedListener(params.node, RowNode.EVENT_EXPANDED_CHANGED, this.showExpandAndContractIcons.bind(this));
      this.showExpandAndContractIcons();
      var expandableChangedListener = this.onRowNodeIsExpandableChanged.bind(this);
      this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, expandableChangedListener);
      this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_MASTER_CHANGED, expandableChangedListener);
      this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_GROUP_CHANGED, expandableChangedListener);
      this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_HAS_CHILDREN_CHANGED, expandableChangedListener);
    };
    GroupCellRendererCtrl2.prototype.onExpandClicked = function(mouseEvent) {
      if (isStopPropagationForAgGrid(mouseEvent)) {
        return;
      }
      stopPropagationForAgGrid(mouseEvent);
      this.onExpandOrContract(mouseEvent);
    };
    GroupCellRendererCtrl2.prototype.onExpandOrContract = function(e) {
      var rowNode = this.displayedGroupNode;
      var nextExpandState = !rowNode.expanded;
      if (!nextExpandState && rowNode.sticky) {
        this.scrollToStickyNode(rowNode);
      }
      rowNode.setExpanded(nextExpandState, e);
    };
    GroupCellRendererCtrl2.prototype.scrollToStickyNode = function(rowNode) {
      var gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();
      var scrollFeature = gridBodyCtrl.getScrollFeature();
      scrollFeature.setVerticalScrollPosition(rowNode.rowTop - rowNode.stickyRowTop);
    };
    GroupCellRendererCtrl2.prototype.isExpandable = function() {
      if (this.showingValueForOpenedParent) {
        return true;
      }
      var rowNode = this.displayedGroupNode;
      var reducedLeafNode = this.columnModel.isPivotMode() && rowNode.leafGroup;
      var expandableGroup = rowNode.isExpandable() && !rowNode.footer && !reducedLeafNode;
      if (!expandableGroup) {
        return false;
      }
      var column = this.params.column;
      var displayingForOneColumnOnly = column != null && typeof column.getColDef().showRowGroup === "string";
      if (displayingForOneColumnOnly) {
        var showing = this.isShowRowGroupForThisRow();
        return showing;
      }
      return true;
    };
    GroupCellRendererCtrl2.prototype.showExpandAndContractIcons = function() {
      var _a = this, params = _a.params, displayedGroup = _a.displayedGroupNode, columnModel = _a.columnModel;
      var node = params.node;
      var isExpandable = this.isExpandable();
      if (isExpandable) {
        var expanded = this.showingValueForOpenedParent ? true : node.expanded;
        this.comp.setExpandedDisplayed(expanded);
        this.comp.setContractedDisplayed(!expanded);
      } else {
        this.comp.setExpandedDisplayed(false);
        this.comp.setContractedDisplayed(false);
      }
      var pivotMode = columnModel.isPivotMode();
      var pivotModeAndLeafGroup = pivotMode && displayedGroup.leafGroup;
      var addExpandableCss = isExpandable && !pivotModeAndLeafGroup;
      var isTotalFooterNode = node.footer && node.level === -1;
      this.comp.addOrRemoveCssClass("ag-cell-expandable", addExpandableCss);
      this.comp.addOrRemoveCssClass("ag-row-group", addExpandableCss);
      if (pivotMode) {
        this.comp.addOrRemoveCssClass("ag-pivot-leaf-group", pivotModeAndLeafGroup);
      } else if (!isTotalFooterNode) {
        this.comp.addOrRemoveCssClass("ag-row-group-leaf-indent", !addExpandableCss);
      }
    };
    GroupCellRendererCtrl2.prototype.onRowNodeIsExpandableChanged = function() {
      this.showExpandAndContractIcons();
      this.setIndent();
      this.refreshAriaExpanded();
    };
    GroupCellRendererCtrl2.prototype.setupIndent = function() {
      var node = this.params.node;
      var suppressPadding = this.params.suppressPadding;
      if (!suppressPadding) {
        this.addManagedListener(node, RowNode.EVENT_UI_LEVEL_CHANGED, this.setIndent.bind(this));
        this.setIndent();
      }
    };
    GroupCellRendererCtrl2.prototype.setIndent = function() {
      if (this.gridOptionsService.get("groupHideOpenParents")) {
        return;
      }
      var params = this.params;
      var rowNode = params.node;
      var fullWithRow = !!params.colDef;
      var treeData = this.gridOptionsService.get("treeData");
      var manyDimensionThisColumn = !fullWithRow || treeData || params.colDef.showRowGroup === true;
      var paddingCount = manyDimensionThisColumn ? rowNode.uiLevel : 0;
      if (this.indentClass) {
        this.comp.addOrRemoveCssClass(this.indentClass, false);
      }
      this.indentClass = "ag-row-group-indent-" + paddingCount;
      this.comp.addOrRemoveCssClass(this.indentClass, true);
    };
    GroupCellRendererCtrl2.prototype.addFullWidthRowDraggerIfNeeded = function() {
      var _this = this;
      if (!this.params.fullWidth || !this.params.rowDrag) {
        return;
      }
      var rowDragComp = new RowDragComp(function() {
        return _this.params.value;
      }, this.params.node);
      this.createManagedBean(rowDragComp, this.context);
      this.eGui.insertAdjacentElement("afterbegin", rowDragComp.getGui());
    };
    GroupCellRendererCtrl2.prototype.isUserWantsSelected = function() {
      var paramsCheckbox = this.params.checkbox;
      return typeof paramsCheckbox === "function" || paramsCheckbox === true;
    };
    GroupCellRendererCtrl2.prototype.addCheckboxIfNeeded = function() {
      var _this = this;
      var rowNode = this.displayedGroupNode;
      var checkboxNeeded = this.isUserWantsSelected() && // footers cannot be selected
      !rowNode.footer && // pinned rows cannot be selected
      !rowNode.rowPinned && // details cannot be selected
      !rowNode.detail;
      if (checkboxNeeded) {
        var cbSelectionComponent_1 = new CheckboxSelectionComponent();
        this.getContext().createBean(cbSelectionComponent_1);
        cbSelectionComponent_1.init({
          rowNode: this.params.node,
          column: this.params.column,
          overrides: {
            isVisible: this.params.checkbox,
            callbackParams: this.params,
            removeHidden: true
          }
        });
        this.eCheckbox.appendChild(cbSelectionComponent_1.getGui());
        this.addDestroyFunc(function() {
          return _this.getContext().destroyBean(cbSelectionComponent_1);
        });
      }
      this.comp.setCheckboxVisible(checkboxNeeded);
    };
    GroupCellRendererCtrl2.prototype.onKeyDown = function(event) {
      var isEnterKey = event.key === KeyCode.ENTER;
      if (!isEnterKey || this.params.suppressEnterExpand) {
        return;
      }
      var cellEditable = this.params.column && this.params.column.isCellEditable(this.params.node);
      if (cellEditable) {
        return;
      }
      this.onExpandOrContract(event);
    };
    GroupCellRendererCtrl2.prototype.onCellDblClicked = function(mouseEvent) {
      if (isStopPropagationForAgGrid(mouseEvent)) {
        return;
      }
      var targetIsExpandIcon = isElementInEventPath(this.eExpanded, mouseEvent) || isElementInEventPath(this.eContracted, mouseEvent);
      if (!targetIsExpandIcon) {
        this.onExpandOrContract(mouseEvent);
      }
    };
    __decorate$2f([
      Autowired("expressionService")
    ], GroupCellRendererCtrl2.prototype, "expressionService", void 0);
    __decorate$2f([
      Autowired("valueFormatterService")
    ], GroupCellRendererCtrl2.prototype, "valueFormatterService", void 0);
    __decorate$2f([
      Autowired("columnModel")
    ], GroupCellRendererCtrl2.prototype, "columnModel", void 0);
    __decorate$2f([
      Autowired("userComponentFactory")
    ], GroupCellRendererCtrl2.prototype, "userComponentFactory", void 0);
    __decorate$2f([
      Autowired("ctrlsService")
    ], GroupCellRendererCtrl2.prototype, "ctrlsService", void 0);
    return GroupCellRendererCtrl2;
  }(BeanStub)
);
var __extends$2u = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2e = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var GroupCellRenderer = (
  /** @class */
  function(_super) {
    __extends$2u(GroupCellRenderer2, _super);
    function GroupCellRenderer2() {
      return _super.call(this, GroupCellRenderer2.TEMPLATE) || this;
    }
    GroupCellRenderer2.prototype.init = function(params) {
      var _this = this;
      var compProxy = {
        setInnerRenderer: function(compDetails, valueToDisplay) {
          return _this.setRenderDetails(compDetails, valueToDisplay);
        },
        setChildCount: function(count) {
          return _this.eChildCount.textContent = count;
        },
        addOrRemoveCssClass: function(cssClass, value) {
          return _this.addOrRemoveCssClass(cssClass, value);
        },
        setContractedDisplayed: function(expanded) {
          return setDisplayed(_this.eContracted, expanded);
        },
        setExpandedDisplayed: function(expanded) {
          return setDisplayed(_this.eExpanded, expanded);
        },
        setCheckboxVisible: function(visible) {
          return _this.eCheckbox.classList.toggle("ag-invisible", !visible);
        }
      };
      var ctrl = this.createManagedBean(new GroupCellRendererCtrl());
      var fullWidth = !params.colDef;
      var eGui = this.getGui();
      ctrl.init(compProxy, eGui, this.eCheckbox, this.eExpanded, this.eContracted, this.constructor, params);
      if (fullWidth) {
        setAriaRole(eGui, ctrl.getCellAriaRole());
      }
    };
    GroupCellRenderer2.prototype.setRenderDetails = function(compDetails, valueToDisplay) {
      var _this = this;
      if (compDetails) {
        var componentPromise = compDetails.newAgStackInstance();
        if (!componentPromise) {
          return;
        }
        componentPromise.then(function(comp) {
          if (!comp) {
            return;
          }
          var destroyComp = function() {
            return _this.context.destroyBean(comp);
          };
          if (_this.isAlive()) {
            _this.eValue.appendChild(comp.getGui());
            _this.addDestroyFunc(destroyComp);
          } else {
            destroyComp();
          }
        });
      } else {
        this.eValue.innerText = valueToDisplay;
      }
    };
    GroupCellRenderer2.prototype.destroy = function() {
      this.getContext().destroyBean(this.innerCellRenderer);
      _super.prototype.destroy.call(this);
    };
    GroupCellRenderer2.prototype.refresh = function() {
      return false;
    };
    GroupCellRenderer2.TEMPLATE = '<span class="ag-cell-wrapper">\n            <span class="ag-group-expanded" ref="eExpanded"></span>\n            <span class="ag-group-contracted" ref="eContracted"></span>\n            <span class="ag-group-checkbox ag-invisible" ref="eCheckbox"></span>\n            <span class="ag-group-value" ref="eValue"></span>\n            <span class="ag-group-child-count" ref="eChildCount"></span>\n        </span>';
    __decorate$2e([
      RefSelector("eExpanded")
    ], GroupCellRenderer2.prototype, "eExpanded", void 0);
    __decorate$2e([
      RefSelector("eContracted")
    ], GroupCellRenderer2.prototype, "eContracted", void 0);
    __decorate$2e([
      RefSelector("eCheckbox")
    ], GroupCellRenderer2.prototype, "eCheckbox", void 0);
    __decorate$2e([
      RefSelector("eValue")
    ], GroupCellRenderer2.prototype, "eValue", void 0);
    __decorate$2e([
      RefSelector("eChildCount")
    ], GroupCellRenderer2.prototype, "eChildCount", void 0);
    return GroupCellRenderer2;
  }(Component2)
);
var __extends$2t = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2d = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var LoadingCellRenderer = (
  /** @class */
  function(_super) {
    __extends$2t(LoadingCellRenderer2, _super);
    function LoadingCellRenderer2() {
      return _super.call(this, LoadingCellRenderer2.TEMPLATE) || this;
    }
    LoadingCellRenderer2.prototype.init = function(params) {
      params.node.failedLoad ? this.setupFailed() : this.setupLoading();
    };
    LoadingCellRenderer2.prototype.setupFailed = function() {
      var localeTextFunc = this.localeService.getLocaleTextFunc();
      this.eLoadingText.innerText = localeTextFunc("loadingError", "ERR");
    };
    LoadingCellRenderer2.prototype.setupLoading = function() {
      var eLoadingIcon = createIconNoSpan("groupLoading", this.gridOptionsService, null);
      if (eLoadingIcon) {
        this.eLoadingIcon.appendChild(eLoadingIcon);
      }
      var localeTextFunc = this.localeService.getLocaleTextFunc();
      this.eLoadingText.innerText = localeTextFunc("loadingOoo", "Loading");
    };
    LoadingCellRenderer2.prototype.refresh = function(params) {
      return false;
    };
    LoadingCellRenderer2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
    };
    LoadingCellRenderer2.TEMPLATE = '<div class="ag-loading">\n            <span class="ag-loading-icon" ref="eLoadingIcon"></span>\n            <span class="ag-loading-text" ref="eLoadingText"></span>\n        </div>';
    __decorate$2d([
      RefSelector("eLoadingIcon")
    ], LoadingCellRenderer2.prototype, "eLoadingIcon", void 0);
    __decorate$2d([
      RefSelector("eLoadingText")
    ], LoadingCellRenderer2.prototype, "eLoadingText", void 0);
    return LoadingCellRenderer2;
  }(Component2)
);
var __extends$2s = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var LoadingOverlayComponent$1 = (
  /** @class */
  function(_super) {
    __extends$2s(LoadingOverlayComponent2, _super);
    function LoadingOverlayComponent2() {
      return _super.call(this) || this;
    }
    LoadingOverlayComponent2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
    };
    LoadingOverlayComponent2.prototype.init = function(params) {
      var _this = this;
      var customTemplate = this.gridOptionsService.get("overlayLoadingTemplate");
      this.setTemplate(customTemplate !== null && customTemplate !== void 0 ? customTemplate : LoadingOverlayComponent2.DEFAULT_LOADING_OVERLAY_TEMPLATE);
      if (!customTemplate) {
        var localeTextFunc_1 = this.localeService.getLocaleTextFunc();
        setTimeout(function() {
          _this.getGui().textContent = localeTextFunc_1("loadingOoo", "Loading...");
        });
      }
    };
    LoadingOverlayComponent2.DEFAULT_LOADING_OVERLAY_TEMPLATE = '<span aria-live="polite" aria-atomic="true" class="ag-overlay-loading-center"></span>';
    return LoadingOverlayComponent2;
  }(Component2)
);
var __extends$2r = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var NoRowsOverlayComponent$1 = (
  /** @class */
  function(_super) {
    __extends$2r(NoRowsOverlayComponent2, _super);
    function NoRowsOverlayComponent2() {
      return _super.call(this) || this;
    }
    NoRowsOverlayComponent2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
    };
    NoRowsOverlayComponent2.prototype.init = function(params) {
      var _this = this;
      var customTemplate = this.gridOptionsService.get("overlayNoRowsTemplate");
      this.setTemplate(customTemplate !== null && customTemplate !== void 0 ? customTemplate : NoRowsOverlayComponent2.DEFAULT_NO_ROWS_TEMPLATE);
      if (!customTemplate) {
        var localeTextFunc_1 = this.localeService.getLocaleTextFunc();
        setTimeout(function() {
          _this.getGui().textContent = localeTextFunc_1("noRowsToShow", "No Rows To Show");
        });
      }
    };
    NoRowsOverlayComponent2.DEFAULT_NO_ROWS_TEMPLATE = '<span class="ag-overlay-no-rows-center"></span>';
    return NoRowsOverlayComponent2;
  }(Component2)
);
var __extends$2q = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TooltipComponent$1 = (
  /** @class */
  function(_super) {
    __extends$2q(TooltipComponent2, _super);
    function TooltipComponent2() {
      return _super.call(
        this,
        /* html */
        '<div class="ag-tooltip"></div>'
      ) || this;
    }
    TooltipComponent2.prototype.init = function(params) {
      var value = params.value;
      this.getGui().textContent = escapeString(value, true);
    };
    return TooltipComponent2;
  }(PopupComponent)
);
var __extends$2p = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var NumberCellEditorInput = (
  /** @class */
  function() {
    function NumberCellEditorInput2() {
    }
    NumberCellEditorInput2.prototype.getTemplate = function() {
      return (
        /* html */
        '<ag-input-number-field class="ag-cell-editor" ref="eInput"></ag-input-number-field>'
      );
    };
    NumberCellEditorInput2.prototype.init = function(eInput, params) {
      this.eInput = eInput;
      this.params = params;
      if (params.max != null) {
        eInput.setMax(params.max);
      }
      if (params.min != null) {
        eInput.setMin(params.min);
      }
      if (params.precision != null) {
        eInput.setPrecision(params.precision);
      }
      if (params.step != null) {
        eInput.setStep(params.step);
      }
      var inputEl = eInput.getInputElement();
      if (params.preventStepping) {
        eInput.addManagedListener(inputEl, "keydown", this.preventStepping);
      } else if (params.showStepperButtons) {
        inputEl.classList.add("ag-number-field-input-stepper");
      }
    };
    NumberCellEditorInput2.prototype.preventStepping = function(e) {
      if (e.key === KeyCode.UP || e.key === KeyCode.DOWN) {
        e.preventDefault();
      }
    };
    NumberCellEditorInput2.prototype.getValue = function() {
      var value = this.eInput.getValue();
      if (!exists(value) && !exists(this.params.value)) {
        return this.params.value;
      }
      var parsedValue = this.params.parseValue(value);
      if (parsedValue == null) {
        return parsedValue;
      }
      if (typeof parsedValue === "string") {
        if (parsedValue === "") {
          return null;
        }
        parsedValue = Number(parsedValue);
      }
      return isNaN(parsedValue) ? null : parsedValue;
    };
    NumberCellEditorInput2.prototype.getStartValue = function() {
      return this.params.value;
    };
    return NumberCellEditorInput2;
  }()
);
var NumberCellEditor = (
  /** @class */
  function(_super) {
    __extends$2p(NumberCellEditor2, _super);
    function NumberCellEditor2() {
      return _super.call(this, new NumberCellEditorInput()) || this;
    }
    return NumberCellEditor2;
  }(SimpleCellEditor)
);
var __extends$2o = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var DateCellEditorInput = (
  /** @class */
  function() {
    function DateCellEditorInput2() {
    }
    DateCellEditorInput2.prototype.getTemplate = function() {
      return (
        /* html */
        '<ag-input-date-field class="ag-cell-editor" ref="eInput"></ag-input-date-field>'
      );
    };
    DateCellEditorInput2.prototype.init = function(eInput, params) {
      this.eInput = eInput;
      this.params = params;
      if (params.min != null) {
        eInput.setMin(params.min);
      }
      if (params.max != null) {
        eInput.setMax(params.max);
      }
      if (params.step != null) {
        eInput.setStep(params.step);
      }
    };
    DateCellEditorInput2.prototype.getValue = function() {
      var value = this.eInput.getDate();
      if (!exists(value) && !exists(this.params.value)) {
        return this.params.value;
      }
      return value !== null && value !== void 0 ? value : null;
    };
    DateCellEditorInput2.prototype.getStartValue = function() {
      var value = this.params.value;
      if (!(value instanceof Date)) {
        return void 0;
      }
      return serialiseDate(value, false);
    };
    return DateCellEditorInput2;
  }()
);
var DateCellEditor = (
  /** @class */
  function(_super) {
    __extends$2o(DateCellEditor2, _super);
    function DateCellEditor2() {
      return _super.call(this, new DateCellEditorInput()) || this;
    }
    return DateCellEditor2;
  }(SimpleCellEditor)
);
var __extends$2n = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2c = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DateStringCellEditorInput = (
  /** @class */
  function() {
    function DateStringCellEditorInput2(getDataTypeService) {
      this.getDataTypeService = getDataTypeService;
    }
    DateStringCellEditorInput2.prototype.getTemplate = function() {
      return (
        /* html */
        '<ag-input-date-field class="ag-cell-editor" ref="eInput"></ag-input-date-field>'
      );
    };
    DateStringCellEditorInput2.prototype.init = function(eInput, params) {
      this.eInput = eInput;
      this.params = params;
      if (params.min != null) {
        eInput.setMin(params.min);
      }
      if (params.max != null) {
        eInput.setMax(params.max);
      }
      if (params.step != null) {
        eInput.setStep(params.step);
      }
    };
    DateStringCellEditorInput2.prototype.getValue = function() {
      var value = this.formatDate(this.eInput.getDate());
      if (!exists(value) && !exists(this.params.value)) {
        return this.params.value;
      }
      return this.params.parseValue(value !== null && value !== void 0 ? value : "");
    };
    DateStringCellEditorInput2.prototype.getStartValue = function() {
      var _a, _b;
      return serialiseDate((_b = this.parseDate((_a = this.params.value) !== null && _a !== void 0 ? _a : void 0)) !== null && _b !== void 0 ? _b : null, false);
    };
    DateStringCellEditorInput2.prototype.parseDate = function(value) {
      return this.getDataTypeService().getDateParserFunction()(value);
    };
    DateStringCellEditorInput2.prototype.formatDate = function(value) {
      return this.getDataTypeService().getDateFormatterFunction()(value);
    };
    return DateStringCellEditorInput2;
  }()
);
var DateStringCellEditor = (
  /** @class */
  function(_super) {
    __extends$2n(DateStringCellEditor2, _super);
    function DateStringCellEditor2() {
      var _this = _super.call(this, new DateStringCellEditorInput(function() {
        return _this.dataTypeService;
      })) || this;
      return _this;
    }
    __decorate$2c([
      Autowired("dataTypeService")
    ], DateStringCellEditor2.prototype, "dataTypeService", void 0);
    return DateStringCellEditor2;
  }(SimpleCellEditor)
);
var __extends$2m = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2b = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CheckboxCellRenderer = (
  /** @class */
  function(_super) {
    __extends$2m(CheckboxCellRenderer2, _super);
    function CheckboxCellRenderer2() {
      return _super.call(this, CheckboxCellRenderer2.TEMPLATE) || this;
    }
    CheckboxCellRenderer2.prototype.init = function(params) {
      var _this = this;
      this.params = params;
      this.updateCheckbox(params);
      var inputEl = this.eCheckbox.getInputElement();
      inputEl.setAttribute("tabindex", "-1");
      setAriaLive(inputEl, "polite");
      this.addManagedListener(inputEl, "click", function(event) {
        stopPropagationForAgGrid(event);
        if (_this.eCheckbox.isDisabled()) {
          return;
        }
        var isSelected = _this.eCheckbox.getValue();
        _this.onCheckboxChanged(isSelected);
      });
      this.addManagedListener(inputEl, "dblclick", function(event) {
        stopPropagationForAgGrid(event);
      });
      var eDocument = this.gridOptionsService.getDocument();
      this.addManagedListener(this.params.eGridCell, "keydown", function(event) {
        if (event.key === KeyCode.SPACE && !_this.eCheckbox.isDisabled()) {
          if (_this.params.eGridCell === eDocument.activeElement) {
            _this.eCheckbox.toggle();
          }
          var isSelected = _this.eCheckbox.getValue();
          _this.onCheckboxChanged(isSelected);
          event.preventDefault();
        }
      });
    };
    CheckboxCellRenderer2.prototype.refresh = function(params) {
      this.params = params;
      this.updateCheckbox(params);
      return true;
    };
    CheckboxCellRenderer2.prototype.updateCheckbox = function(params) {
      var _a, _b, _c;
      var isSelected;
      var displayed = true;
      if (params.node.group && params.column) {
        var colId = params.column.getColId();
        if (colId.startsWith(GROUP_AUTO_COLUMN_ID)) {
          isSelected = params.value == null || params.value === "" ? void 0 : params.value === "true";
        } else if (params.node.aggData && params.node.aggData[colId] !== void 0) {
          isSelected = (_a = params.value) !== null && _a !== void 0 ? _a : void 0;
        } else {
          displayed = false;
        }
      } else {
        isSelected = (_b = params.value) !== null && _b !== void 0 ? _b : void 0;
      }
      if (!displayed) {
        this.eCheckbox.setDisplayed(false);
        return;
      }
      this.eCheckbox.setValue(isSelected);
      var disabled = params.disabled != null ? params.disabled : !((_c = params.column) === null || _c === void 0 ? void 0 : _c.isCellEditable(params.node));
      this.eCheckbox.setDisabled(disabled);
      var translate = this.localeService.getLocaleTextFunc();
      var stateName = getAriaCheckboxStateName(translate, isSelected);
      var ariaLabel = disabled ? stateName : "".concat(translate("ariaToggleCellValue", "Press SPACE to toggle cell value"), " (").concat(stateName, ")");
      this.eCheckbox.setInputAriaLabel(ariaLabel);
    };
    CheckboxCellRenderer2.prototype.onCheckboxChanged = function(isSelected) {
      var _a = this.params, column = _a.column, node = _a.node, rowIndex = _a.rowIndex, value = _a.value;
      var eventStarted = {
        type: Events.EVENT_CELL_EDITING_STARTED,
        column,
        colDef: column === null || column === void 0 ? void 0 : column.getColDef(),
        data: node.data,
        node,
        rowIndex,
        rowPinned: node.rowPinned,
        value
      };
      this.eventService.dispatchEvent(eventStarted);
      var valueChanged = this.params.node.setDataValue(this.params.column, isSelected, "edit");
      var eventStopped = {
        type: Events.EVENT_CELL_EDITING_STOPPED,
        column,
        colDef: column === null || column === void 0 ? void 0 : column.getColDef(),
        data: node.data,
        node,
        rowIndex,
        rowPinned: node.rowPinned,
        value,
        oldValue: value,
        newValue: isSelected,
        valueChanged
      };
      this.eventService.dispatchEvent(eventStopped);
    };
    CheckboxCellRenderer2.TEMPLATE = '\n        <div class="ag-cell-wrapper ag-checkbox-cell" role="presentation">\n            <ag-checkbox role="presentation" ref="eCheckbox"></ag-checkbox>\n        </div>';
    __decorate$2b([
      RefSelector("eCheckbox")
    ], CheckboxCellRenderer2.prototype, "eCheckbox", void 0);
    return CheckboxCellRenderer2;
  }(Component2)
);
var __extends$2l = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2a = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CheckboxCellEditor = (
  /** @class */
  function(_super) {
    __extends$2l(CheckboxCellEditor2, _super);
    function CheckboxCellEditor2() {
      return _super.call(
        this,
        /* html */
        '\n            <div class="ag-cell-wrapper ag-cell-edit-wrapper ag-checkbox-edit">\n                <ag-checkbox role="presentation" ref="eCheckbox"></ag-checkbox>\n            </div>'
      ) || this;
    }
    CheckboxCellEditor2.prototype.init = function(params) {
      var _this = this;
      var _a;
      this.params = params;
      var isSelected = (_a = params.value) !== null && _a !== void 0 ? _a : void 0;
      this.eCheckbox.setValue(isSelected);
      var inputEl = this.eCheckbox.getInputElement();
      inputEl.setAttribute("tabindex", "-1");
      this.setAriaLabel(isSelected);
      this.addManagedListener(this.eCheckbox, Events.EVENT_FIELD_VALUE_CHANGED, function(event) {
        return _this.setAriaLabel(event.selected);
      });
    };
    CheckboxCellEditor2.prototype.getValue = function() {
      return this.eCheckbox.getValue();
    };
    CheckboxCellEditor2.prototype.focusIn = function() {
      this.eCheckbox.getFocusableElement().focus();
    };
    CheckboxCellEditor2.prototype.afterGuiAttached = function() {
      if (this.params.cellStartedEdit) {
        this.focusIn();
      }
    };
    CheckboxCellEditor2.prototype.isPopup = function() {
      return false;
    };
    CheckboxCellEditor2.prototype.setAriaLabel = function(isSelected) {
      var translate = this.localeService.getLocaleTextFunc();
      var stateName = getAriaCheckboxStateName(translate, isSelected);
      var ariaLabel = translate("ariaToggleCellValue", "Press SPACE to toggle cell value");
      this.eCheckbox.setInputAriaLabel("".concat(ariaLabel, " (").concat(stateName, ")"));
    };
    __decorate$2a([
      RefSelector("eCheckbox")
    ], CheckboxCellEditor2.prototype, "eCheckbox", void 0);
    return CheckboxCellEditor2;
  }(PopupComponent)
);
var __extends$2k = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$29 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __read$s = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$n = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var UserComponentRegistry = (
  /** @class */
  function(_super) {
    __extends$2k(UserComponentRegistry2, _super);
    function UserComponentRegistry2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.agGridDefaults = {
        //date
        agDateInput: DefaultDateComponent,
        //header
        agColumnHeader: HeaderComp,
        agColumnGroupHeader: HeaderGroupComp,
        agSortIndicator: SortIndicatorComp,
        //floating filters
        agTextColumnFloatingFilter: TextFloatingFilter,
        agNumberColumnFloatingFilter: NumberFloatingFilter,
        agDateColumnFloatingFilter: DateFloatingFilter,
        agReadOnlyFloatingFilter: ReadOnlyFloatingFilter,
        // renderers
        agAnimateShowChangeCellRenderer: AnimateShowChangeCellRenderer,
        agAnimateSlideCellRenderer: AnimateSlideCellRenderer,
        agGroupCellRenderer: GroupCellRenderer,
        agGroupRowRenderer: GroupCellRenderer,
        agLoadingCellRenderer: LoadingCellRenderer,
        agCheckboxCellRenderer: CheckboxCellRenderer,
        //editors
        agCellEditor: TextCellEditor,
        agTextCellEditor: TextCellEditor,
        agNumberCellEditor: NumberCellEditor,
        agDateCellEditor: DateCellEditor,
        agDateStringCellEditor: DateStringCellEditor,
        agSelectCellEditor: SelectCellEditor,
        agLargeTextCellEditor: LargeTextCellEditor,
        agCheckboxCellEditor: CheckboxCellEditor,
        //filter
        agTextColumnFilter: TextFilter,
        agNumberColumnFilter: NumberFilter,
        agDateColumnFilter: DateFilter,
        //overlays
        agLoadingOverlay: LoadingOverlayComponent$1,
        agNoRowsOverlay: NoRowsOverlayComponent$1,
        // tooltips
        agTooltipComponent: TooltipComponent$1
      };
      _this.enterpriseAgDefaultCompsModule = {
        agSetColumnFilter: ModuleNames.SetFilterModule,
        agSetColumnFloatingFilter: ModuleNames.SetFilterModule,
        agMultiColumnFilter: ModuleNames.MultiFilterModule,
        agMultiColumnFloatingFilter: ModuleNames.MultiFilterModule,
        agGroupColumnFilter: ModuleNames.RowGroupingModule,
        agGroupColumnFloatingFilter: ModuleNames.RowGroupingModule,
        agRichSelect: ModuleNames.RichSelectModule,
        agRichSelectCellEditor: ModuleNames.RichSelectModule,
        agDetailCellRenderer: ModuleNames.MasterDetailModule,
        agSparklineCellRenderer: ModuleNames.SparklinesModule
      };
      _this.jsComps = {};
      return _this;
    }
    UserComponentRegistry2.prototype.init = function() {
      var _this = this;
      if (this.gridOptions.components != null) {
        iterateObject(this.gridOptions.components, function(key, component) {
          return _this.registerJsComponent(key, component);
        });
      }
    };
    UserComponentRegistry2.prototype.registerDefaultComponent = function(name, component) {
      if (this.agGridDefaults[name]) {
        console.error("Trying to overwrite a default component. You should call registerComponent");
        return;
      }
      this.agGridDefaults[name] = component;
    };
    UserComponentRegistry2.prototype.registerJsComponent = function(name, component) {
      this.jsComps[name] = component;
    };
    UserComponentRegistry2.prototype.retrieve = function(propertyName, name) {
      var _this = this;
      var createResult = function(component, componentFromFramework) {
        return { componentFromFramework, component };
      };
      var registeredViaFrameworkComp = this.getFrameworkOverrides().frameworkComponent(name, this.gridOptions.components);
      if (registeredViaFrameworkComp != null) {
        return createResult(registeredViaFrameworkComp, true);
      }
      var jsComponent = this.jsComps[name];
      if (jsComponent) {
        var isFwkComp = this.getFrameworkOverrides().isFrameworkComponent(jsComponent);
        return createResult(jsComponent, isFwkComp);
      }
      var defaultComponent = this.agGridDefaults[name];
      if (defaultComponent) {
        return createResult(defaultComponent, false);
      }
      var moduleForComponent = this.enterpriseAgDefaultCompsModule[name];
      if (moduleForComponent) {
        ModuleRegistry.__assertRegistered(moduleForComponent, "AG Grid '".concat(propertyName, "' component: ").concat(name), this.context.getGridId());
      } else {
        doOnce(function() {
          _this.warnAboutMissingComponent(propertyName, name);
        }, "MissingComp" + name);
      }
      return null;
    };
    UserComponentRegistry2.prototype.warnAboutMissingComponent = function(propertyName, componentName) {
      var validComponents = __spreadArray$n(__spreadArray$n([], __read$s(Object.keys(this.agGridDefaults).filter(function(k) {
        return !["agCellEditor", "agGroupRowRenderer", "agSortIndicator"].includes(k);
      })), false), __read$s(Object.keys(this.jsComps)), false);
      var suggestions = fuzzySuggestions(componentName, validComponents, true, 0.8).values;
      console.warn("AG Grid: Could not find '".concat(componentName, `' component. It was configured as "`).concat(propertyName, ": '").concat(componentName, `'" but it wasn't found in the list of registered components.`));
      if (suggestions.length > 0) {
        console.warn("         Did you mean: [".concat(suggestions.slice(0, 3), "]?"));
      }
      console.warn("If using a custom component check it has been registered as described in: ".concat(this.getFrameworkOverrides().getDocLink("components/")));
    };
    __decorate$29([
      Autowired("gridOptions")
    ], UserComponentRegistry2.prototype, "gridOptions", void 0);
    __decorate$29([
      PostConstruct
    ], UserComponentRegistry2.prototype, "init", null);
    UserComponentRegistry2 = __decorate$29([
      Bean("userComponentRegistry")
    ], UserComponentRegistry2);
    return UserComponentRegistry2;
  }(BeanStub)
);
var DateComponent = {
  propertyName: "dateComponent",
  cellRenderer: false
};
var HeaderComponent = {
  propertyName: "headerComponent",
  cellRenderer: false
};
var HeaderGroupComponent = {
  propertyName: "headerGroupComponent",
  cellRenderer: false
};
var CellRendererComponent = {
  propertyName: "cellRenderer",
  cellRenderer: true
};
var CellEditorComponent = {
  propertyName: "cellEditor",
  cellRenderer: false
};
var InnerRendererComponent = {
  propertyName: "innerRenderer",
  cellRenderer: true
};
var LoadingOverlayComponent = {
  propertyName: "loadingOverlayComponent",
  cellRenderer: false
};
var NoRowsOverlayComponent = {
  propertyName: "noRowsOverlayComponent",
  cellRenderer: false
};
var TooltipComponent = {
  propertyName: "tooltipComponent",
  cellRenderer: false
};
var FilterComponent = {
  propertyName: "filter",
  cellRenderer: false
};
var FloatingFilterComponent = {
  propertyName: "floatingFilterComponent",
  cellRenderer: false
};
var ToolPanelComponent = {
  propertyName: "toolPanel",
  cellRenderer: false
};
var StatusPanelComponent = {
  propertyName: "statusPanel",
  cellRenderer: false
};
var FullWidth = {
  propertyName: "fullWidthCellRenderer",
  cellRenderer: true
};
var FullWidthLoading = {
  propertyName: "loadingCellRenderer",
  cellRenderer: true
};
var FullWidthGroup = {
  propertyName: "groupRowRenderer",
  cellRenderer: true
};
var FullWidthDetail = {
  propertyName: "detailCellRenderer",
  cellRenderer: true
};
var FloatingFilterMapper = (
  /** @class */
  function() {
    function FloatingFilterMapper2() {
    }
    FloatingFilterMapper2.getFloatingFilterType = function(filterType) {
      return this.filterToFloatingFilterMapping[filterType];
    };
    FloatingFilterMapper2.filterToFloatingFilterMapping = {
      set: "agSetColumnFloatingFilter",
      agSetColumnFilter: "agSetColumnFloatingFilter",
      multi: "agMultiColumnFloatingFilter",
      agMultiColumnFilter: "agMultiColumnFloatingFilter",
      group: "agGroupColumnFloatingFilter",
      agGroupColumnFilter: "agGroupColumnFloatingFilter",
      number: "agNumberColumnFloatingFilter",
      agNumberColumnFilter: "agNumberColumnFloatingFilter",
      date: "agDateColumnFloatingFilter",
      agDateColumnFilter: "agDateColumnFloatingFilter",
      text: "agTextColumnFloatingFilter",
      agTextColumnFilter: "agTextColumnFloatingFilter"
    };
    return FloatingFilterMapper2;
  }()
);
var __extends$2j = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$28 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var UserComponentFactory = (
  /** @class */
  function(_super) {
    __extends$2j(UserComponentFactory2, _super);
    function UserComponentFactory2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    UserComponentFactory2.prototype.getHeaderCompDetails = function(colDef, params) {
      return this.getCompDetails(colDef, HeaderComponent, "agColumnHeader", params);
    };
    UserComponentFactory2.prototype.getHeaderGroupCompDetails = function(params) {
      var colGroupDef = params.columnGroup.getColGroupDef();
      return this.getCompDetails(colGroupDef, HeaderGroupComponent, "agColumnGroupHeader", params);
    };
    UserComponentFactory2.prototype.getFullWidthCellRendererDetails = function(params) {
      return this.getCompDetails(this.gridOptions, FullWidth, null, params, true);
    };
    UserComponentFactory2.prototype.getFullWidthLoadingCellRendererDetails = function(params) {
      return this.getCompDetails(this.gridOptions, FullWidthLoading, "agLoadingCellRenderer", params, true);
    };
    UserComponentFactory2.prototype.getFullWidthGroupCellRendererDetails = function(params) {
      return this.getCompDetails(this.gridOptions, FullWidthGroup, "agGroupRowRenderer", params, true);
    };
    UserComponentFactory2.prototype.getFullWidthDetailCellRendererDetails = function(params) {
      return this.getCompDetails(this.gridOptions, FullWidthDetail, "agDetailCellRenderer", params, true);
    };
    UserComponentFactory2.prototype.getInnerRendererDetails = function(def, params) {
      return this.getCompDetails(def, InnerRendererComponent, null, params);
    };
    UserComponentFactory2.prototype.getFullWidthGroupRowInnerCellRenderer = function(def, params) {
      return this.getCompDetails(def, InnerRendererComponent, null, params);
    };
    UserComponentFactory2.prototype.getCellRendererDetails = function(def, params) {
      return this.getCompDetails(def, CellRendererComponent, null, params);
    };
    UserComponentFactory2.prototype.getCellEditorDetails = function(def, params) {
      return this.getCompDetails(def, CellEditorComponent, "agCellEditor", params, true);
    };
    UserComponentFactory2.prototype.getFilterDetails = function(def, params, defaultFilter) {
      return this.getCompDetails(def, FilterComponent, defaultFilter, params, true);
    };
    UserComponentFactory2.prototype.getDateCompDetails = function(params) {
      return this.getCompDetails(this.gridOptions, DateComponent, "agDateInput", params, true);
    };
    UserComponentFactory2.prototype.getLoadingOverlayCompDetails = function(params) {
      return this.getCompDetails(this.gridOptions, LoadingOverlayComponent, "agLoadingOverlay", params, true);
    };
    UserComponentFactory2.prototype.getNoRowsOverlayCompDetails = function(params) {
      return this.getCompDetails(this.gridOptions, NoRowsOverlayComponent, "agNoRowsOverlay", params, true);
    };
    UserComponentFactory2.prototype.getTooltipCompDetails = function(params) {
      return this.getCompDetails(params.colDef, TooltipComponent, "agTooltipComponent", params, true);
    };
    UserComponentFactory2.prototype.getSetFilterCellRendererDetails = function(def, params) {
      return this.getCompDetails(def, CellRendererComponent, null, params);
    };
    UserComponentFactory2.prototype.getFloatingFilterCompDetails = function(def, params, defaultFloatingFilter) {
      return this.getCompDetails(def, FloatingFilterComponent, defaultFloatingFilter, params);
    };
    UserComponentFactory2.prototype.getToolPanelCompDetails = function(toolPanelDef, params) {
      return this.getCompDetails(toolPanelDef, ToolPanelComponent, null, params, true);
    };
    UserComponentFactory2.prototype.getStatusPanelCompDetails = function(def, params) {
      return this.getCompDetails(def, StatusPanelComponent, null, params, true);
    };
    UserComponentFactory2.prototype.getCompDetails = function(defObject, type, defaultName, params, mandatory) {
      var _this = this;
      if (mandatory === void 0) {
        mandatory = false;
      }
      var propertyName = type.propertyName, cellRenderer = type.cellRenderer;
      var _a = this.getCompKeys(defObject, type, params), compName = _a.compName, jsComp = _a.jsComp, fwComp = _a.fwComp, paramsFromSelector = _a.paramsFromSelector, popupFromSelector = _a.popupFromSelector, popupPositionFromSelector = _a.popupPositionFromSelector;
      var lookupFromRegistry = function(key) {
        var item = _this.userComponentRegistry.retrieve(propertyName, key);
        if (item) {
          jsComp = !item.componentFromFramework ? item.component : void 0;
          fwComp = item.componentFromFramework ? item.component : void 0;
        }
      };
      if (compName != null) {
        lookupFromRegistry(compName);
      }
      if (jsComp == null && fwComp == null && defaultName != null) {
        lookupFromRegistry(defaultName);
      }
      if (jsComp && cellRenderer && !this.agComponentUtils.doesImplementIComponent(jsComp)) {
        jsComp = this.agComponentUtils.adaptFunction(propertyName, jsComp);
      }
      if (!jsComp && !fwComp) {
        if (mandatory) {
          console.error("AG Grid: Could not find component ".concat(compName, ", did you forget to configure this component?"));
        }
        return;
      }
      var paramsMerged = this.mergeParamsWithApplicationProvidedParams(defObject, type, params, paramsFromSelector);
      var componentFromFramework = jsComp == null;
      var componentClass = jsComp ? jsComp : fwComp;
      return {
        componentFromFramework,
        componentClass,
        params: paramsMerged,
        type,
        popupFromSelector,
        popupPositionFromSelector,
        newAgStackInstance: function() {
          return _this.newAgStackInstance(componentClass, componentFromFramework, paramsMerged, type);
        }
      };
    };
    UserComponentFactory2.prototype.getCompKeys = function(defObject, type, params) {
      var _this = this;
      var propertyName = type.propertyName;
      var compName;
      var jsComp;
      var fwComp;
      var paramsFromSelector;
      var popupFromSelector;
      var popupPositionFromSelector;
      if (defObject) {
        var defObjectAny = defObject;
        var selectorFunc = defObjectAny[propertyName + "Selector"];
        var selectorRes = selectorFunc ? selectorFunc(params) : null;
        var assignComp = function(providedJsComp) {
          if (typeof providedJsComp === "string") {
            compName = providedJsComp;
          } else if (providedJsComp != null && providedJsComp !== true) {
            var isFwkComp = _this.getFrameworkOverrides().isFrameworkComponent(providedJsComp);
            if (isFwkComp) {
              fwComp = providedJsComp;
            } else {
              jsComp = providedJsComp;
            }
          }
        };
        if (selectorRes) {
          assignComp(selectorRes.component);
          paramsFromSelector = selectorRes.params;
          popupFromSelector = selectorRes.popup;
          popupPositionFromSelector = selectorRes.popupPosition;
        } else {
          assignComp(defObjectAny[propertyName]);
        }
      }
      return { compName, jsComp, fwComp, paramsFromSelector, popupFromSelector, popupPositionFromSelector };
    };
    UserComponentFactory2.prototype.newAgStackInstance = function(ComponentClass, componentFromFramework, params, type) {
      var propertyName = type.propertyName;
      var jsComponent = !componentFromFramework;
      var instance;
      if (jsComponent) {
        instance = new ComponentClass();
      } else {
        var thisComponentConfig = this.componentMetadataProvider.retrieve(propertyName);
        instance = this.frameworkComponentWrapper.wrap(ComponentClass, thisComponentConfig.mandatoryMethodList, thisComponentConfig.optionalMethodList, type);
      }
      var deferredInit = this.initComponent(instance, params);
      if (deferredInit == null) {
        return AgPromise.resolve(instance);
      }
      return deferredInit.then(function() {
        return instance;
      });
    };
    UserComponentFactory2.prototype.mergeParamsWithApplicationProvidedParams = function(defObject, type, paramsFromGrid, paramsFromSelector) {
      if (paramsFromSelector === void 0) {
        paramsFromSelector = null;
      }
      var params = this.gridOptionsService.getGridCommonParams();
      mergeDeep(params, paramsFromGrid);
      var defObjectAny = defObject;
      var userParams = defObjectAny && defObjectAny[type.propertyName + "Params"];
      if (typeof userParams === "function") {
        var userParamsFromFunc = userParams(paramsFromGrid);
        mergeDeep(params, userParamsFromFunc);
      } else if (typeof userParams === "object") {
        mergeDeep(params, userParams);
      }
      mergeDeep(params, paramsFromSelector);
      return params;
    };
    UserComponentFactory2.prototype.initComponent = function(component, params) {
      this.context.createBean(component);
      if (component.init == null) {
        return;
      }
      return component.init(params);
    };
    UserComponentFactory2.prototype.getDefaultFloatingFilterType = function(def, getFromDefault) {
      if (def == null) {
        return null;
      }
      var defaultFloatingFilterType = null;
      var _a = this.getCompKeys(def, FilterComponent), compName = _a.compName, jsComp = _a.jsComp, fwComp = _a.fwComp;
      if (compName) {
        defaultFloatingFilterType = FloatingFilterMapper.getFloatingFilterType(compName);
      } else {
        var usingDefaultFilter = jsComp == null && fwComp == null && def.filter === true;
        if (usingDefaultFilter) {
          defaultFloatingFilterType = getFromDefault();
        }
      }
      return defaultFloatingFilterType;
    };
    __decorate$28([
      Autowired("gridOptions")
    ], UserComponentFactory2.prototype, "gridOptions", void 0);
    __decorate$28([
      Autowired("agComponentUtils")
    ], UserComponentFactory2.prototype, "agComponentUtils", void 0);
    __decorate$28([
      Autowired("componentMetadataProvider")
    ], UserComponentFactory2.prototype, "componentMetadataProvider", void 0);
    __decorate$28([
      Autowired("userComponentRegistry")
    ], UserComponentFactory2.prototype, "userComponentRegistry", void 0);
    __decorate$28([
      Optional("frameworkComponentWrapper")
    ], UserComponentFactory2.prototype, "frameworkComponentWrapper", void 0);
    UserComponentFactory2 = __decorate$28([
      Bean("userComponentFactory")
    ], UserComponentFactory2);
    return UserComponentFactory2;
  }(BeanStub)
);
var ColDefUtil = (
  /** @class */
  function() {
    function ColDefUtil2() {
    }
    ColDefUtil2.ColDefPropertyMap = {
      headerName: void 0,
      columnGroupShow: void 0,
      headerClass: void 0,
      toolPanelClass: void 0,
      headerValueGetter: void 0,
      pivotKeys: void 0,
      groupId: void 0,
      colId: void 0,
      sort: void 0,
      initialSort: void 0,
      field: void 0,
      type: void 0,
      cellDataType: void 0,
      tooltipComponent: void 0,
      tooltipField: void 0,
      headerTooltip: void 0,
      cellClass: void 0,
      showRowGroup: void 0,
      filter: void 0,
      initialAggFunc: void 0,
      defaultAggFunc: void 0,
      aggFunc: void 0,
      pinned: void 0,
      initialPinned: void 0,
      chartDataType: void 0,
      cellAriaRole: void 0,
      cellEditorPopupPosition: void 0,
      headerGroupComponent: void 0,
      headerGroupComponentParams: void 0,
      cellStyle: void 0,
      cellRenderer: void 0,
      cellRendererParams: void 0,
      cellEditor: void 0,
      cellEditorParams: void 0,
      filterParams: void 0,
      pivotValueColumn: void 0,
      headerComponent: void 0,
      headerComponentParams: void 0,
      floatingFilterComponent: void 0,
      floatingFilterComponentParams: void 0,
      tooltipComponentParams: void 0,
      refData: void 0,
      columnsMenuParams: void 0,
      children: void 0,
      sortingOrder: void 0,
      allowedAggFuncs: void 0,
      menuTabs: void 0,
      pivotTotalColumnIds: void 0,
      cellClassRules: void 0,
      icons: void 0,
      sortIndex: void 0,
      initialSortIndex: void 0,
      flex: void 0,
      initialFlex: void 0,
      width: void 0,
      initialWidth: void 0,
      minWidth: void 0,
      maxWidth: void 0,
      rowGroupIndex: void 0,
      initialRowGroupIndex: void 0,
      pivotIndex: void 0,
      initialPivotIndex: void 0,
      suppressCellFlash: void 0,
      suppressColumnsToolPanel: void 0,
      suppressFiltersToolPanel: void 0,
      openByDefault: void 0,
      marryChildren: void 0,
      suppressStickyLabel: void 0,
      hide: void 0,
      initialHide: void 0,
      rowGroup: void 0,
      initialRowGroup: void 0,
      pivot: void 0,
      initialPivot: void 0,
      checkboxSelection: void 0,
      showDisabledCheckboxes: void 0,
      headerCheckboxSelection: void 0,
      headerCheckboxSelectionFilteredOnly: void 0,
      headerCheckboxSelectionCurrentPageOnly: void 0,
      suppressMenu: void 0,
      suppressMovable: void 0,
      lockPosition: void 0,
      lockVisible: void 0,
      lockPinned: void 0,
      unSortIcon: void 0,
      suppressSizeToFit: void 0,
      suppressAutoSize: void 0,
      enableRowGroup: void 0,
      enablePivot: void 0,
      enableValue: void 0,
      editable: void 0,
      suppressPaste: void 0,
      suppressNavigable: void 0,
      enableCellChangeFlash: void 0,
      rowDrag: void 0,
      dndSource: void 0,
      autoHeight: void 0,
      wrapText: void 0,
      sortable: void 0,
      resizable: void 0,
      singleClickEdit: void 0,
      floatingFilter: void 0,
      cellEditorPopup: void 0,
      suppressFillHandle: void 0,
      wrapHeaderText: void 0,
      autoHeaderHeight: void 0,
      dndSourceOnRowDrag: void 0,
      valueGetter: void 0,
      valueSetter: void 0,
      filterValueGetter: void 0,
      keyCreator: void 0,
      valueFormatter: void 0,
      valueParser: void 0,
      comparator: void 0,
      equals: void 0,
      pivotComparator: void 0,
      suppressKeyboardEvent: void 0,
      suppressHeaderKeyboardEvent: void 0,
      colSpan: void 0,
      rowSpan: void 0,
      getQuickFilterText: void 0,
      onCellValueChanged: void 0,
      onCellClicked: void 0,
      onCellDoubleClicked: void 0,
      onCellContextMenu: void 0,
      rowDragText: void 0,
      tooltipValueGetter: void 0,
      cellRendererSelector: void 0,
      cellEditorSelector: void 0,
      suppressSpanHeaderHeight: void 0,
      useValueFormatterForExport: void 0,
      useValueParserForImport: void 0
    };
    ColDefUtil2.ALL_PROPERTIES = Object.keys(ColDefUtil2.ColDefPropertyMap);
    return ColDefUtil2;
  }()
);
var ExcelFactoryMode;
(function(ExcelFactoryMode2) {
  ExcelFactoryMode2[ExcelFactoryMode2["SINGLE_SHEET"] = 0] = "SINGLE_SHEET";
  ExcelFactoryMode2[ExcelFactoryMode2["MULTI_SHEET"] = 1] = "MULTI_SHEET";
})(ExcelFactoryMode || (ExcelFactoryMode = {}));
var __extends$2i = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$27 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DragService = (
  /** @class */
  function(_super) {
    __extends$2i(DragService2, _super);
    function DragService2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.dragEndFunctions = [];
      _this.dragSources = [];
      return _this;
    }
    DragService2.prototype.removeAllListeners = function() {
      this.dragSources.forEach(this.removeListener.bind(this));
      this.dragSources.length = 0;
    };
    DragService2.prototype.removeListener = function(dragSourceAndListener) {
      var element = dragSourceAndListener.dragSource.eElement;
      var mouseDownListener = dragSourceAndListener.mouseDownListener;
      element.removeEventListener("mousedown", mouseDownListener);
      if (dragSourceAndListener.touchEnabled) {
        var touchStartListener = dragSourceAndListener.touchStartListener;
        element.removeEventListener("touchstart", touchStartListener, { passive: true });
      }
    };
    DragService2.prototype.removeDragSource = function(params) {
      var dragSourceAndListener = this.dragSources.find(function(item) {
        return item.dragSource === params;
      });
      if (!dragSourceAndListener) {
        return;
      }
      this.removeListener(dragSourceAndListener);
      removeFromArray(this.dragSources, dragSourceAndListener);
    };
    DragService2.prototype.isDragging = function() {
      return this.dragging;
    };
    DragService2.prototype.addDragSource = function(params) {
      var _this = this;
      var mouseListener = this.onMouseDown.bind(this, params);
      var eElement = params.eElement, includeTouch = params.includeTouch, stopPropagationForTouch = params.stopPropagationForTouch;
      eElement.addEventListener("mousedown", mouseListener);
      var touchListener = null;
      var suppressTouch = this.gridOptionsService.get("suppressTouch");
      if (includeTouch && !suppressTouch) {
        touchListener = function(touchEvent) {
          if (isFocusableFormField(touchEvent.target)) {
            return;
          }
          if (touchEvent.cancelable) {
            touchEvent.preventDefault();
            if (stopPropagationForTouch) {
              touchEvent.stopPropagation();
            }
          }
          _this.onTouchStart(params, touchEvent);
        };
        eElement.addEventListener("touchstart", touchListener, { passive: false });
      }
      this.dragSources.push({
        dragSource: params,
        mouseDownListener: mouseListener,
        touchStartListener: touchListener,
        touchEnabled: !!includeTouch
      });
    };
    DragService2.prototype.getStartTarget = function() {
      return this.startTarget;
    };
    DragService2.prototype.onTouchStart = function(params, touchEvent) {
      var _this = this;
      this.currentDragParams = params;
      this.dragging = false;
      var touch = touchEvent.touches[0];
      this.touchLastTime = touch;
      this.touchStart = touch;
      var touchMoveEvent = function(e) {
        return _this.onTouchMove(e, params.eElement);
      };
      var touchEndEvent = function(e) {
        return _this.onTouchUp(e, params.eElement);
      };
      var documentTouchMove = function(e) {
        if (e.cancelable) {
          e.preventDefault();
        }
      };
      var target = touchEvent.target;
      var events = [
        // Prevents the page document from moving while we are dragging items around.
        // preventDefault needs to be called in the touchmove listener and never inside the
        // touchstart, because using touchstart causes the click event to be cancelled on touch devices.
        { target: this.gridOptionsService.getRootNode(), type: "touchmove", listener: documentTouchMove, options: { passive: false } },
        { target, type: "touchmove", listener: touchMoveEvent, options: { passive: true } },
        { target, type: "touchend", listener: touchEndEvent, options: { passive: true } },
        { target, type: "touchcancel", listener: touchEndEvent, options: { passive: true } }
      ];
      this.addTemporaryEvents(events);
      if (params.dragStartPixels === 0) {
        this.onCommonMove(touch, this.touchStart, params.eElement);
      }
    };
    DragService2.prototype.onMouseDown = function(params, mouseEvent) {
      var _this = this;
      var e = mouseEvent;
      if (params.skipMouseEvent && params.skipMouseEvent(mouseEvent)) {
        return;
      }
      if (e._alreadyProcessedByDragService) {
        return;
      }
      e._alreadyProcessedByDragService = true;
      if (mouseEvent.button !== 0) {
        return;
      }
      if (this.shouldPreventMouseEvent(mouseEvent)) {
        mouseEvent.preventDefault();
      }
      this.currentDragParams = params;
      this.dragging = false;
      this.mouseStartEvent = mouseEvent;
      this.startTarget = mouseEvent.target;
      var mouseMoveEvent = function(event) {
        return _this.onMouseMove(event, params.eElement);
      };
      var mouseUpEvent = function(event) {
        return _this.onMouseUp(event, params.eElement);
      };
      var contextEvent = function(event) {
        return event.preventDefault();
      };
      var target = this.gridOptionsService.getRootNode();
      var events = [
        { target, type: "mousemove", listener: mouseMoveEvent },
        { target, type: "mouseup", listener: mouseUpEvent },
        { target, type: "contextmenu", listener: contextEvent }
      ];
      this.addTemporaryEvents(events);
      if (params.dragStartPixels === 0) {
        this.onMouseMove(mouseEvent, params.eElement);
      }
    };
    DragService2.prototype.addTemporaryEvents = function(events) {
      events.forEach(function(currentEvent) {
        var target = currentEvent.target, type = currentEvent.type, listener = currentEvent.listener, options = currentEvent.options;
        target.addEventListener(type, listener, options);
      });
      this.dragEndFunctions.push(function() {
        events.forEach(function(currentEvent) {
          var target = currentEvent.target, type = currentEvent.type, listener = currentEvent.listener, options = currentEvent.options;
          target.removeEventListener(type, listener, options);
        });
      });
    };
    DragService2.prototype.isEventNearStartEvent = function(currentEvent, startEvent) {
      var dragStartPixels = this.currentDragParams.dragStartPixels;
      var requiredPixelDiff = exists(dragStartPixels) ? dragStartPixels : 4;
      return areEventsNear(currentEvent, startEvent, requiredPixelDiff);
    };
    DragService2.prototype.getFirstActiveTouch = function(touchList) {
      for (var i = 0; i < touchList.length; i++) {
        if (touchList[i].identifier === this.touchStart.identifier) {
          return touchList[i];
        }
      }
      return null;
    };
    DragService2.prototype.onCommonMove = function(currentEvent, startEvent, el) {
      if (!this.dragging) {
        if (!this.dragging && this.isEventNearStartEvent(currentEvent, startEvent)) {
          return;
        }
        this.dragging = true;
        var event_1 = {
          type: Events.EVENT_DRAG_STARTED,
          target: el
        };
        this.eventService.dispatchEvent(event_1);
        this.currentDragParams.onDragStart(startEvent);
        this.currentDragParams.onDragging(startEvent);
      }
      this.currentDragParams.onDragging(currentEvent);
    };
    DragService2.prototype.onTouchMove = function(touchEvent, el) {
      var touch = this.getFirstActiveTouch(touchEvent.touches);
      if (!touch) {
        return;
      }
      this.onCommonMove(touch, this.touchStart, el);
    };
    DragService2.prototype.onMouseMove = function(mouseEvent, el) {
      var _a;
      if (isBrowserSafari()) {
        var eDocument = this.gridOptionsService.getDocument();
        (_a = eDocument.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();
      }
      if (this.shouldPreventMouseEvent(mouseEvent)) {
        mouseEvent.preventDefault();
      }
      this.onCommonMove(mouseEvent, this.mouseStartEvent, el);
    };
    DragService2.prototype.shouldPreventMouseEvent = function(mouseEvent) {
      var isEnableCellTextSelect = this.gridOptionsService.get("enableCellTextSelection");
      var isMouseMove = mouseEvent.type === "mousemove";
      return (
        // when `isEnableCellTextSelect` is `true`, we need to preventDefault on mouseMove
        // to avoid the grid text being selected while dragging components.
        isEnableCellTextSelect && isMouseMove && mouseEvent.cancelable && this.mouseEventService.isEventFromThisGrid(mouseEvent) && !this.isOverFormFieldElement(mouseEvent)
      );
    };
    DragService2.prototype.isOverFormFieldElement = function(mouseEvent) {
      var el = mouseEvent.target;
      var tagName = el === null || el === void 0 ? void 0 : el.tagName.toLocaleLowerCase();
      return !!(tagName === null || tagName === void 0 ? void 0 : tagName.match("^a$|textarea|input|select|button"));
    };
    DragService2.prototype.onTouchUp = function(touchEvent, el) {
      var touch = this.getFirstActiveTouch(touchEvent.changedTouches);
      if (!touch) {
        touch = this.touchLastTime;
      }
      this.onUpCommon(touch, el);
    };
    DragService2.prototype.onMouseUp = function(mouseEvent, el) {
      this.onUpCommon(mouseEvent, el);
    };
    DragService2.prototype.onUpCommon = function(eventOrTouch, el) {
      if (this.dragging) {
        this.dragging = false;
        this.currentDragParams.onDragStop(eventOrTouch);
        var event_2 = {
          type: Events.EVENT_DRAG_STOPPED,
          target: el
        };
        this.eventService.dispatchEvent(event_2);
      }
      this.mouseStartEvent = null;
      this.startTarget = null;
      this.touchStart = null;
      this.touchLastTime = null;
      this.currentDragParams = null;
      this.dragEndFunctions.forEach(function(func) {
        return func();
      });
      this.dragEndFunctions.length = 0;
    };
    __decorate$27([
      Autowired("mouseEventService")
    ], DragService2.prototype, "mouseEventService", void 0);
    __decorate$27([
      PreDestroy
    ], DragService2.prototype, "removeAllListeners", null);
    DragService2 = __decorate$27([
      Bean("dragService")
    ], DragService2);
    return DragService2;
  }(BeanStub)
);
var AutoScrollService = (
  /** @class */
  function() {
    function AutoScrollService2(params) {
      this.tickingInterval = null;
      this.onScrollCallback = null;
      this.scrollContainer = params.scrollContainer;
      this.scrollHorizontally = params.scrollAxis.indexOf("x") !== -1;
      this.scrollVertically = params.scrollAxis.indexOf("y") !== -1;
      this.scrollByTick = params.scrollByTick != null ? params.scrollByTick : 20;
      if (params.onScrollCallback) {
        this.onScrollCallback = params.onScrollCallback;
      }
      if (this.scrollVertically) {
        this.getVerticalPosition = params.getVerticalPosition;
        this.setVerticalPosition = params.setVerticalPosition;
      }
      if (this.scrollHorizontally) {
        this.getHorizontalPosition = params.getHorizontalPosition;
        this.setHorizontalPosition = params.setHorizontalPosition;
      }
      this.shouldSkipVerticalScroll = params.shouldSkipVerticalScroll || function() {
        return false;
      };
      this.shouldSkipHorizontalScroll = params.shouldSkipHorizontalScroll || function() {
        return false;
      };
    }
    AutoScrollService2.prototype.check = function(mouseEvent, forceSkipVerticalScroll) {
      if (forceSkipVerticalScroll === void 0) {
        forceSkipVerticalScroll = false;
      }
      var skipVerticalScroll = forceSkipVerticalScroll || this.shouldSkipVerticalScroll();
      if (skipVerticalScroll && this.shouldSkipHorizontalScroll()) {
        return;
      }
      var rect = this.scrollContainer.getBoundingClientRect();
      var scrollTick = this.scrollByTick;
      this.tickLeft = mouseEvent.clientX < rect.left + scrollTick;
      this.tickRight = mouseEvent.clientX > rect.right - scrollTick;
      this.tickUp = mouseEvent.clientY < rect.top + scrollTick && !skipVerticalScroll;
      this.tickDown = mouseEvent.clientY > rect.bottom - scrollTick && !skipVerticalScroll;
      if (this.tickLeft || this.tickRight || this.tickUp || this.tickDown) {
        this.ensureTickingStarted();
      } else {
        this.ensureCleared();
      }
    };
    AutoScrollService2.prototype.ensureTickingStarted = function() {
      if (this.tickingInterval === null) {
        this.tickingInterval = window.setInterval(this.doTick.bind(this), 100);
        this.tickCount = 0;
      }
    };
    AutoScrollService2.prototype.doTick = function() {
      this.tickCount++;
      var tickAmount;
      tickAmount = this.tickCount > 20 ? 200 : this.tickCount > 10 ? 80 : 40;
      if (this.scrollVertically) {
        var vScrollPosition = this.getVerticalPosition();
        if (this.tickUp) {
          this.setVerticalPosition(vScrollPosition - tickAmount);
        }
        if (this.tickDown) {
          this.setVerticalPosition(vScrollPosition + tickAmount);
        }
      }
      if (this.scrollHorizontally) {
        var hScrollPosition = this.getHorizontalPosition();
        if (this.tickLeft) {
          this.setHorizontalPosition(hScrollPosition - tickAmount);
        }
        if (this.tickRight) {
          this.setHorizontalPosition(hScrollPosition + tickAmount);
        }
      }
      if (this.onScrollCallback) {
        this.onScrollCallback();
      }
    };
    AutoScrollService2.prototype.ensureCleared = function() {
      if (this.tickingInterval) {
        window.clearInterval(this.tickingInterval);
        this.tickingInterval = null;
      }
    };
    return AutoScrollService2;
  }()
);
var __extends$2h = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$26 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var LIST_ITEM_HOVERED = "ag-list-item-hovered";
var VirtualListDragFeature = (
  /** @class */
  function(_super) {
    __extends$2h(VirtualListDragFeature2, _super);
    function VirtualListDragFeature2(comp, virtualList, params) {
      var _this = _super.call(this) || this;
      _this.comp = comp;
      _this.virtualList = virtualList;
      _this.params = params;
      _this.currentDragValue = null;
      _this.lastHoveredListItem = null;
      return _this;
    }
    VirtualListDragFeature2.prototype.postConstruct = function() {
      this.addManagedListener(this.params.eventSource, this.params.listItemDragStartEvent, this.listItemDragStart.bind(this));
      this.addManagedListener(this.params.eventSource, this.params.listItemDragEndEvent, this.listItemDragEnd.bind(this));
      this.createDropTarget();
      this.createAutoScrollService();
    };
    VirtualListDragFeature2.prototype.listItemDragStart = function(event) {
      this.currentDragValue = this.params.getCurrentDragValue(event);
      this.moveBlocked = this.params.isMoveBlocked(this.currentDragValue);
    };
    VirtualListDragFeature2.prototype.listItemDragEnd = function() {
      var _this = this;
      window.setTimeout(function() {
        _this.currentDragValue = null;
        _this.moveBlocked = false;
      }, 10);
    };
    VirtualListDragFeature2.prototype.createDropTarget = function() {
      var _this = this;
      var dropTarget = {
        isInterestedIn: function(type) {
          return type === _this.params.dragSourceType;
        },
        getIconName: function() {
          return _this.moveBlocked ? DragAndDropService.ICON_PINNED : DragAndDropService.ICON_MOVE;
        },
        getContainer: function() {
          return _this.comp.getGui();
        },
        onDragging: function(e) {
          return _this.onDragging(e);
        },
        onDragStop: function() {
          return _this.onDragStop();
        },
        onDragLeave: function() {
          return _this.onDragLeave();
        }
      };
      this.dragAndDropService.addDropTarget(dropTarget);
    };
    VirtualListDragFeature2.prototype.createAutoScrollService = function() {
      var virtualListGui = this.virtualList.getGui();
      this.autoScrollService = new AutoScrollService({
        scrollContainer: virtualListGui,
        scrollAxis: "y",
        getVerticalPosition: function() {
          return virtualListGui.scrollTop;
        },
        setVerticalPosition: function(position) {
          return virtualListGui.scrollTop = position;
        }
      });
    };
    VirtualListDragFeature2.prototype.onDragging = function(e) {
      if (!this.currentDragValue || this.moveBlocked) {
        return;
      }
      var hoveredListItem = this.getListDragItem(e);
      var comp = this.virtualList.getComponentAt(hoveredListItem.rowIndex);
      if (!comp) {
        return;
      }
      var el = comp.getGui().parentElement;
      if (this.lastHoveredListItem && this.lastHoveredListItem.rowIndex === hoveredListItem.rowIndex && this.lastHoveredListItem.position === hoveredListItem.position) {
        return;
      }
      this.autoScrollService.check(e.event);
      this.clearHoveredItems();
      this.lastHoveredListItem = hoveredListItem;
      radioCssClass(el, LIST_ITEM_HOVERED);
      radioCssClass(el, "ag-item-highlight-".concat(hoveredListItem.position));
    };
    VirtualListDragFeature2.prototype.getListDragItem = function(e) {
      var virtualListGui = this.virtualList.getGui();
      var paddingTop = parseFloat(window.getComputedStyle(virtualListGui).paddingTop);
      var rowHeight = this.virtualList.getRowHeight();
      var scrollTop = this.virtualList.getScrollTop();
      var rowIndex = Math.max(0, (e.y - paddingTop + scrollTop) / rowHeight);
      var maxLen = this.params.getNumRows(this.comp) - 1;
      var normalizedRowIndex = Math.min(maxLen, rowIndex) | 0;
      return {
        rowIndex: normalizedRowIndex,
        position: Math.round(rowIndex) > rowIndex || rowIndex > maxLen ? "bottom" : "top",
        component: this.virtualList.getComponentAt(normalizedRowIndex)
      };
    };
    VirtualListDragFeature2.prototype.onDragStop = function() {
      if (this.moveBlocked) {
        return;
      }
      this.params.moveItem(this.currentDragValue, this.lastHoveredListItem);
      this.clearHoveredItems();
      this.autoScrollService.ensureCleared();
    };
    VirtualListDragFeature2.prototype.onDragLeave = function() {
      this.clearHoveredItems();
      this.autoScrollService.ensureCleared();
    };
    VirtualListDragFeature2.prototype.clearHoveredItems = function() {
      var virtualListGui = this.virtualList.getGui();
      virtualListGui.querySelectorAll(".".concat(LIST_ITEM_HOVERED)).forEach(function(el) {
        [
          LIST_ITEM_HOVERED,
          "ag-item-highlight-top",
          "ag-item-highlight-bottom"
        ].forEach(function(cls) {
          el.classList.remove(cls);
        });
      });
      this.lastHoveredListItem = null;
    };
    __decorate$26([
      Autowired("dragAndDropService")
    ], VirtualListDragFeature2.prototype, "dragAndDropService", void 0);
    __decorate$26([
      PostConstruct
    ], VirtualListDragFeature2.prototype, "postConstruct", null);
    return VirtualListDragFeature2;
  }(BeanStub)
);
var RowHighlightPosition;
(function(RowHighlightPosition2) {
  RowHighlightPosition2[RowHighlightPosition2["Above"] = 0] = "Above";
  RowHighlightPosition2[RowHighlightPosition2["Below"] = 1] = "Below";
})(RowHighlightPosition || (RowHighlightPosition = {}));
var __decorate$25 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
function unwrapUserComp(comp) {
  var compAsAny = comp;
  var isProxy = compAsAny != null && compAsAny.getFrameworkComponentInstance != null;
  return isProxy ? compAsAny.getFrameworkComponentInstance() : comp;
}
var GridApi = (
  /** @class */
  function() {
    function GridApi2() {
      this.detailGridInfoMap = {};
      this.destroyCalled = false;
    }
    GridApi2.prototype.init = function() {
      var _this = this;
      switch (this.rowModel.getType()) {
        case "clientSide":
          this.clientSideRowModel = this.rowModel;
          break;
        case "infinite":
          this.infiniteRowModel = this.rowModel;
          break;
        case "serverSide":
          this.serverSideRowModel = this.rowModel;
          break;
      }
      this.ctrlsService.whenReady(function() {
        _this.gridBodyCtrl = _this.ctrlsService.getGridBodyCtrl();
      });
    };
    GridApi2.prototype.__getAlignedGridService = function() {
      return this.alignedGridsService;
    };
    GridApi2.prototype.__getContext = function() {
      return this.context;
    };
    GridApi2.prototype.getGridId = function() {
      return this.context.getGridId();
    };
    GridApi2.prototype.addDetailGridInfo = function(id, gridInfo) {
      this.detailGridInfoMap[id] = gridInfo;
    };
    GridApi2.prototype.removeDetailGridInfo = function(id) {
      this.detailGridInfoMap[id] = void 0;
    };
    GridApi2.prototype.getDetailGridInfo = function(id) {
      return this.detailGridInfoMap[id];
    };
    GridApi2.prototype.forEachDetailGridInfo = function(callback) {
      var index = 0;
      iterateObject(this.detailGridInfoMap, function(id, gridInfo) {
        if (exists(gridInfo)) {
          callback(gridInfo, index);
          index++;
        }
      });
    };
    GridApi2.prototype.getDataAsCsv = function(params) {
      if (ModuleRegistry.__assertRegistered(ModuleNames.CsvExportModule, "api.getDataAsCsv", this.context.getGridId())) {
        return this.csvCreator.getDataAsCsv(params);
      }
    };
    GridApi2.prototype.exportDataAsCsv = function(params) {
      if (ModuleRegistry.__assertRegistered(ModuleNames.CsvExportModule, "api.exportDataAsCSv", this.context.getGridId())) {
        this.csvCreator.exportDataAsCsv(params);
      }
    };
    GridApi2.prototype.assertNotExcelMultiSheet = function(method, params) {
      if (!ModuleRegistry.__assertRegistered(ModuleNames.ExcelExportModule, "api." + method, this.context.getGridId())) {
        return false;
      }
      if (this.excelCreator.getFactoryMode() === ExcelFactoryMode.MULTI_SHEET) {
        console.warn("AG Grid: The Excel Exporter is currently on Multi Sheet mode. End that operation by calling 'api.getMultipleSheetAsExcel()' or 'api.exportMultipleSheetsAsExcel()'");
        return false;
      }
      return true;
    };
    GridApi2.prototype.getDataAsExcel = function(params) {
      if (this.assertNotExcelMultiSheet("getDataAsExcel", params)) {
        return this.excelCreator.getDataAsExcel(params);
      }
    };
    GridApi2.prototype.exportDataAsExcel = function(params) {
      if (this.assertNotExcelMultiSheet("exportDataAsExcel", params)) {
        this.excelCreator.exportDataAsExcel(params);
      }
    };
    GridApi2.prototype.getSheetDataForExcel = function(params) {
      if (!ModuleRegistry.__assertRegistered(ModuleNames.ExcelExportModule, "api.getSheetDataForExcel", this.context.getGridId())) {
        return;
      }
      this.excelCreator.setFactoryMode(ExcelFactoryMode.MULTI_SHEET);
      return this.excelCreator.getSheetDataForExcel(params);
    };
    GridApi2.prototype.getMultipleSheetsAsExcel = function(params) {
      if (ModuleRegistry.__assertRegistered(ModuleNames.ExcelExportModule, "api.getMultipleSheetsAsExcel", this.context.getGridId())) {
        return this.excelCreator.getMultipleSheetsAsExcel(params);
      }
    };
    GridApi2.prototype.exportMultipleSheetsAsExcel = function(params) {
      if (ModuleRegistry.__assertRegistered(ModuleNames.ExcelExportModule, "api.exportMultipleSheetsAsExcel", this.context.getGridId())) {
        return this.excelCreator.exportMultipleSheetsAsExcel(params);
      }
    };
    GridApi2.prototype.setGridAriaProperty = function(property, value) {
      if (!property) {
        return;
      }
      var eGrid = this.ctrlsService.getGridBodyCtrl().getGui();
      var ariaProperty = "aria-".concat(property);
      if (value === null) {
        eGrid.removeAttribute(ariaProperty);
      } else {
        eGrid.setAttribute(ariaProperty, value);
      }
    };
    GridApi2.prototype.logMissingRowModel = function(apiMethod) {
      var requiredRowModels = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        requiredRowModels[_i - 1] = arguments[_i];
      }
      console.error("AG Grid: api.".concat(apiMethod, " can only be called when gridOptions.rowModelType is ").concat(requiredRowModels.join(" or ")));
    };
    GridApi2.prototype.getPinnedTopRowCount = function() {
      return this.pinnedRowModel.getPinnedTopRowCount();
    };
    GridApi2.prototype.getPinnedBottomRowCount = function() {
      return this.pinnedRowModel.getPinnedBottomRowCount();
    };
    GridApi2.prototype.getPinnedTopRow = function(index) {
      return this.pinnedRowModel.getPinnedTopRow(index);
    };
    GridApi2.prototype.getPinnedBottomRow = function(index) {
      return this.pinnedRowModel.getPinnedBottomRow(index);
    };
    GridApi2.prototype.expireValueCache = function() {
      this.valueCache.expire();
    };
    GridApi2.prototype.getVerticalPixelRange = function() {
      return this.gridBodyCtrl.getScrollFeature().getVScrollPosition();
    };
    GridApi2.prototype.getHorizontalPixelRange = function() {
      return this.gridBodyCtrl.getScrollFeature().getHScrollPosition();
    };
    GridApi2.prototype.refreshCells = function(params) {
      var _this = this;
      if (params === void 0) {
        params = {};
      }
      this.frameworkOverrides.wrapIncoming(function() {
        return _this.rowRenderer.refreshCells(params);
      });
    };
    GridApi2.prototype.flashCells = function(params) {
      var _this = this;
      if (params === void 0) {
        params = {};
      }
      this.frameworkOverrides.wrapIncoming(function() {
        return _this.rowRenderer.flashCells(params);
      });
    };
    GridApi2.prototype.redrawRows = function(params) {
      var _this = this;
      if (params === void 0) {
        params = {};
      }
      var rowNodes = params ? params.rowNodes : void 0;
      this.frameworkOverrides.wrapIncoming(function() {
        return _this.rowRenderer.redrawRows(rowNodes);
      });
    };
    GridApi2.prototype.refreshHeader = function() {
      var _this = this;
      this.frameworkOverrides.wrapIncoming(function() {
        return _this.ctrlsService.getHeaderRowContainerCtrls().forEach(function(c) {
          return c.refresh();
        });
      });
    };
    GridApi2.prototype.isAnyFilterPresent = function() {
      return this.filterManager.isAnyFilterPresent();
    };
    GridApi2.prototype.isColumnFilterPresent = function() {
      return this.filterManager.isColumnFilterPresent() || this.filterManager.isAggregateFilterPresent();
    };
    GridApi2.prototype.isQuickFilterPresent = function() {
      return this.filterManager.isQuickFilterPresent();
    };
    GridApi2.prototype.getModel = function() {
      return this.rowModel;
    };
    GridApi2.prototype.setRowNodeExpanded = function(rowNode, expanded, expandParents) {
      this.expansionService.setRowNodeExpanded(rowNode, expanded, expandParents);
    };
    GridApi2.prototype.onGroupExpandedOrCollapsed = function() {
      if (missing(this.clientSideRowModel)) {
        this.logMissingRowModel("onGroupExpandedOrCollapsed", "clientSide");
        return;
      }
      this.expansionService.onGroupExpandedOrCollapsed();
    };
    GridApi2.prototype.refreshClientSideRowModel = function(step) {
      if (missing(this.clientSideRowModel)) {
        this.logMissingRowModel("refreshClientSideRowModel", "clientSide");
        return;
      }
      this.clientSideRowModel.refreshModel(step);
    };
    GridApi2.prototype.isAnimationFrameQueueEmpty = function() {
      return this.animationFrameService.isQueueEmpty();
    };
    GridApi2.prototype.flushAllAnimationFrames = function() {
      this.animationFrameService.flushAllFrames();
    };
    GridApi2.prototype.getRowNode = function(id) {
      return this.rowModel.getRowNode(id);
    };
    GridApi2.prototype.getSizesForCurrentTheme = function() {
      return {
        rowHeight: this.gos.getRowHeightAsNumber(),
        headerHeight: this.columnModel.getHeaderHeight()
      };
    };
    GridApi2.prototype.expandAll = function() {
      if (this.clientSideRowModel || this.serverSideRowModel) {
        this.expansionService.expandAll(true);
      } else {
        this.logMissingRowModel("expandAll", "clientSide", "serverSide");
      }
    };
    GridApi2.prototype.collapseAll = function() {
      if (this.clientSideRowModel || this.serverSideRowModel) {
        this.expansionService.expandAll(false);
      } else {
        this.logMissingRowModel("collapseAll", "clientSide", "serverSide");
      }
    };
    GridApi2.prototype.addRenderedRowListener = function(eventName, rowIndex, callback) {
      this.rowRenderer.addRenderedRowListener(eventName, rowIndex, callback);
    };
    GridApi2.prototype.getQuickFilter = function() {
      return this.gos.get("quickFilterText");
    };
    GridApi2.prototype.getAdvancedFilterModel = function() {
      if (ModuleRegistry.__assertRegistered(ModuleNames.AdvancedFilterModule, "api.getAdvancedFilterModel", this.context.getGridId())) {
        return this.filterManager.getAdvancedFilterModel();
      }
      return null;
    };
    GridApi2.prototype.setAdvancedFilterModel = function(advancedFilterModel) {
      this.filterManager.setAdvancedFilterModel(advancedFilterModel);
    };
    GridApi2.prototype.showAdvancedFilterBuilder = function() {
      if (ModuleRegistry.__assertRegistered(ModuleNames.AdvancedFilterModule, "api.setAdvancedFilterModel", this.context.getGridId())) {
        this.filterManager.showAdvancedFilterBuilder("api");
      }
    };
    GridApi2.prototype.setNodesSelected = function(params) {
      var allNodesValid = params.nodes.every(function(node) {
        if (node.rowPinned) {
          console.warn("AG Grid: cannot select pinned rows");
          return false;
        }
        if (node.id === void 0) {
          console.warn("AG Grid: cannot select node until id for node is known");
          return false;
        }
        return true;
      });
      if (!allNodesValid) {
        return;
      }
      var nodes = params.nodes, source = params.source, newValue = params.newValue;
      var nodesAsRowNode = nodes;
      this.selectionService.setNodesSelected({ nodes: nodesAsRowNode, source: source !== null && source !== void 0 ? source : "api", newValue });
    };
    GridApi2.prototype.selectAll = function(source) {
      if (source === void 0) {
        source = "apiSelectAll";
      }
      this.selectionService.selectAllRowNodes({ source });
    };
    GridApi2.prototype.deselectAll = function(source) {
      if (source === void 0) {
        source = "apiSelectAll";
      }
      this.selectionService.deselectAllRowNodes({ source });
    };
    GridApi2.prototype.selectAllFiltered = function(source) {
      if (source === void 0) {
        source = "apiSelectAllFiltered";
      }
      this.selectionService.selectAllRowNodes({ source, justFiltered: true });
    };
    GridApi2.prototype.deselectAllFiltered = function(source) {
      if (source === void 0) {
        source = "apiSelectAllFiltered";
      }
      this.selectionService.deselectAllRowNodes({ source, justFiltered: true });
    };
    GridApi2.prototype.getServerSideSelectionState = function() {
      if (missing(this.serverSideRowModel)) {
        this.logMissingRowModel("getServerSideSelectionState", "serverSide");
        return null;
      }
      return this.selectionService.getSelectionState();
    };
    GridApi2.prototype.setServerSideSelectionState = function(state) {
      if (missing(this.serverSideRowModel)) {
        this.logMissingRowModel("setServerSideSelectionState", "serverSide");
        return;
      }
      this.selectionService.setSelectionState(state, "api");
    };
    GridApi2.prototype.selectAllOnCurrentPage = function(source) {
      if (source === void 0) {
        source = "apiSelectAllCurrentPage";
      }
      this.selectionService.selectAllRowNodes({ source, justCurrentPage: true });
    };
    GridApi2.prototype.deselectAllOnCurrentPage = function(source) {
      if (source === void 0) {
        source = "apiSelectAllCurrentPage";
      }
      this.selectionService.deselectAllRowNodes({ source, justCurrentPage: true });
    };
    GridApi2.prototype.showLoadingOverlay = function() {
      this.overlayService.showLoadingOverlay();
    };
    GridApi2.prototype.showNoRowsOverlay = function() {
      this.overlayService.showNoRowsOverlay();
    };
    GridApi2.prototype.hideOverlay = function() {
      this.overlayService.hideOverlay();
    };
    GridApi2.prototype.getSelectedNodes = function() {
      return this.selectionService.getSelectedNodes();
    };
    GridApi2.prototype.getSelectedRows = function() {
      return this.selectionService.getSelectedRows();
    };
    GridApi2.prototype.getBestCostNodeSelection = function() {
      if (missing(this.clientSideRowModel)) {
        this.logMissingRowModel("getBestCostNodeSelection", "clientSide");
        return;
      }
      return this.selectionService.getBestCostNodeSelection();
    };
    GridApi2.prototype.getRenderedNodes = function() {
      return this.rowRenderer.getRenderedNodes();
    };
    GridApi2.prototype.ensureColumnVisible = function(key, position) {
      var _this = this;
      if (position === void 0) {
        position = "auto";
      }
      this.frameworkOverrides.wrapIncoming(function() {
        return _this.gridBodyCtrl.getScrollFeature().ensureColumnVisible(key, position);
      });
    };
    GridApi2.prototype.ensureIndexVisible = function(index, position) {
      var _this = this;
      this.frameworkOverrides.wrapIncoming(function() {
        return _this.gridBodyCtrl.getScrollFeature().ensureIndexVisible(index, position);
      });
    };
    GridApi2.prototype.ensureNodeVisible = function(nodeSelector, position) {
      var _this = this;
      if (position === void 0) {
        position = null;
      }
      this.frameworkOverrides.wrapIncoming(function() {
        return _this.gridBodyCtrl.getScrollFeature().ensureNodeVisible(nodeSelector, position);
      });
    };
    GridApi2.prototype.forEachLeafNode = function(callback) {
      if (missing(this.clientSideRowModel)) {
        this.logMissingRowModel("forEachLeafNode", "clientSide");
        return;
      }
      this.clientSideRowModel.forEachLeafNode(callback);
    };
    GridApi2.prototype.forEachNode = function(callback, includeFooterNodes) {
      this.rowModel.forEachNode(callback, includeFooterNodes);
    };
    GridApi2.prototype.forEachNodeAfterFilter = function(callback) {
      if (missing(this.clientSideRowModel)) {
        this.logMissingRowModel("forEachNodeAfterFilter", "clientSide");
        return;
      }
      this.clientSideRowModel.forEachNodeAfterFilter(callback);
    };
    GridApi2.prototype.forEachNodeAfterFilterAndSort = function(callback) {
      if (missing(this.clientSideRowModel)) {
        this.logMissingRowModel("forEachNodeAfterFilterAndSort", "clientSide");
        return;
      }
      this.clientSideRowModel.forEachNodeAfterFilterAndSort(callback);
    };
    GridApi2.prototype.getFilterInstance = function(key, callback) {
      return this.filterManager.getFilterInstance(key, callback);
    };
    GridApi2.prototype.getColumnFilterInstance = function(key) {
      return this.filterManager.getColumnFilterInstance(key);
    };
    GridApi2.prototype.destroyFilter = function(key) {
      var column = this.columnModel.getPrimaryColumn(key);
      if (column) {
        return this.filterManager.destroyFilter(column, "api");
      }
    };
    GridApi2.prototype.getStatusPanel = function(key) {
      if (!ModuleRegistry.__assertRegistered(ModuleNames.StatusBarModule, "api.getStatusPanel", this.context.getGridId())) {
        return;
      }
      var comp = this.statusBarService.getStatusPanel(key);
      return unwrapUserComp(comp);
    };
    GridApi2.prototype.getColumnDef = function(key) {
      var column = this.columnModel.getPrimaryColumn(key);
      if (column) {
        return column.getColDef();
      }
      return null;
    };
    GridApi2.prototype.getColumnDefs = function() {
      return this.columnModel.getColumnDefs();
    };
    GridApi2.prototype.onFilterChanged = function(source) {
      if (source === void 0) {
        source = "api";
      }
      this.filterManager.onFilterChanged({ source });
    };
    GridApi2.prototype.onSortChanged = function() {
      this.sortController.onSortChanged("api");
    };
    GridApi2.prototype.setFilterModel = function(model) {
      var _this = this;
      this.frameworkOverrides.wrapIncoming(function() {
        return _this.filterManager.setFilterModel(model);
      });
    };
    GridApi2.prototype.getFilterModel = function() {
      return this.filterManager.getFilterModel();
    };
    GridApi2.prototype.getColumnFilterModel = function(column) {
      return this.filterManager.getColumnFilterModel(column);
    };
    GridApi2.prototype.setColumnFilterModel = function(column, model) {
      return this.filterManager.setColumnFilterModel(column, model);
    };
    GridApi2.prototype.getFocusedCell = function() {
      return this.focusService.getFocusedCell();
    };
    GridApi2.prototype.clearFocusedCell = function() {
      return this.focusService.clearFocusedCell();
    };
    GridApi2.prototype.setFocusedCell = function(rowIndex, colKey, rowPinned) {
      this.focusService.setFocusedCell({ rowIndex, column: colKey, rowPinned, forceBrowserFocus: true });
    };
    GridApi2.prototype.addRowDropZone = function(params) {
      this.gridBodyCtrl.getRowDragFeature().addRowDropZone(params);
    };
    GridApi2.prototype.removeRowDropZone = function(params) {
      var activeDropTarget = this.dragAndDropService.findExternalZone(params);
      if (activeDropTarget) {
        this.dragAndDropService.removeDropTarget(activeDropTarget);
      }
    };
    GridApi2.prototype.getRowDropZoneParams = function(events) {
      return this.gridBodyCtrl.getRowDragFeature().getRowDropZone(events);
    };
    GridApi2.prototype.assertSideBarLoaded = function(apiMethod) {
      return ModuleRegistry.__assertRegistered(ModuleNames.SideBarModule, "api." + apiMethod, this.context.getGridId());
    };
    GridApi2.prototype.isSideBarVisible = function() {
      return this.assertSideBarLoaded("isSideBarVisible") && this.sideBarService.getSideBarComp().isDisplayed();
    };
    GridApi2.prototype.setSideBarVisible = function(show) {
      if (this.assertSideBarLoaded("setSideBarVisible")) {
        this.sideBarService.getSideBarComp().setDisplayed(show);
      }
    };
    GridApi2.prototype.setSideBarPosition = function(position) {
      if (this.assertSideBarLoaded("setSideBarPosition")) {
        this.sideBarService.getSideBarComp().setSideBarPosition(position);
      }
    };
    GridApi2.prototype.openToolPanel = function(key) {
      if (this.assertSideBarLoaded("openToolPanel")) {
        this.sideBarService.getSideBarComp().openToolPanel(key, "api");
      }
    };
    GridApi2.prototype.closeToolPanel = function() {
      if (this.assertSideBarLoaded("closeToolPanel")) {
        this.sideBarService.getSideBarComp().close("api");
      }
    };
    GridApi2.prototype.getOpenedToolPanel = function() {
      if (this.assertSideBarLoaded("getOpenedToolPanel")) {
        return this.sideBarService.getSideBarComp().openedItem();
      }
      return null;
    };
    GridApi2.prototype.refreshToolPanel = function() {
      if (this.assertSideBarLoaded("refreshToolPanel")) {
        this.sideBarService.getSideBarComp().refresh();
      }
    };
    GridApi2.prototype.isToolPanelShowing = function() {
      return this.assertSideBarLoaded("isToolPanelShowing") && this.sideBarService.getSideBarComp().isToolPanelShowing();
    };
    GridApi2.prototype.getToolPanelInstance = function(id) {
      if (this.assertSideBarLoaded("getToolPanelInstance")) {
        var comp = this.sideBarService.getSideBarComp().getToolPanelInstance(id);
        return unwrapUserComp(comp);
      }
    };
    GridApi2.prototype.getSideBar = function() {
      if (this.assertSideBarLoaded("getSideBar")) {
        return this.sideBarService.getSideBarComp().getDef();
      }
      return void 0;
    };
    GridApi2.prototype.resetRowHeights = function() {
      if (exists(this.clientSideRowModel)) {
        if (this.columnModel.isAutoRowHeightActive()) {
          console.warn("AG Grid: calling gridApi.resetRowHeights() makes no sense when using Auto Row Height.");
          return;
        }
        this.clientSideRowModel.resetRowHeights();
      }
    };
    GridApi2.prototype.setRowCount = function(rowCount, maxRowFound) {
      if (this.serverSideRowModel) {
        if (this.columnModel.isRowGroupEmpty()) {
          this.serverSideRowModel.setRowCount(rowCount, maxRowFound);
          return;
        }
        console.error("AG Grid: setRowCount cannot be used while using row grouping.");
        return;
      }
      if (this.infiniteRowModel) {
        this.infiniteRowModel.setRowCount(rowCount, maxRowFound);
        return;
      }
      this.logMissingRowModel("setRowCount", "infinite", "serverSide");
    };
    GridApi2.prototype.onRowHeightChanged = function() {
      if (this.clientSideRowModel) {
        this.clientSideRowModel.onRowHeightChanged();
      } else if (this.serverSideRowModel) {
        this.serverSideRowModel.onRowHeightChanged();
      }
    };
    GridApi2.prototype.getValue = function(colKey, rowNode) {
      var column = this.columnModel.getPrimaryColumn(colKey);
      if (missing(column)) {
        column = this.columnModel.getGridColumn(colKey);
      }
      if (missing(column)) {
        return null;
      }
      return this.valueService.getValue(column, rowNode);
    };
    GridApi2.prototype.addEventListener = function(eventType, listener) {
      this.apiEventService.addEventListener(eventType, listener);
    };
    GridApi2.prototype.addGlobalListener = function(listener) {
      this.apiEventService.addGlobalListener(listener);
    };
    GridApi2.prototype.removeEventListener = function(eventType, listener) {
      this.apiEventService.removeEventListener(eventType, listener);
    };
    GridApi2.prototype.removeGlobalListener = function(listener) {
      this.apiEventService.removeGlobalListener(listener);
    };
    GridApi2.prototype.dispatchEvent = function(event) {
      this.eventService.dispatchEvent(event);
    };
    GridApi2.prototype.destroy = function() {
      var preDestroyLink = "See ".concat(this.frameworkOverrides.getDocLink("grid-lifecycle/#grid-pre-destroyed"));
      if (this.destroyCalled) {
        return;
      }
      var event = {
        type: Events.EVENT_GRID_PRE_DESTROYED,
        state: this.getState()
      };
      this.dispatchEvent(event);
      this.destroyCalled = true;
      var gridCtrl = this.ctrlsService.getGridCtrl();
      if (gridCtrl) {
        gridCtrl.destroyGridUi();
      }
      this.context.destroy();
      removeAllReferences(this, ["isDestroyed"], preDestroyLink);
    };
    GridApi2.prototype.isDestroyed = function() {
      return this.destroyCalled;
    };
    GridApi2.prototype.resetQuickFilter = function() {
      this.filterManager.resetQuickFilterCache();
    };
    GridApi2.prototype.getCellRanges = function() {
      if (this.rangeService) {
        return this.rangeService.getCellRanges();
      }
      ModuleRegistry.__assertRegistered(ModuleNames.RangeSelectionModule, "api.getCellRanges", this.context.getGridId());
      return null;
    };
    GridApi2.prototype.addCellRange = function(params) {
      if (this.rangeService) {
        this.rangeService.addCellRange(params);
        return;
      }
      ModuleRegistry.__assertRegistered(ModuleNames.RangeSelectionModule, "api.addCellRange", this.context.getGridId());
    };
    GridApi2.prototype.clearRangeSelection = function() {
      if (this.rangeService) {
        this.rangeService.removeAllCellRanges();
      }
      ModuleRegistry.__assertRegistered(ModuleNames.RangeSelectionModule, "gridApi.clearRangeSelection", this.context.getGridId());
    };
    GridApi2.prototype.undoCellEditing = function() {
      this.undoRedoService.undo("api");
    };
    GridApi2.prototype.redoCellEditing = function() {
      this.undoRedoService.redo("api");
    };
    GridApi2.prototype.getCurrentUndoSize = function() {
      return this.undoRedoService.getCurrentUndoStackSize();
    };
    GridApi2.prototype.getCurrentRedoSize = function() {
      return this.undoRedoService.getCurrentRedoStackSize();
    };
    GridApi2.prototype.assertChart = function(methodName, func) {
      if (ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, "api." + methodName, this.context.getGridId())) {
        return this.frameworkOverrides.wrapIncoming(function() {
          return func();
        });
      }
    };
    GridApi2.prototype.getChartModels = function() {
      var _this = this;
      return this.assertChart("getChartModels", function() {
        return _this.chartService.getChartModels();
      });
    };
    GridApi2.prototype.getChartRef = function(chartId) {
      var _this = this;
      return this.assertChart("getChartRef", function() {
        return _this.chartService.getChartRef(chartId);
      });
    };
    GridApi2.prototype.getChartImageDataURL = function(params) {
      var _this = this;
      return this.assertChart("getChartImageDataURL", function() {
        return _this.chartService.getChartImageDataURL(params);
      });
    };
    GridApi2.prototype.downloadChart = function(params) {
      var _this = this;
      return this.assertChart("downloadChart", function() {
        return _this.chartService.downloadChart(params);
      });
    };
    GridApi2.prototype.openChartToolPanel = function(params) {
      var _this = this;
      return this.assertChart("openChartToolPanel", function() {
        return _this.chartService.openChartToolPanel(params);
      });
    };
    GridApi2.prototype.closeChartToolPanel = function(params) {
      var _this = this;
      return this.assertChart("closeChartToolPanel", function() {
        return _this.chartService.closeChartToolPanel(params.chartId);
      });
    };
    GridApi2.prototype.createRangeChart = function(params) {
      var _this = this;
      return this.assertChart("createRangeChart", function() {
        return _this.chartService.createRangeChart(params);
      });
    };
    GridApi2.prototype.createPivotChart = function(params) {
      var _this = this;
      return this.assertChart("createPivotChart", function() {
        return _this.chartService.createPivotChart(params);
      });
    };
    GridApi2.prototype.createCrossFilterChart = function(params) {
      var _this = this;
      return this.assertChart("createCrossFilterChart", function() {
        return _this.chartService.createCrossFilterChart(params);
      });
    };
    GridApi2.prototype.updateChart = function(params) {
      var _this = this;
      return this.assertChart("updateChart", function() {
        return _this.chartService.updateChart(params);
      });
    };
    GridApi2.prototype.restoreChart = function(chartModel, chartContainer) {
      var _this = this;
      return this.assertChart("restoreChart", function() {
        return _this.chartService.restoreChart(chartModel, chartContainer);
      });
    };
    GridApi2.prototype.assertClipboard = function(methodName, func) {
      if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, "api" + methodName, this.context.getGridId())) {
        func();
      }
    };
    GridApi2.prototype.copyToClipboard = function(params) {
      var _this = this;
      this.assertClipboard("copyToClipboard", function() {
        return _this.clipboardService.copyToClipboard(params);
      });
    };
    GridApi2.prototype.cutToClipboard = function(params) {
      var _this = this;
      this.assertClipboard("cutToClipboard", function() {
        return _this.clipboardService.cutToClipboard(params);
      });
    };
    GridApi2.prototype.copySelectedRowsToClipboard = function(params) {
      var _this = this;
      this.assertClipboard("copySelectedRowsToClipboard", function() {
        return _this.clipboardService.copySelectedRowsToClipboard(params);
      });
    };
    GridApi2.prototype.copySelectedRangeToClipboard = function(params) {
      var _this = this;
      this.assertClipboard("copySelectedRangeToClipboard", function() {
        return _this.clipboardService.copySelectedRangeToClipboard(params);
      });
    };
    GridApi2.prototype.copySelectedRangeDown = function() {
      var _this = this;
      this.assertClipboard("copySelectedRangeDown", function() {
        return _this.clipboardService.copyRangeDown();
      });
    };
    GridApi2.prototype.pasteFromClipboard = function() {
      var _this = this;
      this.assertClipboard("pasteFromClipboard", function() {
        return _this.clipboardService.pasteFromClipboard();
      });
    };
    GridApi2.prototype.showColumnMenuAfterButtonClick = function(colKey, buttonElement) {
      var column = this.columnModel.getGridColumn(colKey);
      this.menuFactory.showMenuAfterButtonClick(column, buttonElement, "columnMenu");
    };
    GridApi2.prototype.showColumnMenuAfterMouseClick = function(colKey, mouseEvent) {
      var column = this.columnModel.getGridColumn(colKey);
      if (!column) {
        column = this.columnModel.getPrimaryColumn(colKey);
      }
      if (!column) {
        console.error("AG Grid: column '".concat(colKey, "' not found"));
        return;
      }
      this.menuFactory.showMenuAfterMouseEvent(column, mouseEvent);
    };
    GridApi2.prototype.hidePopupMenu = function() {
      if (this.contextMenuFactory) {
        this.contextMenuFactory.hideActiveMenu();
      }
      this.menuFactory.hideActiveMenu();
    };
    GridApi2.prototype.tabToNextCell = function(event) {
      return this.navigationService.tabToNextCell(false, event);
    };
    GridApi2.prototype.tabToPreviousCell = function(event) {
      return this.navigationService.tabToNextCell(true, event);
    };
    GridApi2.prototype.getCellRendererInstances = function(params) {
      if (params === void 0) {
        params = {};
      }
      var res = this.rowRenderer.getCellRendererInstances(params);
      var unwrapped = res.map(unwrapUserComp);
      return unwrapped;
    };
    GridApi2.prototype.getCellEditorInstances = function(params) {
      if (params === void 0) {
        params = {};
      }
      var res = this.rowRenderer.getCellEditorInstances(params);
      var unwrapped = res.map(unwrapUserComp);
      return unwrapped;
    };
    GridApi2.prototype.getEditingCells = function() {
      return this.rowRenderer.getEditingCells();
    };
    GridApi2.prototype.stopEditing = function(cancel) {
      if (cancel === void 0) {
        cancel = false;
      }
      this.rowRenderer.stopEditing(cancel);
    };
    GridApi2.prototype.startEditingCell = function(params) {
      var column = this.columnModel.getGridColumn(params.colKey);
      if (!column) {
        console.warn("AG Grid: no column found for ".concat(params.colKey));
        return;
      }
      var cellPosition = {
        rowIndex: params.rowIndex,
        rowPinned: params.rowPinned || null,
        column
      };
      var notPinned = params.rowPinned == null;
      if (notPinned) {
        this.gridBodyCtrl.getScrollFeature().ensureIndexVisible(params.rowIndex);
      }
      var cell = this.navigationService.getCellByPosition(cellPosition);
      if (!cell) {
        return;
      }
      if (!this.focusService.isCellFocused(cellPosition)) {
        this.focusService.setFocusedCell(cellPosition);
      }
      cell.startRowOrCellEdit(params.key);
    };
    GridApi2.prototype.addAggFunc = function(key, aggFunc) {
      if (this.aggFuncService) {
        this.aggFuncService.addAggFunc(key, aggFunc);
      }
    };
    GridApi2.prototype.addAggFuncs = function(aggFuncs) {
      if (this.aggFuncService) {
        this.aggFuncService.addAggFuncs(aggFuncs);
      }
    };
    GridApi2.prototype.clearAggFuncs = function() {
      if (this.aggFuncService) {
        this.aggFuncService.clear();
      }
    };
    GridApi2.prototype.applyServerSideTransaction = function(transaction) {
      if (!this.serverSideTransactionManager) {
        this.logMissingRowModel("applyServerSideTransaction", "serverSide");
        return;
      }
      return this.serverSideTransactionManager.applyTransaction(transaction);
    };
    GridApi2.prototype.applyServerSideTransactionAsync = function(transaction, callback) {
      if (!this.serverSideTransactionManager) {
        this.logMissingRowModel("applyServerSideTransactionAsync", "serverSide");
        return;
      }
      return this.serverSideTransactionManager.applyTransactionAsync(transaction, callback);
    };
    GridApi2.prototype.applyServerSideRowData = function(params) {
      var _a, _b;
      var startRow = (_a = params.startRow) !== null && _a !== void 0 ? _a : 0;
      var route = (_b = params.route) !== null && _b !== void 0 ? _b : [];
      if (startRow < 0) {
        console.warn("AG Grid: invalid value ".concat(params.startRow, " for startRow, the value should be >= 0"));
        return;
      }
      if (this.serverSideRowModel) {
        this.serverSideRowModel.applyRowData(params.successParams, startRow, route);
      } else {
        this.logMissingRowModel("setServerSideDatasource", "serverSide");
      }
    };
    GridApi2.prototype.retryServerSideLoads = function() {
      if (!this.serverSideRowModel) {
        this.logMissingRowModel("retryServerSideLoads", "serverSide");
        return;
      }
      this.serverSideRowModel.retryLoads();
    };
    GridApi2.prototype.flushServerSideAsyncTransactions = function() {
      if (!this.serverSideTransactionManager) {
        this.logMissingRowModel("flushServerSideAsyncTransactions", "serverSide");
        return;
      }
      return this.serverSideTransactionManager.flushAsyncTransactions();
    };
    GridApi2.prototype.applyTransaction = function(rowDataTransaction) {
      var _this = this;
      if (!this.clientSideRowModel) {
        this.logMissingRowModel("applyTransaction", "clientSide");
        return;
      }
      return this.frameworkOverrides.wrapIncoming(function() {
        return _this.clientSideRowModel.updateRowData(rowDataTransaction);
      });
    };
    GridApi2.prototype.applyTransactionAsync = function(rowDataTransaction, callback) {
      var _this = this;
      if (!this.clientSideRowModel) {
        this.logMissingRowModel("applyTransactionAsync", "clientSide");
        return;
      }
      this.frameworkOverrides.wrapIncoming(function() {
        return _this.clientSideRowModel.batchUpdateRowData(rowDataTransaction, callback);
      });
    };
    GridApi2.prototype.flushAsyncTransactions = function() {
      var _this = this;
      if (!this.clientSideRowModel) {
        this.logMissingRowModel("flushAsyncTransactions", "clientSide");
        return;
      }
      this.frameworkOverrides.wrapIncoming(function() {
        return _this.clientSideRowModel.flushAsyncTransactions();
      });
    };
    GridApi2.prototype.refreshInfiniteCache = function() {
      if (this.infiniteRowModel) {
        this.infiniteRowModel.refreshCache();
      } else {
        this.logMissingRowModel("refreshInfiniteCache", "infinite");
      }
    };
    GridApi2.prototype.purgeInfiniteCache = function() {
      if (this.infiniteRowModel) {
        this.infiniteRowModel.purgeCache();
      } else {
        this.logMissingRowModel("purgeInfiniteCache", "infinite");
      }
    };
    GridApi2.prototype.refreshServerSide = function(params) {
      if (!this.serverSideRowModel) {
        this.logMissingRowModel("refreshServerSide", "serverSide");
        return;
      }
      this.serverSideRowModel.refreshStore(params);
    };
    GridApi2.prototype.getServerSideGroupLevelState = function() {
      if (!this.serverSideRowModel) {
        this.logMissingRowModel("getServerSideGroupLevelState", "serverSide");
        return [];
      }
      return this.serverSideRowModel.getStoreState();
    };
    GridApi2.prototype.getInfiniteRowCount = function() {
      if (this.infiniteRowModel) {
        return this.infiniteRowModel.getRowCount();
      } else {
        this.logMissingRowModel("getInfiniteRowCount", "infinite");
      }
    };
    GridApi2.prototype.isLastRowIndexKnown = function() {
      if (this.infiniteRowModel) {
        return this.infiniteRowModel.isLastRowIndexKnown();
      } else {
        this.logMissingRowModel("isLastRowIndexKnown", "infinite");
      }
    };
    GridApi2.prototype.getCacheBlockState = function() {
      return this.rowNodeBlockLoader.getBlockState();
    };
    GridApi2.prototype.getFirstDisplayedRow = function() {
      return this.rowRenderer.getFirstVirtualRenderedRow();
    };
    GridApi2.prototype.getLastDisplayedRow = function() {
      return this.rowRenderer.getLastVirtualRenderedRow();
    };
    GridApi2.prototype.getDisplayedRowAtIndex = function(index) {
      return this.rowModel.getRow(index);
    };
    GridApi2.prototype.getDisplayedRowCount = function() {
      return this.rowModel.getRowCount();
    };
    GridApi2.prototype.paginationIsLastPageFound = function() {
      return this.paginationProxy.isLastPageFound();
    };
    GridApi2.prototype.paginationGetPageSize = function() {
      return this.paginationProxy.getPageSize();
    };
    GridApi2.prototype.paginationGetCurrentPage = function() {
      return this.paginationProxy.getCurrentPage();
    };
    GridApi2.prototype.paginationGetTotalPages = function() {
      return this.paginationProxy.getTotalPages();
    };
    GridApi2.prototype.paginationGetRowCount = function() {
      return this.paginationProxy.getMasterRowCount();
    };
    GridApi2.prototype.paginationGoToNextPage = function() {
      this.paginationProxy.goToNextPage();
    };
    GridApi2.prototype.paginationGoToPreviousPage = function() {
      this.paginationProxy.goToPreviousPage();
    };
    GridApi2.prototype.paginationGoToFirstPage = function() {
      this.paginationProxy.goToFirstPage();
    };
    GridApi2.prototype.paginationGoToLastPage = function() {
      this.paginationProxy.goToLastPage();
    };
    GridApi2.prototype.paginationGoToPage = function(page) {
      this.paginationProxy.goToPage(page);
    };
    GridApi2.prototype.sizeColumnsToFit = function(paramsOrGridWidth) {
      if (typeof paramsOrGridWidth === "number") {
        this.columnModel.sizeColumnsToFit(paramsOrGridWidth, "api");
      } else {
        this.gridBodyCtrl.sizeColumnsToFit(paramsOrGridWidth);
      }
    };
    GridApi2.prototype.setColumnGroupOpened = function(group, newValue) {
      this.columnModel.setColumnGroupOpened(group, newValue, "api");
    };
    GridApi2.prototype.getColumnGroup = function(name, instanceId) {
      return this.columnModel.getColumnGroup(name, instanceId);
    };
    GridApi2.prototype.getProvidedColumnGroup = function(name) {
      return this.columnModel.getProvidedColumnGroup(name);
    };
    GridApi2.prototype.getDisplayNameForColumn = function(column, location) {
      return this.columnModel.getDisplayNameForColumn(column, location) || "";
    };
    GridApi2.prototype.getDisplayNameForColumnGroup = function(columnGroup, location) {
      return this.columnModel.getDisplayNameForColumnGroup(columnGroup, location) || "";
    };
    GridApi2.prototype.getColumn = function(key) {
      return this.columnModel.getPrimaryColumn(key);
    };
    GridApi2.prototype.getColumns = function() {
      return this.columnModel.getAllPrimaryColumns();
    };
    GridApi2.prototype.applyColumnState = function(params) {
      return this.columnModel.applyColumnState(params, "api");
    };
    GridApi2.prototype.getColumnState = function() {
      return this.columnModel.getColumnState();
    };
    GridApi2.prototype.resetColumnState = function() {
      this.columnModel.resetColumnState("api");
    };
    GridApi2.prototype.getColumnGroupState = function() {
      return this.columnModel.getColumnGroupState();
    };
    GridApi2.prototype.setColumnGroupState = function(stateItems) {
      this.columnModel.setColumnGroupState(stateItems, "api");
    };
    GridApi2.prototype.resetColumnGroupState = function() {
      this.columnModel.resetColumnGroupState("api");
    };
    GridApi2.prototype.isPinning = function() {
      return this.columnModel.isPinningLeft() || this.columnModel.isPinningRight();
    };
    GridApi2.prototype.isPinningLeft = function() {
      return this.columnModel.isPinningLeft();
    };
    GridApi2.prototype.isPinningRight = function() {
      return this.columnModel.isPinningRight();
    };
    GridApi2.prototype.getDisplayedColAfter = function(col) {
      return this.columnModel.getDisplayedColAfter(col);
    };
    GridApi2.prototype.getDisplayedColBefore = function(col) {
      return this.columnModel.getDisplayedColBefore(col);
    };
    GridApi2.prototype.setColumnVisible = function(key, visible) {
      this.columnModel.setColumnVisible(key, visible, "api");
    };
    GridApi2.prototype.setColumnsVisible = function(keys2, visible) {
      this.columnModel.setColumnsVisible(keys2, visible, "api");
    };
    GridApi2.prototype.setColumnPinned = function(key, pinned) {
      this.columnModel.setColumnPinned(key, pinned, "api");
    };
    GridApi2.prototype.setColumnsPinned = function(keys2, pinned) {
      this.columnModel.setColumnsPinned(keys2, pinned, "api");
    };
    GridApi2.prototype.getAllGridColumns = function() {
      return this.columnModel.getAllGridColumns();
    };
    GridApi2.prototype.getDisplayedLeftColumns = function() {
      return this.columnModel.getDisplayedLeftColumns();
    };
    GridApi2.prototype.getDisplayedCenterColumns = function() {
      return this.columnModel.getDisplayedCenterColumns();
    };
    GridApi2.prototype.getDisplayedRightColumns = function() {
      return this.columnModel.getDisplayedRightColumns();
    };
    GridApi2.prototype.getAllDisplayedColumns = function() {
      return this.columnModel.getAllDisplayedColumns();
    };
    GridApi2.prototype.getAllDisplayedVirtualColumns = function() {
      return this.columnModel.getViewportColumns();
    };
    GridApi2.prototype.moveColumn = function(key, toIndex) {
      this.columnModel.moveColumn(key, toIndex, "api");
    };
    GridApi2.prototype.moveColumnByIndex = function(fromIndex, toIndex) {
      this.columnModel.moveColumnByIndex(fromIndex, toIndex, "api");
    };
    GridApi2.prototype.moveColumns = function(columnsToMoveKeys, toIndex) {
      this.columnModel.moveColumns(columnsToMoveKeys, toIndex, "api");
    };
    GridApi2.prototype.moveRowGroupColumn = function(fromIndex, toIndex) {
      this.columnModel.moveRowGroupColumn(fromIndex, toIndex);
    };
    GridApi2.prototype.setColumnAggFunc = function(key, aggFunc) {
      this.columnModel.setColumnAggFunc(key, aggFunc);
    };
    GridApi2.prototype.setColumnWidth = function(key, newWidth, finished, source) {
      if (finished === void 0) {
        finished = true;
      }
      this.columnModel.setColumnWidths([{ key, newWidth }], false, finished, source);
    };
    GridApi2.prototype.setColumnWidths = function(columnWidths, finished, source) {
      if (finished === void 0) {
        finished = true;
      }
      this.columnModel.setColumnWidths(columnWidths, false, finished, source);
    };
    GridApi2.prototype.isPivotMode = function() {
      return this.columnModel.isPivotMode();
    };
    GridApi2.prototype.getPivotResultColumn = function(pivotKeys, valueColKey) {
      return this.columnModel.getSecondaryPivotColumn(pivotKeys, valueColKey);
    };
    GridApi2.prototype.setValueColumns = function(colKeys) {
      this.columnModel.setValueColumns(colKeys, "api");
    };
    GridApi2.prototype.getValueColumns = function() {
      return this.columnModel.getValueColumns();
    };
    GridApi2.prototype.removeValueColumn = function(colKey) {
      this.columnModel.removeValueColumn(colKey, "api");
    };
    GridApi2.prototype.removeValueColumns = function(colKeys) {
      this.columnModel.removeValueColumns(colKeys, "api");
    };
    GridApi2.prototype.addValueColumn = function(colKey) {
      this.columnModel.addValueColumn(colKey, "api");
    };
    GridApi2.prototype.addValueColumns = function(colKeys) {
      this.columnModel.addValueColumns(colKeys, "api");
    };
    GridApi2.prototype.setRowGroupColumns = function(colKeys) {
      this.columnModel.setRowGroupColumns(colKeys, "api");
    };
    GridApi2.prototype.removeRowGroupColumn = function(colKey) {
      this.columnModel.removeRowGroupColumn(colKey, "api");
    };
    GridApi2.prototype.removeRowGroupColumns = function(colKeys) {
      this.columnModel.removeRowGroupColumns(colKeys, "api");
    };
    GridApi2.prototype.addRowGroupColumn = function(colKey) {
      this.columnModel.addRowGroupColumn(colKey, "api");
    };
    GridApi2.prototype.addRowGroupColumns = function(colKeys) {
      this.columnModel.addRowGroupColumns(colKeys, "api");
    };
    GridApi2.prototype.getRowGroupColumns = function() {
      return this.columnModel.getRowGroupColumns();
    };
    GridApi2.prototype.setPivotColumns = function(colKeys) {
      this.columnModel.setPivotColumns(colKeys, "api");
    };
    GridApi2.prototype.removePivotColumn = function(colKey) {
      this.columnModel.removePivotColumn(colKey, "api");
    };
    GridApi2.prototype.removePivotColumns = function(colKeys) {
      this.columnModel.removePivotColumns(colKeys, "api");
    };
    GridApi2.prototype.addPivotColumn = function(colKey) {
      this.columnModel.addPivotColumn(colKey, "api");
    };
    GridApi2.prototype.addPivotColumns = function(colKeys) {
      this.columnModel.addPivotColumns(colKeys, "api");
    };
    GridApi2.prototype.getPivotColumns = function() {
      return this.columnModel.getPivotColumns();
    };
    GridApi2.prototype.getLeftDisplayedColumnGroups = function() {
      return this.columnModel.getDisplayedTreeLeft();
    };
    GridApi2.prototype.getCenterDisplayedColumnGroups = function() {
      return this.columnModel.getDisplayedTreeCentre();
    };
    GridApi2.prototype.getRightDisplayedColumnGroups = function() {
      return this.columnModel.getDisplayedTreeRight();
    };
    GridApi2.prototype.getAllDisplayedColumnGroups = function() {
      return this.columnModel.getAllDisplayedTrees();
    };
    GridApi2.prototype.autoSizeColumn = function(key, skipHeader) {
      return this.columnModel.autoSizeColumn(key, skipHeader, "api");
    };
    GridApi2.prototype.autoSizeColumns = function(keys2, skipHeader) {
      this.columnModel.autoSizeColumns({ columns: keys2, skipHeader });
    };
    GridApi2.prototype.autoSizeAllColumns = function(skipHeader) {
      this.columnModel.autoSizeAllColumns(skipHeader, "api");
    };
    GridApi2.prototype.setPivotResultColumns = function(colDefs) {
      this.columnModel.setSecondaryColumns(colDefs, "api");
    };
    GridApi2.prototype.getPivotResultColumns = function() {
      return this.columnModel.getSecondaryColumns();
    };
    GridApi2.prototype.getState = function() {
      return this.stateService.getState();
    };
    GridApi2.prototype.getGridOption = function(key) {
      return this.gos.get(key);
    };
    GridApi2.prototype.setGridOption = function(key, value) {
      var _a;
      this.updateGridOptions((_a = {}, _a[key] = value, _a));
    };
    GridApi2.prototype.updateGridOptions = function(options) {
      this.gos.updateGridOptions({ options });
    };
    GridApi2.prototype.__internalUpdateGridOptions = function(options) {
      this.gos.updateGridOptions({ options, source: "gridOptionsUpdated" });
    };
    GridApi2.prototype.deprecatedUpdateGridOption = function(key, value) {
      warnOnce("set".concat(key.charAt(0).toUpperCase()).concat(key.slice(1, key.length), " is deprecated. Please use 'api.setGridOption('").concat(key, "', newValue)' or 'api.updateGridOptions({ ").concat(key, ": newValue })' instead."));
      this.setGridOption(key, value);
    };
    GridApi2.prototype.setPivotMode = function(pivotMode) {
      this.deprecatedUpdateGridOption("pivotMode", pivotMode);
    };
    GridApi2.prototype.setPinnedTopRowData = function(rows) {
      this.deprecatedUpdateGridOption("pinnedTopRowData", rows);
    };
    GridApi2.prototype.setPinnedBottomRowData = function(rows) {
      this.deprecatedUpdateGridOption("pinnedBottomRowData", rows);
    };
    GridApi2.prototype.setPopupParent = function(ePopupParent) {
      this.deprecatedUpdateGridOption("popupParent", ePopupParent);
    };
    GridApi2.prototype.setSuppressModelUpdateAfterUpdateTransaction = function(value) {
      this.deprecatedUpdateGridOption("suppressModelUpdateAfterUpdateTransaction", value);
    };
    GridApi2.prototype.setDataTypeDefinitions = function(dataTypeDefinitions) {
      this.deprecatedUpdateGridOption("dataTypeDefinitions", dataTypeDefinitions);
    };
    GridApi2.prototype.setPagination = function(value) {
      this.deprecatedUpdateGridOption("pagination", value);
    };
    GridApi2.prototype.paginationSetPageSize = function(size) {
      this.deprecatedUpdateGridOption("paginationPageSize", size);
    };
    GridApi2.prototype.setSideBar = function(def) {
      this.deprecatedUpdateGridOption("sideBar", def);
    };
    GridApi2.prototype.setSuppressClipboardPaste = function(value) {
      this.deprecatedUpdateGridOption("suppressClipboardPaste", value);
    };
    GridApi2.prototype.setGroupRemoveSingleChildren = function(value) {
      this.deprecatedUpdateGridOption("groupRemoveSingleChildren", value);
    };
    GridApi2.prototype.setGroupRemoveLowestSingleChildren = function(value) {
      this.deprecatedUpdateGridOption("groupRemoveLowestSingleChildren", value);
    };
    GridApi2.prototype.setGroupDisplayType = function(value) {
      this.deprecatedUpdateGridOption("groupDisplayType", value);
    };
    GridApi2.prototype.setGroupIncludeFooter = function(value) {
      this.deprecatedUpdateGridOption("groupIncludeFooter", value);
    };
    GridApi2.prototype.setGroupIncludeTotalFooter = function(value) {
      this.deprecatedUpdateGridOption("groupIncludeTotalFooter", value);
    };
    GridApi2.prototype.setRowClass = function(className) {
      this.deprecatedUpdateGridOption("rowClass", className);
    };
    GridApi2.prototype.setDeltaSort = function(enable) {
      this.deprecatedUpdateGridOption("deltaSort", enable);
    };
    GridApi2.prototype.setSuppressRowDrag = function(value) {
      this.deprecatedUpdateGridOption("suppressRowDrag", value);
    };
    GridApi2.prototype.setSuppressMoveWhenRowDragging = function(value) {
      this.deprecatedUpdateGridOption("suppressMoveWhenRowDragging", value);
    };
    GridApi2.prototype.setSuppressRowClickSelection = function(value) {
      this.deprecatedUpdateGridOption("suppressRowClickSelection", value);
    };
    GridApi2.prototype.setEnableAdvancedFilter = function(enabled) {
      this.deprecatedUpdateGridOption("enableAdvancedFilter", enabled);
    };
    GridApi2.prototype.setIncludeHiddenColumnsInAdvancedFilter = function(value) {
      this.deprecatedUpdateGridOption("includeHiddenColumnsInAdvancedFilter", value);
    };
    GridApi2.prototype.setAdvancedFilterParent = function(advancedFilterParent) {
      this.deprecatedUpdateGridOption("advancedFilterParent", advancedFilterParent);
    };
    GridApi2.prototype.setAdvancedFilterBuilderParams = function(params) {
      this.deprecatedUpdateGridOption("advancedFilterBuilderParams", params);
    };
    GridApi2.prototype.setQuickFilter = function(newFilter) {
      warnOnce("setQuickFilter is deprecated. Please use 'api.setGridOption('quickFilterText', newValue)' or 'api.updateGridOptions({ quickFilterText: newValue })' instead.");
      this.gos.updateGridOptions({ options: { quickFilterText: newFilter } });
    };
    GridApi2.prototype.setExcludeHiddenColumnsFromQuickFilter = function(value) {
      this.deprecatedUpdateGridOption("includeHiddenColumnsInQuickFilter", !value);
    };
    GridApi2.prototype.setIncludeHiddenColumnsInQuickFilter = function(value) {
      this.deprecatedUpdateGridOption("includeHiddenColumnsInQuickFilter", value);
    };
    GridApi2.prototype.setQuickFilterParser = function(quickFilterParser) {
      this.deprecatedUpdateGridOption("quickFilterParser", quickFilterParser);
    };
    GridApi2.prototype.setQuickFilterMatcher = function(quickFilterMatcher) {
      this.deprecatedUpdateGridOption("quickFilterMatcher", quickFilterMatcher);
    };
    GridApi2.prototype.setAlwaysShowHorizontalScroll = function(show) {
      this.deprecatedUpdateGridOption("alwaysShowHorizontalScroll", show);
    };
    GridApi2.prototype.setAlwaysShowVerticalScroll = function(show) {
      this.deprecatedUpdateGridOption("alwaysShowVerticalScroll", show);
    };
    GridApi2.prototype.setFunctionsReadOnly = function(readOnly) {
      this.deprecatedUpdateGridOption("functionsReadOnly", readOnly);
    };
    GridApi2.prototype.setColumnDefs = function(colDefs, source) {
      if (source === void 0) {
        source = "api";
      }
      warnOnce("setColumnDefs is deprecated. Please use 'api.setGridOption('columnDefs', newValue)' or 'api.updateGridOptions({ columnDefs: newValue })' instead.");
      this.gos.updateGridOptions({
        options: { columnDefs: colDefs },
        source
      });
    };
    GridApi2.prototype.setAutoGroupColumnDef = function(colDef, source) {
      if (source === void 0) {
        source = "api";
      }
      warnOnce("setAutoGroupColumnDef is deprecated. Please use 'api.setGridOption('autoGroupColumnDef', newValue)' or 'api.updateGridOptions({ autoGroupColumnDef: newValue })' instead.");
      this.gos.updateGridOptions({
        options: { autoGroupColumnDef: colDef },
        source
      });
    };
    GridApi2.prototype.setDefaultColDef = function(colDef, source) {
      if (source === void 0) {
        source = "api";
      }
      warnOnce("setDefaultColDef is deprecated. Please use 'api.setGridOption('defaultColDef', newValue)' or 'api.updateGridOptions({ defaultColDef: newValue })' instead.");
      this.gos.updateGridOptions({
        options: { defaultColDef: colDef },
        source
      });
    };
    GridApi2.prototype.setColumnTypes = function(columnTypes, source) {
      if (source === void 0) {
        source = "api";
      }
      warnOnce("setColumnTypes is deprecated. Please use 'api.setGridOption('columnTypes', newValue)' or 'api.updateGridOptions({ columnTypes: newValue })' instead.");
      this.gos.updateGridOptions({
        options: { columnTypes },
        source
      });
    };
    GridApi2.prototype.setTreeData = function(newTreeData) {
      this.deprecatedUpdateGridOption("treeData", newTreeData);
    };
    GridApi2.prototype.setServerSideDatasource = function(datasource) {
      this.deprecatedUpdateGridOption("serverSideDatasource", datasource);
    };
    GridApi2.prototype.setCacheBlockSize = function(blockSize) {
      this.deprecatedUpdateGridOption("cacheBlockSize", blockSize);
    };
    GridApi2.prototype.setDatasource = function(datasource) {
      this.deprecatedUpdateGridOption("datasource", datasource);
    };
    GridApi2.prototype.setViewportDatasource = function(viewportDatasource) {
      this.deprecatedUpdateGridOption("viewportDatasource", viewportDatasource);
    };
    GridApi2.prototype.setRowData = function(rowData) {
      this.deprecatedUpdateGridOption("rowData", rowData);
    };
    GridApi2.prototype.setEnableCellTextSelection = function(selectable) {
      this.deprecatedUpdateGridOption("enableCellTextSelection", selectable);
    };
    GridApi2.prototype.setHeaderHeight = function(headerHeight) {
      this.deprecatedUpdateGridOption("headerHeight", headerHeight);
    };
    GridApi2.prototype.setDomLayout = function(domLayout) {
      this.deprecatedUpdateGridOption("domLayout", domLayout);
    };
    GridApi2.prototype.setFillHandleDirection = function(direction) {
      this.deprecatedUpdateGridOption("fillHandleDirection", direction);
    };
    GridApi2.prototype.setGroupHeaderHeight = function(headerHeight) {
      this.deprecatedUpdateGridOption("groupHeaderHeight", headerHeight);
    };
    GridApi2.prototype.setFloatingFiltersHeight = function(headerHeight) {
      this.deprecatedUpdateGridOption("floatingFiltersHeight", headerHeight);
    };
    GridApi2.prototype.setPivotHeaderHeight = function(headerHeight) {
      this.deprecatedUpdateGridOption("pivotHeaderHeight", headerHeight);
    };
    GridApi2.prototype.setPivotGroupHeaderHeight = function(headerHeight) {
      this.deprecatedUpdateGridOption("pivotGroupHeaderHeight", headerHeight);
    };
    GridApi2.prototype.setAnimateRows = function(animateRows) {
      this.deprecatedUpdateGridOption("animateRows", animateRows);
    };
    GridApi2.prototype.setIsExternalFilterPresent = function(isExternalFilterPresentFunc) {
      this.deprecatedUpdateGridOption("isExternalFilterPresent", isExternalFilterPresentFunc);
    };
    GridApi2.prototype.setDoesExternalFilterPass = function(doesExternalFilterPassFunc) {
      this.deprecatedUpdateGridOption("doesExternalFilterPass", doesExternalFilterPassFunc);
    };
    GridApi2.prototype.setNavigateToNextCell = function(navigateToNextCellFunc) {
      this.deprecatedUpdateGridOption("navigateToNextCell", navigateToNextCellFunc);
    };
    GridApi2.prototype.setTabToNextCell = function(tabToNextCellFunc) {
      this.deprecatedUpdateGridOption("tabToNextCell", tabToNextCellFunc);
    };
    GridApi2.prototype.setTabToNextHeader = function(tabToNextHeaderFunc) {
      this.deprecatedUpdateGridOption("tabToNextHeader", tabToNextHeaderFunc);
    };
    GridApi2.prototype.setNavigateToNextHeader = function(navigateToNextHeaderFunc) {
      this.deprecatedUpdateGridOption("navigateToNextHeader", navigateToNextHeaderFunc);
    };
    GridApi2.prototype.setRowGroupPanelShow = function(rowGroupPanelShow) {
      this.deprecatedUpdateGridOption("rowGroupPanelShow", rowGroupPanelShow);
    };
    GridApi2.prototype.setGetGroupRowAgg = function(getGroupRowAggFunc) {
      this.deprecatedUpdateGridOption("getGroupRowAgg", getGroupRowAggFunc);
    };
    GridApi2.prototype.setGetBusinessKeyForNode = function(getBusinessKeyForNodeFunc) {
      this.deprecatedUpdateGridOption("getBusinessKeyForNode", getBusinessKeyForNodeFunc);
    };
    GridApi2.prototype.setGetChildCount = function(getChildCountFunc) {
      this.deprecatedUpdateGridOption("getChildCount", getChildCountFunc);
    };
    GridApi2.prototype.setProcessRowPostCreate = function(processRowPostCreateFunc) {
      this.deprecatedUpdateGridOption("processRowPostCreate", processRowPostCreateFunc);
    };
    GridApi2.prototype.setGetRowId = function(getRowIdFunc) {
      warnOnce("getRowId is a static property and can no longer be updated.");
    };
    GridApi2.prototype.setGetRowClass = function(rowClassFunc) {
      this.deprecatedUpdateGridOption("getRowClass", rowClassFunc);
    };
    GridApi2.prototype.setIsFullWidthRow = function(isFullWidthRowFunc) {
      this.deprecatedUpdateGridOption("isFullWidthRow", isFullWidthRowFunc);
    };
    GridApi2.prototype.setIsRowSelectable = function(isRowSelectableFunc) {
      this.deprecatedUpdateGridOption("isRowSelectable", isRowSelectableFunc);
    };
    GridApi2.prototype.setIsRowMaster = function(isRowMasterFunc) {
      this.deprecatedUpdateGridOption("isRowMaster", isRowMasterFunc);
    };
    GridApi2.prototype.setPostSortRows = function(postSortRowsFunc) {
      this.deprecatedUpdateGridOption("postSortRows", postSortRowsFunc);
    };
    GridApi2.prototype.setGetDocument = function(getDocumentFunc) {
      this.deprecatedUpdateGridOption("getDocument", getDocumentFunc);
    };
    GridApi2.prototype.setGetContextMenuItems = function(getContextMenuItemsFunc) {
      this.deprecatedUpdateGridOption("getContextMenuItems", getContextMenuItemsFunc);
    };
    GridApi2.prototype.setGetMainMenuItems = function(getMainMenuItemsFunc) {
      this.deprecatedUpdateGridOption("getMainMenuItems", getMainMenuItemsFunc);
    };
    GridApi2.prototype.setProcessCellForClipboard = function(processCellForClipboardFunc) {
      this.deprecatedUpdateGridOption("processCellForClipboard", processCellForClipboardFunc);
    };
    GridApi2.prototype.setSendToClipboard = function(sendToClipboardFunc) {
      this.deprecatedUpdateGridOption("sendToClipboard", sendToClipboardFunc);
    };
    GridApi2.prototype.setProcessCellFromClipboard = function(processCellFromClipboardFunc) {
      this.deprecatedUpdateGridOption("processCellFromClipboard", processCellFromClipboardFunc);
    };
    GridApi2.prototype.setProcessPivotResultColDef = function(processPivotResultColDefFunc) {
      this.deprecatedUpdateGridOption("processPivotResultColDef", processPivotResultColDefFunc);
    };
    GridApi2.prototype.setProcessPivotResultColGroupDef = function(processPivotResultColGroupDefFunc) {
      this.deprecatedUpdateGridOption("processPivotResultColGroupDef", processPivotResultColGroupDefFunc);
    };
    GridApi2.prototype.setPostProcessPopup = function(postProcessPopupFunc) {
      this.deprecatedUpdateGridOption("postProcessPopup", postProcessPopupFunc);
    };
    GridApi2.prototype.setInitialGroupOrderComparator = function(initialGroupOrderComparatorFunc) {
      this.deprecatedUpdateGridOption("initialGroupOrderComparator", initialGroupOrderComparatorFunc);
    };
    GridApi2.prototype.setGetChartToolbarItems = function(getChartToolbarItemsFunc) {
      this.deprecatedUpdateGridOption("getChartToolbarItems", getChartToolbarItemsFunc);
    };
    GridApi2.prototype.setPaginationNumberFormatter = function(paginationNumberFormatterFunc) {
      this.deprecatedUpdateGridOption("paginationNumberFormatter", paginationNumberFormatterFunc);
    };
    GridApi2.prototype.setGetServerSideGroupLevelParams = function(getServerSideGroupLevelParamsFunc) {
      this.deprecatedUpdateGridOption("getServerSideGroupLevelParams", getServerSideGroupLevelParamsFunc);
    };
    GridApi2.prototype.setIsServerSideGroupOpenByDefault = function(isServerSideGroupOpenByDefaultFunc) {
      this.deprecatedUpdateGridOption("isServerSideGroupOpenByDefault", isServerSideGroupOpenByDefaultFunc);
    };
    GridApi2.prototype.setIsApplyServerSideTransaction = function(isApplyServerSideTransactionFunc) {
      this.deprecatedUpdateGridOption("isApplyServerSideTransaction", isApplyServerSideTransactionFunc);
    };
    GridApi2.prototype.setIsServerSideGroup = function(isServerSideGroupFunc) {
      this.deprecatedUpdateGridOption("isServerSideGroup", isServerSideGroupFunc);
    };
    GridApi2.prototype.setGetServerSideGroupKey = function(getServerSideGroupKeyFunc) {
      this.deprecatedUpdateGridOption("getServerSideGroupKey", getServerSideGroupKeyFunc);
    };
    GridApi2.prototype.setGetRowStyle = function(rowStyleFunc) {
      this.deprecatedUpdateGridOption("getRowStyle", rowStyleFunc);
    };
    GridApi2.prototype.setGetRowHeight = function(rowHeightFunc) {
      this.deprecatedUpdateGridOption("getRowHeight", rowHeightFunc);
    };
    __decorate$25([
      Optional("csvCreator")
    ], GridApi2.prototype, "csvCreator", void 0);
    __decorate$25([
      Optional("excelCreator")
    ], GridApi2.prototype, "excelCreator", void 0);
    __decorate$25([
      Autowired("rowRenderer")
    ], GridApi2.prototype, "rowRenderer", void 0);
    __decorate$25([
      Autowired("navigationService")
    ], GridApi2.prototype, "navigationService", void 0);
    __decorate$25([
      Autowired("filterManager")
    ], GridApi2.prototype, "filterManager", void 0);
    __decorate$25([
      Autowired("columnModel")
    ], GridApi2.prototype, "columnModel", void 0);
    __decorate$25([
      Autowired("selectionService")
    ], GridApi2.prototype, "selectionService", void 0);
    __decorate$25([
      Autowired("gridOptionsService")
    ], GridApi2.prototype, "gos", void 0);
    __decorate$25([
      Autowired("valueService")
    ], GridApi2.prototype, "valueService", void 0);
    __decorate$25([
      Autowired("alignedGridsService")
    ], GridApi2.prototype, "alignedGridsService", void 0);
    __decorate$25([
      Autowired("eventService")
    ], GridApi2.prototype, "eventService", void 0);
    __decorate$25([
      Autowired("pinnedRowModel")
    ], GridApi2.prototype, "pinnedRowModel", void 0);
    __decorate$25([
      Autowired("context")
    ], GridApi2.prototype, "context", void 0);
    __decorate$25([
      Autowired("rowModel")
    ], GridApi2.prototype, "rowModel", void 0);
    __decorate$25([
      Autowired("sortController")
    ], GridApi2.prototype, "sortController", void 0);
    __decorate$25([
      Autowired("paginationProxy")
    ], GridApi2.prototype, "paginationProxy", void 0);
    __decorate$25([
      Autowired("focusService")
    ], GridApi2.prototype, "focusService", void 0);
    __decorate$25([
      Autowired("dragAndDropService")
    ], GridApi2.prototype, "dragAndDropService", void 0);
    __decorate$25([
      Optional("rangeService")
    ], GridApi2.prototype, "rangeService", void 0);
    __decorate$25([
      Optional("clipboardService")
    ], GridApi2.prototype, "clipboardService", void 0);
    __decorate$25([
      Optional("aggFuncService")
    ], GridApi2.prototype, "aggFuncService", void 0);
    __decorate$25([
      Autowired("menuFactory")
    ], GridApi2.prototype, "menuFactory", void 0);
    __decorate$25([
      Optional("contextMenuFactory")
    ], GridApi2.prototype, "contextMenuFactory", void 0);
    __decorate$25([
      Autowired("valueCache")
    ], GridApi2.prototype, "valueCache", void 0);
    __decorate$25([
      Autowired("animationFrameService")
    ], GridApi2.prototype, "animationFrameService", void 0);
    __decorate$25([
      Optional("statusBarService")
    ], GridApi2.prototype, "statusBarService", void 0);
    __decorate$25([
      Optional("chartService")
    ], GridApi2.prototype, "chartService", void 0);
    __decorate$25([
      Optional("undoRedoService")
    ], GridApi2.prototype, "undoRedoService", void 0);
    __decorate$25([
      Optional("rowNodeBlockLoader")
    ], GridApi2.prototype, "rowNodeBlockLoader", void 0);
    __decorate$25([
      Optional("ssrmTransactionManager")
    ], GridApi2.prototype, "serverSideTransactionManager", void 0);
    __decorate$25([
      Autowired("ctrlsService")
    ], GridApi2.prototype, "ctrlsService", void 0);
    __decorate$25([
      Autowired("overlayService")
    ], GridApi2.prototype, "overlayService", void 0);
    __decorate$25([
      Optional("sideBarService")
    ], GridApi2.prototype, "sideBarService", void 0);
    __decorate$25([
      Autowired("stateService")
    ], GridApi2.prototype, "stateService", void 0);
    __decorate$25([
      Autowired("expansionService")
    ], GridApi2.prototype, "expansionService", void 0);
    __decorate$25([
      Autowired("apiEventService")
    ], GridApi2.prototype, "apiEventService", void 0);
    __decorate$25([
      Autowired("frameworkOverrides")
    ], GridApi2.prototype, "frameworkOverrides", void 0);
    __decorate$25([
      PostConstruct
    ], GridApi2.prototype, "init", null);
    GridApi2 = __decorate$25([
      Bean("gridApi")
    ], GridApi2);
    return GridApi2;
  }()
);
var __extends$2g = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$24 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var QuickFilterService = (
  /** @class */
  function(_super) {
    __extends$2g(QuickFilterService2, _super);
    function QuickFilterService2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.quickFilter = null;
      _this.quickFilterParts = null;
      return _this;
    }
    QuickFilterService_1 = QuickFilterService2;
    QuickFilterService2.prototype.postConstruct = function() {
      var _this = this;
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, function() {
        return _this.resetQuickFilterCache();
      });
      this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, function() {
        return _this.resetQuickFilterCache();
      });
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, function() {
        return _this.resetQuickFilterCache();
      });
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, function() {
        if (!_this.gridOptionsService.get("includeHiddenColumnsInQuickFilter")) {
          _this.resetQuickFilterCache();
        }
      });
      this.addManagedPropertyListener("quickFilterText", function(e) {
        return _this.setQuickFilter(e.currentValue);
      });
      this.addManagedPropertyListener("includeHiddenColumnsInQuickFilter", function() {
        return _this.onIncludeHiddenColumnsInQuickFilterChanged();
      });
      this.quickFilter = this.parseQuickFilter(this.gridOptionsService.get("quickFilterText"));
      this.parser = this.gridOptionsService.get("quickFilterParser");
      this.matcher = this.gridOptionsService.get("quickFilterMatcher");
      this.setQuickFilterParts();
      this.addManagedPropertyListeners(["quickFilterMatcher", "quickFilterParser"], function() {
        return _this.setQuickFilterParserAndMatcher();
      });
    };
    QuickFilterService2.prototype.isQuickFilterPresent = function() {
      return this.quickFilter !== null;
    };
    QuickFilterService2.prototype.doesRowPassQuickFilter = function(node) {
      var _this = this;
      var usingCache = this.gridOptionsService.get("cacheQuickFilter");
      if (this.matcher) {
        return this.doesRowPassQuickFilterMatcher(usingCache, node);
      }
      return this.quickFilterParts.every(function(part) {
        return usingCache ? _this.doesRowPassQuickFilterCache(node, part) : _this.doesRowPassQuickFilterNoCache(node, part);
      });
    };
    QuickFilterService2.prototype.resetQuickFilterCache = function() {
      this.rowModel.forEachNode(function(node) {
        return node.quickFilterAggregateText = null;
      });
    };
    QuickFilterService2.prototype.setQuickFilterParts = function() {
      var _a = this, quickFilter = _a.quickFilter, parser = _a.parser;
      if (quickFilter) {
        this.quickFilterParts = parser ? parser(quickFilter) : quickFilter.split(" ");
      } else {
        this.quickFilterParts = null;
      }
    };
    QuickFilterService2.prototype.parseQuickFilter = function(newFilter) {
      if (!exists(newFilter)) {
        return null;
      }
      if (!this.gridOptionsService.isRowModelType("clientSide")) {
        console.warn("AG Grid - Quick filtering only works with the Client-Side Row Model");
        return null;
      }
      return newFilter.toUpperCase();
    };
    QuickFilterService2.prototype.setQuickFilter = function(newFilter) {
      if (newFilter != null && typeof newFilter !== "string") {
        console.warn("AG Grid - Grid option quickFilterText only supports string inputs, received: ".concat(typeof newFilter));
        return;
      }
      var parsedFilter = this.parseQuickFilter(newFilter);
      if (this.quickFilter !== parsedFilter) {
        this.quickFilter = parsedFilter;
        this.setQuickFilterParts();
        this.dispatchEvent({ type: QuickFilterService_1.EVENT_QUICK_FILTER_CHANGED });
      }
    };
    QuickFilterService2.prototype.setQuickFilterParserAndMatcher = function() {
      var parser = this.gridOptionsService.get("quickFilterParser");
      var matcher = this.gridOptionsService.get("quickFilterMatcher");
      var hasChanged = parser !== this.parser || matcher !== this.matcher;
      this.parser = parser;
      this.matcher = matcher;
      if (hasChanged) {
        this.setQuickFilterParts();
        this.dispatchEvent({ type: QuickFilterService_1.EVENT_QUICK_FILTER_CHANGED });
      }
    };
    QuickFilterService2.prototype.onIncludeHiddenColumnsInQuickFilterChanged = function() {
      this.columnModel.refreshQuickFilterColumns();
      this.resetQuickFilterCache();
      if (this.isQuickFilterPresent()) {
        this.dispatchEvent({ type: QuickFilterService_1.EVENT_QUICK_FILTER_CHANGED });
      }
    };
    QuickFilterService2.prototype.doesRowPassQuickFilterNoCache = function(node, filterPart) {
      var _this = this;
      var columns = this.columnModel.getAllColumnsForQuickFilter();
      return columns.some(function(column) {
        var part = _this.getQuickFilterTextForColumn(column, node);
        return exists(part) && part.indexOf(filterPart) >= 0;
      });
    };
    QuickFilterService2.prototype.doesRowPassQuickFilterCache = function(node, filterPart) {
      this.checkGenerateQuickFilterAggregateText(node);
      return node.quickFilterAggregateText.indexOf(filterPart) >= 0;
    };
    QuickFilterService2.prototype.doesRowPassQuickFilterMatcher = function(usingCache, node) {
      var quickFilterAggregateText;
      if (usingCache) {
        this.checkGenerateQuickFilterAggregateText(node);
        quickFilterAggregateText = node.quickFilterAggregateText;
      } else {
        quickFilterAggregateText = this.getQuickFilterAggregateText(node);
      }
      var _a = this, quickFilterParts = _a.quickFilterParts, matcher = _a.matcher;
      return matcher(quickFilterParts, quickFilterAggregateText);
    };
    QuickFilterService2.prototype.checkGenerateQuickFilterAggregateText = function(node) {
      if (!node.quickFilterAggregateText) {
        node.quickFilterAggregateText = this.getQuickFilterAggregateText(node);
      }
    };
    QuickFilterService2.prototype.getQuickFilterTextForColumn = function(column, node) {
      var value = this.valueService.getValue(column, node, true);
      var colDef = column.getColDef();
      if (colDef.getQuickFilterText) {
        var params = this.gridOptionsService.addGridCommonParams({
          value,
          node,
          data: node.data,
          column,
          colDef
        });
        value = colDef.getQuickFilterText(params);
      }
      return exists(value) ? value.toString().toUpperCase() : null;
    };
    QuickFilterService2.prototype.getQuickFilterAggregateText = function(node) {
      var _this = this;
      var stringParts = [];
      var columns = this.columnModel.getAllColumnsForQuickFilter();
      columns.forEach(function(column) {
        var part = _this.getQuickFilterTextForColumn(column, node);
        if (exists(part)) {
          stringParts.push(part);
        }
      });
      return stringParts.join(QuickFilterService_1.QUICK_FILTER_SEPARATOR);
    };
    var QuickFilterService_1;
    QuickFilterService2.EVENT_QUICK_FILTER_CHANGED = "quickFilterChanged";
    QuickFilterService2.QUICK_FILTER_SEPARATOR = "\n";
    __decorate$24([
      Autowired("valueService")
    ], QuickFilterService2.prototype, "valueService", void 0);
    __decorate$24([
      Autowired("columnModel")
    ], QuickFilterService2.prototype, "columnModel", void 0);
    __decorate$24([
      Autowired("rowModel")
    ], QuickFilterService2.prototype, "rowModel", void 0);
    __decorate$24([
      PostConstruct
    ], QuickFilterService2.prototype, "postConstruct", null);
    QuickFilterService2 = QuickFilterService_1 = __decorate$24([
      Bean("quickFilterService")
    ], QuickFilterService2);
    return QuickFilterService2;
  }(BeanStub)
);
var __extends$2f = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$f = function() {
  __assign$f = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$f.apply(this, arguments);
};
var __decorate$23 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FilterManager = (
  /** @class */
  function(_super) {
    __extends$2f(FilterManager2, _super);
    function FilterManager2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.allColumnFilters = /* @__PURE__ */ new Map();
      _this.allColumnListeners = /* @__PURE__ */ new Map();
      _this.activeAggregateFilters = [];
      _this.activeColumnFilters = [];
      _this.processingFilterChange = false;
      _this.filterModelUpdateQueue = [];
      _this.columnFilterModelUpdateQueue = [];
      _this.advancedFilterModelUpdateQueue = [];
      return _this;
    }
    FilterManager2.prototype.init = function() {
      var _this = this;
      var _a, _b, _c;
      this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, function() {
        return _this.onColumnsChanged();
      });
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, function() {
        return _this.refreshFiltersForAggregations();
      });
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, function() {
        return _this.refreshFiltersForAggregations();
      });
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, function() {
        return _this.refreshFiltersForAggregations();
      });
      this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, function() {
        return _this.updateAdvancedFilterColumns();
      });
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, function() {
        return _this.updateAdvancedFilterColumns();
      });
      this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_UPDATED, function() {
        return _this.onNewRowsLoaded("rowDataUpdated");
      });
      this.externalFilterPresent = this.isExternalFilterPresentCallback();
      this.addManagedPropertyListeners(["isExternalFilterPresent", "doesExternalFilterPass"], function() {
        _this.onFilterChanged({ source: "api" });
      });
      this.updateAggFiltering();
      this.addManagedPropertyListener("groupAggFiltering", function() {
        _this.updateAggFiltering();
        _this.onFilterChanged();
      });
      this.addManagedPropertyListener("advancedFilterModel", function(event) {
        return _this.setAdvancedFilterModel(event.currentValue);
      });
      this.addManagedListener(this.eventService, Events.EVENT_ADVANCED_FILTER_ENABLED_CHANGED, function(_a2) {
        var enabled = _a2.enabled;
        return _this.onAdvancedFilterEnabledChanged(enabled);
      });
      this.addManagedListener(this.eventService, Events.EVENT_DATA_TYPES_INFERRED, function() {
        return _this.processFilterModelUpdateQueue();
      });
      this.addManagedListener(this.quickFilterService, QuickFilterService.EVENT_QUICK_FILTER_CHANGED, function() {
        return _this.onFilterChanged({ source: "quickFilter" });
      });
      this.initialFilterModel = __assign$f({}, (_c = (_b = (_a = this.gridOptionsService.get("initialState")) === null || _a === void 0 ? void 0 : _a.filter) === null || _b === void 0 ? void 0 : _b.filterModel) !== null && _c !== void 0 ? _c : {});
    };
    FilterManager2.prototype.isExternalFilterPresentCallback = function() {
      var isFilterPresent = this.gridOptionsService.getCallback("isExternalFilterPresent");
      if (typeof isFilterPresent === "function") {
        return isFilterPresent({});
      }
      return false;
    };
    FilterManager2.prototype.doesExternalFilterPass = function(node) {
      var doesFilterPass = this.gridOptionsService.get("doesExternalFilterPass");
      if (typeof doesFilterPass === "function") {
        return doesFilterPass(node);
      }
      return false;
    };
    FilterManager2.prototype.setFilterModel = function(model, source) {
      var _this = this;
      if (source === void 0) {
        source = "api";
      }
      if (this.isAdvancedFilterEnabled()) {
        this.warnAdvancedFilters();
        return;
      }
      if (this.dataTypeService.isPendingInference()) {
        this.filterModelUpdateQueue.push({ model, source });
        return;
      }
      var allPromises = [];
      var previousModel = this.getFilterModel();
      if (model) {
        var modelKeys_1 = convertToSet(Object.keys(model));
        this.allColumnFilters.forEach(function(filterWrapper, colId) {
          var newModel = model[colId];
          allPromises.push(_this.setModelOnFilterWrapper(filterWrapper.filterPromise, newModel));
          modelKeys_1.delete(colId);
        });
        modelKeys_1.forEach(function(colId) {
          var column = _this.columnModel.getPrimaryColumn(colId) || _this.columnModel.getGridColumn(colId);
          if (!column) {
            console.warn("AG Grid: setFilterModel() - no column found for colId: " + colId);
            return;
          }
          if (!column.isFilterAllowed()) {
            console.warn("AG Grid: setFilterModel() - unable to fully apply model, filtering disabled for colId: " + colId);
            return;
          }
          var filterWrapper = _this.getOrCreateFilterWrapper(column, "NO_UI");
          if (!filterWrapper) {
            console.warn("AG-Grid: setFilterModel() - unable to fully apply model, unable to create filter for colId: " + colId);
            return;
          }
          allPromises.push(_this.setModelOnFilterWrapper(filterWrapper.filterPromise, model[colId]));
        });
      } else {
        this.allColumnFilters.forEach(function(filterWrapper) {
          allPromises.push(_this.setModelOnFilterWrapper(filterWrapper.filterPromise, null));
        });
      }
      AgPromise.all(allPromises).then(function() {
        var currentModel = _this.getFilterModel();
        var columns = [];
        _this.allColumnFilters.forEach(function(filterWrapper, colId) {
          var before = previousModel ? previousModel[colId] : null;
          var after = currentModel ? currentModel[colId] : null;
          if (!_.jsonEquals(before, after)) {
            columns.push(filterWrapper.column);
          }
        });
        if (columns.length > 0) {
          _this.onFilterChanged({ columns, source });
        }
      });
    };
    FilterManager2.prototype.setModelOnFilterWrapper = function(filterPromise, newModel) {
      return new AgPromise(function(resolve) {
        filterPromise.then(function(filter) {
          if (typeof filter.setModel !== "function") {
            console.warn("AG Grid: filter missing setModel method, which is needed for setFilterModel");
            resolve();
          }
          (filter.setModel(newModel) || AgPromise.resolve()).then(function() {
            return resolve();
          });
        });
      });
    };
    FilterManager2.prototype.getFilterModel = function() {
      var _this = this;
      var result = {};
      this.allColumnFilters.forEach(function(filterWrapper, key) {
        var model = _this.getModelFromFilterWrapper(filterWrapper);
        if (exists(model)) {
          result[key] = model;
        }
      });
      return result;
    };
    FilterManager2.prototype.getModelFromFilterWrapper = function(filterWrapper) {
      var _a;
      var filterPromise = filterWrapper.filterPromise;
      var filter = filterPromise.resolveNow(null, function(promiseFilter) {
        return promiseFilter;
      });
      if (filter == null) {
        return (_a = this.initialFilterModel[filterWrapper.column.getColId()]) !== null && _a !== void 0 ? _a : null;
      }
      if (typeof filter.getModel !== "function") {
        console.warn("AG Grid: filter API missing getModel method, which is needed for getFilterModel");
        return null;
      }
      return filter.getModel();
    };
    FilterManager2.prototype.isColumnFilterPresent = function() {
      return this.activeColumnFilters.length > 0;
    };
    FilterManager2.prototype.isAggregateFilterPresent = function() {
      return !!this.activeAggregateFilters.length;
    };
    FilterManager2.prototype.isExternalFilterPresent = function() {
      return this.externalFilterPresent;
    };
    FilterManager2.prototype.isChildFilterPresent = function() {
      return this.isColumnFilterPresent() || this.isQuickFilterPresent() || this.isExternalFilterPresent() || this.isAdvancedFilterPresent();
    };
    FilterManager2.prototype.isAdvancedFilterPresent = function() {
      return this.isAdvancedFilterEnabled() && this.advancedFilterService.isFilterPresent();
    };
    FilterManager2.prototype.onAdvancedFilterEnabledChanged = function(enabled) {
      var _this = this;
      var _a;
      if (enabled) {
        if (this.allColumnFilters.size) {
          this.allColumnFilters.forEach(function(filterWrapper) {
            return _this.disposeFilterWrapper(filterWrapper, "advancedFilterEnabled");
          });
          this.onFilterChanged({ source: "advancedFilter" });
        }
      } else {
        if ((_a = this.advancedFilterService) === null || _a === void 0 ? void 0 : _a.isFilterPresent()) {
          this.advancedFilterService.setModel(null);
          this.onFilterChanged({ source: "advancedFilter" });
        }
      }
    };
    FilterManager2.prototype.isAdvancedFilterEnabled = function() {
      var _a;
      return (_a = this.advancedFilterService) === null || _a === void 0 ? void 0 : _a.isEnabled();
    };
    FilterManager2.prototype.isAdvancedFilterHeaderActive = function() {
      return this.isAdvancedFilterEnabled() && this.advancedFilterService.isHeaderActive();
    };
    FilterManager2.prototype.doAggregateFiltersPass = function(node, filterToSkip) {
      return this.doColumnFiltersPass(node, filterToSkip, true);
    };
    FilterManager2.prototype.updateActiveFilters = function() {
      var _this = this;
      this.activeColumnFilters.length = 0;
      this.activeAggregateFilters.length = 0;
      var isFilterActive = function(filter) {
        if (!filter) {
          return false;
        }
        if (!filter.isFilterActive) {
          console.warn("AG Grid: Filter is missing isFilterActive() method");
          return false;
        }
        return filter.isFilterActive();
      };
      var groupFilterEnabled = !!this.gridOptionsService.getGroupAggFiltering();
      var isAggFilter = function(column) {
        var isSecondary = !column.isPrimary();
        if (isSecondary) {
          return true;
        }
        var isShowingPrimaryColumns = !_this.columnModel.isPivotActive();
        var isValueActive = column.isValueActive();
        if (!isValueActive || !isShowingPrimaryColumns) {
          return false;
        }
        if (_this.columnModel.isPivotMode()) {
          return true;
        }
        return groupFilterEnabled;
      };
      this.allColumnFilters.forEach(function(filterWrapper) {
        if (filterWrapper.filterPromise.resolveNow(false, isFilterActive)) {
          var filterComp = filterWrapper.filterPromise.resolveNow(null, function(filter) {
            return filter;
          });
          if (isAggFilter(filterWrapper.column)) {
            _this.activeAggregateFilters.push(filterComp);
          } else {
            _this.activeColumnFilters.push(filterComp);
          }
        }
      });
    };
    FilterManager2.prototype.updateFilterFlagInColumns = function(source, additionalEventAttributes) {
      this.allColumnFilters.forEach(function(filterWrapper) {
        var isFilterActive = filterWrapper.filterPromise.resolveNow(false, function(filter) {
          return filter.isFilterActive();
        });
        filterWrapper.column.setFilterActive(isFilterActive, source, additionalEventAttributes);
      });
    };
    FilterManager2.prototype.isAnyFilterPresent = function() {
      return this.isQuickFilterPresent() || this.isColumnFilterPresent() || this.isAggregateFilterPresent() || this.isExternalFilterPresent();
    };
    FilterManager2.prototype.doColumnFiltersPass = function(node, filterToSkip, targetAggregates) {
      var data = node.data, aggData = node.aggData;
      var targetedFilters = targetAggregates ? this.activeAggregateFilters : this.activeColumnFilters;
      var targetedData = targetAggregates ? aggData : data;
      for (var i = 0; i < targetedFilters.length; i++) {
        var filter = targetedFilters[i];
        if (filter == null || filter === filterToSkip) {
          continue;
        }
        if (typeof filter.doesFilterPass !== "function") {
          throw new Error("Filter is missing method doesFilterPass");
        }
        if (!filter.doesFilterPass({ node, data: targetedData })) {
          return false;
        }
      }
      return true;
    };
    FilterManager2.prototype.resetQuickFilterCache = function() {
      this.quickFilterService.resetQuickFilterCache();
    };
    FilterManager2.prototype.refreshFiltersForAggregations = function() {
      var isAggFiltering = this.gridOptionsService.getGroupAggFiltering();
      if (isAggFiltering) {
        this.onFilterChanged();
      }
    };
    FilterManager2.prototype.callOnFilterChangedOutsideRenderCycle = function(params) {
      var _this = this;
      var action = function() {
        return _this.onFilterChanged(params);
      };
      if (this.rowRenderer.isRefreshInProgress()) {
        setTimeout(action, 0);
      } else {
        action();
      }
    };
    FilterManager2.prototype.onFilterChanged = function(params) {
      if (params === void 0) {
        params = {};
      }
      var source = params.source, filterInstance = params.filterInstance, additionalEventAttributes = params.additionalEventAttributes, columns = params.columns;
      this.updateDependantFilters();
      this.updateActiveFilters();
      this.updateFilterFlagInColumns("filterChanged", additionalEventAttributes);
      this.externalFilterPresent = this.isExternalFilterPresentCallback();
      this.allColumnFilters.forEach(function(filterWrapper) {
        if (!filterWrapper.filterPromise) {
          return;
        }
        filterWrapper.filterPromise.then(function(filter) {
          if (filter && filter !== filterInstance && filter.onAnyFilterChanged) {
            filter.onAnyFilterChanged();
          }
        });
      });
      var filterChangedEvent = {
        source,
        type: Events.EVENT_FILTER_CHANGED,
        columns: columns || []
      };
      if (additionalEventAttributes) {
        mergeDeep(filterChangedEvent, additionalEventAttributes);
      }
      this.processingFilterChange = true;
      this.eventService.dispatchEvent(filterChangedEvent);
      this.processingFilterChange = false;
    };
    FilterManager2.prototype.isSuppressFlashingCellsBecauseFiltering = function() {
      var _a;
      var allowShowChangeAfterFilter = (_a = this.gridOptionsService.get("allowShowChangeAfterFilter")) !== null && _a !== void 0 ? _a : false;
      return !allowShowChangeAfterFilter && this.processingFilterChange;
    };
    FilterManager2.prototype.isQuickFilterPresent = function() {
      return this.quickFilterService.isQuickFilterPresent();
    };
    FilterManager2.prototype.updateAggFiltering = function() {
      this.aggFiltering = !!this.gridOptionsService.getGroupAggFiltering();
    };
    FilterManager2.prototype.isAggregateQuickFilterPresent = function() {
      return this.isQuickFilterPresent() && (this.aggFiltering || this.columnModel.isPivotMode());
    };
    FilterManager2.prototype.isNonAggregateQuickFilterPresent = function() {
      return this.isQuickFilterPresent() && !(this.aggFiltering || this.columnModel.isPivotMode());
    };
    FilterManager2.prototype.doesRowPassOtherFilters = function(filterToSkip, node) {
      return this.doesRowPassFilter({ rowNode: node, filterInstanceToSkip: filterToSkip });
    };
    FilterManager2.prototype.doesRowPassAggregateFilters = function(params) {
      if (this.isAggregateQuickFilterPresent() && !this.quickFilterService.doesRowPassQuickFilter(params.rowNode)) {
        return false;
      }
      if (this.isAggregateFilterPresent() && !this.doAggregateFiltersPass(params.rowNode, params.filterInstanceToSkip)) {
        return false;
      }
      return true;
    };
    FilterManager2.prototype.doesRowPassFilter = function(params) {
      if (this.isNonAggregateQuickFilterPresent() && !this.quickFilterService.doesRowPassQuickFilter(params.rowNode)) {
        return false;
      }
      if (this.isExternalFilterPresent() && !this.doesExternalFilterPass(params.rowNode)) {
        return false;
      }
      if (this.isColumnFilterPresent() && !this.doColumnFiltersPass(params.rowNode, params.filterInstanceToSkip)) {
        return false;
      }
      if (this.isAdvancedFilterPresent() && !this.advancedFilterService.doesFilterPass(params.rowNode)) {
        return false;
      }
      return true;
    };
    FilterManager2.prototype.onNewRowsLoaded = function(source) {
      this.allColumnFilters.forEach(function(filterWrapper) {
        filterWrapper.filterPromise.then(function(filter) {
          if (filter.onNewRowsLoaded) {
            filter.onNewRowsLoaded();
          }
        });
      });
      this.updateFilterFlagInColumns(source, { afterDataChange: true });
      this.updateActiveFilters();
    };
    FilterManager2.prototype.createValueGetter = function(column) {
      var _this = this;
      return function(_a) {
        var node = _a.node;
        return _this.valueService.getValue(column, node, true);
      };
    };
    FilterManager2.prototype.createGetValue = function(filterColumn) {
      var _this = this;
      return function(rowNode, column) {
        var columnToUse = column ? _this.columnModel.getGridColumn(column) : filterColumn;
        return columnToUse ? _this.valueService.getValue(columnToUse, rowNode, true) : void 0;
      };
    };
    FilterManager2.prototype.getFilterComponent = function(column, source, createIfDoesNotExist) {
      var _a;
      if (createIfDoesNotExist === void 0) {
        createIfDoesNotExist = true;
      }
      if (createIfDoesNotExist) {
        return ((_a = this.getOrCreateFilterWrapper(column, source)) === null || _a === void 0 ? void 0 : _a.filterPromise) || null;
      }
      var filterWrapper = this.cachedFilter(column);
      return filterWrapper ? filterWrapper.filterPromise : null;
    };
    FilterManager2.prototype.isFilterActive = function(column) {
      var filterWrapper = this.cachedFilter(column);
      return !!filterWrapper && filterWrapper.filterPromise.resolveNow(false, function(filter) {
        return filter.isFilterActive();
      });
    };
    FilterManager2.prototype.getOrCreateFilterWrapper = function(column, source) {
      if (!column.isFilterAllowed()) {
        return null;
      }
      var filterWrapper = this.cachedFilter(column);
      if (!filterWrapper) {
        filterWrapper = this.createFilterWrapper(column, source);
        this.setColumnFilterWrapper(column, filterWrapper);
      } else if (source !== "NO_UI") {
        this.putIntoGui(filterWrapper, source);
      }
      return filterWrapper;
    };
    FilterManager2.prototype.cachedFilter = function(column) {
      return this.allColumnFilters.get(column.getColId());
    };
    FilterManager2.prototype.getDefaultFilter = function(column) {
      var defaultFilter;
      if (ModuleRegistry.__isRegistered(ModuleNames.SetFilterModule, this.context.getGridId())) {
        defaultFilter = "agSetColumnFilter";
      } else {
        var cellDataType = this.dataTypeService.getBaseDataType(column);
        if (cellDataType === "number") {
          defaultFilter = "agNumberColumnFilter";
        } else if (cellDataType === "date" || cellDataType === "dateString") {
          defaultFilter = "agDateColumnFilter";
        } else {
          defaultFilter = "agTextColumnFilter";
        }
      }
      return defaultFilter;
    };
    FilterManager2.prototype.getDefaultFloatingFilter = function(column) {
      var defaultFloatingFilterType;
      if (ModuleRegistry.__isRegistered(ModuleNames.SetFilterModule, this.context.getGridId())) {
        defaultFloatingFilterType = "agSetColumnFloatingFilter";
      } else {
        var cellDataType = this.dataTypeService.getBaseDataType(column);
        if (cellDataType === "number") {
          defaultFloatingFilterType = "agNumberColumnFloatingFilter";
        } else if (cellDataType === "date" || cellDataType === "dateString") {
          defaultFloatingFilterType = "agDateColumnFloatingFilter";
        } else {
          defaultFloatingFilterType = "agTextColumnFloatingFilter";
        }
      }
      return defaultFloatingFilterType;
    };
    FilterManager2.prototype.createFilterInstance = function(column) {
      var _this = this;
      var defaultFilter = this.getDefaultFilter(column);
      var colDef = column.getColDef();
      var filterInstance;
      var params = __assign$f(__assign$f({}, this.createFilterParams(column, colDef)), { filterModifiedCallback: function() {
        return _this.filterModifiedCallbackFactory(filterInstance, column)();
      }, filterChangedCallback: function(additionalEventAttributes) {
        return _this.filterChangedCallbackFactory(filterInstance, column)(additionalEventAttributes);
      }, doesRowPassOtherFilter: function(node) {
        return _this.doesRowPassOtherFilters(filterInstance, node);
      } });
      var compDetails = this.userComponentFactory.getFilterDetails(colDef, params, defaultFilter);
      if (!compDetails) {
        return { filterPromise: null, compDetails: null };
      }
      return {
        filterPromise: function() {
          var filterPromise = compDetails.newAgStackInstance();
          if (filterPromise) {
            filterPromise.then(function(r) {
              return filterInstance = r;
            });
          }
          return filterPromise;
        },
        compDetails
      };
    };
    FilterManager2.prototype.createFilterParams = function(column, colDef) {
      var params = this.gridOptionsService.addGridCommonParams({
        column,
        colDef: cloneObject(colDef),
        rowModel: this.rowModel,
        filterChangedCallback: function() {
        },
        filterModifiedCallback: function() {
        },
        valueGetter: this.createValueGetter(column),
        getValue: this.createGetValue(column),
        doesRowPassOtherFilter: function() {
          return true;
        }
      });
      return params;
    };
    FilterManager2.prototype.createFilterWrapper = function(column, source) {
      var _a;
      var filterWrapper = {
        column,
        filterPromise: null,
        compiledElement: null,
        guiPromise: AgPromise.resolve(null),
        compDetails: null
      };
      var _b = this.createFilterInstance(column), filterPromise = _b.filterPromise, compDetails = _b.compDetails;
      filterWrapper.filterPromise = (_a = filterPromise === null || filterPromise === void 0 ? void 0 : filterPromise()) !== null && _a !== void 0 ? _a : null;
      filterWrapper.compDetails = compDetails;
      if (filterPromise) {
        this.putIntoGui(filterWrapper, source);
      }
      return filterWrapper;
    };
    FilterManager2.prototype.putIntoGui = function(filterWrapper, source) {
      var _this = this;
      var eFilterGui = document.createElement("div");
      eFilterGui.className = "ag-filter";
      filterWrapper.guiPromise = new AgPromise(function(resolve) {
        filterWrapper.filterPromise.then(function(filter) {
          var guiFromFilter = filter.getGui();
          if (!exists(guiFromFilter)) {
            console.warn("AG Grid: getGui method from filter returned ".concat(guiFromFilter, ", it should be a DOM element or an HTML template string."));
          }
          if (typeof guiFromFilter === "string") {
            guiFromFilter = loadTemplate(guiFromFilter);
          }
          eFilterGui.appendChild(guiFromFilter);
          resolve(eFilterGui);
          var event = {
            type: Events.EVENT_FILTER_OPENED,
            column: filterWrapper.column,
            source,
            eGui: eFilterGui
          };
          _this.eventService.dispatchEvent(event);
        });
      });
    };
    FilterManager2.prototype.onColumnsChanged = function() {
      var _this = this;
      var columns = [];
      this.allColumnFilters.forEach(function(wrapper, colId) {
        var currentColumn;
        if (wrapper.column.isPrimary()) {
          currentColumn = _this.columnModel.getPrimaryColumn(colId);
        } else {
          currentColumn = _this.columnModel.getGridColumn(colId);
        }
        if (currentColumn) {
          return;
        }
        columns.push(wrapper.column);
        _this.disposeFilterWrapper(wrapper, "columnChanged");
        _this.disposeColumnListener(colId);
      });
      if (columns.length > 0) {
        this.onFilterChanged({ columns, source: "api" });
      } else {
        this.updateDependantFilters();
      }
    };
    FilterManager2.prototype.updateDependantFilters = function() {
      var _this = this;
      var groupColumns = this.columnModel.getGroupAutoColumns();
      groupColumns === null || groupColumns === void 0 ? void 0 : groupColumns.forEach(function(groupColumn) {
        if (groupColumn.getColDef().filter === "agGroupColumnFilter") {
          _this.getOrCreateFilterWrapper(groupColumn, "NO_UI");
        }
      });
    };
    FilterManager2.prototype.isFilterAllowed = function(column) {
      var _a, _b;
      if (this.isAdvancedFilterEnabled()) {
        return false;
      }
      var isFilterAllowed = column.isFilterAllowed();
      if (!isFilterAllowed) {
        return false;
      }
      var filterWrapper = this.allColumnFilters.get(column.getColId());
      return (_b = (_a = filterWrapper === null || filterWrapper === void 0 ? void 0 : filterWrapper.filterPromise) === null || _a === void 0 ? void 0 : _a.resolveNow(
        true,
        // defer to filter component isFilterAllowed if it exists
        function(filter) {
          return typeof (filter === null || filter === void 0 ? void 0 : filter.isFilterAllowed) === "function" ? filter === null || filter === void 0 ? void 0 : filter.isFilterAllowed() : true;
        }
      )) !== null && _b !== void 0 ? _b : true;
    };
    FilterManager2.prototype.getFloatingFilterCompDetails = function(column, showParentFilter) {
      var _this = this;
      var parentFilterInstance = function(callback) {
        var filterComponent = _this.getFilterComponent(column, "NO_UI");
        if (filterComponent == null) {
          return;
        }
        filterComponent.then(function(instance) {
          callback(unwrapUserComp(instance));
        });
      };
      var colDef = column.getColDef();
      var filterParams = __assign$f(__assign$f({}, this.createFilterParams(column, colDef)), { filterChangedCallback: function() {
        return parentFilterInstance(function(filterInstance) {
          return _this.filterChangedCallbackFactory(filterInstance, column)();
        });
      } });
      var finalFilterParams = this.userComponentFactory.mergeParamsWithApplicationProvidedParams(colDef, FilterComponent, filterParams);
      var defaultFloatingFilterType = this.userComponentFactory.getDefaultFloatingFilterType(colDef, function() {
        return _this.getDefaultFloatingFilter(column);
      });
      if (defaultFloatingFilterType == null) {
        defaultFloatingFilterType = "agReadOnlyFloatingFilter";
      }
      var params = {
        column,
        filterParams: finalFilterParams,
        currentParentModel: function() {
          return _this.getCurrentFloatingFilterParentModel(column);
        },
        parentFilterInstance,
        showParentFilter,
        suppressFilterButton: false
        // This one might be overridden from the colDef
      };
      return this.userComponentFactory.getFloatingFilterCompDetails(colDef, params, defaultFloatingFilterType);
    };
    FilterManager2.prototype.getCurrentFloatingFilterParentModel = function(column) {
      var filterComponent = this.getFilterComponent(column, "NO_UI", false);
      return filterComponent ? filterComponent.resolveNow(null, function(filter) {
        return filter && filter.getModel();
      }) : null;
    };
    FilterManager2.prototype.destroyFilter = function(column, source) {
      if (source === void 0) {
        source = "api";
      }
      var colId = column.getColId();
      var filterWrapper = this.allColumnFilters.get(colId);
      this.disposeColumnListener(colId);
      delete this.initialFilterModel[colId];
      if (filterWrapper) {
        this.disposeFilterWrapper(filterWrapper, source);
        this.onFilterChanged({
          columns: [column],
          source: "api"
        });
      }
    };
    FilterManager2.prototype.disposeColumnListener = function(colId) {
      var columnListener = this.allColumnListeners.get(colId);
      if (columnListener) {
        this.allColumnListeners.delete(colId);
        columnListener();
      }
    };
    FilterManager2.prototype.disposeFilterWrapper = function(filterWrapper, source) {
      var _this = this;
      filterWrapper.filterPromise.then(function(filter) {
        _this.getContext().destroyBean(filter);
        filterWrapper.column.setFilterActive(false, "filterDestroyed");
        _this.allColumnFilters.delete(filterWrapper.column.getColId());
        var event = {
          type: Events.EVENT_FILTER_DESTROYED,
          source,
          column: filterWrapper.column
        };
        _this.eventService.dispatchEvent(event);
      });
    };
    FilterManager2.prototype.filterModifiedCallbackFactory = function(filter, column) {
      var _this = this;
      return function() {
        var event = {
          type: Events.EVENT_FILTER_MODIFIED,
          column,
          filterInstance: filter
        };
        _this.eventService.dispatchEvent(event);
      };
    };
    FilterManager2.prototype.filterChangedCallbackFactory = function(filter, column) {
      var _this = this;
      return function(additionalEventAttributes) {
        var _a;
        var source = (_a = additionalEventAttributes === null || additionalEventAttributes === void 0 ? void 0 : additionalEventAttributes.source) !== null && _a !== void 0 ? _a : "api";
        var params = {
          filter,
          additionalEventAttributes,
          columns: [column],
          source
        };
        _this.callOnFilterChangedOutsideRenderCycle(params);
      };
    };
    FilterManager2.prototype.checkDestroyFilter = function(colId) {
      var _this = this;
      var filterWrapper = this.allColumnFilters.get(colId);
      if (!filterWrapper) {
        return;
      }
      var column = filterWrapper.column;
      var compDetails = (column.isFilterAllowed() ? this.createFilterInstance(column) : { compDetails: null }).compDetails;
      if (this.areFilterCompsDifferent(filterWrapper.compDetails, compDetails)) {
        this.destroyFilter(column, "columnChanged");
        return;
      }
      var newFilterParams = column.getColDef().filterParams;
      if (!filterWrapper.filterPromise) {
        this.destroyFilter(column, "columnChanged");
        return;
      }
      filterWrapper.filterPromise.then(function(filter) {
        var shouldRefreshFilter = (filter === null || filter === void 0 ? void 0 : filter.refresh) ? filter.refresh(__assign$f(__assign$f(__assign$f({}, _this.createFilterParams(column, column.getColDef())), { filterModifiedCallback: _this.filterModifiedCallbackFactory(filter, column), filterChangedCallback: _this.filterChangedCallbackFactory(filter, column), doesRowPassOtherFilter: function(node) {
          return _this.doesRowPassOtherFilters(filter, node);
        } }), newFilterParams)) : true;
        if (shouldRefreshFilter === false) {
          _this.destroyFilter(column, "columnChanged");
        }
      });
    };
    FilterManager2.prototype.setColumnFilterWrapper = function(column, filterWrapper) {
      var _this = this;
      var colId = column.getColId();
      this.allColumnFilters.set(colId, filterWrapper);
      this.allColumnListeners.set(colId, this.addManagedListener(column, Column.EVENT_COL_DEF_CHANGED, function() {
        return _this.checkDestroyFilter(colId);
      }));
    };
    FilterManager2.prototype.areFilterCompsDifferent = function(oldCompDetails, newCompDetails) {
      if (!newCompDetails || !oldCompDetails) {
        return true;
      }
      var oldComponentClass = oldCompDetails.componentClass;
      var newComponentClass = newCompDetails.componentClass;
      var isSameComponentClass = oldComponentClass === newComponentClass || // react hooks returns new wrappers, so check nested render method
      (oldComponentClass === null || oldComponentClass === void 0 ? void 0 : oldComponentClass.render) && (newComponentClass === null || newComponentClass === void 0 ? void 0 : newComponentClass.render) && oldComponentClass.render === newComponentClass.render;
      return !isSameComponentClass;
    };
    FilterManager2.prototype.getAdvancedFilterModel = function() {
      return this.isAdvancedFilterEnabled() ? this.advancedFilterService.getModel() : null;
    };
    FilterManager2.prototype.setAdvancedFilterModel = function(expression) {
      if (!this.isAdvancedFilterEnabled()) {
        return;
      }
      if (this.dataTypeService.isPendingInference()) {
        this.advancedFilterModelUpdateQueue.push(expression);
        return;
      }
      this.advancedFilterService.setModel(expression !== null && expression !== void 0 ? expression : null);
      this.onFilterChanged({ source: "advancedFilter" });
    };
    FilterManager2.prototype.showAdvancedFilterBuilder = function(source) {
      if (!this.isAdvancedFilterEnabled()) {
        return;
      }
      this.advancedFilterService.getCtrl().toggleFilterBuilder(source, true);
    };
    FilterManager2.prototype.updateAdvancedFilterColumns = function() {
      if (!this.isAdvancedFilterEnabled()) {
        return;
      }
      if (this.advancedFilterService.updateValidity()) {
        this.onFilterChanged({ source: "advancedFilter" });
      }
    };
    FilterManager2.prototype.hasFloatingFilters = function() {
      if (this.isAdvancedFilterEnabled()) {
        return false;
      }
      var gridColumns = this.columnModel.getAllGridColumns();
      return gridColumns.some(function(col) {
        return col.getColDef().floatingFilter;
      });
    };
    FilterManager2.prototype.getFilterInstance = function(key, callback) {
      if (this.isAdvancedFilterEnabled()) {
        this.warnAdvancedFilters();
        return void 0;
      }
      var res = this.getFilterInstanceImpl(key, function(instance) {
        if (!callback) {
          return;
        }
        var unwrapped2 = unwrapUserComp(instance);
        callback(unwrapped2);
      });
      var unwrapped = unwrapUserComp(res);
      return unwrapped;
    };
    FilterManager2.prototype.getColumnFilterInstance = function(key) {
      var _this = this;
      return new Promise(function(resolve) {
        _this.getFilterInstance(key, function(filter) {
          resolve(filter);
        });
      });
    };
    FilterManager2.prototype.getFilterInstanceImpl = function(key, callback) {
      var column = this.columnModel.getPrimaryColumn(key);
      if (!column) {
        return void 0;
      }
      var filterPromise = this.getFilterComponent(column, "NO_UI");
      var currentValue = filterPromise && filterPromise.resolveNow(null, function(filterComp) {
        return filterComp;
      });
      if (currentValue) {
        setTimeout(callback, 0, currentValue);
      } else if (filterPromise) {
        filterPromise.then(function(comp) {
          callback(comp);
        });
      }
      return currentValue;
    };
    FilterManager2.prototype.warnAdvancedFilters = function() {
      warnOnce("Column Filter API methods have been disabled as Advanced Filters are enabled.");
    };
    FilterManager2.prototype.setupAdvancedFilterHeaderComp = function(eCompToInsertBefore) {
      var _a;
      (_a = this.advancedFilterService) === null || _a === void 0 ? void 0 : _a.getCtrl().setupHeaderComp(eCompToInsertBefore);
    };
    FilterManager2.prototype.getHeaderRowCount = function() {
      return this.isAdvancedFilterHeaderActive() ? 1 : 0;
    };
    FilterManager2.prototype.getHeaderHeight = function() {
      return this.isAdvancedFilterHeaderActive() ? this.advancedFilterService.getCtrl().getHeaderHeight() : 0;
    };
    FilterManager2.prototype.processFilterModelUpdateQueue = function() {
      var _this = this;
      this.filterModelUpdateQueue.forEach(function(_a) {
        var model = _a.model, source = _a.source;
        return _this.setFilterModel(model, source);
      });
      this.filterModelUpdateQueue = [];
      this.columnFilterModelUpdateQueue.forEach(function(_a) {
        var key = _a.key, model = _a.model, resolve = _a.resolve;
        _this.setColumnFilterModel(key, model).then(function() {
          return resolve();
        });
      });
      this.columnFilterModelUpdateQueue = [];
      this.advancedFilterModelUpdateQueue.forEach(function(model) {
        return _this.setAdvancedFilterModel(model);
      });
      this.advancedFilterModelUpdateQueue = [];
    };
    FilterManager2.prototype.getColumnFilterModel = function(key) {
      var filterWrapper = this.getFilterWrapper(key);
      return filterWrapper ? this.getModelFromFilterWrapper(filterWrapper) : null;
    };
    FilterManager2.prototype.setColumnFilterModel = function(key, model) {
      if (this.isAdvancedFilterEnabled()) {
        this.warnAdvancedFilters();
        return Promise.resolve();
      }
      if (this.dataTypeService.isPendingInference()) {
        var resolve_1 = function() {
        };
        var promise = new Promise(function(res) {
          resolve_1 = res;
        });
        this.columnFilterModelUpdateQueue.push({ key, model, resolve: resolve_1 });
        return promise;
      }
      var column = this.columnModel.getPrimaryColumn(key);
      var filterWrapper = column ? this.getOrCreateFilterWrapper(column, "NO_UI") : null;
      var convertPromise = function(promise2) {
        return new Promise(function(resolve) {
          promise2.then(function(result) {
            return resolve(result);
          });
        });
      };
      return filterWrapper ? convertPromise(this.setModelOnFilterWrapper(filterWrapper.filterPromise, model)) : Promise.resolve();
    };
    FilterManager2.prototype.getFilterWrapper = function(key) {
      var _a;
      var column = this.columnModel.getPrimaryColumn(key);
      return column ? (_a = this.cachedFilter(column)) !== null && _a !== void 0 ? _a : null : null;
    };
    FilterManager2.prototype.destroy = function() {
      var _this = this;
      _super.prototype.destroy.call(this);
      this.allColumnFilters.forEach(function(filterWrapper) {
        return _this.disposeFilterWrapper(filterWrapper, "gridDestroyed");
      });
      this.allColumnListeners.clear();
    };
    __decorate$23([
      Autowired("valueService")
    ], FilterManager2.prototype, "valueService", void 0);
    __decorate$23([
      Autowired("columnModel")
    ], FilterManager2.prototype, "columnModel", void 0);
    __decorate$23([
      Autowired("rowModel")
    ], FilterManager2.prototype, "rowModel", void 0);
    __decorate$23([
      Autowired("userComponentFactory")
    ], FilterManager2.prototype, "userComponentFactory", void 0);
    __decorate$23([
      Autowired("rowRenderer")
    ], FilterManager2.prototype, "rowRenderer", void 0);
    __decorate$23([
      Autowired("dataTypeService")
    ], FilterManager2.prototype, "dataTypeService", void 0);
    __decorate$23([
      Autowired("quickFilterService")
    ], FilterManager2.prototype, "quickFilterService", void 0);
    __decorate$23([
      Optional("advancedFilterService")
    ], FilterManager2.prototype, "advancedFilterService", void 0);
    __decorate$23([
      PostConstruct
    ], FilterManager2.prototype, "init", null);
    FilterManager2 = __decorate$23([
      Bean("filterManager")
    ], FilterManager2);
    return FilterManager2;
  }(BeanStub)
);
var __extends$2e = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AbstractHeaderCellComp = (
  /** @class */
  function(_super) {
    __extends$2e(AbstractHeaderCellComp2, _super);
    function AbstractHeaderCellComp2(template, ctrl) {
      var _this = _super.call(this, template) || this;
      _this.ctrl = ctrl;
      return _this;
    }
    AbstractHeaderCellComp2.prototype.getCtrl = function() {
      return this.ctrl;
    };
    return AbstractHeaderCellComp2;
  }(Component2)
);
var __extends$2d = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$22 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HeaderFilterCellComp = (
  /** @class */
  function(_super) {
    __extends$2d(HeaderFilterCellComp2, _super);
    function HeaderFilterCellComp2(ctrl) {
      return _super.call(this, HeaderFilterCellComp2.TEMPLATE, ctrl) || this;
    }
    HeaderFilterCellComp2.prototype.postConstruct = function() {
      var _this = this;
      var eGui = this.getGui();
      var compProxy = {
        addOrRemoveCssClass: function(cssClassName, on) {
          return _this.addOrRemoveCssClass(cssClassName, on);
        },
        addOrRemoveBodyCssClass: function(cssClassName, on) {
          return _this.eFloatingFilterBody.classList.toggle(cssClassName, on);
        },
        setButtonWrapperDisplayed: function(displayed) {
          return setDisplayed(_this.eButtonWrapper, displayed);
        },
        setCompDetails: function(compDetails) {
          return _this.setCompDetails(compDetails);
        },
        getFloatingFilterComp: function() {
          return _this.compPromise;
        },
        setWidth: function(width) {
          return eGui.style.width = width;
        },
        setMenuIcon: function(eIcon) {
          return _this.eButtonShowMainFilter.appendChild(eIcon);
        }
      };
      this.ctrl.setComp(compProxy, eGui, this.eButtonShowMainFilter, this.eFloatingFilterBody);
    };
    HeaderFilterCellComp2.prototype.setCompDetails = function(compDetails) {
      var _this = this;
      if (!compDetails) {
        this.destroyFloatingFilterComp();
        this.compPromise = null;
        return;
      }
      this.compPromise = compDetails.newAgStackInstance();
      this.compPromise.then(function(comp) {
        return _this.afterCompCreated(comp);
      });
    };
    HeaderFilterCellComp2.prototype.destroyFloatingFilterComp = function() {
      if (this.floatingFilterComp) {
        this.eFloatingFilterBody.removeChild(this.floatingFilterComp.getGui());
        this.floatingFilterComp = this.destroyBean(this.floatingFilterComp);
      }
    };
    HeaderFilterCellComp2.prototype.afterCompCreated = function(comp) {
      if (!comp) {
        return;
      }
      if (!this.isAlive()) {
        this.destroyBean(comp);
        return;
      }
      this.destroyFloatingFilterComp();
      this.floatingFilterComp = comp;
      this.eFloatingFilterBody.appendChild(comp.getGui());
      if (comp.afterGuiAttached) {
        comp.afterGuiAttached();
      }
    };
    HeaderFilterCellComp2.TEMPLATE = '<div class="ag-header-cell ag-floating-filter" role="gridcell" tabindex="-1">\n            <div ref="eFloatingFilterBody" role="presentation"></div>\n            <div class="ag-floating-filter-button ag-hidden" ref="eButtonWrapper" role="presentation">\n                <button type="button" class="ag-button ag-floating-filter-button-button" ref="eButtonShowMainFilter" tabindex="-1"></button>\n            </div>\n        </div>';
    __decorate$22([
      RefSelector("eFloatingFilterBody")
    ], HeaderFilterCellComp2.prototype, "eFloatingFilterBody", void 0);
    __decorate$22([
      RefSelector("eButtonWrapper")
    ], HeaderFilterCellComp2.prototype, "eButtonWrapper", void 0);
    __decorate$22([
      RefSelector("eButtonShowMainFilter")
    ], HeaderFilterCellComp2.prototype, "eButtonShowMainFilter", void 0);
    __decorate$22([
      PostConstruct
    ], HeaderFilterCellComp2.prototype, "postConstruct", null);
    __decorate$22([
      PreDestroy
    ], HeaderFilterCellComp2.prototype, "destroyFloatingFilterComp", null);
    return HeaderFilterCellComp2;
  }(AbstractHeaderCellComp)
);
var __extends$2c = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$21 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var LayoutCssClasses;
(function(LayoutCssClasses2) {
  LayoutCssClasses2["AUTO_HEIGHT"] = "ag-layout-auto-height";
  LayoutCssClasses2["NORMAL"] = "ag-layout-normal";
  LayoutCssClasses2["PRINT"] = "ag-layout-print";
})(LayoutCssClasses || (LayoutCssClasses = {}));
var LayoutFeature = (
  /** @class */
  function(_super) {
    __extends$2c(LayoutFeature2, _super);
    function LayoutFeature2(view) {
      var _this = _super.call(this) || this;
      _this.view = view;
      return _this;
    }
    LayoutFeature2.prototype.postConstruct = function() {
      this.addManagedPropertyListener("domLayout", this.updateLayoutClasses.bind(this));
      this.updateLayoutClasses();
    };
    LayoutFeature2.prototype.updateLayoutClasses = function() {
      var domLayout = this.getDomLayout();
      var params = {
        autoHeight: domLayout === "autoHeight",
        normal: domLayout === "normal",
        print: domLayout === "print"
      };
      var cssClass = params.autoHeight ? LayoutCssClasses.AUTO_HEIGHT : params.print ? LayoutCssClasses.PRINT : LayoutCssClasses.NORMAL;
      this.view.updateLayoutClasses(cssClass, params);
    };
    LayoutFeature2.prototype.getDomLayout = function() {
      var _a;
      var domLayout = (_a = this.gridOptionsService.get("domLayout")) !== null && _a !== void 0 ? _a : "normal";
      var validLayouts = ["normal", "print", "autoHeight"];
      if (validLayouts.indexOf(domLayout) === -1) {
        warnOnce("".concat(domLayout, " is not valid for DOM Layout, valid values are 'normal', 'autoHeight', 'print'."));
        return "normal";
      }
      return domLayout;
    };
    __decorate$21([
      PostConstruct
    ], LayoutFeature2.prototype, "postConstruct", null);
    return LayoutFeature2;
  }(BeanStub)
);
var __extends$2b = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$e = function() {
  __assign$e = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$e.apply(this, arguments);
};
var __decorate$20 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ScrollDirection;
(function(ScrollDirection2) {
  ScrollDirection2[ScrollDirection2["Vertical"] = 0] = "Vertical";
  ScrollDirection2[ScrollDirection2["Horizontal"] = 1] = "Horizontal";
})(ScrollDirection || (ScrollDirection = {}));
var ScrollSource;
(function(ScrollSource2) {
  ScrollSource2[ScrollSource2["Container"] = 0] = "Container";
  ScrollSource2[ScrollSource2["FakeContainer"] = 1] = "FakeContainer";
})(ScrollSource || (ScrollSource = {}));
var GridBodyScrollFeature = (
  /** @class */
  function(_super) {
    __extends$2b(GridBodyScrollFeature2, _super);
    function GridBodyScrollFeature2(eBodyViewport) {
      var _this = _super.call(this) || this;
      _this.lastScrollSource = [null, null];
      _this.scrollLeft = -1;
      _this.nextScrollTop = -1;
      _this.scrollTop = -1;
      _this.lastOffsetHeight = -1;
      _this.lastScrollTop = -1;
      _this.eBodyViewport = eBodyViewport;
      _this.resetLastHScrollDebounced = debounce(function() {
        return _this.lastScrollSource[ScrollDirection.Horizontal] = null;
      }, 500);
      _this.resetLastVScrollDebounced = debounce(function() {
        return _this.lastScrollSource[ScrollDirection.Vertical] = null;
      }, 500);
      return _this;
    }
    GridBodyScrollFeature2.prototype.postConstruct = function() {
      var _this = this;
      this.enableRtl = this.gridOptionsService.get("enableRtl");
      this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));
      this.ctrlsService.whenReady(function(p) {
        _this.centerRowContainerCtrl = p.centerRowContainerCtrl;
        _this.onDisplayedColumnsWidthChanged();
        _this.addScrollListener();
      });
    };
    GridBodyScrollFeature2.prototype.addScrollListener = function() {
      var fakeHScroll = this.ctrlsService.getFakeHScrollComp();
      var fakeVScroll = this.ctrlsService.getFakeVScrollComp();
      this.addManagedListener(this.centerRowContainerCtrl.getViewportElement(), "scroll", this.onHScroll.bind(this));
      fakeHScroll.onScrollCallback(this.onFakeHScroll.bind(this));
      var isDebounce = this.gridOptionsService.get("debounceVerticalScrollbar");
      var onVScroll = isDebounce ? debounce(this.onVScroll.bind(this), 100) : this.onVScroll.bind(this);
      var onFakeVScroll = isDebounce ? debounce(this.onFakeVScroll.bind(this), 100) : this.onFakeVScroll.bind(this);
      this.addManagedListener(this.eBodyViewport, "scroll", onVScroll);
      fakeVScroll.onScrollCallback(onFakeVScroll);
    };
    GridBodyScrollFeature2.prototype.onDisplayedColumnsWidthChanged = function() {
      if (this.enableRtl) {
        this.horizontallyScrollHeaderCenterAndFloatingCenter();
      }
    };
    GridBodyScrollFeature2.prototype.horizontallyScrollHeaderCenterAndFloatingCenter = function(scrollLeft) {
      var notYetInitialised = this.centerRowContainerCtrl == null;
      if (notYetInitialised) {
        return;
      }
      if (scrollLeft === void 0) {
        scrollLeft = this.centerRowContainerCtrl.getCenterViewportScrollLeft();
      }
      var offset = this.enableRtl ? scrollLeft : -scrollLeft;
      var topCenterContainer = this.ctrlsService.getTopCenterRowContainerCtrl();
      var stickyTopCenterContainer = this.ctrlsService.getStickyTopCenterRowContainerCtrl();
      var bottomCenterContainer = this.ctrlsService.getBottomCenterRowContainerCtrl();
      var fakeHScroll = this.ctrlsService.getFakeHScrollComp();
      var centerHeaderContainer = this.ctrlsService.getHeaderRowContainerCtrl();
      centerHeaderContainer.setHorizontalScroll(-offset);
      bottomCenterContainer.setContainerTranslateX(offset);
      topCenterContainer.setContainerTranslateX(offset);
      stickyTopCenterContainer.setContainerTranslateX(offset);
      var centerViewport = this.centerRowContainerCtrl.getViewportElement();
      var isCenterViewportLastHorizontal = this.lastScrollSource[ScrollDirection.Horizontal] === ScrollSource.Container;
      scrollLeft = Math.abs(scrollLeft);
      if (isCenterViewportLastHorizontal) {
        fakeHScroll.setScrollPosition(scrollLeft);
      } else {
        setScrollLeft(centerViewport, scrollLeft, this.enableRtl);
      }
    };
    GridBodyScrollFeature2.prototype.isControllingScroll = function(source, direction) {
      if (this.lastScrollSource[direction] == null) {
        this.lastScrollSource[direction] = source;
        return true;
      }
      return this.lastScrollSource[direction] === source;
    };
    GridBodyScrollFeature2.prototype.onFakeHScroll = function() {
      if (!this.isControllingScroll(ScrollSource.FakeContainer, ScrollDirection.Horizontal)) {
        return;
      }
      this.onHScrollCommon(ScrollSource.FakeContainer);
    };
    GridBodyScrollFeature2.prototype.onHScroll = function() {
      if (!this.isControllingScroll(ScrollSource.Container, ScrollDirection.Horizontal)) {
        return;
      }
      this.onHScrollCommon(ScrollSource.Container);
    };
    GridBodyScrollFeature2.prototype.onHScrollCommon = function(source) {
      var centerContainerViewport = this.centerRowContainerCtrl.getViewportElement();
      var scrollLeft = centerContainerViewport.scrollLeft;
      if (this.shouldBlockScrollUpdate(ScrollDirection.Horizontal, scrollLeft, true)) {
        return;
      }
      var newScrollLeft;
      if (source === ScrollSource.Container) {
        newScrollLeft = getScrollLeft(centerContainerViewport, this.enableRtl);
      } else {
        newScrollLeft = this.ctrlsService.getFakeHScrollComp().getScrollPosition();
      }
      this.doHorizontalScroll(Math.round(newScrollLeft));
      this.resetLastHScrollDebounced();
    };
    GridBodyScrollFeature2.prototype.onFakeVScroll = function() {
      if (!this.isControllingScroll(ScrollSource.FakeContainer, ScrollDirection.Vertical)) {
        return;
      }
      this.onVScrollCommon(ScrollSource.FakeContainer);
    };
    GridBodyScrollFeature2.prototype.onVScroll = function() {
      if (!this.isControllingScroll(ScrollSource.Container, ScrollDirection.Vertical)) {
        return;
      }
      this.onVScrollCommon(ScrollSource.Container);
    };
    GridBodyScrollFeature2.prototype.onVScrollCommon = function(source) {
      var scrollTop;
      if (source === ScrollSource.Container) {
        scrollTop = this.eBodyViewport.scrollTop;
      } else {
        scrollTop = this.ctrlsService.getFakeVScrollComp().getScrollPosition();
      }
      if (this.shouldBlockScrollUpdate(ScrollDirection.Vertical, scrollTop, true)) {
        return;
      }
      this.animationFrameService.setScrollTop(scrollTop);
      this.nextScrollTop = scrollTop;
      if (source === ScrollSource.Container) {
        this.ctrlsService.getFakeVScrollComp().setScrollPosition(scrollTop);
      } else {
        this.eBodyViewport.scrollTop = scrollTop;
      }
      if (this.gridOptionsService.get("suppressAnimationFrame")) {
        this.scrollGridIfNeeded();
      } else {
        this.animationFrameService.schedule();
      }
      this.resetLastVScrollDebounced();
    };
    GridBodyScrollFeature2.prototype.doHorizontalScroll = function(scrollLeft) {
      var fakeScrollLeft = this.ctrlsService.getFakeHScrollComp().getScrollPosition();
      if (this.scrollLeft === scrollLeft && scrollLeft === fakeScrollLeft) {
        return;
      }
      this.scrollLeft = scrollLeft;
      this.fireScrollEvent(ScrollDirection.Horizontal);
      this.horizontallyScrollHeaderCenterAndFloatingCenter(scrollLeft);
      this.centerRowContainerCtrl.onHorizontalViewportChanged(true);
    };
    GridBodyScrollFeature2.prototype.fireScrollEvent = function(direction) {
      var _this = this;
      var bodyScrollEvent = {
        type: Events.EVENT_BODY_SCROLL,
        direction: direction === ScrollDirection.Horizontal ? "horizontal" : "vertical",
        left: this.scrollLeft,
        top: this.scrollTop
      };
      this.eventService.dispatchEvent(bodyScrollEvent);
      window.clearTimeout(this.scrollTimer);
      this.scrollTimer = void 0;
      this.scrollTimer = window.setTimeout(function() {
        var bodyScrollEndEvent = __assign$e(__assign$e({}, bodyScrollEvent), { type: Events.EVENT_BODY_SCROLL_END });
        _this.eventService.dispatchEvent(bodyScrollEndEvent);
      }, 100);
    };
    GridBodyScrollFeature2.prototype.shouldBlockScrollUpdate = function(direction, scrollTo, touchOnly) {
      if (touchOnly === void 0) {
        touchOnly = false;
      }
      if (touchOnly && !isIOSUserAgent()) {
        return false;
      }
      if (direction === ScrollDirection.Vertical) {
        return this.shouldBlockVerticalScroll(scrollTo);
      }
      return this.shouldBlockHorizontalScroll(scrollTo);
    };
    GridBodyScrollFeature2.prototype.shouldBlockVerticalScroll = function(scrollTo) {
      var clientHeight = getInnerHeight(this.eBodyViewport);
      var scrollHeight = this.eBodyViewport.scrollHeight;
      if (scrollTo < 0 || scrollTo + clientHeight > scrollHeight) {
        return true;
      }
      return false;
    };
    GridBodyScrollFeature2.prototype.shouldBlockHorizontalScroll = function(scrollTo) {
      var clientWidth = this.centerRowContainerCtrl.getCenterWidth();
      var scrollWidth = this.centerRowContainerCtrl.getViewportElement().scrollWidth;
      if (this.enableRtl && isRtlNegativeScroll()) {
        if (scrollTo > 0) {
          return true;
        }
      } else if (scrollTo < 0) {
        return true;
      }
      if (Math.abs(scrollTo) + clientWidth > scrollWidth) {
        return true;
      }
      return false;
    };
    GridBodyScrollFeature2.prototype.redrawRowsAfterScroll = function() {
      this.fireScrollEvent(ScrollDirection.Vertical);
    };
    GridBodyScrollFeature2.prototype.checkScrollLeft = function() {
      if (this.scrollLeft !== this.centerRowContainerCtrl.getCenterViewportScrollLeft()) {
        this.onHScrollCommon(ScrollSource.Container);
      }
    };
    GridBodyScrollFeature2.prototype.scrollGridIfNeeded = function() {
      var frameNeeded = this.scrollTop != this.nextScrollTop;
      if (frameNeeded) {
        this.scrollTop = this.nextScrollTop;
        this.redrawRowsAfterScroll();
      }
      return frameNeeded;
    };
    GridBodyScrollFeature2.prototype.setHorizontalScrollPosition = function(hScrollPosition, fromAlignedGridsService) {
      if (fromAlignedGridsService === void 0) {
        fromAlignedGridsService = false;
      }
      var minScrollLeft = 0;
      var maxScrollLeft = this.centerRowContainerCtrl.getViewportElement().scrollWidth - this.centerRowContainerCtrl.getCenterWidth();
      if (!fromAlignedGridsService && this.shouldBlockScrollUpdate(ScrollDirection.Horizontal, hScrollPosition)) {
        if (this.enableRtl && isRtlNegativeScroll()) {
          hScrollPosition = hScrollPosition > 0 ? 0 : maxScrollLeft;
        } else {
          hScrollPosition = Math.min(Math.max(hScrollPosition, minScrollLeft), maxScrollLeft);
        }
      }
      setScrollLeft(this.centerRowContainerCtrl.getViewportElement(), Math.abs(hScrollPosition), this.enableRtl);
      this.doHorizontalScroll(hScrollPosition);
    };
    GridBodyScrollFeature2.prototype.setVerticalScrollPosition = function(vScrollPosition) {
      this.eBodyViewport.scrollTop = vScrollPosition;
    };
    GridBodyScrollFeature2.prototype.getVScrollPosition = function() {
      this.lastScrollTop = this.eBodyViewport.scrollTop;
      this.lastOffsetHeight = this.eBodyViewport.offsetHeight;
      var result = {
        top: this.lastScrollTop,
        bottom: this.lastScrollTop + this.lastOffsetHeight
      };
      return result;
    };
    GridBodyScrollFeature2.prototype.getApproximateVScollPosition = function() {
      if (this.lastScrollTop >= 0 && this.lastOffsetHeight >= 0) {
        return {
          top: this.scrollTop,
          bottom: this.scrollTop + this.lastOffsetHeight
        };
      }
      return this.getVScrollPosition();
    };
    GridBodyScrollFeature2.prototype.getHScrollPosition = function() {
      return this.centerRowContainerCtrl.getHScrollPosition();
    };
    GridBodyScrollFeature2.prototype.isHorizontalScrollShowing = function() {
      return this.centerRowContainerCtrl.isHorizontalScrollShowing();
    };
    GridBodyScrollFeature2.prototype.scrollHorizontally = function(pixels) {
      var oldScrollPosition = this.centerRowContainerCtrl.getViewportElement().scrollLeft;
      this.setHorizontalScrollPosition(oldScrollPosition + pixels);
      return this.centerRowContainerCtrl.getViewportElement().scrollLeft - oldScrollPosition;
    };
    GridBodyScrollFeature2.prototype.scrollToTop = function() {
      this.eBodyViewport.scrollTop = 0;
    };
    GridBodyScrollFeature2.prototype.ensureNodeVisible = function(comparator, position) {
      if (position === void 0) {
        position = null;
      }
      var rowCount = this.rowModel.getRowCount();
      var indexToSelect = -1;
      for (var i = 0; i < rowCount; i++) {
        var node = this.rowModel.getRow(i);
        if (typeof comparator === "function") {
          var predicate = comparator;
          if (node && predicate(node)) {
            indexToSelect = i;
            break;
          }
        } else {
          if (comparator === node || comparator === node.data) {
            indexToSelect = i;
            break;
          }
        }
      }
      if (indexToSelect >= 0) {
        this.ensureIndexVisible(indexToSelect, position);
      }
    };
    GridBodyScrollFeature2.prototype.ensureIndexVisible = function(index, position) {
      var _this = this;
      if (this.gridOptionsService.isDomLayout("print")) {
        return;
      }
      var rowCount = this.paginationProxy.getRowCount();
      if (typeof index !== "number" || index < 0 || index >= rowCount) {
        console.warn("AG Grid: Invalid row index for ensureIndexVisible: " + index);
        return;
      }
      var isPaging = this.gridOptionsService.get("pagination");
      var paginationPanelEnabled = isPaging && !this.gridOptionsService.get("suppressPaginationPanel");
      this.getFrameworkOverrides().wrapIncoming(function() {
        if (!paginationPanelEnabled) {
          _this.paginationProxy.goToPageWithIndex(index);
        }
        var gridBodyCtrl = _this.ctrlsService.getGridBodyCtrl();
        var stickyTopHeight = gridBodyCtrl.getStickyTopHeight();
        var rowNode = _this.paginationProxy.getRow(index);
        var rowGotShiftedDuringOperation;
        do {
          var startingRowTop = rowNode.rowTop;
          var startingRowHeight = rowNode.rowHeight;
          var paginationOffset = _this.paginationProxy.getPixelOffset();
          var rowTopPixel = rowNode.rowTop - paginationOffset;
          var rowBottomPixel = rowTopPixel + rowNode.rowHeight;
          var scrollPosition = _this.getVScrollPosition();
          var heightOffset = _this.heightScaler.getDivStretchOffset();
          var vScrollTop = scrollPosition.top + heightOffset;
          var vScrollBottom = scrollPosition.bottom + heightOffset;
          var viewportHeight = vScrollBottom - vScrollTop;
          var pxTop = _this.heightScaler.getScrollPositionForPixel(rowTopPixel);
          var pxBottom = _this.heightScaler.getScrollPositionForPixel(rowBottomPixel - viewportHeight);
          var pxMiddle = Math.min((pxTop + pxBottom) / 2, rowTopPixel);
          var rowAboveViewport = vScrollTop + stickyTopHeight > rowTopPixel;
          var rowBelowViewport = vScrollBottom < rowBottomPixel;
          var newScrollPosition = null;
          if (position === "top") {
            newScrollPosition = pxTop;
          } else if (position === "bottom") {
            newScrollPosition = pxBottom;
          } else if (position === "middle") {
            newScrollPosition = pxMiddle;
          } else if (rowAboveViewport) {
            newScrollPosition = pxTop - stickyTopHeight;
          } else if (rowBelowViewport) {
            newScrollPosition = pxBottom;
          }
          if (newScrollPosition !== null) {
            _this.setVerticalScrollPosition(newScrollPosition);
            _this.rowRenderer.redraw({ afterScroll: true });
          }
          rowGotShiftedDuringOperation = startingRowTop !== rowNode.rowTop || startingRowHeight !== rowNode.rowHeight;
        } while (rowGotShiftedDuringOperation);
        _this.animationFrameService.flushAllFrames();
      });
    };
    GridBodyScrollFeature2.prototype.ensureColumnVisible = function(key, position) {
      var _this = this;
      if (position === void 0) {
        position = "auto";
      }
      var column = this.columnModel.getGridColumn(key);
      if (!column) {
        return;
      }
      if (column.isPinned()) {
        return;
      }
      if (!this.columnModel.isColumnDisplayed(column)) {
        return;
      }
      var newHorizontalScroll = this.getPositionedHorizontalScroll(column, position);
      this.getFrameworkOverrides().wrapIncoming(function() {
        if (newHorizontalScroll !== null) {
          _this.centerRowContainerCtrl.setCenterViewportScrollLeft(newHorizontalScroll);
        }
        _this.centerRowContainerCtrl.onHorizontalViewportChanged();
        _this.animationFrameService.flushAllFrames();
      });
    };
    GridBodyScrollFeature2.prototype.setScrollPosition = function(top, left) {
      var _this = this;
      this.getFrameworkOverrides().wrapIncoming(function() {
        _this.centerRowContainerCtrl.setCenterViewportScrollLeft(left);
        _this.setVerticalScrollPosition(top);
        _this.rowRenderer.redraw({ afterScroll: true });
        _this.animationFrameService.flushAllFrames();
      });
    };
    GridBodyScrollFeature2.prototype.getPositionedHorizontalScroll = function(column, position) {
      var _a = this.isColumnOutsideViewport(column), columnBeforeStart = _a.columnBeforeStart, columnAfterEnd = _a.columnAfterEnd;
      var viewportTooSmallForColumn = this.centerRowContainerCtrl.getCenterWidth() < column.getActualWidth();
      var viewportWidth = this.centerRowContainerCtrl.getCenterWidth();
      var isRtl = this.enableRtl;
      var alignColToStart = (isRtl ? columnBeforeStart : columnAfterEnd) || viewportTooSmallForColumn;
      var alignColToEnd = isRtl ? columnAfterEnd : columnBeforeStart;
      if (position !== "auto") {
        alignColToStart = position === "start";
        alignColToEnd = position === "end";
      }
      var isMiddle = position === "middle";
      if (alignColToStart || alignColToEnd || isMiddle) {
        var _b = this.getColumnBounds(column), colLeft = _b.colLeft, colMiddle = _b.colMiddle, colRight = _b.colRight;
        if (isMiddle) {
          return colMiddle - viewportWidth / 2;
        }
        if (alignColToStart) {
          return isRtl ? colRight : colLeft;
        }
        return isRtl ? colLeft - viewportWidth : colRight - viewportWidth;
      }
      return null;
    };
    GridBodyScrollFeature2.prototype.isColumnOutsideViewport = function(column) {
      var _a = this.getViewportBounds(), viewportStart = _a.start, viewportEnd = _a.end;
      var _b = this.getColumnBounds(column), colLeft = _b.colLeft, colRight = _b.colRight;
      var isRtl = this.enableRtl;
      var columnBeforeStart = isRtl ? viewportStart > colRight : viewportEnd < colRight;
      var columnAfterEnd = isRtl ? viewportEnd < colLeft : viewportStart > colLeft;
      return { columnBeforeStart, columnAfterEnd };
    };
    GridBodyScrollFeature2.prototype.getColumnBounds = function(column) {
      var isRtl = this.enableRtl;
      var bodyWidth = this.columnModel.getBodyContainerWidth();
      var colWidth = column.getActualWidth();
      var colLeft = column.getLeft();
      var multiplier = isRtl ? -1 : 1;
      var colLeftPixel = isRtl ? bodyWidth - colLeft : colLeft;
      var colRightPixel = colLeftPixel + colWidth * multiplier;
      var colMidPixel = colLeftPixel + colWidth / 2 * multiplier;
      return { colLeft: colLeftPixel, colMiddle: colMidPixel, colRight: colRightPixel };
    };
    GridBodyScrollFeature2.prototype.getViewportBounds = function() {
      var viewportWidth = this.centerRowContainerCtrl.getCenterWidth();
      var scrollPosition = this.centerRowContainerCtrl.getCenterViewportScrollLeft();
      var viewportStartPixel = scrollPosition;
      var viewportEndPixel = viewportWidth + scrollPosition;
      return { start: viewportStartPixel, end: viewportEndPixel, width: viewportWidth };
    };
    __decorate$20([
      Autowired("ctrlsService")
    ], GridBodyScrollFeature2.prototype, "ctrlsService", void 0);
    __decorate$20([
      Autowired("animationFrameService")
    ], GridBodyScrollFeature2.prototype, "animationFrameService", void 0);
    __decorate$20([
      Autowired("paginationProxy")
    ], GridBodyScrollFeature2.prototype, "paginationProxy", void 0);
    __decorate$20([
      Autowired("rowModel")
    ], GridBodyScrollFeature2.prototype, "rowModel", void 0);
    __decorate$20([
      Autowired("rowContainerHeightService")
    ], GridBodyScrollFeature2.prototype, "heightScaler", void 0);
    __decorate$20([
      Autowired("rowRenderer")
    ], GridBodyScrollFeature2.prototype, "rowRenderer", void 0);
    __decorate$20([
      Autowired("columnModel")
    ], GridBodyScrollFeature2.prototype, "columnModel", void 0);
    __decorate$20([
      PostConstruct
    ], GridBodyScrollFeature2.prototype, "postConstruct", null);
    return GridBodyScrollFeature2;
  }(BeanStub)
);
var __extends$2a = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$d = function() {
  __assign$d = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$d.apply(this, arguments);
};
var __decorate$1$ = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __read$r = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$m = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var RowDragFeature = (
  /** @class */
  function(_super) {
    __extends$2a(RowDragFeature2, _super);
    function RowDragFeature2(eContainer) {
      var _this = _super.call(this) || this;
      _this.isMultiRowDrag = false;
      _this.eContainer = eContainer;
      return _this;
    }
    RowDragFeature2.prototype.postConstruct = function() {
      var _this = this;
      if (this.gridOptionsService.isRowModelType("clientSide")) {
        this.clientSideRowModel = this.rowModel;
      }
      this.ctrlsService.whenReady(function() {
        var gridBodyCon = _this.ctrlsService.getGridBodyCtrl();
        _this.autoScrollService = new AutoScrollService({
          scrollContainer: gridBodyCon.getBodyViewportElement(),
          scrollAxis: "y",
          getVerticalPosition: function() {
            return gridBodyCon.getScrollFeature().getVScrollPosition().top;
          },
          setVerticalPosition: function(position) {
            return gridBodyCon.getScrollFeature().setVerticalScrollPosition(position);
          },
          onScrollCallback: function() {
            _this.onDragging(_this.lastDraggingEvent);
          }
        });
      });
    };
    RowDragFeature2.prototype.getContainer = function() {
      return this.eContainer;
    };
    RowDragFeature2.prototype.isInterestedIn = function(type) {
      return type === DragSourceType.RowDrag;
    };
    RowDragFeature2.prototype.getIconName = function() {
      var managedDrag = this.gridOptionsService.get("rowDragManaged");
      if (managedDrag && this.shouldPreventRowMove()) {
        return DragAndDropService.ICON_NOT_ALLOWED;
      }
      return DragAndDropService.ICON_MOVE;
    };
    RowDragFeature2.prototype.shouldPreventRowMove = function() {
      var rowGroupCols = this.columnModel.getRowGroupColumns();
      if (rowGroupCols.length) {
        return true;
      }
      var isFilterPresent = this.filterManager.isAnyFilterPresent();
      if (isFilterPresent) {
        return true;
      }
      var isSortActive = this.sortController.isSortActive();
      if (isSortActive) {
        return true;
      }
      return false;
    };
    RowDragFeature2.prototype.getRowNodes = function(draggingEvent) {
      var _this = this;
      if (!this.isFromThisGrid(draggingEvent)) {
        return draggingEvent.dragItem.rowNodes || [];
      }
      var isRowDragMultiRow = this.gridOptionsService.get("rowDragMultiRow");
      var selectedNodes = __spreadArray$m([], __read$r(this.selectionService.getSelectedNodes()), false).sort(function(a, b) {
        if (a.rowIndex == null || b.rowIndex == null) {
          return 0;
        }
        return _this.getRowIndexNumber(a) - _this.getRowIndexNumber(b);
      });
      var currentNode = draggingEvent.dragItem.rowNode;
      if (isRowDragMultiRow && selectedNodes.indexOf(currentNode) !== -1) {
        this.isMultiRowDrag = true;
        return selectedNodes;
      }
      this.isMultiRowDrag = false;
      return [currentNode];
    };
    RowDragFeature2.prototype.onDragEnter = function(draggingEvent) {
      draggingEvent.dragItem.rowNodes = this.getRowNodes(draggingEvent);
      this.dispatchGridEvent(Events.EVENT_ROW_DRAG_ENTER, draggingEvent);
      this.getRowNodes(draggingEvent).forEach(function(rowNode) {
        rowNode.setDragging(true);
      });
      this.onEnterOrDragging(draggingEvent);
    };
    RowDragFeature2.prototype.onDragging = function(draggingEvent) {
      this.onEnterOrDragging(draggingEvent);
    };
    RowDragFeature2.prototype.isFromThisGrid = function(draggingEvent) {
      var dragSourceDomDataKey = draggingEvent.dragSource.dragSourceDomDataKey;
      return dragSourceDomDataKey === this.gridOptionsService.getDomDataKey();
    };
    RowDragFeature2.prototype.isDropZoneWithinThisGrid = function(draggingEvent) {
      var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
      var gridGui = gridBodyCon.getGui();
      var dropZoneTarget = draggingEvent.dropZoneTarget;
      return !gridGui.contains(dropZoneTarget);
    };
    RowDragFeature2.prototype.onEnterOrDragging = function(draggingEvent) {
      this.dispatchGridEvent(Events.EVENT_ROW_DRAG_MOVE, draggingEvent);
      this.lastDraggingEvent = draggingEvent;
      var pixel = this.mouseEventService.getNormalisedPosition(draggingEvent).y;
      var managedDrag = this.gridOptionsService.get("rowDragManaged");
      if (managedDrag) {
        this.doManagedDrag(draggingEvent, pixel);
      }
      this.autoScrollService.check(draggingEvent.event);
    };
    RowDragFeature2.prototype.doManagedDrag = function(draggingEvent, pixel) {
      var isFromThisGrid = this.isFromThisGrid(draggingEvent);
      var managedDrag = this.gridOptionsService.get("rowDragManaged");
      var rowNodes = draggingEvent.dragItem.rowNodes;
      if (managedDrag && this.shouldPreventRowMove()) {
        return;
      }
      if (this.gridOptionsService.get("suppressMoveWhenRowDragging") || !isFromThisGrid) {
        if (!this.isDropZoneWithinThisGrid(draggingEvent)) {
          this.clientSideRowModel.highlightRowAtPixel(rowNodes[0], pixel);
        }
      } else {
        this.moveRows(rowNodes, pixel);
      }
    };
    RowDragFeature2.prototype.getRowIndexNumber = function(rowNode) {
      return parseInt(last(rowNode.getRowIndexString().split("-")), 10);
    };
    RowDragFeature2.prototype.moveRowAndClearHighlight = function(draggingEvent) {
      var _this = this;
      var lastHighlightedRowNode = this.clientSideRowModel.getLastHighlightedRowNode();
      var isBelow = lastHighlightedRowNode && lastHighlightedRowNode.highlighted === RowHighlightPosition.Below;
      var pixel = this.mouseEventService.getNormalisedPosition(draggingEvent).y;
      var rowNodes = draggingEvent.dragItem.rowNodes;
      var increment = isBelow ? 1 : 0;
      if (this.isFromThisGrid(draggingEvent)) {
        rowNodes.forEach(function(rowNode) {
          if (rowNode.rowTop < pixel) {
            increment -= 1;
          }
        });
        this.moveRows(rowNodes, pixel, increment);
      } else {
        var getRowIdFunc_1 = this.gridOptionsService.getCallback("getRowId");
        var addIndex = this.clientSideRowModel.getRowIndexAtPixel(pixel) + 1;
        if (this.clientSideRowModel.getHighlightPosition(pixel) === RowHighlightPosition.Above) {
          addIndex--;
        }
        this.clientSideRowModel.updateRowData({
          add: rowNodes.map(function(node) {
            return node.data;
          }).filter(function(data) {
            return !_this.clientSideRowModel.getRowNode(getRowIdFunc_1 ? getRowIdFunc_1({ data, level: 0 }) : data.id);
          }),
          addIndex
        });
      }
      this.clearRowHighlight();
    };
    RowDragFeature2.prototype.clearRowHighlight = function() {
      this.clientSideRowModel.highlightRowAtPixel(null);
    };
    RowDragFeature2.prototype.moveRows = function(rowNodes, pixel, increment) {
      if (increment === void 0) {
        increment = 0;
      }
      var rowWasMoved = this.clientSideRowModel.ensureRowsAtPixel(rowNodes, pixel, increment);
      if (rowWasMoved) {
        this.focusService.clearFocusedCell();
        if (this.rangeService) {
          this.rangeService.removeAllCellRanges();
        }
      }
    };
    RowDragFeature2.prototype.addRowDropZone = function(params) {
      var _this = this;
      if (!params.getContainer()) {
        warnOnce("addRowDropZone - A container target needs to be provided");
        return;
      }
      if (this.dragAndDropService.findExternalZone(params)) {
        console.warn("AG Grid: addRowDropZone - target already exists in the list of DropZones. Use `removeRowDropZone` before adding it again.");
        return;
      }
      var processedParams = {
        getContainer: params.getContainer
      };
      if (params.fromGrid) {
        params.fromGrid = void 0;
        processedParams = params;
      } else {
        if (params.onDragEnter) {
          processedParams.onDragEnter = function(e) {
            params.onDragEnter(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_ENTER, e));
          };
        }
        if (params.onDragLeave) {
          processedParams.onDragLeave = function(e) {
            params.onDragLeave(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_LEAVE, e));
          };
        }
        if (params.onDragging) {
          processedParams.onDragging = function(e) {
            params.onDragging(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_MOVE, e));
          };
        }
        if (params.onDragStop) {
          processedParams.onDragStop = function(e) {
            params.onDragStop(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_END, e));
          };
        }
      }
      this.dragAndDropService.addDropTarget(__assign$d({ isInterestedIn: function(type) {
        return type === DragSourceType.RowDrag;
      }, getIconName: function() {
        return DragAndDropService.ICON_MOVE;
      }, external: true }, processedParams));
    };
    RowDragFeature2.prototype.getRowDropZone = function(events) {
      var _this = this;
      var getContainer = this.getContainer.bind(this);
      var onDragEnter = this.onDragEnter.bind(this);
      var onDragLeave = this.onDragLeave.bind(this);
      var onDragging = this.onDragging.bind(this);
      var onDragStop = this.onDragStop.bind(this);
      if (!events) {
        return {
          getContainer,
          onDragEnter,
          onDragLeave,
          onDragging,
          onDragStop,
          /* @private */
          fromGrid: true
        };
      }
      return {
        getContainer,
        onDragEnter: events.onDragEnter ? function(e) {
          onDragEnter(e);
          events.onDragEnter(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_ENTER, e));
        } : onDragEnter,
        onDragLeave: events.onDragLeave ? function(e) {
          onDragLeave(e);
          events.onDragLeave(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_LEAVE, e));
        } : onDragLeave,
        onDragging: events.onDragging ? function(e) {
          onDragging(e);
          events.onDragging(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_MOVE, e));
        } : onDragging,
        onDragStop: events.onDragStop ? function(e) {
          onDragStop(e);
          events.onDragStop(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_END, e));
        } : onDragStop,
        fromGrid: true
        /* @private */
      };
    };
    RowDragFeature2.prototype.draggingToRowDragEvent = function(type, draggingEvent) {
      var yNormalised = this.mouseEventService.getNormalisedPosition(draggingEvent).y;
      var mouseIsPastLastRow = yNormalised > this.paginationProxy.getCurrentPageHeight();
      var overIndex = -1;
      var overNode;
      if (!mouseIsPastLastRow) {
        overIndex = this.rowModel.getRowIndexAtPixel(yNormalised);
        overNode = this.rowModel.getRow(overIndex);
      }
      var vDirectionString;
      switch (draggingEvent.vDirection) {
        case VerticalDirection.Down:
          vDirectionString = "down";
          break;
        case VerticalDirection.Up:
          vDirectionString = "up";
          break;
        default:
          vDirectionString = null;
          break;
      }
      var event = this.gridOptionsService.addGridCommonParams({
        type,
        event: draggingEvent.event,
        node: draggingEvent.dragItem.rowNode,
        nodes: draggingEvent.dragItem.rowNodes,
        overIndex,
        overNode,
        y: yNormalised,
        vDirection: vDirectionString
      });
      return event;
    };
    RowDragFeature2.prototype.dispatchGridEvent = function(type, draggingEvent) {
      var event = this.draggingToRowDragEvent(type, draggingEvent);
      this.eventService.dispatchEvent(event);
    };
    RowDragFeature2.prototype.onDragLeave = function(draggingEvent) {
      this.dispatchGridEvent(Events.EVENT_ROW_DRAG_LEAVE, draggingEvent);
      this.stopDragging(draggingEvent);
      if (this.gridOptionsService.get("rowDragManaged")) {
        this.clearRowHighlight();
      }
      if (this.isFromThisGrid(draggingEvent)) {
        this.isMultiRowDrag = false;
      }
    };
    RowDragFeature2.prototype.onDragStop = function(draggingEvent) {
      this.dispatchGridEvent(Events.EVENT_ROW_DRAG_END, draggingEvent);
      this.stopDragging(draggingEvent);
      if (this.gridOptionsService.get("rowDragManaged") && (this.gridOptionsService.get("suppressMoveWhenRowDragging") || !this.isFromThisGrid(draggingEvent)) && !this.isDropZoneWithinThisGrid(draggingEvent)) {
        this.moveRowAndClearHighlight(draggingEvent);
      }
    };
    RowDragFeature2.prototype.stopDragging = function(draggingEvent) {
      this.autoScrollService.ensureCleared();
      this.getRowNodes(draggingEvent).forEach(function(rowNode) {
        rowNode.setDragging(false);
      });
    };
    __decorate$1$([
      Autowired("dragAndDropService")
    ], RowDragFeature2.prototype, "dragAndDropService", void 0);
    __decorate$1$([
      Autowired("rowModel")
    ], RowDragFeature2.prototype, "rowModel", void 0);
    __decorate$1$([
      Autowired("paginationProxy")
    ], RowDragFeature2.prototype, "paginationProxy", void 0);
    __decorate$1$([
      Autowired("columnModel")
    ], RowDragFeature2.prototype, "columnModel", void 0);
    __decorate$1$([
      Autowired("focusService")
    ], RowDragFeature2.prototype, "focusService", void 0);
    __decorate$1$([
      Autowired("sortController")
    ], RowDragFeature2.prototype, "sortController", void 0);
    __decorate$1$([
      Autowired("filterManager")
    ], RowDragFeature2.prototype, "filterManager", void 0);
    __decorate$1$([
      Autowired("selectionService")
    ], RowDragFeature2.prototype, "selectionService", void 0);
    __decorate$1$([
      Autowired("mouseEventService")
    ], RowDragFeature2.prototype, "mouseEventService", void 0);
    __decorate$1$([
      Autowired("ctrlsService")
    ], RowDragFeature2.prototype, "ctrlsService", void 0);
    __decorate$1$([
      Optional("rangeService")
    ], RowDragFeature2.prototype, "rangeService", void 0);
    __decorate$1$([
      PostConstruct
    ], RowDragFeature2.prototype, "postConstruct", null);
    return RowDragFeature2;
  }(BeanStub)
);
var __extends$29 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1_ = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RowAnimationCssClasses;
(function(RowAnimationCssClasses2) {
  RowAnimationCssClasses2["ANIMATION_ON"] = "ag-row-animation";
  RowAnimationCssClasses2["ANIMATION_OFF"] = "ag-row-no-animation";
})(RowAnimationCssClasses || (RowAnimationCssClasses = {}));
var CSS_CLASS_FORCE_VERTICAL_SCROLL = "ag-force-vertical-scroll";
var CSS_CLASS_CELL_SELECTABLE = "ag-selectable";
var CSS_CLASS_COLUMN_MOVING = "ag-column-moving";
var GridBodyCtrl = (
  /** @class */
  function(_super) {
    __extends$29(GridBodyCtrl2, _super);
    function GridBodyCtrl2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.stickyTopHeight = 0;
      return _this;
    }
    GridBodyCtrl2.prototype.getScrollFeature = function() {
      return this.bodyScrollFeature;
    };
    GridBodyCtrl2.prototype.getBodyViewportElement = function() {
      return this.eBodyViewport;
    };
    GridBodyCtrl2.prototype.setComp = function(comp, eGridBody, eBodyViewport, eTop, eBottom, eStickyTop) {
      var _this = this;
      this.comp = comp;
      this.eGridBody = eGridBody;
      this.eBodyViewport = eBodyViewport;
      this.eTop = eTop;
      this.eBottom = eBottom;
      this.eStickyTop = eStickyTop;
      this.setCellTextSelection(this.gridOptionsService.get("enableCellTextSelection"));
      this.addManagedPropertyListener("enableCellTextSelection", function(props) {
        return _this.setCellTextSelection(props.currentValue);
      });
      this.createManagedBean(new LayoutFeature(this.comp));
      this.bodyScrollFeature = this.createManagedBean(new GridBodyScrollFeature(this.eBodyViewport));
      this.addRowDragListener();
      this.setupRowAnimationCssClass();
      this.addEventListeners();
      this.addFocusListeners([eTop, eBodyViewport, eBottom, eStickyTop]);
      this.onGridColumnsChanged();
      this.addBodyViewportListener();
      this.setFloatingHeights();
      this.disableBrowserDragging();
      this.addStopEditingWhenGridLosesFocus();
      this.filterManager.setupAdvancedFilterHeaderComp(eTop);
      this.ctrlsService.registerGridBodyCtrl(this);
    };
    GridBodyCtrl2.prototype.getComp = function() {
      return this.comp;
    };
    GridBodyCtrl2.prototype.addEventListeners = function() {
      this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_HEADER_HEIGHT_CHANGED, this.onHeaderHeightChanged.bind(this));
    };
    GridBodyCtrl2.prototype.addFocusListeners = function(elements) {
      var _this = this;
      elements.forEach(function(element) {
        _this.addManagedListener(element, "focusin", function(e) {
          var target = e.target;
          var isFocusedElementNested = isElementChildOfClass(target, "ag-root", element);
          element.classList.toggle("ag-has-focus", !isFocusedElementNested);
        });
        _this.addManagedListener(element, "focusout", function(e) {
          var target = e.target, relatedTarget = e.relatedTarget;
          var gridContainRelatedTarget = element.contains(relatedTarget);
          var isNestedRelatedTarget = isElementChildOfClass(relatedTarget, "ag-root", element);
          var isNestedTarget = isElementChildOfClass(target, "ag-root", element);
          if (isNestedTarget) {
            return;
          }
          if (!gridContainRelatedTarget || isNestedRelatedTarget) {
            element.classList.remove("ag-has-focus");
          }
        });
      });
    };
    GridBodyCtrl2.prototype.setColumnMovingCss = function(moving) {
      this.comp.setColumnMovingCss(CSS_CLASS_COLUMN_MOVING, moving);
    };
    GridBodyCtrl2.prototype.setCellTextSelection = function(selectable) {
      if (selectable === void 0) {
        selectable = false;
      }
      this.comp.setCellSelectableCss(CSS_CLASS_CELL_SELECTABLE, selectable);
    };
    GridBodyCtrl2.prototype.onScrollVisibilityChanged = function() {
      var _this = this;
      var visible = this.scrollVisibleService.isVerticalScrollShowing();
      this.setVerticalScrollPaddingVisible(visible);
      this.setStickyTopWidth(visible);
      var scrollbarWidth = visible ? this.gridOptionsService.getScrollbarWidth() || 0 : 0;
      var pad = isInvisibleScrollbar() ? 16 : 0;
      var width = "calc(100% + ".concat(scrollbarWidth + pad, "px)");
      this.animationFrameService.requestAnimationFrame(function() {
        return _this.comp.setBodyViewportWidth(width);
      });
    };
    GridBodyCtrl2.prototype.onGridColumnsChanged = function() {
      var columns = this.columnModel.getAllGridColumns();
      this.comp.setColumnCount(columns.length);
    };
    GridBodyCtrl2.prototype.disableBrowserDragging = function() {
      this.addManagedListener(this.eGridBody, "dragstart", function(event) {
        if (event.target instanceof HTMLImageElement) {
          event.preventDefault();
          return false;
        }
      });
    };
    GridBodyCtrl2.prototype.addStopEditingWhenGridLosesFocus = function() {
      var _this = this;
      if (!this.gridOptionsService.get("stopEditingWhenCellsLoseFocus")) {
        return;
      }
      var focusOutListener = function(event) {
        var elementWithFocus = event.relatedTarget;
        if (getTabIndex(elementWithFocus) === null) {
          _this.rowRenderer.stopEditing();
          return;
        }
        var clickInsideGrid = (
          // see if click came from inside the viewports
          viewports.some(function(viewport) {
            return viewport.contains(elementWithFocus);
          }) && _this.mouseEventService.isElementInThisGrid(elementWithFocus)
        );
        if (!clickInsideGrid) {
          var popupService = _this.popupService;
          clickInsideGrid = popupService.getActivePopups().some(function(popup) {
            return popup.contains(elementWithFocus);
          }) || popupService.isElementWithinCustomPopup(elementWithFocus);
        }
        if (!clickInsideGrid) {
          _this.rowRenderer.stopEditing();
        }
      };
      var viewports = [this.eBodyViewport, this.eBottom, this.eTop, this.eStickyTop];
      viewports.forEach(function(viewport) {
        return _this.addManagedListener(viewport, "focusout", focusOutListener);
      });
    };
    GridBodyCtrl2.prototype.updateRowCount = function() {
      var headerCount = this.headerNavigationService.getHeaderRowCount() + this.filterManager.getHeaderRowCount();
      var rowCount = this.rowModel.isLastRowIndexKnown() ? this.rowModel.getRowCount() : -1;
      var total = rowCount === -1 ? -1 : headerCount + rowCount;
      this.comp.setRowCount(total);
    };
    GridBodyCtrl2.prototype.registerBodyViewportResizeListener = function(listener) {
      this.comp.registerBodyViewportResizeListener(listener);
    };
    GridBodyCtrl2.prototype.setVerticalScrollPaddingVisible = function(visible) {
      var overflowY = visible ? "scroll" : "hidden";
      this.comp.setPinnedTopBottomOverflowY(overflowY);
    };
    GridBodyCtrl2.prototype.isVerticalScrollShowing = function() {
      var show = this.gridOptionsService.get("alwaysShowVerticalScroll");
      var cssClass = show ? CSS_CLASS_FORCE_VERTICAL_SCROLL : null;
      var allowVerticalScroll = this.gridOptionsService.isDomLayout("normal");
      this.comp.setAlwaysVerticalScrollClass(cssClass, show);
      return show || allowVerticalScroll && isVerticalScrollShowing(this.eBodyViewport);
    };
    GridBodyCtrl2.prototype.setupRowAnimationCssClass = function() {
      var _this = this;
      var listener = function() {
        var animateRows = _this.gridOptionsService.isAnimateRows() && !_this.rowContainerHeightService.isStretching();
        var animateRowsCssClass = animateRows ? RowAnimationCssClasses.ANIMATION_ON : RowAnimationCssClasses.ANIMATION_OFF;
        _this.comp.setRowAnimationCssOnBodyViewport(animateRowsCssClass, animateRows);
      };
      listener();
      this.addManagedListener(this.eventService, Events.EVENT_HEIGHT_SCALE_CHANGED, listener);
      this.addManagedPropertyListener("animateRows", listener);
    };
    GridBodyCtrl2.prototype.getGridBodyElement = function() {
      return this.eGridBody;
    };
    GridBodyCtrl2.prototype.addBodyViewportListener = function() {
      var listener = this.onBodyViewportContextMenu.bind(this);
      this.addManagedListener(this.eBodyViewport, "contextmenu", listener);
      this.mockContextMenuForIPad(listener);
      this.addManagedListener(this.eBodyViewport, "wheel", this.onBodyViewportWheel.bind(this));
      this.addManagedListener(this.eStickyTop, "wheel", this.onStickyTopWheel.bind(this));
      this.addFullWidthContainerWheelListener();
    };
    GridBodyCtrl2.prototype.addFullWidthContainerWheelListener = function() {
      var _this = this;
      var fullWidthContainer = this.eBodyViewport.querySelector(".ag-full-width-container");
      var eCenterColsViewport = this.eBodyViewport.querySelector(".ag-center-cols-viewport");
      if (fullWidthContainer && eCenterColsViewport) {
        this.addManagedListener(fullWidthContainer, "wheel", function(e) {
          return _this.onFullWidthContainerWheel(e, eCenterColsViewport);
        });
      }
    };
    GridBodyCtrl2.prototype.onFullWidthContainerWheel = function(e, eCenterColsViewport) {
      if (!e.deltaX || Math.abs(e.deltaY) > Math.abs(e.deltaX) || !this.mouseEventService.isEventFromThisGrid(e)) {
        return;
      }
      e.preventDefault();
      eCenterColsViewport.scrollBy({ left: e.deltaX });
    };
    GridBodyCtrl2.prototype.onBodyViewportContextMenu = function(mouseEvent, touch, touchEvent) {
      if (!mouseEvent && !touchEvent) {
        return;
      }
      if (this.gridOptionsService.get("preventDefaultOnContextMenu")) {
        var event_1 = mouseEvent || touchEvent;
        event_1.preventDefault();
      }
      var target = (mouseEvent || touch).target;
      if (target === this.eBodyViewport || target === this.ctrlsService.getCenterRowContainerCtrl().getViewportElement()) {
        if (!this.contextMenuFactory) {
          return;
        }
        if (mouseEvent) {
          this.contextMenuFactory.onContextMenu(mouseEvent, null, null, null, null, this.eGridBody);
        } else if (touchEvent) {
          this.contextMenuFactory.onContextMenu(null, touchEvent, null, null, null, this.eGridBody);
        }
      }
    };
    GridBodyCtrl2.prototype.mockContextMenuForIPad = function(listener) {
      if (!isIOSUserAgent()) {
        return;
      }
      var touchListener = new TouchListener(this.eBodyViewport);
      var longTapListener = function(event) {
        listener(void 0, event.touchStart, event.touchEvent);
      };
      this.addManagedListener(touchListener, TouchListener.EVENT_LONG_TAP, longTapListener);
      this.addDestroyFunc(function() {
        return touchListener.destroy();
      });
    };
    GridBodyCtrl2.prototype.onBodyViewportWheel = function(e) {
      if (!this.gridOptionsService.get("suppressScrollWhenPopupsAreOpen")) {
        return;
      }
      if (this.popupService.hasAnchoredPopup()) {
        e.preventDefault();
      }
    };
    GridBodyCtrl2.prototype.onStickyTopWheel = function(e) {
      e.preventDefault();
      if (e.offsetY) {
        this.scrollVertically(e.deltaY);
      }
    };
    GridBodyCtrl2.prototype.getGui = function() {
      return this.eGridBody;
    };
    GridBodyCtrl2.prototype.scrollVertically = function(pixels) {
      var oldScrollPosition = this.eBodyViewport.scrollTop;
      this.bodyScrollFeature.setVerticalScrollPosition(oldScrollPosition + pixels);
      return this.eBodyViewport.scrollTop - oldScrollPosition;
    };
    GridBodyCtrl2.prototype.addRowDragListener = function() {
      this.rowDragFeature = this.createManagedBean(new RowDragFeature(this.eBodyViewport));
      this.dragAndDropService.addDropTarget(this.rowDragFeature);
    };
    GridBodyCtrl2.prototype.getRowDragFeature = function() {
      return this.rowDragFeature;
    };
    GridBodyCtrl2.prototype.onPinnedRowDataChanged = function() {
      this.setFloatingHeights();
    };
    GridBodyCtrl2.prototype.setFloatingHeights = function() {
      var pinnedRowModel = this.pinnedRowModel;
      var floatingTopHeight = pinnedRowModel.getPinnedTopTotalHeight();
      var floatingBottomHeight = pinnedRowModel.getPinnedBottomTotalHeight();
      this.comp.setTopHeight(floatingTopHeight);
      this.comp.setBottomHeight(floatingBottomHeight);
      this.comp.setTopDisplay(floatingTopHeight ? "inherit" : "none");
      this.comp.setBottomDisplay(floatingBottomHeight ? "inherit" : "none");
      this.setStickyTopOffsetTop();
    };
    GridBodyCtrl2.prototype.setStickyTopHeight = function(height) {
      if (height === void 0) {
        height = 0;
      }
      this.comp.setStickyTopHeight("".concat(height, "px"));
      this.stickyTopHeight = height;
    };
    GridBodyCtrl2.prototype.getStickyTopHeight = function() {
      return this.stickyTopHeight;
    };
    GridBodyCtrl2.prototype.setStickyTopWidth = function(vScrollVisible) {
      if (!vScrollVisible) {
        this.comp.setStickyTopWidth("100%");
      } else {
        var scrollbarWidth = this.gridOptionsService.getScrollbarWidth();
        this.comp.setStickyTopWidth("calc(100% - ".concat(scrollbarWidth, "px)"));
      }
    };
    GridBodyCtrl2.prototype.onHeaderHeightChanged = function() {
      this.setStickyTopOffsetTop();
    };
    GridBodyCtrl2.prototype.setStickyTopOffsetTop = function() {
      var headerCtrl = this.ctrlsService.getGridHeaderCtrl();
      var headerHeight = headerCtrl.getHeaderHeight() + this.filterManager.getHeaderHeight();
      var pinnedTopHeight = this.pinnedRowModel.getPinnedTopTotalHeight();
      var height = 0;
      if (headerHeight > 0) {
        height += headerHeight + 1;
      }
      if (pinnedTopHeight > 0) {
        height += pinnedTopHeight + 1;
      }
      this.comp.setStickyTopTop("".concat(height, "px"));
    };
    GridBodyCtrl2.prototype.sizeColumnsToFit = function(params, nextTimeout) {
      var _this = this;
      var removeScrollWidth = this.isVerticalScrollShowing();
      var scrollWidthToRemove = removeScrollWidth ? this.gridOptionsService.getScrollbarWidth() : 0;
      var bodyViewportWidth = getInnerWidth(this.eGridBody);
      var availableWidth = bodyViewportWidth - scrollWidthToRemove;
      if (availableWidth > 0) {
        this.columnModel.sizeColumnsToFit(availableWidth, "sizeColumnsToFit", false, params);
        return;
      }
      if (nextTimeout === void 0) {
        window.setTimeout(function() {
          _this.sizeColumnsToFit(params, 100);
        }, 0);
      } else if (nextTimeout === 100) {
        window.setTimeout(function() {
          _this.sizeColumnsToFit(params, 500);
        }, 100);
      } else if (nextTimeout === 500) {
        window.setTimeout(function() {
          _this.sizeColumnsToFit(params, -1);
        }, 500);
      } else {
        console.warn("AG Grid: tried to call sizeColumnsToFit() but the grid is coming back with zero width, maybe the grid is not visible yet on the screen?");
      }
    };
    GridBodyCtrl2.prototype.addScrollEventListener = function(listener) {
      this.eBodyViewport.addEventListener("scroll", listener, { passive: true });
    };
    GridBodyCtrl2.prototype.removeScrollEventListener = function(listener) {
      this.eBodyViewport.removeEventListener("scroll", listener);
    };
    __decorate$1_([
      Autowired("animationFrameService")
    ], GridBodyCtrl2.prototype, "animationFrameService", void 0);
    __decorate$1_([
      Autowired("rowContainerHeightService")
    ], GridBodyCtrl2.prototype, "rowContainerHeightService", void 0);
    __decorate$1_([
      Autowired("ctrlsService")
    ], GridBodyCtrl2.prototype, "ctrlsService", void 0);
    __decorate$1_([
      Autowired("columnModel")
    ], GridBodyCtrl2.prototype, "columnModel", void 0);
    __decorate$1_([
      Autowired("scrollVisibleService")
    ], GridBodyCtrl2.prototype, "scrollVisibleService", void 0);
    __decorate$1_([
      Optional("contextMenuFactory")
    ], GridBodyCtrl2.prototype, "contextMenuFactory", void 0);
    __decorate$1_([
      Autowired("headerNavigationService")
    ], GridBodyCtrl2.prototype, "headerNavigationService", void 0);
    __decorate$1_([
      Autowired("dragAndDropService")
    ], GridBodyCtrl2.prototype, "dragAndDropService", void 0);
    __decorate$1_([
      Autowired("pinnedRowModel")
    ], GridBodyCtrl2.prototype, "pinnedRowModel", void 0);
    __decorate$1_([
      Autowired("rowRenderer")
    ], GridBodyCtrl2.prototype, "rowRenderer", void 0);
    __decorate$1_([
      Autowired("popupService")
    ], GridBodyCtrl2.prototype, "popupService", void 0);
    __decorate$1_([
      Autowired("mouseEventService")
    ], GridBodyCtrl2.prototype, "mouseEventService", void 0);
    __decorate$1_([
      Autowired("rowModel")
    ], GridBodyCtrl2.prototype, "rowModel", void 0);
    __decorate$1_([
      Autowired("filterManager")
    ], GridBodyCtrl2.prototype, "filterManager", void 0);
    return GridBodyCtrl2;
  }(BeanStub)
);
var SelectionHandleType;
(function(SelectionHandleType2) {
  SelectionHandleType2[SelectionHandleType2["FILL"] = 0] = "FILL";
  SelectionHandleType2[SelectionHandleType2["RANGE"] = 1] = "RANGE";
})(SelectionHandleType || (SelectionHandleType = {}));
var CellRangeType;
(function(CellRangeType2) {
  CellRangeType2[CellRangeType2["VALUE"] = 0] = "VALUE";
  CellRangeType2[CellRangeType2["DIMENSION"] = 1] = "DIMENSION";
})(CellRangeType || (CellRangeType = {}));
var CSS_CELL_RANGE_SELECTED = "ag-cell-range-selected";
var CSS_CELL_RANGE_CHART = "ag-cell-range-chart";
var CSS_CELL_RANGE_SINGLE_CELL = "ag-cell-range-single-cell";
var CSS_CELL_RANGE_CHART_CATEGORY = "ag-cell-range-chart-category";
var CSS_CELL_RANGE_HANDLE = "ag-cell-range-handle";
var CSS_CELL_RANGE_TOP = "ag-cell-range-top";
var CSS_CELL_RANGE_RIGHT = "ag-cell-range-right";
var CSS_CELL_RANGE_BOTTOM = "ag-cell-range-bottom";
var CSS_CELL_RANGE_LEFT = "ag-cell-range-left";
var CellRangeFeature = (
  /** @class */
  function() {
    function CellRangeFeature2(beans, ctrl) {
      this.beans = beans;
      this.cellCtrl = ctrl;
    }
    CellRangeFeature2.prototype.setComp = function(cellComp, eGui) {
      this.cellComp = cellComp;
      this.eGui = eGui;
      this.onRangeSelectionChanged();
    };
    CellRangeFeature2.prototype.onRangeSelectionChanged = function() {
      if (!this.cellComp) {
        return;
      }
      this.rangeCount = this.beans.rangeService.getCellRangeCount(this.cellCtrl.getCellPosition());
      this.hasChartRange = this.getHasChartRange();
      this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SELECTED, this.rangeCount !== 0);
      this.cellComp.addOrRemoveCssClass("".concat(CSS_CELL_RANGE_SELECTED, "-1"), this.rangeCount === 1);
      this.cellComp.addOrRemoveCssClass("".concat(CSS_CELL_RANGE_SELECTED, "-2"), this.rangeCount === 2);
      this.cellComp.addOrRemoveCssClass("".concat(CSS_CELL_RANGE_SELECTED, "-3"), this.rangeCount === 3);
      this.cellComp.addOrRemoveCssClass("".concat(CSS_CELL_RANGE_SELECTED, "-4"), this.rangeCount >= 4);
      this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_CHART, this.hasChartRange);
      setAriaSelected(this.eGui, this.rangeCount > 0 ? true : void 0);
      this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SINGLE_CELL, this.isSingleCell());
      this.updateRangeBorders();
      this.refreshHandle();
    };
    CellRangeFeature2.prototype.updateRangeBorders = function() {
      var rangeBorders = this.getRangeBorders();
      var isSingleCell = this.isSingleCell();
      var isTop = !isSingleCell && rangeBorders.top;
      var isRight = !isSingleCell && rangeBorders.right;
      var isBottom = !isSingleCell && rangeBorders.bottom;
      var isLeft = !isSingleCell && rangeBorders.left;
      this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_TOP, isTop);
      this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_RIGHT, isRight);
      this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_BOTTOM, isBottom);
      this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_LEFT, isLeft);
    };
    CellRangeFeature2.prototype.isSingleCell = function() {
      var rangeService = this.beans.rangeService;
      return this.rangeCount === 1 && rangeService && !rangeService.isMoreThanOneCell();
    };
    CellRangeFeature2.prototype.getHasChartRange = function() {
      var rangeService = this.beans.rangeService;
      if (!this.rangeCount || !rangeService) {
        return false;
      }
      var cellRanges = rangeService.getCellRanges();
      return cellRanges.length > 0 && cellRanges.every(function(range) {
        return includes([CellRangeType.DIMENSION, CellRangeType.VALUE], range.type);
      });
    };
    CellRangeFeature2.prototype.updateRangeBordersIfRangeCount = function() {
      if (this.rangeCount > 0) {
        this.updateRangeBorders();
        this.refreshHandle();
      }
    };
    CellRangeFeature2.prototype.getRangeBorders = function() {
      var _this = this;
      var isRtl = this.beans.gridOptionsService.get("enableRtl");
      var top = false;
      var right = false;
      var bottom = false;
      var left = false;
      var thisCol = this.cellCtrl.getCellPosition().column;
      var _a = this.beans, rangeService = _a.rangeService, columnModel = _a.columnModel;
      var leftCol;
      var rightCol;
      if (isRtl) {
        leftCol = columnModel.getDisplayedColAfter(thisCol);
        rightCol = columnModel.getDisplayedColBefore(thisCol);
      } else {
        leftCol = columnModel.getDisplayedColBefore(thisCol);
        rightCol = columnModel.getDisplayedColAfter(thisCol);
      }
      var ranges = rangeService.getCellRanges().filter(function(range2) {
        return rangeService.isCellInSpecificRange(_this.cellCtrl.getCellPosition(), range2);
      });
      if (!leftCol) {
        left = true;
      }
      if (!rightCol) {
        right = true;
      }
      for (var i = 0; i < ranges.length; i++) {
        if (top && right && bottom && left) {
          break;
        }
        var range = ranges[i];
        var startRow = rangeService.getRangeStartRow(range);
        var endRow = rangeService.getRangeEndRow(range);
        if (!top && this.beans.rowPositionUtils.sameRow(startRow, this.cellCtrl.getCellPosition())) {
          top = true;
        }
        if (!bottom && this.beans.rowPositionUtils.sameRow(endRow, this.cellCtrl.getCellPosition())) {
          bottom = true;
        }
        if (!left && leftCol && range.columns.indexOf(leftCol) < 0) {
          left = true;
        }
        if (!right && rightCol && range.columns.indexOf(rightCol) < 0) {
          right = true;
        }
      }
      return { top, right, bottom, left };
    };
    CellRangeFeature2.prototype.refreshHandle = function() {
      if (!this.beans.rangeService) {
        return;
      }
      var shouldHaveSelectionHandle = this.shouldHaveSelectionHandle();
      if (this.selectionHandle && !shouldHaveSelectionHandle) {
        this.selectionHandle = this.beans.context.destroyBean(this.selectionHandle);
      }
      if (shouldHaveSelectionHandle) {
        this.addSelectionHandle();
      }
      this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_HANDLE, !!this.selectionHandle);
    };
    CellRangeFeature2.prototype.shouldHaveSelectionHandle = function() {
      var _a = this.beans, gridOptionsService = _a.gridOptionsService, rangeService = _a.rangeService;
      var cellRanges = rangeService.getCellRanges();
      var rangesLen = cellRanges.length;
      if (this.rangeCount < 1 || rangesLen < 1) {
        return false;
      }
      var cellRange = last(cellRanges);
      var cellPosition = this.cellCtrl.getCellPosition();
      var isFillHandleAvailable = gridOptionsService.get("enableFillHandle") && !this.cellCtrl.isSuppressFillHandle();
      var isRangeHandleAvailable = gridOptionsService.get("enableRangeHandle");
      var handleIsAvailable = rangesLen === 1 && !this.cellCtrl.isEditing() && (isFillHandleAvailable || isRangeHandleAvailable);
      if (this.hasChartRange) {
        var hasCategoryRange = cellRanges[0].type === CellRangeType.DIMENSION;
        var isCategoryCell = hasCategoryRange && rangeService.isCellInSpecificRange(cellPosition, cellRanges[0]);
        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_CHART_CATEGORY, isCategoryCell);
        handleIsAvailable = cellRange.type === CellRangeType.VALUE;
      }
      return handleIsAvailable && cellRange.endRow != null && rangeService.isContiguousRange(cellRange) && rangeService.isBottomRightCell(cellRange, cellPosition);
    };
    CellRangeFeature2.prototype.addSelectionHandle = function() {
      var _a = this.beans, gridOptionsService = _a.gridOptionsService, rangeService = _a.rangeService;
      var cellRangeType = last(rangeService.getCellRanges()).type;
      var selectionHandleFill = gridOptionsService.get("enableFillHandle") && missing(cellRangeType);
      var type = selectionHandleFill ? SelectionHandleType.FILL : SelectionHandleType.RANGE;
      if (this.selectionHandle && this.selectionHandle.getType() !== type) {
        this.selectionHandle = this.beans.context.destroyBean(this.selectionHandle);
      }
      if (!this.selectionHandle) {
        this.selectionHandle = this.beans.selectionHandleFactory.createSelectionHandle(type);
      }
      this.selectionHandle.refresh(this.cellCtrl);
    };
    CellRangeFeature2.prototype.destroy = function() {
      this.beans.context.destroyBean(this.selectionHandle);
    };
    return CellRangeFeature2;
  }()
);
var __extends$28 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var CellPositionFeature = (
  /** @class */
  function(_super) {
    __extends$28(CellPositionFeature2, _super);
    function CellPositionFeature2(ctrl, beans) {
      var _this = _super.call(this) || this;
      _this.cellCtrl = ctrl;
      _this.beans = beans;
      _this.column = ctrl.getColumn();
      _this.rowNode = ctrl.getRowNode();
      _this.setupColSpan();
      _this.setupRowSpan();
      return _this;
    }
    CellPositionFeature2.prototype.setupRowSpan = function() {
      var _this = this;
      this.rowSpan = this.column.getRowSpan(this.rowNode);
      this.addManagedListener(this.beans.eventService, Events.EVENT_NEW_COLUMNS_LOADED, function() {
        return _this.onNewColumnsLoaded();
      });
    };
    CellPositionFeature2.prototype.setComp = function(eGui) {
      this.eGui = eGui;
      this.onLeftChanged();
      this.onWidthChanged();
      this.applyRowSpan();
    };
    CellPositionFeature2.prototype.onNewColumnsLoaded = function() {
      var rowSpan = this.column.getRowSpan(this.rowNode);
      if (this.rowSpan === rowSpan) {
        return;
      }
      this.rowSpan = rowSpan;
      this.applyRowSpan(true);
    };
    CellPositionFeature2.prototype.onDisplayColumnsChanged = function() {
      var colsSpanning = this.getColSpanningList();
      if (!areEqual(this.colsSpanning, colsSpanning)) {
        this.colsSpanning = colsSpanning;
        this.onWidthChanged();
        this.onLeftChanged();
      }
    };
    CellPositionFeature2.prototype.setupColSpan = function() {
      if (this.column.getColDef().colSpan == null) {
        return;
      }
      this.colsSpanning = this.getColSpanningList();
      this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayColumnsChanged.bind(this));
      this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onWidthChanged.bind(this));
    };
    CellPositionFeature2.prototype.onWidthChanged = function() {
      if (!this.eGui) {
        return;
      }
      var width = this.getCellWidth();
      this.eGui.style.width = "".concat(width, "px");
    };
    CellPositionFeature2.prototype.getCellWidth = function() {
      if (!this.colsSpanning) {
        return this.column.getActualWidth();
      }
      return this.colsSpanning.reduce(function(width, col) {
        return width + col.getActualWidth();
      }, 0);
    };
    CellPositionFeature2.prototype.getColSpanningList = function() {
      var colSpan = this.column.getColSpan(this.rowNode);
      var colsSpanning = [];
      if (colSpan === 1) {
        colsSpanning.push(this.column);
      } else {
        var pointer = this.column;
        var pinned = this.column.getPinned();
        for (var i = 0; pointer && i < colSpan; i++) {
          colsSpanning.push(pointer);
          pointer = this.beans.columnModel.getDisplayedColAfter(pointer);
          if (!pointer || missing(pointer)) {
            break;
          }
          if (pinned !== pointer.getPinned()) {
            break;
          }
        }
      }
      return colsSpanning;
    };
    CellPositionFeature2.prototype.onLeftChanged = function() {
      if (!this.eGui) {
        return;
      }
      var left = this.modifyLeftForPrintLayout(this.getCellLeft());
      this.eGui.style.left = left + "px";
    };
    CellPositionFeature2.prototype.getCellLeft = function() {
      var mostLeftCol;
      if (this.beans.gridOptionsService.get("enableRtl") && this.colsSpanning) {
        mostLeftCol = last(this.colsSpanning);
      } else {
        mostLeftCol = this.column;
      }
      return mostLeftCol.getLeft();
    };
    CellPositionFeature2.prototype.modifyLeftForPrintLayout = function(leftPosition) {
      if (!this.cellCtrl.isPrintLayout() || this.column.getPinned() === "left") {
        return leftPosition;
      }
      var leftWidth = this.beans.columnModel.getDisplayedColumnsLeftWidth();
      if (this.column.getPinned() === "right") {
        var bodyWidth = this.beans.columnModel.getBodyContainerWidth();
        return leftWidth + bodyWidth + (leftPosition || 0);
      }
      return leftWidth + (leftPosition || 0);
    };
    CellPositionFeature2.prototype.applyRowSpan = function(force) {
      if (this.rowSpan === 1 && !force) {
        return;
      }
      var singleRowHeight = this.beans.gridOptionsService.getRowHeightAsNumber();
      var totalRowHeight = singleRowHeight * this.rowSpan;
      this.eGui.style.height = "".concat(totalRowHeight, "px");
      this.eGui.style.zIndex = "1";
    };
    CellPositionFeature2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
    };
    return CellPositionFeature2;
  }(BeanStub)
);
var __extends$27 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var CellCustomStyleFeature = (
  /** @class */
  function(_super) {
    __extends$27(CellCustomStyleFeature2, _super);
    function CellCustomStyleFeature2(ctrl, beans) {
      var _this = _super.call(this) || this;
      _this.staticClasses = [];
      _this.cellCtrl = ctrl;
      _this.beans = beans;
      _this.column = ctrl.getColumn();
      _this.rowNode = ctrl.getRowNode();
      return _this;
    }
    CellCustomStyleFeature2.prototype.setComp = function(comp) {
      this.cellComp = comp;
      this.applyUserStyles();
      this.applyCellClassRules();
      this.applyClassesFromColDef();
    };
    CellCustomStyleFeature2.prototype.applyCellClassRules = function() {
      var _this = this;
      var colDef = this.column.getColDef();
      var cellClassRules = colDef.cellClassRules;
      var cellClassParams = this.beans.gridOptionsService.addGridCommonParams({
        value: this.cellCtrl.getValue(),
        data: this.rowNode.data,
        node: this.rowNode,
        colDef,
        column: this.column,
        rowIndex: this.rowNode.rowIndex
      });
      this.beans.stylingService.processClassRules(
        // if current was previous, skip
        cellClassRules === this.cellClassRules ? void 0 : this.cellClassRules,
        cellClassRules,
        cellClassParams,
        function(className) {
          return _this.cellComp.addOrRemoveCssClass(className, true);
        },
        function(className) {
          return _this.cellComp.addOrRemoveCssClass(className, false);
        }
      );
      this.cellClassRules = cellClassRules;
    };
    CellCustomStyleFeature2.prototype.applyUserStyles = function() {
      var colDef = this.column.getColDef();
      if (!colDef.cellStyle) {
        return;
      }
      var styles;
      if (typeof colDef.cellStyle === "function") {
        var cellStyleParams = this.beans.gridOptionsService.addGridCommonParams({
          column: this.column,
          value: this.cellCtrl.getValue(),
          colDef,
          data: this.rowNode.data,
          node: this.rowNode,
          rowIndex: this.rowNode.rowIndex
        });
        var cellStyleFunc = colDef.cellStyle;
        styles = cellStyleFunc(cellStyleParams);
      } else {
        styles = colDef.cellStyle;
      }
      if (styles) {
        this.cellComp.setUserStyles(styles);
      }
    };
    CellCustomStyleFeature2.prototype.applyClassesFromColDef = function() {
      var _this = this;
      var colDef = this.column.getColDef();
      var cellClassParams = this.beans.gridOptionsService.addGridCommonParams({
        value: this.cellCtrl.getValue(),
        data: this.rowNode.data,
        node: this.rowNode,
        column: this.column,
        colDef,
        rowIndex: this.rowNode.rowIndex
      });
      if (this.staticClasses.length) {
        this.staticClasses.forEach(function(className) {
          return _this.cellComp.addOrRemoveCssClass(className, false);
        });
      }
      this.staticClasses = this.beans.stylingService.getStaticCellClasses(colDef, cellClassParams);
      if (this.staticClasses.length) {
        this.staticClasses.forEach(function(className) {
          return _this.cellComp.addOrRemoveCssClass(className, true);
        });
      }
    };
    CellCustomStyleFeature2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
    };
    return CellCustomStyleFeature2;
  }(BeanStub)
);
var __extends$26 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TooltipFeature = (
  /** @class */
  function(_super) {
    __extends$26(TooltipFeature2, _super);
    function TooltipFeature2(ctrl, beans) {
      var _this = _super.call(this) || this;
      _this.ctrl = ctrl;
      _this.beans = beans;
      return _this;
    }
    TooltipFeature2.prototype.setComp = function(eGui) {
      this.eGui = eGui;
      this.setupTooltip();
    };
    TooltipFeature2.prototype.setBrowserTooltip = function(tooltip) {
      var name = "title";
      if (tooltip != null && tooltip != "") {
        this.eGui.setAttribute(name, tooltip);
      } else {
        this.eGui.removeAttribute(name);
      }
    };
    TooltipFeature2.prototype.setupTooltip = function() {
      this.browserTooltips = this.beans.gridOptionsService.get("enableBrowserTooltips");
      this.updateTooltipText();
      if (this.browserTooltips) {
        this.setBrowserTooltip(this.tooltip);
      } else {
        this.createTooltipFeatureIfNeeded();
      }
    };
    TooltipFeature2.prototype.updateTooltipText = function() {
      this.tooltip = this.ctrl.getTooltipValue();
    };
    TooltipFeature2.prototype.createTooltipFeatureIfNeeded = function() {
      var _this = this;
      var _a, _b, _c, _d;
      if (this.genericTooltipFeature != null) {
        return;
      }
      var parent = {
        getTooltipParams: function() {
          return _this.getTooltipParams();
        },
        getGui: function() {
          return _this.ctrl.getGui();
        }
      };
      this.genericTooltipFeature = this.createManagedBean(new CustomTooltipFeature(parent, (_b = (_a = this.ctrl).getTooltipShowDelayOverride) === null || _b === void 0 ? void 0 : _b.call(_a), (_d = (_c = this.ctrl).getTooltipHideDelayOverride) === null || _d === void 0 ? void 0 : _d.call(_c)), this.beans.context);
    };
    TooltipFeature2.prototype.refreshToolTip = function() {
      this.updateTooltipText();
      if (this.browserTooltips) {
        this.setBrowserTooltip(this.tooltip);
      }
    };
    TooltipFeature2.prototype.getTooltipParams = function() {
      var _this = this;
      var ctrl = this.ctrl;
      var column = ctrl.getColumn ? ctrl.getColumn() : void 0;
      var colDef = ctrl.getColDef ? ctrl.getColDef() : void 0;
      var rowNode = ctrl.getRowNode ? ctrl.getRowNode() : void 0;
      return {
        location: ctrl.getLocation(),
        colDef,
        column,
        rowIndex: ctrl.getRowIndex ? ctrl.getRowIndex() : void 0,
        node: rowNode,
        data: rowNode ? rowNode.data : void 0,
        value: this.getTooltipText(),
        valueFormatted: ctrl.getValueFormatted ? ctrl.getValueFormatted() : void 0,
        hideTooltipCallback: function() {
          return _this.genericTooltipFeature.hideTooltip(true);
        }
      };
    };
    TooltipFeature2.prototype.getTooltipText = function() {
      return this.tooltip;
    };
    TooltipFeature2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
    };
    return TooltipFeature2;
  }(BeanStub)
);
var __decorate$1Z = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Beans = (
  /** @class */
  function() {
    function Beans2() {
    }
    Beans2.prototype.postConstruct = function() {
      if (this.gridOptionsService.isRowModelType("clientSide")) {
        this.clientSideRowModel = this.rowModel;
      }
      if (this.gridOptionsService.isRowModelType("serverSide")) {
        this.serverSideRowModel = this.rowModel;
      }
    };
    __decorate$1Z([
      Autowired("resizeObserverService")
    ], Beans2.prototype, "resizeObserverService", void 0);
    __decorate$1Z([
      Autowired("paginationProxy")
    ], Beans2.prototype, "paginationProxy", void 0);
    __decorate$1Z([
      Autowired("context")
    ], Beans2.prototype, "context", void 0);
    __decorate$1Z([
      Autowired("columnApi")
    ], Beans2.prototype, "columnApi", void 0);
    __decorate$1Z([
      Autowired("gridApi")
    ], Beans2.prototype, "gridApi", void 0);
    __decorate$1Z([
      Autowired("gridOptionsService")
    ], Beans2.prototype, "gridOptionsService", void 0);
    __decorate$1Z([
      Autowired("expressionService")
    ], Beans2.prototype, "expressionService", void 0);
    __decorate$1Z([
      Autowired("environment")
    ], Beans2.prototype, "environment", void 0);
    __decorate$1Z([
      Autowired("rowRenderer")
    ], Beans2.prototype, "rowRenderer", void 0);
    __decorate$1Z([
      Autowired("templateService")
    ], Beans2.prototype, "templateService", void 0);
    __decorate$1Z([
      Autowired("valueService")
    ], Beans2.prototype, "valueService", void 0);
    __decorate$1Z([
      Autowired("eventService")
    ], Beans2.prototype, "eventService", void 0);
    __decorate$1Z([
      Autowired("columnModel")
    ], Beans2.prototype, "columnModel", void 0);
    __decorate$1Z([
      Autowired("headerNavigationService")
    ], Beans2.prototype, "headerNavigationService", void 0);
    __decorate$1Z([
      Autowired("navigationService")
    ], Beans2.prototype, "navigationService", void 0);
    __decorate$1Z([
      Autowired("columnAnimationService")
    ], Beans2.prototype, "columnAnimationService", void 0);
    __decorate$1Z([
      Optional("rangeService")
    ], Beans2.prototype, "rangeService", void 0);
    __decorate$1Z([
      Autowired("focusService")
    ], Beans2.prototype, "focusService", void 0);
    __decorate$1Z([
      Optional("contextMenuFactory")
    ], Beans2.prototype, "contextMenuFactory", void 0);
    __decorate$1Z([
      Autowired("popupService")
    ], Beans2.prototype, "popupService", void 0);
    __decorate$1Z([
      Autowired("valueFormatterService")
    ], Beans2.prototype, "valueFormatterService", void 0);
    __decorate$1Z([
      Autowired("stylingService")
    ], Beans2.prototype, "stylingService", void 0);
    __decorate$1Z([
      Autowired("columnHoverService")
    ], Beans2.prototype, "columnHoverService", void 0);
    __decorate$1Z([
      Autowired("userComponentFactory")
    ], Beans2.prototype, "userComponentFactory", void 0);
    __decorate$1Z([
      Autowired("userComponentRegistry")
    ], Beans2.prototype, "userComponentRegistry", void 0);
    __decorate$1Z([
      Autowired("animationFrameService")
    ], Beans2.prototype, "animationFrameService", void 0);
    __decorate$1Z([
      Autowired("dragService")
    ], Beans2.prototype, "dragService", void 0);
    __decorate$1Z([
      Autowired("dragAndDropService")
    ], Beans2.prototype, "dragAndDropService", void 0);
    __decorate$1Z([
      Autowired("sortController")
    ], Beans2.prototype, "sortController", void 0);
    __decorate$1Z([
      Autowired("filterManager")
    ], Beans2.prototype, "filterManager", void 0);
    __decorate$1Z([
      Autowired("rowContainerHeightService")
    ], Beans2.prototype, "rowContainerHeightService", void 0);
    __decorate$1Z([
      Autowired("frameworkOverrides")
    ], Beans2.prototype, "frameworkOverrides", void 0);
    __decorate$1Z([
      Autowired("cellPositionUtils")
    ], Beans2.prototype, "cellPositionUtils", void 0);
    __decorate$1Z([
      Autowired("rowPositionUtils")
    ], Beans2.prototype, "rowPositionUtils", void 0);
    __decorate$1Z([
      Autowired("selectionService")
    ], Beans2.prototype, "selectionService", void 0);
    __decorate$1Z([
      Optional("selectionHandleFactory")
    ], Beans2.prototype, "selectionHandleFactory", void 0);
    __decorate$1Z([
      Autowired("rowCssClassCalculator")
    ], Beans2.prototype, "rowCssClassCalculator", void 0);
    __decorate$1Z([
      Autowired("rowModel")
    ], Beans2.prototype, "rowModel", void 0);
    __decorate$1Z([
      Autowired("ctrlsService")
    ], Beans2.prototype, "ctrlsService", void 0);
    __decorate$1Z([
      Autowired("ctrlsFactory")
    ], Beans2.prototype, "ctrlsFactory", void 0);
    __decorate$1Z([
      Autowired("agStackComponentsRegistry")
    ], Beans2.prototype, "agStackComponentsRegistry", void 0);
    __decorate$1Z([
      Autowired("valueCache")
    ], Beans2.prototype, "valueCache", void 0);
    __decorate$1Z([
      Autowired("rowNodeEventThrottle")
    ], Beans2.prototype, "rowNodeEventThrottle", void 0);
    __decorate$1Z([
      Autowired("localeService")
    ], Beans2.prototype, "localeService", void 0);
    __decorate$1Z([
      Autowired("valueParserService")
    ], Beans2.prototype, "valueParserService", void 0);
    __decorate$1Z([
      Autowired("syncService")
    ], Beans2.prototype, "syncService", void 0);
    __decorate$1Z([
      PostConstruct
    ], Beans2.prototype, "postConstruct", null);
    Beans2 = __decorate$1Z([
      Bean("beans")
    ], Beans2);
    return Beans2;
  }()
);
var __extends$25 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var CellMouseListenerFeature = (
  /** @class */
  function(_super) {
    __extends$25(CellMouseListenerFeature2, _super);
    function CellMouseListenerFeature2(ctrl, beans, column) {
      var _this = _super.call(this) || this;
      _this.cellCtrl = ctrl;
      _this.beans = beans;
      _this.column = column;
      return _this;
    }
    CellMouseListenerFeature2.prototype.onMouseEvent = function(eventName, mouseEvent) {
      if (isStopPropagationForAgGrid(mouseEvent)) {
        return;
      }
      switch (eventName) {
        case "click":
          this.onCellClicked(mouseEvent);
          break;
        case "mousedown":
        case "touchstart":
          this.onMouseDown(mouseEvent);
          break;
        case "dblclick":
          this.onCellDoubleClicked(mouseEvent);
          break;
        case "mouseout":
          this.onMouseOut(mouseEvent);
          break;
        case "mouseover":
          this.onMouseOver(mouseEvent);
          break;
      }
    };
    CellMouseListenerFeature2.prototype.onCellClicked = function(mouseEvent) {
      if (this.isDoubleClickOnIPad()) {
        this.onCellDoubleClicked(mouseEvent);
        mouseEvent.preventDefault();
        return;
      }
      var _a = this.beans, eventService = _a.eventService, rangeService = _a.rangeService, gridOptionsService = _a.gridOptionsService;
      var isMultiKey = mouseEvent.ctrlKey || mouseEvent.metaKey;
      if (rangeService && isMultiKey) {
        if (rangeService.getCellRangeCount(this.cellCtrl.getCellPosition()) > 1) {
          rangeService.intersectLastRange(true);
        }
      }
      var cellClickedEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_CLICKED);
      eventService.dispatchEvent(cellClickedEvent);
      var colDef = this.column.getColDef();
      if (colDef.onCellClicked) {
        window.setTimeout(function() {
          return colDef.onCellClicked(cellClickedEvent);
        }, 0);
      }
      var editOnSingleClick = (gridOptionsService.get("singleClickEdit") || colDef.singleClickEdit) && !gridOptionsService.get("suppressClickEdit");
      if (editOnSingleClick && !(mouseEvent.shiftKey && (rangeService === null || rangeService === void 0 ? void 0 : rangeService.getCellRanges().length) != 0)) {
        this.cellCtrl.startRowOrCellEdit();
      }
    };
    CellMouseListenerFeature2.prototype.isDoubleClickOnIPad = function() {
      if (!isIOSUserAgent() || isEventSupported("dblclick")) {
        return false;
      }
      var nowMillis = (/* @__PURE__ */ new Date()).getTime();
      var res = nowMillis - this.lastIPadMouseClickEvent < 200;
      this.lastIPadMouseClickEvent = nowMillis;
      return res;
    };
    CellMouseListenerFeature2.prototype.onCellDoubleClicked = function(mouseEvent) {
      var colDef = this.column.getColDef();
      var cellDoubleClickedEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_DOUBLE_CLICKED);
      this.beans.eventService.dispatchEvent(cellDoubleClickedEvent);
      if (typeof colDef.onCellDoubleClicked === "function") {
        window.setTimeout(function() {
          return colDef.onCellDoubleClicked(cellDoubleClickedEvent);
        }, 0);
      }
      var editOnDoubleClick = !this.beans.gridOptionsService.get("singleClickEdit") && !this.beans.gridOptionsService.get("suppressClickEdit");
      if (editOnDoubleClick) {
        this.cellCtrl.startRowOrCellEdit(null, mouseEvent);
      }
    };
    CellMouseListenerFeature2.prototype.onMouseDown = function(mouseEvent) {
      var ctrlKey = mouseEvent.ctrlKey, metaKey = mouseEvent.metaKey, shiftKey = mouseEvent.shiftKey;
      var target = mouseEvent.target;
      var _a = this, cellCtrl = _a.cellCtrl, beans = _a.beans;
      var eventService = beans.eventService, rangeService = beans.rangeService, focusService = beans.focusService;
      if (this.isRightClickInExistingRange(mouseEvent)) {
        return;
      }
      var ranges = rangeService && rangeService.getCellRanges().length != 0;
      if (!shiftKey || !ranges) {
        var forceBrowserFocus = isBrowserSafari() && !cellCtrl.isEditing() && !isFocusableFormField(target);
        cellCtrl.focusCell(forceBrowserFocus);
      }
      if (shiftKey && ranges && !focusService.isCellFocused(cellCtrl.getCellPosition())) {
        mouseEvent.preventDefault();
        var focusedCellPosition = focusService.getFocusedCell();
        if (focusedCellPosition) {
          var column = focusedCellPosition.column, rowIndex = focusedCellPosition.rowIndex, rowPinned = focusedCellPosition.rowPinned;
          var focusedRowCtrl = beans.rowRenderer.getRowByPosition({ rowIndex, rowPinned });
          var focusedCellCtrl = focusedRowCtrl === null || focusedRowCtrl === void 0 ? void 0 : focusedRowCtrl.getCellCtrl(column);
          if (focusedCellCtrl === null || focusedCellCtrl === void 0 ? void 0 : focusedCellCtrl.isEditing()) {
            focusedCellCtrl.stopEditing();
          }
          focusService.setFocusedCell({
            column,
            rowIndex,
            rowPinned,
            forceBrowserFocus: true,
            preventScrollOnBrowserFocus: true
          });
        }
      }
      if (this.containsWidget(target)) {
        return;
      }
      if (rangeService) {
        var thisCell = this.cellCtrl.getCellPosition();
        if (shiftKey) {
          rangeService.extendLatestRangeToCell(thisCell);
        } else {
          var isMultiKey = ctrlKey || metaKey;
          rangeService.setRangeToCell(thisCell, isMultiKey);
        }
      }
      eventService.dispatchEvent(this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_DOWN));
    };
    CellMouseListenerFeature2.prototype.isRightClickInExistingRange = function(mouseEvent) {
      var rangeService = this.beans.rangeService;
      if (rangeService) {
        var cellInRange = rangeService.isCellInAnyRange(this.cellCtrl.getCellPosition());
        var isRightClick = mouseEvent.button === 2 || mouseEvent.ctrlKey && this.beans.gridOptionsService.get("allowContextMenuWithControlKey");
        if (cellInRange && isRightClick) {
          return true;
        }
      }
      return false;
    };
    CellMouseListenerFeature2.prototype.containsWidget = function(target) {
      return isElementChildOfClass(target, "ag-selection-checkbox", 3);
    };
    CellMouseListenerFeature2.prototype.onMouseOut = function(mouseEvent) {
      if (this.mouseStayingInsideCell(mouseEvent)) {
        return;
      }
      var cellMouseOutEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_OUT);
      this.beans.eventService.dispatchEvent(cellMouseOutEvent);
      this.beans.columnHoverService.clearMouseOver();
    };
    CellMouseListenerFeature2.prototype.onMouseOver = function(mouseEvent) {
      if (this.mouseStayingInsideCell(mouseEvent)) {
        return;
      }
      var cellMouseOverEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_OVER);
      this.beans.eventService.dispatchEvent(cellMouseOverEvent);
      this.beans.columnHoverService.setMouseOver([this.column]);
    };
    CellMouseListenerFeature2.prototype.mouseStayingInsideCell = function(e) {
      if (!e.target || !e.relatedTarget) {
        return false;
      }
      var eGui = this.cellCtrl.getGui();
      var cellContainsTarget = eGui.contains(e.target);
      var cellContainsRelatedTarget = eGui.contains(e.relatedTarget);
      return cellContainsTarget && cellContainsRelatedTarget;
    };
    CellMouseListenerFeature2.prototype.destroy = function() {
    };
    return CellMouseListenerFeature2;
  }(Beans)
);
var __extends$24 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var CellKeyboardListenerFeature = (
  /** @class */
  function(_super) {
    __extends$24(CellKeyboardListenerFeature2, _super);
    function CellKeyboardListenerFeature2(ctrl, beans, column, rowNode, rowCtrl) {
      var _this = _super.call(this) || this;
      _this.cellCtrl = ctrl;
      _this.beans = beans;
      _this.rowNode = rowNode;
      _this.rowCtrl = rowCtrl;
      return _this;
    }
    CellKeyboardListenerFeature2.prototype.setComp = function(eGui) {
      this.eGui = eGui;
    };
    CellKeyboardListenerFeature2.prototype.onKeyDown = function(event) {
      var key = event.key;
      switch (key) {
        case KeyCode.ENTER:
          this.onEnterKeyDown(event);
          break;
        case KeyCode.F2:
          this.onF2KeyDown(event);
          break;
        case KeyCode.ESCAPE:
          this.onEscapeKeyDown(event);
          break;
        case KeyCode.TAB:
          this.onTabKeyDown(event);
          break;
        case KeyCode.BACKSPACE:
        case KeyCode.DELETE:
          this.onBackspaceOrDeleteKeyDown(key, event);
          break;
        case KeyCode.DOWN:
        case KeyCode.UP:
        case KeyCode.RIGHT:
        case KeyCode.LEFT:
          this.onNavigationKeyDown(event, key);
          break;
      }
    };
    CellKeyboardListenerFeature2.prototype.onNavigationKeyDown = function(event, key) {
      if (this.cellCtrl.isEditing()) {
        return;
      }
      if (event.shiftKey && this.cellCtrl.isRangeSelectionEnabled()) {
        this.onShiftRangeSelect(event);
      } else {
        this.beans.navigationService.navigateToNextCell(event, key, this.cellCtrl.getCellPosition(), true);
      }
      event.preventDefault();
    };
    CellKeyboardListenerFeature2.prototype.onShiftRangeSelect = function(event) {
      if (!this.beans.rangeService) {
        return;
      }
      var endCell = this.beans.rangeService.extendLatestRangeInDirection(event);
      if (endCell) {
        this.beans.navigationService.ensureCellVisible(endCell);
      }
    };
    CellKeyboardListenerFeature2.prototype.onTabKeyDown = function(event) {
      this.beans.navigationService.onTabKeyDown(this.cellCtrl, event);
    };
    CellKeyboardListenerFeature2.prototype.onBackspaceOrDeleteKeyDown = function(key, event) {
      var _a = this, cellCtrl = _a.cellCtrl, beans = _a.beans, rowNode = _a.rowNode;
      var gridOptionsService = beans.gridOptionsService, rangeService = beans.rangeService, eventService = beans.eventService;
      if (cellCtrl.isEditing()) {
        return;
      }
      eventService.dispatchEvent({ type: Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_START });
      if (isDeleteKey(key, gridOptionsService.get("enableCellEditingOnBackspace"))) {
        if (rangeService && gridOptionsService.get("enableRangeSelection")) {
          rangeService.clearCellRangeCellValues({ dispatchWrapperEvents: true, wrapperEventSource: "deleteKey" });
        } else if (cellCtrl.isCellEditable()) {
          rowNode.setDataValue(cellCtrl.getColumn(), null, "cellClear");
        }
      } else {
        cellCtrl.startRowOrCellEdit(key, event);
      }
      eventService.dispatchEvent({ type: Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_END });
    };
    CellKeyboardListenerFeature2.prototype.onEnterKeyDown = function(e) {
      if (this.cellCtrl.isEditing() || this.rowCtrl.isEditing()) {
        this.cellCtrl.stopEditingAndFocus(false, e.shiftKey);
      } else {
        if (this.beans.gridOptionsService.get("enterNavigatesVertically")) {
          var key = e.shiftKey ? KeyCode.UP : KeyCode.DOWN;
          this.beans.navigationService.navigateToNextCell(null, key, this.cellCtrl.getCellPosition(), false);
        } else {
          this.cellCtrl.startRowOrCellEdit(KeyCode.ENTER, e);
          if (this.cellCtrl.isEditing()) {
            e.preventDefault();
          }
        }
      }
    };
    CellKeyboardListenerFeature2.prototype.onF2KeyDown = function(event) {
      if (!this.cellCtrl.isEditing()) {
        this.cellCtrl.startRowOrCellEdit(KeyCode.F2, event);
      }
    };
    CellKeyboardListenerFeature2.prototype.onEscapeKeyDown = function(event) {
      if (this.cellCtrl.isEditing()) {
        this.cellCtrl.stopRowOrCellEdit(true);
        this.cellCtrl.focusCell(true);
      }
    };
    CellKeyboardListenerFeature2.prototype.processCharacter = function(event) {
      var eventTarget = event.target;
      var eventOnChildComponent = eventTarget !== this.eGui;
      if (eventOnChildComponent || this.cellCtrl.isEditing()) {
        return;
      }
      var key = event.key;
      if (key === " ") {
        this.onSpaceKeyDown(event);
      } else {
        this.cellCtrl.startRowOrCellEdit(key, event);
        event.preventDefault();
      }
    };
    CellKeyboardListenerFeature2.prototype.onSpaceKeyDown = function(event) {
      var gridOptionsService = this.beans.gridOptionsService;
      if (!this.cellCtrl.isEditing() && gridOptionsService.isRowSelection()) {
        var currentSelection = this.rowNode.isSelected();
        var newSelection = !currentSelection;
        if (newSelection || !gridOptionsService.get("suppressRowDeselection")) {
          var groupSelectsFiltered = this.beans.gridOptionsService.get("groupSelectsFiltered");
          var updatedCount = this.rowNode.setSelectedParams({
            newValue: newSelection,
            rangeSelect: event.shiftKey,
            groupSelectsFiltered,
            event,
            source: "spaceKey"
          });
          if (currentSelection === void 0 && updatedCount === 0) {
            this.rowNode.setSelectedParams({
              newValue: false,
              rangeSelect: event.shiftKey,
              groupSelectsFiltered,
              event,
              source: "spaceKey"
            });
          }
        }
      }
      event.preventDefault();
    };
    CellKeyboardListenerFeature2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
    };
    return CellKeyboardListenerFeature2;
  }(BeanStub)
);
var __extends$23 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1Y = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DndSourceComp = (
  /** @class */
  function(_super) {
    __extends$23(DndSourceComp2, _super);
    function DndSourceComp2(rowNode, column, eCell) {
      var _this = _super.call(
        this,
        /* html */
        '<div class="ag-drag-handle ag-row-drag" draggable="true"></div>'
      ) || this;
      _this.rowNode = rowNode;
      _this.column = column;
      _this.eCell = eCell;
      return _this;
    }
    DndSourceComp2.prototype.postConstruct = function() {
      var eGui = this.getGui();
      eGui.appendChild(createIconNoSpan("rowDrag", this.gridOptionsService, null));
      this.addGuiEventListener("mousedown", function(e) {
        e.stopPropagation();
      });
      this.addDragSource();
      this.checkVisibility();
    };
    DndSourceComp2.prototype.addDragSource = function() {
      this.addGuiEventListener("dragstart", this.onDragStart.bind(this));
    };
    DndSourceComp2.prototype.onDragStart = function(dragEvent) {
      var _this = this;
      var providedOnRowDrag = this.column.getColDef().dndSourceOnRowDrag;
      dragEvent.dataTransfer.setDragImage(this.eCell, 0, 0);
      var defaultOnRowDrag = function() {
        try {
          var jsonData = JSON.stringify(_this.rowNode.data);
          dragEvent.dataTransfer.setData("application/json", jsonData);
          dragEvent.dataTransfer.setData("text/plain", jsonData);
        } catch (e) {
        }
      };
      if (providedOnRowDrag) {
        var params = this.gridOptionsService.addGridCommonParams({
          rowNode: this.rowNode,
          dragEvent
        });
        providedOnRowDrag(params);
      } else {
        defaultOnRowDrag();
      }
    };
    DndSourceComp2.prototype.checkVisibility = function() {
      var visible = this.column.isDndSource(this.rowNode);
      this.setDisplayed(visible);
    };
    __decorate$1Y([
      PostConstruct
    ], DndSourceComp2.prototype, "postConstruct", null);
    return DndSourceComp2;
  }(Component2)
);
var __read$q = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$l = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var CSS_FIRST_COLUMN = "ag-column-first";
var CSS_LAST_COLUMN = "ag-column-last";
var CssClassApplier = (
  /** @class */
  function() {
    function CssClassApplier2() {
    }
    CssClassApplier2.getHeaderClassesFromColDef = function(abstractColDef, gridOptionsService, column, columnGroup) {
      if (missing(abstractColDef)) {
        return [];
      }
      return this.getColumnClassesFromCollDef(abstractColDef.headerClass, abstractColDef, gridOptionsService, column, columnGroup);
    };
    CssClassApplier2.getToolPanelClassesFromColDef = function(abstractColDef, gridOptionsService, column, columnGroup) {
      if (missing(abstractColDef)) {
        return [];
      }
      return this.getColumnClassesFromCollDef(abstractColDef.toolPanelClass, abstractColDef, gridOptionsService, column, columnGroup);
    };
    CssClassApplier2.refreshFirstAndLastStyles = function(comp, column, columnModel) {
      comp.addOrRemoveCssClass(CSS_FIRST_COLUMN, columnModel.isColumnAtEdge(column, "first"));
      comp.addOrRemoveCssClass(CSS_LAST_COLUMN, columnModel.isColumnAtEdge(column, "last"));
    };
    CssClassApplier2.getClassParams = function(abstractColDef, gridOptionsService, column, columnGroup) {
      return gridOptionsService.addGridCommonParams({
        // bad naming, as colDef here can be a group or a column,
        // however most people won't appreciate the difference,
        // so keeping it as colDef to avoid confusion.
        colDef: abstractColDef,
        column,
        columnGroup
      });
    };
    CssClassApplier2.getColumnClassesFromCollDef = function(classesOrFunc, abstractColDef, gridOptionsService, column, columnGroup) {
      if (missing(classesOrFunc)) {
        return [];
      }
      var classToUse;
      if (typeof classesOrFunc === "function") {
        var params = this.getClassParams(abstractColDef, gridOptionsService, column, columnGroup);
        classToUse = classesOrFunc(params);
      } else {
        classToUse = classesOrFunc;
      }
      if (typeof classToUse === "string") {
        return [classToUse];
      }
      if (Array.isArray(classToUse)) {
        return __spreadArray$l([], __read$q(classToUse), false);
      }
      return [];
    };
    return CssClassApplier2;
  }()
);
var __extends$22 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$c = function() {
  __assign$c = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$c.apply(this, arguments);
};
var CSS_CELL = "ag-cell";
var CSS_AUTO_HEIGHT = "ag-cell-auto-height";
var CSS_NORMAL_HEIGHT = "ag-cell-normal-height";
var CSS_CELL_FOCUS = "ag-cell-focus";
var CSS_CELL_FIRST_RIGHT_PINNED = "ag-cell-first-right-pinned";
var CSS_CELL_LAST_LEFT_PINNED = "ag-cell-last-left-pinned";
var CSS_CELL_NOT_INLINE_EDITING = "ag-cell-not-inline-editing";
var CSS_COLUMN_HOVER = "ag-column-hover";
var CSS_CELL_WRAP_TEXT = "ag-cell-wrap-text";
var instanceIdSequence$3 = 0;
var CellCtrl = (
  /** @class */
  function(_super) {
    __extends$22(CellCtrl2, _super);
    function CellCtrl2(column, rowNode, beans, rowCtrl) {
      var _this = _super.call(this) || this;
      _this.cellRangeFeature = null;
      _this.cellPositionFeature = null;
      _this.cellCustomStyleFeature = null;
      _this.tooltipFeature = null;
      _this.cellMouseListenerFeature = null;
      _this.cellKeyboardListenerFeature = null;
      _this.suppressRefreshCell = false;
      _this.onCellCompAttachedFuncs = [];
      _this.column = column;
      _this.rowNode = rowNode;
      _this.beans = beans;
      _this.rowCtrl = rowCtrl;
      _this.instanceId = column.getId() + "-" + instanceIdSequence$3++;
      _this.column.getColDef();
      _this.colIdSanitised = escapeString(_this.column.getId());
      if (!_this.beans.gridOptionsService.get("suppressCellFocus")) {
        _this.tabIndex = -1;
      }
      _this.createCellPosition();
      _this.addFeatures();
      _this.updateAndFormatValue(false);
      return _this;
    }
    CellCtrl2.prototype.shouldRestoreFocus = function() {
      return this.beans.focusService.shouldRestoreFocus(this.cellPosition);
    };
    CellCtrl2.prototype.addFeatures = function() {
      var _this = this;
      this.cellPositionFeature = new CellPositionFeature(this, this.beans);
      this.addDestroyFunc(function() {
        var _a;
        (_a = _this.cellPositionFeature) === null || _a === void 0 ? void 0 : _a.destroy();
        _this.cellPositionFeature = null;
      });
      this.cellCustomStyleFeature = new CellCustomStyleFeature(this, this.beans);
      this.addDestroyFunc(function() {
        var _a;
        (_a = _this.cellCustomStyleFeature) === null || _a === void 0 ? void 0 : _a.destroy();
        _this.cellCustomStyleFeature = null;
      });
      this.cellMouseListenerFeature = new CellMouseListenerFeature(this, this.beans, this.column);
      this.addDestroyFunc(function() {
        var _a;
        (_a = _this.cellMouseListenerFeature) === null || _a === void 0 ? void 0 : _a.destroy();
        _this.cellMouseListenerFeature = null;
      });
      this.cellKeyboardListenerFeature = new CellKeyboardListenerFeature(this, this.beans, this.column, this.rowNode, this.rowCtrl);
      this.addDestroyFunc(function() {
        var _a;
        (_a = _this.cellKeyboardListenerFeature) === null || _a === void 0 ? void 0 : _a.destroy();
        _this.cellKeyboardListenerFeature = null;
      });
      if (this.column.isTooltipEnabled()) {
        this.enableTooltipFeature();
        this.addDestroyFunc(function() {
          _this.disableTooltipFeature();
        });
      }
      var rangeSelectionEnabled = this.beans.rangeService && this.beans.gridOptionsService.get("enableRangeSelection");
      if (rangeSelectionEnabled) {
        this.cellRangeFeature = new CellRangeFeature(this.beans, this);
        this.addDestroyFunc(function() {
          var _a;
          (_a = _this.cellRangeFeature) === null || _a === void 0 ? void 0 : _a.destroy();
          _this.cellRangeFeature = null;
        });
      }
    };
    CellCtrl2.prototype.enableTooltipFeature = function() {
      var _this = this;
      var getTooltipValue = function() {
        var colDef = _this.column.getColDef();
        var data = _this.rowNode.data;
        if (colDef.tooltipField && exists(data)) {
          return getValueUsingField(data, colDef.tooltipField, _this.column.isTooltipFieldContainsDots());
        }
        var valueGetter = colDef.tooltipValueGetter;
        if (valueGetter) {
          return valueGetter(_this.beans.gridOptionsService.addGridCommonParams({
            location: "cell",
            colDef: _this.column.getColDef(),
            column: _this.column,
            rowIndex: _this.cellPosition.rowIndex,
            node: _this.rowNode,
            data: _this.rowNode.data,
            value: _this.value,
            valueFormatted: _this.valueFormatted
          }));
        }
        return null;
      };
      var tooltipCtrl = {
        getColumn: function() {
          return _this.column;
        },
        getColDef: function() {
          return _this.column.getColDef();
        },
        getRowIndex: function() {
          return _this.cellPosition.rowIndex;
        },
        getRowNode: function() {
          return _this.rowNode;
        },
        getGui: function() {
          return _this.getGui();
        },
        getLocation: function() {
          return "cell";
        },
        getTooltipValue,
        // this makes no sense, why is the cell formatted value passed to the tooltip???
        getValueFormatted: function() {
          return _this.valueFormatted;
        }
      };
      this.tooltipFeature = new TooltipFeature(tooltipCtrl, this.beans);
    };
    CellCtrl2.prototype.disableTooltipFeature = function() {
      if (!this.tooltipFeature) {
        return;
      }
      this.tooltipFeature.destroy();
      this.tooltipFeature = null;
    };
    CellCtrl2.prototype.setComp = function(comp, eGui, eCellWrapper, printLayout, startEditing) {
      var _a, _b, _c, _d;
      this.cellComp = comp;
      this.eGui = eGui;
      this.printLayout = printLayout;
      this.addDomData();
      this.onCellFocused(this.focusEventToRestore);
      this.applyStaticCssClasses();
      this.setWrapText();
      this.onFirstRightPinnedChanged();
      this.onLastLeftPinnedChanged();
      this.onColumnHover();
      this.setupControlComps();
      this.setupAutoHeight(eCellWrapper);
      this.refreshFirstAndLastStyles();
      this.refreshAriaColIndex();
      (_a = this.cellPositionFeature) === null || _a === void 0 ? void 0 : _a.setComp(eGui);
      (_b = this.cellCustomStyleFeature) === null || _b === void 0 ? void 0 : _b.setComp(comp);
      (_c = this.tooltipFeature) === null || _c === void 0 ? void 0 : _c.setComp(eGui);
      (_d = this.cellKeyboardListenerFeature) === null || _d === void 0 ? void 0 : _d.setComp(this.eGui);
      if (this.cellRangeFeature) {
        this.cellRangeFeature.setComp(comp, eGui);
      }
      if (startEditing && this.isCellEditable()) {
        this.startEditing();
      } else {
        this.showValue();
      }
      if (this.onCellCompAttachedFuncs.length) {
        this.onCellCompAttachedFuncs.forEach(function(func) {
          return func();
        });
        this.onCellCompAttachedFuncs = [];
      }
    };
    CellCtrl2.prototype.setupAutoHeight = function(eCellWrapper) {
      var _this = this;
      this.isAutoHeight = this.column.isAutoHeight();
      if (!this.isAutoHeight || !eCellWrapper) {
        return;
      }
      var eParentCell = eCellWrapper.parentElement;
      var minRowHeight = this.beans.gridOptionsService.getRowHeightForNode(this.rowNode).height;
      var measureHeight = function(timesCalled) {
        if (_this.editing) {
          return;
        }
        if (!_this.isAlive()) {
          return;
        }
        var _a = getElementSize(eParentCell), paddingTop = _a.paddingTop, paddingBottom = _a.paddingBottom, borderBottomWidth = _a.borderBottomWidth, borderTopWidth = _a.borderTopWidth;
        var extraHeight = paddingTop + paddingBottom + borderBottomWidth + borderTopWidth;
        var wrapperHeight = eCellWrapper.offsetHeight;
        var autoHeight = wrapperHeight + extraHeight;
        if (timesCalled < 5) {
          var doc = _this.beans.gridOptionsService.getDocument();
          var notYetInDom = !doc || !doc.contains(eCellWrapper);
          var possiblyNoContentYet = autoHeight == 0;
          if (notYetInDom || possiblyNoContentYet) {
            window.setTimeout(function() {
              return measureHeight(timesCalled + 1);
            }, 0);
            return;
          }
        }
        var newHeight = Math.max(autoHeight, minRowHeight);
        _this.rowNode.setRowAutoHeight(newHeight, _this.column);
      };
      var listener = function() {
        return measureHeight(0);
      };
      listener();
      var destroyResizeObserver = this.beans.resizeObserverService.observeResize(eCellWrapper, listener);
      this.addDestroyFunc(function() {
        destroyResizeObserver();
        _this.rowNode.setRowAutoHeight(void 0, _this.column);
      });
    };
    CellCtrl2.prototype.getCellAriaRole = function() {
      var _a;
      return (_a = this.column.getColDef().cellAriaRole) !== null && _a !== void 0 ? _a : "gridcell";
    };
    CellCtrl2.prototype.getInstanceId = function() {
      return this.instanceId;
    };
    CellCtrl2.prototype.getIncludeSelection = function() {
      return this.includeSelection;
    };
    CellCtrl2.prototype.getIncludeRowDrag = function() {
      return this.includeRowDrag;
    };
    CellCtrl2.prototype.getIncludeDndSource = function() {
      return this.includeDndSource;
    };
    CellCtrl2.prototype.getColumnIdSanitised = function() {
      return this.colIdSanitised;
    };
    CellCtrl2.prototype.getTabIndex = function() {
      return this.tabIndex;
    };
    CellCtrl2.prototype.isCellRenderer = function() {
      var colDef = this.column.getColDef();
      return colDef.cellRenderer != null || colDef.cellRendererSelector != null;
    };
    CellCtrl2.prototype.getValueToDisplay = function() {
      return this.valueFormatted != null ? this.valueFormatted : this.value;
    };
    CellCtrl2.prototype.showValue = function(forceNewCellRendererInstance) {
      if (forceNewCellRendererInstance === void 0) {
        forceNewCellRendererInstance = false;
      }
      var valueToDisplay = this.getValueToDisplay();
      var compDetails;
      if (this.isCellRenderer()) {
        var params = this.createCellRendererParams();
        compDetails = this.beans.userComponentFactory.getCellRendererDetails(this.column.getColDef(), params);
      }
      this.cellComp.setRenderDetails(compDetails, valueToDisplay, forceNewCellRendererInstance);
      this.refreshHandle();
    };
    CellCtrl2.prototype.setupControlComps = function() {
      var colDef = this.column.getColDef();
      this.includeSelection = this.isIncludeControl(colDef.checkboxSelection);
      this.includeRowDrag = this.isIncludeControl(colDef.rowDrag);
      this.includeDndSource = this.isIncludeControl(colDef.dndSource);
      this.cellComp.setIncludeSelection(this.includeSelection);
      this.cellComp.setIncludeDndSource(this.includeDndSource);
      this.cellComp.setIncludeRowDrag(this.includeRowDrag);
    };
    CellCtrl2.prototype.isForceWrapper = function() {
      var forceWrapper = this.beans.gridOptionsService.get("enableCellTextSelection") || this.column.isAutoHeight();
      return forceWrapper;
    };
    CellCtrl2.prototype.isIncludeControl = function(value) {
      var rowNodePinned = this.rowNode.rowPinned != null;
      var isFunc = typeof value === "function";
      var res = rowNodePinned ? false : isFunc || value === true;
      return res;
    };
    CellCtrl2.prototype.refreshShouldDestroy = function() {
      var colDef = this.column.getColDef();
      var selectionChanged = this.includeSelection != this.isIncludeControl(colDef.checkboxSelection);
      var rowDragChanged = this.includeRowDrag != this.isIncludeControl(colDef.rowDrag);
      var dndSourceChanged = this.includeDndSource != this.isIncludeControl(colDef.dndSource);
      return selectionChanged || rowDragChanged || dndSourceChanged;
    };
    CellCtrl2.prototype.startEditing = function(key, cellStartedEdit, event) {
      var _this = this;
      if (key === void 0) {
        key = null;
      }
      if (cellStartedEdit === void 0) {
        cellStartedEdit = false;
      }
      if (event === void 0) {
        event = null;
      }
      if (!this.isCellEditable() || this.editing) {
        return;
      }
      if (!this.cellComp) {
        this.onCellCompAttachedFuncs.push(function() {
          _this.startEditing(key, cellStartedEdit, event);
        });
        return;
      }
      var editorParams = this.createCellEditorParams(key, cellStartedEdit);
      var colDef = this.column.getColDef();
      var compDetails = this.beans.userComponentFactory.getCellEditorDetails(colDef, editorParams);
      this.editCompDetails = compDetails;
      var popup = (compDetails === null || compDetails === void 0 ? void 0 : compDetails.popupFromSelector) != null ? compDetails.popupFromSelector : !!colDef.cellEditorPopup;
      var position = (compDetails === null || compDetails === void 0 ? void 0 : compDetails.popupPositionFromSelector) != null ? compDetails.popupPositionFromSelector : colDef.cellEditorPopupPosition;
      this.setEditing(true);
      this.cellComp.setEditDetails(compDetails, popup, position, this.beans.gridOptionsService.get("reactiveCustomComponents"));
      var e = this.createEvent(event, Events.EVENT_CELL_EDITING_STARTED);
      this.beans.eventService.dispatchEvent(e);
    };
    CellCtrl2.prototype.setEditing = function(editing) {
      if (this.editing === editing) {
        return;
      }
      this.editing = editing;
      this.refreshHandle();
    };
    CellCtrl2.prototype.stopRowOrCellEdit = function(cancel) {
      if (cancel === void 0) {
        cancel = false;
      }
      if (this.beans.gridOptionsService.get("editType") === "fullRow") {
        this.rowCtrl.stopEditing(cancel);
      } else {
        this.stopEditing(cancel);
      }
    };
    CellCtrl2.prototype.onPopupEditorClosed = function() {
      if (!this.isEditing()) {
        return;
      }
      this.stopEditingAndFocus();
    };
    CellCtrl2.prototype.takeValueFromCellEditor = function(cancel) {
      var noValueResult = { newValueExists: false };
      if (cancel) {
        return noValueResult;
      }
      var cellEditor = this.cellComp.getCellEditor();
      if (!cellEditor) {
        return noValueResult;
      }
      var userWantsToCancel = cellEditor.isCancelAfterEnd && cellEditor.isCancelAfterEnd();
      if (userWantsToCancel) {
        return noValueResult;
      }
      var newValue = cellEditor.getValue();
      return {
        newValue,
        newValueExists: true
      };
    };
    CellCtrl2.prototype.saveNewValue = function(oldValue, newValue) {
      if (newValue === oldValue) {
        return false;
      }
      this.suppressRefreshCell = true;
      var valueChanged = this.rowNode.setDataValue(this.column, newValue, "edit");
      this.suppressRefreshCell = false;
      return valueChanged;
    };
    CellCtrl2.prototype.stopEditing = function(cancel) {
      if (cancel === void 0) {
        cancel = false;
      }
      if (!this.editing) {
        return false;
      }
      var _a = this.takeValueFromCellEditor(cancel), newValue = _a.newValue, newValueExists = _a.newValueExists;
      var oldValue = this.rowNode.getValueFromValueService(this.column);
      var valueChanged = false;
      if (newValueExists) {
        valueChanged = this.saveNewValue(oldValue, newValue);
      }
      this.setEditing(false);
      this.cellComp.setEditDetails();
      this.editCompDetails = void 0;
      this.updateAndFormatValue(false);
      this.refreshCell({ forceRefresh: true, suppressFlash: true });
      this.dispatchEditingStoppedEvent(oldValue, newValue, !cancel && !!valueChanged);
      return valueChanged;
    };
    CellCtrl2.prototype.dispatchEditingStoppedEvent = function(oldValue, newValue, valueChanged) {
      var editingStoppedEvent = __assign$c(__assign$c({}, this.createEvent(null, Events.EVENT_CELL_EDITING_STOPPED)), { oldValue, newValue, valueChanged });
      this.beans.eventService.dispatchEvent(editingStoppedEvent);
    };
    CellCtrl2.prototype.createCellEditorParams = function(key, cellStartedEdit) {
      return this.beans.gridOptionsService.addGridCommonParams({
        value: this.rowNode.getValueFromValueService(this.column),
        eventKey: key,
        column: this.column,
        colDef: this.column.getColDef(),
        rowIndex: this.getCellPosition().rowIndex,
        node: this.rowNode,
        data: this.rowNode.data,
        cellStartedEdit,
        onKeyDown: this.onKeyDown.bind(this),
        stopEditing: this.stopEditingAndFocus.bind(this),
        eGridCell: this.getGui(),
        parseValue: this.parseValue.bind(this),
        formatValue: this.formatValue.bind(this)
      });
    };
    CellCtrl2.prototype.createCellRendererParams = function() {
      var _this = this;
      var res = this.beans.gridOptionsService.addGridCommonParams({
        value: this.value,
        valueFormatted: this.valueFormatted,
        getValue: function() {
          return _this.rowNode.getValueFromValueService(_this.column);
        },
        setValue: function(value) {
          return _this.beans.valueService.setValue(_this.rowNode, _this.column, value);
        },
        formatValue: this.formatValue.bind(this),
        data: this.rowNode.data,
        node: this.rowNode,
        pinned: this.column.getPinned(),
        colDef: this.column.getColDef(),
        column: this.column,
        rowIndex: this.getCellPosition().rowIndex,
        refreshCell: this.refreshCell.bind(this),
        eGridCell: this.getGui(),
        eParentOfValue: this.cellComp.getParentOfValue(),
        registerRowDragger: function(rowDraggerElement, dragStartPixels, value, suppressVisibilityChange) {
          return _this.registerRowDragger(rowDraggerElement, dragStartPixels, suppressVisibilityChange);
        }
      });
      return res;
    };
    CellCtrl2.prototype.parseValue = function(newValue) {
      return this.beans.valueParserService.parseValue(this.column, this.rowNode, newValue, this.getValue());
    };
    CellCtrl2.prototype.setFocusOutOnEditor = function() {
      if (!this.editing) {
        return;
      }
      var cellEditor = this.cellComp.getCellEditor();
      if (cellEditor && cellEditor.focusOut) {
        cellEditor.focusOut();
      }
    };
    CellCtrl2.prototype.setFocusInOnEditor = function() {
      if (!this.editing) {
        return;
      }
      var cellEditor = this.cellComp.getCellEditor();
      if (cellEditor && cellEditor.focusIn) {
        cellEditor.focusIn();
      } else {
        this.focusCell(true);
      }
    };
    CellCtrl2.prototype.onCellChanged = function(event) {
      var eventImpactsThisCell = event.column === this.column;
      if (eventImpactsThisCell) {
        this.refreshCell({});
      }
    };
    CellCtrl2.prototype.refreshOrDestroyCell = function(params) {
      var _a;
      if (this.refreshShouldDestroy()) {
        (_a = this.rowCtrl) === null || _a === void 0 ? void 0 : _a.refreshCell(this);
      } else {
        this.refreshCell(params);
      }
    };
    CellCtrl2.prototype.refreshCell = function(params) {
      var _a, _b, _c;
      if (this.suppressRefreshCell || this.editing) {
        return;
      }
      var colDef = this.column.getColDef();
      var newData = params != null && !!params.newData;
      var suppressFlash = params != null && !!params.suppressFlash || !!colDef.suppressCellFlash;
      var noValueProvided = colDef.field == null && colDef.valueGetter == null && colDef.showRowGroup == null;
      var forceRefresh = params && params.forceRefresh || noValueProvided || newData;
      var isCellCompReady = !!this.cellComp;
      var valuesDifferent = this.updateAndFormatValue(isCellCompReady);
      var dataNeedsUpdating = forceRefresh || valuesDifferent;
      if (!isCellCompReady) {
        return;
      }
      if (dataNeedsUpdating) {
        this.showValue(newData);
        var processingFilterChange = this.beans.filterManager.isSuppressFlashingCellsBecauseFiltering();
        var flashCell = !suppressFlash && !processingFilterChange && (this.beans.gridOptionsService.get("enableCellChangeFlash") || colDef.enableCellChangeFlash);
        if (flashCell) {
          this.flashCell();
        }
        (_a = this.cellCustomStyleFeature) === null || _a === void 0 ? void 0 : _a.applyUserStyles();
        (_b = this.cellCustomStyleFeature) === null || _b === void 0 ? void 0 : _b.applyClassesFromColDef();
      }
      this.refreshToolTip();
      (_c = this.cellCustomStyleFeature) === null || _c === void 0 ? void 0 : _c.applyCellClassRules();
    };
    CellCtrl2.prototype.stopEditingAndFocus = function(suppressNavigateAfterEdit, shiftKey) {
      if (suppressNavigateAfterEdit === void 0) {
        suppressNavigateAfterEdit = false;
      }
      if (shiftKey === void 0) {
        shiftKey = false;
      }
      this.stopRowOrCellEdit();
      this.focusCell(true);
      if (!suppressNavigateAfterEdit) {
        this.navigateAfterEdit(shiftKey);
      }
    };
    CellCtrl2.prototype.navigateAfterEdit = function(shiftKey) {
      var enterNavigatesVerticallyAfterEdit = this.beans.gridOptionsService.get("enterNavigatesVerticallyAfterEdit");
      if (enterNavigatesVerticallyAfterEdit) {
        var key = shiftKey ? KeyCode.UP : KeyCode.DOWN;
        this.beans.navigationService.navigateToNextCell(null, key, this.getCellPosition(), false);
      }
    };
    CellCtrl2.prototype.flashCell = function(delays) {
      var flashDelay = delays && delays.flashDelay;
      var fadeDelay = delays && delays.fadeDelay;
      this.animateCell("data-changed", flashDelay, fadeDelay);
    };
    CellCtrl2.prototype.animateCell = function(cssName, flashDelay, fadeDelay) {
      var _this = this;
      if (!this.cellComp) {
        return;
      }
      var fullName = "ag-cell-".concat(cssName);
      var animationFullName = "ag-cell-".concat(cssName, "-animation");
      var gridOptionsService = this.beans.gridOptionsService;
      if (!flashDelay) {
        flashDelay = gridOptionsService.get("cellFlashDelay");
      }
      if (!exists(fadeDelay)) {
        fadeDelay = gridOptionsService.get("cellFadeDelay");
      }
      this.cellComp.addOrRemoveCssClass(fullName, true);
      this.cellComp.addOrRemoveCssClass(animationFullName, false);
      this.beans.frameworkOverrides.wrapIncoming(function() {
        window.setTimeout(function() {
          if (!_this.isAlive()) {
            return;
          }
          _this.cellComp.addOrRemoveCssClass(fullName, false);
          _this.cellComp.addOrRemoveCssClass(animationFullName, true);
          _this.eGui.style.transition = "background-color ".concat(fadeDelay, "ms");
          window.setTimeout(function() {
            if (!_this.isAlive()) {
              return;
            }
            _this.cellComp.addOrRemoveCssClass(animationFullName, false);
            _this.eGui.style.transition = "";
          }, fadeDelay);
        }, flashDelay);
      });
    };
    CellCtrl2.prototype.onFlashCells = function(event) {
      if (!this.cellComp) {
        return;
      }
      var cellId = this.beans.cellPositionUtils.createId(this.getCellPosition());
      var shouldFlash = event.cells[cellId];
      if (shouldFlash) {
        this.animateCell("highlight");
      }
    };
    CellCtrl2.prototype.isCellEditable = function() {
      return this.column.isCellEditable(this.rowNode);
    };
    CellCtrl2.prototype.isSuppressFillHandle = function() {
      return this.column.isSuppressFillHandle();
    };
    CellCtrl2.prototype.formatValue = function(value) {
      var _a;
      return (_a = this.callValueFormatter(value)) !== null && _a !== void 0 ? _a : value;
    };
    CellCtrl2.prototype.callValueFormatter = function(value) {
      return this.beans.valueFormatterService.formatValue(this.column, this.rowNode, value);
    };
    CellCtrl2.prototype.updateAndFormatValue = function(compareValues) {
      var oldValue = this.value;
      var oldValueFormatted = this.valueFormatted;
      this.value = this.rowNode.getValueFromValueService(this.column);
      this.valueFormatted = this.callValueFormatter(this.value);
      if (compareValues) {
        return !this.valuesAreEqual(oldValue, this.value) || this.valueFormatted != oldValueFormatted;
      }
      return true;
    };
    CellCtrl2.prototype.valuesAreEqual = function(val1, val2) {
      var colDef = this.column.getColDef();
      return colDef.equals ? colDef.equals(val1, val2) : val1 === val2;
    };
    CellCtrl2.prototype.getComp = function() {
      return this.cellComp;
    };
    CellCtrl2.prototype.getValue = function() {
      return this.value;
    };
    CellCtrl2.prototype.getValueFormatted = function() {
      return this.valueFormatted;
    };
    CellCtrl2.prototype.addDomData = function() {
      var _this = this;
      var element = this.getGui();
      this.beans.gridOptionsService.setDomData(element, CellCtrl2.DOM_DATA_KEY_CELL_CTRL, this);
      this.addDestroyFunc(function() {
        return _this.beans.gridOptionsService.setDomData(element, CellCtrl2.DOM_DATA_KEY_CELL_CTRL, null);
      });
    };
    CellCtrl2.prototype.createEvent = function(domEvent, eventType) {
      var event = this.beans.gridOptionsService.addGridCommonParams({
        type: eventType,
        node: this.rowNode,
        data: this.rowNode.data,
        value: this.value,
        column: this.column,
        colDef: this.column.getColDef(),
        rowPinned: this.rowNode.rowPinned,
        event: domEvent,
        rowIndex: this.rowNode.rowIndex
      });
      return event;
    };
    CellCtrl2.prototype.processCharacter = function(event) {
      var _a;
      (_a = this.cellKeyboardListenerFeature) === null || _a === void 0 ? void 0 : _a.processCharacter(event);
    };
    CellCtrl2.prototype.onKeyDown = function(event) {
      var _a;
      (_a = this.cellKeyboardListenerFeature) === null || _a === void 0 ? void 0 : _a.onKeyDown(event);
    };
    CellCtrl2.prototype.onMouseEvent = function(eventName, mouseEvent) {
      var _a;
      (_a = this.cellMouseListenerFeature) === null || _a === void 0 ? void 0 : _a.onMouseEvent(eventName, mouseEvent);
    };
    CellCtrl2.prototype.getGui = function() {
      return this.eGui;
    };
    CellCtrl2.prototype.refreshToolTip = function() {
      var _a;
      (_a = this.tooltipFeature) === null || _a === void 0 ? void 0 : _a.refreshToolTip();
    };
    CellCtrl2.prototype.getColSpanningList = function() {
      return this.cellPositionFeature.getColSpanningList();
    };
    CellCtrl2.prototype.onLeftChanged = function() {
      var _a;
      if (!this.cellComp) {
        return;
      }
      (_a = this.cellPositionFeature) === null || _a === void 0 ? void 0 : _a.onLeftChanged();
    };
    CellCtrl2.prototype.onDisplayedColumnsChanged = function() {
      if (!this.eGui) {
        return;
      }
      this.refreshAriaColIndex();
      this.refreshFirstAndLastStyles();
    };
    CellCtrl2.prototype.refreshFirstAndLastStyles = function() {
      var _a = this, cellComp = _a.cellComp, column = _a.column, beans = _a.beans;
      CssClassApplier.refreshFirstAndLastStyles(cellComp, column, beans.columnModel);
    };
    CellCtrl2.prototype.refreshAriaColIndex = function() {
      var colIdx = this.beans.columnModel.getAriaColumnIndex(this.column);
      setAriaColIndex(this.getGui(), colIdx);
    };
    CellCtrl2.prototype.isSuppressNavigable = function() {
      return this.column.isSuppressNavigable(this.rowNode);
    };
    CellCtrl2.prototype.onWidthChanged = function() {
      var _a;
      return (_a = this.cellPositionFeature) === null || _a === void 0 ? void 0 : _a.onWidthChanged();
    };
    CellCtrl2.prototype.getColumn = function() {
      return this.column;
    };
    CellCtrl2.prototype.getRowNode = function() {
      return this.rowNode;
    };
    CellCtrl2.prototype.getBeans = function() {
      return this.beans;
    };
    CellCtrl2.prototype.isPrintLayout = function() {
      return this.printLayout;
    };
    CellCtrl2.prototype.appendChild = function(htmlElement) {
      this.eGui.appendChild(htmlElement);
    };
    CellCtrl2.prototype.refreshHandle = function() {
      if (this.cellRangeFeature) {
        this.cellRangeFeature.refreshHandle();
      }
    };
    CellCtrl2.prototype.getCellPosition = function() {
      return this.cellPosition;
    };
    CellCtrl2.prototype.isEditing = function() {
      return this.editing;
    };
    CellCtrl2.prototype.startRowOrCellEdit = function(key, event) {
      if (event === void 0) {
        event = null;
      }
      if (!this.cellComp) {
        return;
      }
      if (this.beans.gridOptionsService.get("editType") === "fullRow") {
        this.rowCtrl.startRowEditing(key, this);
      } else {
        this.startEditing(key, true, event);
      }
    };
    CellCtrl2.prototype.getRowCtrl = function() {
      return this.rowCtrl;
    };
    CellCtrl2.prototype.getRowPosition = function() {
      return {
        rowIndex: this.cellPosition.rowIndex,
        rowPinned: this.cellPosition.rowPinned
      };
    };
    CellCtrl2.prototype.updateRangeBordersIfRangeCount = function() {
      if (!this.cellComp) {
        return;
      }
      if (this.cellRangeFeature) {
        this.cellRangeFeature.updateRangeBordersIfRangeCount();
      }
    };
    CellCtrl2.prototype.onRangeSelectionChanged = function() {
      if (!this.cellComp) {
        return;
      }
      if (this.cellRangeFeature) {
        this.cellRangeFeature.onRangeSelectionChanged();
      }
    };
    CellCtrl2.prototype.isRangeSelectionEnabled = function() {
      return this.cellRangeFeature != null;
    };
    CellCtrl2.prototype.focusCell = function(forceBrowserFocus) {
      if (forceBrowserFocus === void 0) {
        forceBrowserFocus = false;
      }
      this.beans.focusService.setFocusedCell({
        rowIndex: this.getCellPosition().rowIndex,
        column: this.column,
        rowPinned: this.rowNode.rowPinned,
        forceBrowserFocus
      });
    };
    CellCtrl2.prototype.onRowIndexChanged = function() {
      this.createCellPosition();
      this.onCellFocused();
      if (this.cellRangeFeature) {
        this.cellRangeFeature.onRangeSelectionChanged();
      }
    };
    CellCtrl2.prototype.onFirstRightPinnedChanged = function() {
      if (!this.cellComp) {
        return;
      }
      var firstRightPinned = this.column.isFirstRightPinned();
      this.cellComp.addOrRemoveCssClass(CSS_CELL_FIRST_RIGHT_PINNED, firstRightPinned);
    };
    CellCtrl2.prototype.onLastLeftPinnedChanged = function() {
      if (!this.cellComp) {
        return;
      }
      var lastLeftPinned = this.column.isLastLeftPinned();
      this.cellComp.addOrRemoveCssClass(CSS_CELL_LAST_LEFT_PINNED, lastLeftPinned);
    };
    CellCtrl2.prototype.onCellFocused = function(event) {
      if (this.beans.gridOptionsService.get("suppressCellFocus")) {
        return;
      }
      var cellFocused = this.beans.focusService.isCellFocused(this.cellPosition);
      if (!this.cellComp) {
        if (cellFocused && (event === null || event === void 0 ? void 0 : event.forceBrowserFocus)) {
          this.focusEventToRestore = event;
        }
        return;
      }
      this.focusEventToRestore = void 0;
      this.cellComp.addOrRemoveCssClass(CSS_CELL_FOCUS, cellFocused);
      if (cellFocused && event && event.forceBrowserFocus) {
        var focusEl = this.cellComp.getFocusableElement();
        focusEl.focus({ preventScroll: !!event.preventScrollOnBrowserFocus });
      }
      var fullRowEdit = this.beans.gridOptionsService.get("editType") === "fullRow";
      if (!cellFocused && !fullRowEdit && this.editing) {
        this.stopRowOrCellEdit();
      }
    };
    CellCtrl2.prototype.createCellPosition = function() {
      this.cellPosition = {
        rowIndex: this.rowNode.rowIndex,
        rowPinned: makeNull(this.rowNode.rowPinned),
        column: this.column
      };
    };
    CellCtrl2.prototype.applyStaticCssClasses = function() {
      this.cellComp.addOrRemoveCssClass(CSS_CELL, true);
      this.cellComp.addOrRemoveCssClass(CSS_CELL_NOT_INLINE_EDITING, true);
      var autoHeight = this.column.isAutoHeight() == true;
      this.cellComp.addOrRemoveCssClass(CSS_AUTO_HEIGHT, autoHeight);
      this.cellComp.addOrRemoveCssClass(CSS_NORMAL_HEIGHT, !autoHeight);
    };
    CellCtrl2.prototype.onColumnHover = function() {
      if (!this.cellComp) {
        return;
      }
      if (!this.beans.gridOptionsService.get("columnHoverHighlight")) {
        return;
      }
      var isHovered = this.beans.columnHoverService.isHovered(this.column);
      this.cellComp.addOrRemoveCssClass(CSS_COLUMN_HOVER, isHovered);
    };
    CellCtrl2.prototype.onColDefChanged = function() {
      var _a, _b;
      if (!this.cellComp) {
        return;
      }
      var isAutoHeight = this.column.isAutoHeight();
      if (isAutoHeight !== this.isAutoHeight) {
        (_a = this.rowCtrl) === null || _a === void 0 ? void 0 : _a.refreshCell(this);
      }
      var isTooltipEnabled = this.column.isTooltipEnabled();
      if (isTooltipEnabled) {
        this.disableTooltipFeature();
        this.enableTooltipFeature();
        (_b = this.tooltipFeature) === null || _b === void 0 ? void 0 : _b.setComp(this.eGui);
      } else {
        this.disableTooltipFeature();
      }
      this.setWrapText();
      if (!this.editing) {
        this.refreshOrDestroyCell({ forceRefresh: true, suppressFlash: true });
      } else {
        var cellEditor = this.getCellEditor();
        if (cellEditor === null || cellEditor === void 0 ? void 0 : cellEditor.refresh) {
          var _c = this.editCompDetails.params, eventKey = _c.eventKey, cellStartedEdit = _c.cellStartedEdit;
          var editorParams = this.createCellEditorParams(eventKey, cellStartedEdit);
          var colDef = this.column.getColDef();
          var compDetails = this.beans.userComponentFactory.getCellEditorDetails(colDef, editorParams);
          cellEditor.refresh(compDetails.params);
        }
      }
    };
    CellCtrl2.prototype.setWrapText = function() {
      var value = this.column.getColDef().wrapText == true;
      this.cellComp.addOrRemoveCssClass(CSS_CELL_WRAP_TEXT, value);
    };
    CellCtrl2.prototype.dispatchCellContextMenuEvent = function(event) {
      var colDef = this.column.getColDef();
      var cellContextMenuEvent = this.createEvent(event, Events.EVENT_CELL_CONTEXT_MENU);
      this.beans.eventService.dispatchEvent(cellContextMenuEvent);
      if (colDef.onCellContextMenu) {
        window.setTimeout(function() {
          return colDef.onCellContextMenu(cellContextMenuEvent);
        }, 0);
      }
    };
    CellCtrl2.prototype.getCellRenderer = function() {
      return this.cellComp ? this.cellComp.getCellRenderer() : null;
    };
    CellCtrl2.prototype.getCellEditor = function() {
      return this.cellComp ? this.cellComp.getCellEditor() : null;
    };
    CellCtrl2.prototype.destroy = function() {
      this.onCellCompAttachedFuncs = [];
      _super.prototype.destroy.call(this);
    };
    CellCtrl2.prototype.createSelectionCheckbox = function() {
      var cbSelectionComponent = new CheckboxSelectionComponent();
      this.beans.context.createBean(cbSelectionComponent);
      cbSelectionComponent.init({ rowNode: this.rowNode, column: this.column });
      return cbSelectionComponent;
    };
    CellCtrl2.prototype.createDndSource = function() {
      var dndSourceComp = new DndSourceComp(this.rowNode, this.column, this.eGui);
      this.beans.context.createBean(dndSourceComp);
      return dndSourceComp;
    };
    CellCtrl2.prototype.registerRowDragger = function(customElement, dragStartPixels, suppressVisibilityChange) {
      var _this = this;
      if (this.customRowDragComp) {
        this.customRowDragComp.setDragElement(customElement, dragStartPixels);
        return;
      }
      var newComp = this.createRowDragComp(customElement, dragStartPixels, suppressVisibilityChange);
      if (newComp) {
        this.customRowDragComp = newComp;
        this.addDestroyFunc(function() {
          _this.beans.context.destroyBean(newComp);
          _this.customRowDragComp = null;
        });
      }
    };
    CellCtrl2.prototype.createRowDragComp = function(customElement, dragStartPixels, suppressVisibilityChange) {
      var _this = this;
      var pagination = this.beans.gridOptionsService.get("pagination");
      var rowDragManaged = this.beans.gridOptionsService.get("rowDragManaged");
      var clientSideRowModelActive = this.beans.gridOptionsService.isRowModelType("clientSide");
      if (rowDragManaged) {
        if (!clientSideRowModelActive) {
          warnOnce("managed row dragging is only allowed in the Client Side Row Model");
          return;
        }
        if (pagination) {
          warnOnce("managed row dragging is not possible when doing pagination");
          return;
        }
      }
      var rowDragComp = new RowDragComp(function() {
        return _this.value;
      }, this.rowNode, this.column, customElement, dragStartPixels, suppressVisibilityChange);
      this.beans.context.createBean(rowDragComp);
      return rowDragComp;
    };
    CellCtrl2.DOM_DATA_KEY_CELL_CTRL = "cellCtrl";
    return CellCtrl2;
  }(BeanStub)
);
var __extends$21 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __values$6 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read$p = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$k = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var RowType$1;
(function(RowType2) {
  RowType2["Normal"] = "Normal";
  RowType2["FullWidth"] = "FullWidth";
  RowType2["FullWidthLoading"] = "FullWidthLoading";
  RowType2["FullWidthGroup"] = "FullWidthGroup";
  RowType2["FullWidthDetail"] = "FullWidthDetail";
})(RowType$1 || (RowType$1 = {}));
var instanceIdSequence$2 = 0;
var RowCtrl = (
  /** @class */
  function(_super) {
    __extends$21(RowCtrl2, _super);
    function RowCtrl2(rowNode, beans, animateIn, useAnimationFrameForCreate, printLayout) {
      var _this = _super.call(this) || this;
      _this.allRowGuis = [];
      _this.active = true;
      _this.centerCellCtrls = { list: [], map: {} };
      _this.leftCellCtrls = { list: [], map: {} };
      _this.rightCellCtrls = { list: [], map: {} };
      _this.slideInAnimation = {
        left: false,
        center: false,
        right: false,
        fullWidth: false
      };
      _this.fadeInAnimation = {
        left: false,
        center: false,
        right: false,
        fullWidth: false
      };
      _this.rowDragComps = [];
      _this.lastMouseDownOnDragger = false;
      _this.emptyStyle = {};
      _this.updateColumnListsPending = false;
      _this.rowId = null;
      _this.businessKeySanitised = null;
      _this.beans = beans;
      _this.gridOptionsService = beans.gridOptionsService;
      _this.rowNode = rowNode;
      _this.paginationPage = beans.paginationProxy.getCurrentPage();
      _this.useAnimationFrameForCreate = useAnimationFrameForCreate;
      _this.printLayout = printLayout;
      _this.suppressRowTransform = _this.gridOptionsService.get("suppressRowTransform");
      _this.instanceId = rowNode.id + "-" + instanceIdSequence$2++;
      _this.rowId = escapeString(rowNode.id);
      _this.initRowBusinessKey();
      _this.rowFocused = beans.focusService.isRowFocused(_this.rowNode.rowIndex, _this.rowNode.rowPinned);
      _this.rowLevel = beans.rowCssClassCalculator.calculateRowLevel(_this.rowNode);
      _this.setRowType();
      _this.setAnimateFlags(animateIn);
      _this.rowStyles = _this.processStylesFromGridOptions();
      if (_this.isFullWidth() && !_this.gridOptionsService.get("suppressCellFocus")) {
        _this.tabIndex = -1;
      }
      _this.addListeners();
      return _this;
    }
    RowCtrl2.prototype.initRowBusinessKey = function() {
      this.businessKeyForNodeFunc = this.gridOptionsService.get("getBusinessKeyForNode");
      this.updateRowBusinessKey();
    };
    RowCtrl2.prototype.updateRowBusinessKey = function() {
      if (typeof this.businessKeyForNodeFunc !== "function") {
        return;
      }
      var businessKey = this.businessKeyForNodeFunc(this.rowNode);
      this.businessKeySanitised = escapeString(businessKey);
    };
    RowCtrl2.prototype.getRowId = function() {
      return this.rowId;
    };
    RowCtrl2.prototype.getRowStyles = function() {
      return this.rowStyles;
    };
    RowCtrl2.prototype.getTabIndex = function() {
      return this.tabIndex;
    };
    RowCtrl2.prototype.isSticky = function() {
      return this.rowNode.sticky;
    };
    RowCtrl2.prototype.getBeans = function() {
      return this.beans;
    };
    RowCtrl2.prototype.getInstanceId = function() {
      return this.instanceId;
    };
    RowCtrl2.prototype.setComp = function(rowComp, element, containerType) {
      var gui = { rowComp, element, containerType };
      this.allRowGuis.push(gui);
      if (containerType === RowContainerType.LEFT) {
        this.leftGui = gui;
      } else if (containerType === RowContainerType.RIGHT) {
        this.rightGui = gui;
      } else if (containerType === RowContainerType.FULL_WIDTH) {
        this.fullWidthGui = gui;
      } else {
        this.centerGui = gui;
      }
      this.initialiseRowComp(gui);
      if (this.rowType !== "FullWidthLoading" && !this.rowNode.rowPinned) {
        this.beans.rowRenderer.dispatchFirstDataRenderedEvent();
      }
    };
    RowCtrl2.prototype.unsetComp = function(containerType) {
      this.allRowGuis = this.allRowGuis.filter(function(rowGui) {
        return rowGui.containerType !== containerType;
      });
      switch (containerType) {
        case RowContainerType.LEFT:
          this.leftGui = void 0;
          break;
        case RowContainerType.RIGHT:
          this.rightGui = void 0;
          break;
        case RowContainerType.FULL_WIDTH:
          this.fullWidthGui = void 0;
          break;
        case RowContainerType.CENTER:
          this.centerGui = void 0;
          break;
      }
    };
    RowCtrl2.prototype.isCacheable = function() {
      return this.rowType === RowType$1.FullWidthDetail && this.gridOptionsService.get("keepDetailRows");
    };
    RowCtrl2.prototype.setCached = function(cached) {
      var displayValue = cached ? "none" : "";
      this.allRowGuis.forEach(function(rg) {
        return rg.element.style.display = displayValue;
      });
    };
    RowCtrl2.prototype.initialiseRowComp = function(gui) {
      var _this = this;
      var gos = this.gridOptionsService;
      this.listenOnDomOrder(gui);
      if (this.beans.columnModel.wasAutoRowHeightEverActive()) {
        this.rowNode.checkAutoHeights();
      }
      this.onRowHeightChanged(gui);
      this.updateRowIndexes(gui);
      this.setFocusedClasses(gui);
      this.setStylesFromGridOptions(false, gui);
      if (gos.isRowSelection() && this.rowNode.selectable) {
        this.onRowSelected(gui);
      }
      this.updateColumnLists(!this.useAnimationFrameForCreate);
      var comp = gui.rowComp;
      var initialRowClasses = this.getInitialRowClasses(gui.containerType);
      initialRowClasses.forEach(function(name) {
        return comp.addOrRemoveCssClass(name, true);
      });
      this.executeSlideAndFadeAnimations(gui);
      if (this.rowNode.group) {
        setAriaExpanded(gui.element, this.rowNode.expanded == true);
      }
      this.setRowCompRowId(comp);
      this.setRowCompRowBusinessKey(comp);
      gos.setDomData(gui.element, RowCtrl2.DOM_DATA_KEY_ROW_CTRL, this);
      this.addDestroyFunc(function() {
        return gos.setDomData(gui.element, RowCtrl2.DOM_DATA_KEY_ROW_CTRL, null);
      });
      if (this.useAnimationFrameForCreate) {
        this.beans.animationFrameService.createTask(this.addHoverFunctionality.bind(this, gui.element), this.rowNode.rowIndex, "createTasksP2");
      } else {
        this.addHoverFunctionality(gui.element);
      }
      if (this.isFullWidth()) {
        this.setupFullWidth(gui);
      }
      if (gos.get("rowDragEntireRow")) {
        this.addRowDraggerToRow(gui);
      }
      if (this.useAnimationFrameForCreate) {
        this.beans.animationFrameService.addDestroyTask(function() {
          if (!_this.isAlive()) {
            return;
          }
          gui.rowComp.addOrRemoveCssClass("ag-after-created", true);
        });
      }
      this.executeProcessRowPostCreateFunc();
    };
    RowCtrl2.prototype.setRowCompRowBusinessKey = function(comp) {
      if (this.businessKeySanitised == null) {
        return;
      }
      comp.setRowBusinessKey(this.businessKeySanitised);
    };
    RowCtrl2.prototype.getBusinessKey = function() {
      return this.businessKeySanitised;
    };
    RowCtrl2.prototype.setRowCompRowId = function(comp) {
      this.rowId = escapeString(this.rowNode.id);
      if (this.rowId == null) {
        return;
      }
      comp.setRowId(this.rowId);
    };
    RowCtrl2.prototype.executeSlideAndFadeAnimations = function(gui) {
      var _this = this;
      var containerType = gui.containerType;
      var shouldSlide = this.slideInAnimation[containerType];
      if (shouldSlide) {
        executeNextVMTurn(function() {
          _this.onTopChanged();
        });
        this.slideInAnimation[containerType] = false;
      }
      var shouldFade = this.fadeInAnimation[containerType];
      if (shouldFade) {
        executeNextVMTurn(function() {
          gui.rowComp.addOrRemoveCssClass("ag-opacity-zero", false);
        });
        this.fadeInAnimation[containerType] = false;
      }
    };
    RowCtrl2.prototype.addRowDraggerToRow = function(gui) {
      if (this.gridOptionsService.get("enableRangeSelection")) {
        warnOnce("Setting `rowDragEntireRow: true` in the gridOptions doesn't work with `enableRangeSelection: true`");
        return;
      }
      var translate = this.beans.localeService.getLocaleTextFunc();
      var rowDragComp = new RowDragComp(function() {
        return "1 ".concat(translate("rowDragRow", "row"));
      }, this.rowNode, void 0, gui.element, void 0, true);
      var rowDragBean = this.createBean(rowDragComp, this.beans.context);
      this.rowDragComps.push(rowDragBean);
    };
    RowCtrl2.prototype.setupFullWidth = function(gui) {
      var pinned = this.getPinnedForContainer(gui.containerType);
      var params = this.createFullWidthParams(gui.element, pinned);
      if (this.rowType == RowType$1.FullWidthDetail) {
        if (!ModuleRegistry.__assertRegistered(ModuleNames.MasterDetailModule, "cell renderer 'agDetailCellRenderer' (for master detail)", this.beans.context.getGridId())) {
          return;
        }
      }
      var compDetails;
      switch (this.rowType) {
        case RowType$1.FullWidthDetail:
          compDetails = this.beans.userComponentFactory.getFullWidthDetailCellRendererDetails(params);
          break;
        case RowType$1.FullWidthGroup:
          compDetails = this.beans.userComponentFactory.getFullWidthGroupCellRendererDetails(params);
          break;
        case RowType$1.FullWidthLoading:
          compDetails = this.beans.userComponentFactory.getFullWidthLoadingCellRendererDetails(params);
          break;
        default:
          compDetails = this.beans.userComponentFactory.getFullWidthCellRendererDetails(params);
          break;
      }
      gui.rowComp.showFullWidth(compDetails);
    };
    RowCtrl2.prototype.isPrintLayout = function() {
      return this.printLayout;
    };
    RowCtrl2.prototype.getFullWidthCellRenderers = function() {
      var _a, _b;
      if (this.gridOptionsService.get("embedFullWidthRows")) {
        return this.allRowGuis.map(function(gui) {
          var _a2;
          return (_a2 = gui === null || gui === void 0 ? void 0 : gui.rowComp) === null || _a2 === void 0 ? void 0 : _a2.getFullWidthCellRenderer();
        });
      }
      return [(_b = (_a = this.fullWidthGui) === null || _a === void 0 ? void 0 : _a.rowComp) === null || _b === void 0 ? void 0 : _b.getFullWidthCellRenderer()];
    };
    RowCtrl2.prototype.getCellElement = function(column) {
      var cellCtrl = this.getCellCtrl(column);
      return cellCtrl ? cellCtrl.getGui() : null;
    };
    RowCtrl2.prototype.executeProcessRowPostCreateFunc = function() {
      var func = this.gridOptionsService.getCallback("processRowPostCreate");
      if (!func || !this.areAllContainersReady()) {
        return;
      }
      var params = {
        // areAllContainersReady asserts that centerGui is not null
        eRow: this.centerGui.element,
        ePinnedLeftRow: this.leftGui ? this.leftGui.element : void 0,
        ePinnedRightRow: this.rightGui ? this.rightGui.element : void 0,
        node: this.rowNode,
        rowIndex: this.rowNode.rowIndex,
        addRenderedRowListener: this.addEventListener.bind(this)
      };
      func(params);
    };
    RowCtrl2.prototype.areAllContainersReady = function() {
      var isLeftReady = !!this.leftGui || !this.beans.columnModel.isPinningLeft();
      var isCenterReady = !!this.centerGui;
      var isRightReady = !!this.rightGui || !this.beans.columnModel.isPinningRight();
      return isLeftReady && isCenterReady && isRightReady;
    };
    RowCtrl2.prototype.setRowType = function() {
      var isStub = this.rowNode.stub;
      var isFullWidthCell = this.rowNode.isFullWidthCell();
      var isDetailCell = this.gridOptionsService.get("masterDetail") && this.rowNode.detail;
      var pivotMode = this.beans.columnModel.isPivotMode();
      var isGroupRow = !!this.rowNode.group && !this.rowNode.footer;
      var isFullWidthGroup = isGroupRow && this.gridOptionsService.isGroupUseEntireRow(pivotMode);
      if (isStub) {
        this.rowType = RowType$1.FullWidthLoading;
      } else if (isDetailCell) {
        this.rowType = RowType$1.FullWidthDetail;
      } else if (isFullWidthCell) {
        this.rowType = RowType$1.FullWidth;
      } else if (isFullWidthGroup) {
        this.rowType = RowType$1.FullWidthGroup;
      } else {
        this.rowType = RowType$1.Normal;
      }
    };
    RowCtrl2.prototype.updateColumnLists = function(suppressAnimationFrame, useFlushSync) {
      var _this = this;
      if (suppressAnimationFrame === void 0) {
        suppressAnimationFrame = false;
      }
      if (useFlushSync === void 0) {
        useFlushSync = false;
      }
      if (this.isFullWidth()) {
        return;
      }
      var noAnimation = suppressAnimationFrame || this.gridOptionsService.get("suppressAnimationFrame") || this.printLayout;
      if (noAnimation) {
        this.updateColumnListsImpl(useFlushSync);
        return;
      }
      if (this.updateColumnListsPending) {
        return;
      }
      this.beans.animationFrameService.createTask(function() {
        if (!_this.active) {
          return;
        }
        _this.updateColumnListsImpl(true);
      }, this.rowNode.rowIndex, "createTasksP1");
      this.updateColumnListsPending = true;
    };
    RowCtrl2.prototype.createCellCtrls = function(prev, cols, pinned) {
      var _this = this;
      if (pinned === void 0) {
        pinned = null;
      }
      var res = {
        list: [],
        map: {}
      };
      var addCell = function(colInstanceId, cellCtrl) {
        res.list.push(cellCtrl);
        res.map[colInstanceId] = cellCtrl;
      };
      cols.forEach(function(col) {
        var colInstanceId = col.getInstanceId();
        var cellCtrl = prev.map[colInstanceId];
        if (!cellCtrl) {
          cellCtrl = new CellCtrl(col, _this.rowNode, _this.beans, _this);
        }
        addCell(colInstanceId, cellCtrl);
      });
      prev.list.forEach(function(prevCellCtrl) {
        var cellInResult = res.map[prevCellCtrl.getColumn().getInstanceId()] != null;
        if (cellInResult) {
          return;
        }
        var keepCell = !_this.isCellEligibleToBeRemoved(prevCellCtrl, pinned);
        if (keepCell) {
          addCell(prevCellCtrl.getColumn().getInstanceId(), prevCellCtrl);
          return;
        }
        prevCellCtrl.destroy();
      });
      return res;
    };
    RowCtrl2.prototype.updateColumnListsImpl = function(useFlushSync) {
      this.updateColumnListsPending = false;
      this.createAllCellCtrls();
      this.setCellCtrls(useFlushSync);
    };
    RowCtrl2.prototype.setCellCtrls = function(useFlushSync) {
      var _this = this;
      this.allRowGuis.forEach(function(item) {
        var cellControls = _this.getCellCtrlsForContainer(item.containerType);
        item.rowComp.setCellCtrls(cellControls, useFlushSync);
      });
    };
    RowCtrl2.prototype.getCellCtrlsForContainer = function(containerType) {
      switch (containerType) {
        case RowContainerType.LEFT:
          return this.leftCellCtrls.list;
        case RowContainerType.RIGHT:
          return this.rightCellCtrls.list;
        case RowContainerType.FULL_WIDTH:
          return [];
        case RowContainerType.CENTER:
          return this.centerCellCtrls.list;
        default:
          var exhaustiveCheck = containerType;
          throw new Error("Unhandled case: ".concat(exhaustiveCheck));
      }
    };
    RowCtrl2.prototype.createAllCellCtrls = function() {
      var columnModel = this.beans.columnModel;
      if (this.printLayout) {
        this.centerCellCtrls = this.createCellCtrls(this.centerCellCtrls, columnModel.getAllDisplayedColumns());
        this.leftCellCtrls = { list: [], map: {} };
        this.rightCellCtrls = { list: [], map: {} };
      } else {
        var centerCols = columnModel.getViewportCenterColumnsForRow(this.rowNode);
        this.centerCellCtrls = this.createCellCtrls(this.centerCellCtrls, centerCols);
        var leftCols = columnModel.getDisplayedLeftColumnsForRow(this.rowNode);
        this.leftCellCtrls = this.createCellCtrls(this.leftCellCtrls, leftCols, "left");
        var rightCols = columnModel.getDisplayedRightColumnsForRow(this.rowNode);
        this.rightCellCtrls = this.createCellCtrls(this.rightCellCtrls, rightCols, "right");
      }
    };
    RowCtrl2.prototype.isCellEligibleToBeRemoved = function(cellCtrl, nextContainerPinned) {
      var REMOVE_CELL = true;
      var KEEP_CELL = false;
      var column = cellCtrl.getColumn();
      if (column.getPinned() != nextContainerPinned) {
        return REMOVE_CELL;
      }
      var editing = cellCtrl.isEditing();
      var focused = this.beans.focusService.isCellFocused(cellCtrl.getCellPosition());
      var mightWantToKeepCell = editing || focused;
      if (mightWantToKeepCell) {
        var column_1 = cellCtrl.getColumn();
        var displayedColumns = this.beans.columnModel.getAllDisplayedColumns();
        var cellStillDisplayed = displayedColumns.indexOf(column_1) >= 0;
        return cellStillDisplayed ? KEEP_CELL : REMOVE_CELL;
      }
      return REMOVE_CELL;
    };
    RowCtrl2.prototype.getDomOrder = function() {
      var isEnsureDomOrder = this.gridOptionsService.get("ensureDomOrder");
      return isEnsureDomOrder || this.gridOptionsService.isDomLayout("print");
    };
    RowCtrl2.prototype.listenOnDomOrder = function(gui) {
      var _this = this;
      var listener = function() {
        gui.rowComp.setDomOrder(_this.getDomOrder());
      };
      this.addManagedPropertyListener("domLayout", listener);
      this.addManagedPropertyListener("ensureDomOrder", listener);
    };
    RowCtrl2.prototype.setAnimateFlags = function(animateIn) {
      if (this.isSticky() || !animateIn) {
        return;
      }
      var oldRowTopExists = exists(this.rowNode.oldRowTop);
      var pinningLeft = this.beans.columnModel.isPinningLeft();
      var pinningRight = this.beans.columnModel.isPinningRight();
      if (oldRowTopExists) {
        if (this.isFullWidth() && !this.gridOptionsService.get("embedFullWidthRows")) {
          this.slideInAnimation.fullWidth = true;
          return;
        }
        this.slideInAnimation.center = true;
        this.slideInAnimation.left = pinningLeft;
        this.slideInAnimation.right = pinningRight;
      } else {
        if (this.isFullWidth() && !this.gridOptionsService.get("embedFullWidthRows")) {
          this.fadeInAnimation.fullWidth = true;
          return;
        }
        this.fadeInAnimation.center = true;
        this.fadeInAnimation.left = pinningLeft;
        this.fadeInAnimation.right = pinningRight;
      }
    };
    RowCtrl2.prototype.isEditing = function() {
      return this.editingRow;
    };
    RowCtrl2.prototype.isFullWidth = function() {
      return this.rowType !== RowType$1.Normal;
    };
    RowCtrl2.prototype.getRowType = function() {
      return this.rowType;
    };
    RowCtrl2.prototype.refreshFullWidth = function() {
      var _this = this;
      var tryRefresh = function(gui, pinned) {
        if (!gui) {
          return true;
        }
        return gui.rowComp.refreshFullWidth(function() {
          return _this.createFullWidthParams(gui.element, pinned);
        });
      };
      var fullWidthSuccess = tryRefresh(this.fullWidthGui, null);
      var centerSuccess = tryRefresh(this.centerGui, null);
      var leftSuccess = tryRefresh(this.leftGui, "left");
      var rightSuccess = tryRefresh(this.rightGui, "right");
      var allFullWidthRowsRefreshed = fullWidthSuccess && centerSuccess && leftSuccess && rightSuccess;
      return allFullWidthRowsRefreshed;
    };
    RowCtrl2.prototype.addListeners = function() {
      var _this = this;
      this.addManagedListener(this.rowNode, RowNode.EVENT_HEIGHT_CHANGED, function() {
        return _this.onRowHeightChanged();
      });
      this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_SELECTED, function() {
        return _this.onRowSelected();
      });
      this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_INDEX_CHANGED, this.onRowIndexChanged.bind(this));
      this.addManagedListener(this.rowNode, RowNode.EVENT_TOP_CHANGED, this.onTopChanged.bind(this));
      this.addManagedListener(this.rowNode, RowNode.EVENT_EXPANDED_CHANGED, this.updateExpandedCss.bind(this));
      this.addManagedListener(this.rowNode, RowNode.EVENT_HAS_CHILDREN_CHANGED, this.updateExpandedCss.bind(this));
      if (this.rowNode.detail) {
        this.addManagedListener(this.rowNode.parent, RowNode.EVENT_DATA_CHANGED, this.onRowNodeDataChanged.bind(this));
      }
      this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.onRowNodeDataChanged.bind(this));
      this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.postProcessCss.bind(this));
      this.addManagedListener(this.rowNode, RowNode.EVENT_HIGHLIGHT_CHANGED, this.onRowNodeHighlightChanged.bind(this));
      this.addManagedListener(this.rowNode, RowNode.EVENT_DRAGGING_CHANGED, this.postProcessRowDragging.bind(this));
      this.addManagedListener(this.rowNode, RowNode.EVENT_UI_LEVEL_CHANGED, this.onUiLevelChanged.bind(this));
      var eventService = this.beans.eventService;
      this.addManagedListener(eventService, Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED, this.onPaginationPixelOffsetChanged.bind(this));
      this.addManagedListener(eventService, Events.EVENT_HEIGHT_SCALE_CHANGED, this.onTopChanged.bind(this));
      this.addManagedListener(eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
      this.addManagedListener(eventService, Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));
      this.addManagedListener(eventService, Events.EVENT_CELL_FOCUSED, this.onCellFocusChanged.bind(this));
      this.addManagedListener(eventService, Events.EVENT_CELL_FOCUS_CLEARED, this.onCellFocusChanged.bind(this));
      this.addManagedListener(eventService, Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));
      this.addManagedListener(eventService, Events.EVENT_MODEL_UPDATED, this.refreshFirstAndLastRowStyles.bind(this));
      this.addManagedListener(eventService, Events.EVENT_COLUMN_MOVED, this.updateColumnLists.bind(this));
      this.addDestroyFunc(function() {
        _this.destroyBeans(_this.rowDragComps, _this.beans.context);
      });
      this.addManagedPropertyListeners(["rowDragEntireRow"], function() {
        var useRowDragEntireRow = _this.gridOptionsService.get("rowDragEntireRow");
        if (useRowDragEntireRow) {
          _this.allRowGuis.forEach(function(gui) {
            _this.addRowDraggerToRow(gui);
          });
          return;
        }
        _this.destroyBeans(_this.rowDragComps, _this.beans.context);
        _this.rowDragComps = [];
      });
      this.addListenersForCellComps();
    };
    RowCtrl2.prototype.addListenersForCellComps = function() {
      var _this = this;
      this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_INDEX_CHANGED, function() {
        _this.getAllCellCtrls().forEach(function(cellCtrl) {
          return cellCtrl.onRowIndexChanged();
        });
      });
      this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, function(event) {
        _this.getAllCellCtrls().forEach(function(cellCtrl) {
          return cellCtrl.onCellChanged(event);
        });
      });
    };
    RowCtrl2.prototype.onRowNodeDataChanged = function(event) {
      var _this = this;
      var fullWidthChanged = this.isFullWidth() !== !!this.rowNode.isFullWidthCell();
      if (fullWidthChanged) {
        this.beans.rowRenderer.redrawRow(this.rowNode);
        return;
      }
      if (this.isFullWidth()) {
        var refresh = this.refreshFullWidth();
        if (!refresh) {
          this.beans.rowRenderer.redrawRow(this.rowNode);
        }
        return;
      }
      this.getAllCellCtrls().forEach(function(cellCtrl) {
        return cellCtrl.refreshCell({
          suppressFlash: !event.update,
          newData: !event.update
        });
      });
      this.allRowGuis.forEach(function(gui) {
        _this.setRowCompRowId(gui.rowComp);
        _this.updateRowBusinessKey();
        _this.setRowCompRowBusinessKey(gui.rowComp);
      });
      this.onRowSelected();
      this.postProcessCss();
    };
    RowCtrl2.prototype.postProcessCss = function() {
      this.setStylesFromGridOptions(true);
      this.postProcessClassesFromGridOptions();
      this.postProcessRowClassRules();
      this.postProcessRowDragging();
    };
    RowCtrl2.prototype.onRowNodeHighlightChanged = function() {
      var highlighted = this.rowNode.highlighted;
      this.allRowGuis.forEach(function(gui) {
        var aboveOn = highlighted === RowHighlightPosition.Above;
        var belowOn = highlighted === RowHighlightPosition.Below;
        gui.rowComp.addOrRemoveCssClass("ag-row-highlight-above", aboveOn);
        gui.rowComp.addOrRemoveCssClass("ag-row-highlight-below", belowOn);
      });
    };
    RowCtrl2.prototype.postProcessRowDragging = function() {
      var dragging = this.rowNode.dragging;
      this.allRowGuis.forEach(function(gui) {
        return gui.rowComp.addOrRemoveCssClass("ag-row-dragging", dragging);
      });
    };
    RowCtrl2.prototype.updateExpandedCss = function() {
      var expandable = this.rowNode.isExpandable();
      var expanded = this.rowNode.expanded == true;
      this.allRowGuis.forEach(function(gui) {
        gui.rowComp.addOrRemoveCssClass("ag-row-group", expandable);
        gui.rowComp.addOrRemoveCssClass("ag-row-group-expanded", expandable && expanded);
        gui.rowComp.addOrRemoveCssClass("ag-row-group-contracted", expandable && !expanded);
        setAriaExpanded(gui.element, expandable && expanded);
      });
    };
    RowCtrl2.prototype.onDisplayedColumnsChanged = function() {
      this.updateColumnLists(true);
      if (this.beans.columnModel.wasAutoRowHeightEverActive()) {
        this.rowNode.checkAutoHeights();
      }
    };
    RowCtrl2.prototype.onVirtualColumnsChanged = function() {
      this.updateColumnLists(false, true);
    };
    RowCtrl2.prototype.getRowPosition = function() {
      return {
        rowPinned: makeNull(this.rowNode.rowPinned),
        rowIndex: this.rowNode.rowIndex
      };
    };
    RowCtrl2.prototype.onKeyboardNavigate = function(keyboardEvent) {
      var currentFullWidthComp = this.allRowGuis.find(function(c) {
        return c.element.contains(keyboardEvent.target);
      });
      var currentFullWidthContainer = currentFullWidthComp ? currentFullWidthComp.element : null;
      var isFullWidthContainerFocused = currentFullWidthContainer === keyboardEvent.target;
      if (!isFullWidthContainerFocused) {
        return;
      }
      var node = this.rowNode;
      var lastFocusedCell = this.beans.focusService.getFocusedCell();
      var cellPosition = {
        rowIndex: node.rowIndex,
        rowPinned: node.rowPinned,
        column: lastFocusedCell && lastFocusedCell.column
      };
      this.beans.navigationService.navigateToNextCell(keyboardEvent, keyboardEvent.key, cellPosition, true);
      keyboardEvent.preventDefault();
    };
    RowCtrl2.prototype.onTabKeyDown = function(keyboardEvent) {
      if (keyboardEvent.defaultPrevented || isStopPropagationForAgGrid(keyboardEvent)) {
        return;
      }
      var currentFullWidthComp = this.allRowGuis.find(function(c) {
        return c.element.contains(keyboardEvent.target);
      });
      var currentFullWidthContainer = currentFullWidthComp ? currentFullWidthComp.element : null;
      var isFullWidthContainerFocused = currentFullWidthContainer === keyboardEvent.target;
      var nextEl = null;
      if (!isFullWidthContainerFocused) {
        nextEl = this.beans.focusService.findNextFocusableElement(currentFullWidthContainer, false, keyboardEvent.shiftKey);
      }
      if (this.isFullWidth() && isFullWidthContainerFocused || !nextEl) {
        this.beans.navigationService.onTabKeyDown(this, keyboardEvent);
      }
    };
    RowCtrl2.prototype.onFullWidthRowFocused = function(event) {
      var _a;
      var node = this.rowNode;
      var isFocused = !event ? false : this.isFullWidth() && event.rowIndex === node.rowIndex && event.rowPinned == node.rowPinned;
      var element = this.fullWidthGui ? this.fullWidthGui.element : (_a = this.centerGui) === null || _a === void 0 ? void 0 : _a.element;
      if (!element) {
        return;
      }
      element.classList.toggle("ag-full-width-focus", isFocused);
      if (isFocused) {
        element.focus({ preventScroll: true });
      }
    };
    RowCtrl2.prototype.refreshCell = function(cellCtrl) {
      this.centerCellCtrls = this.removeCellCtrl(this.centerCellCtrls, cellCtrl);
      this.leftCellCtrls = this.removeCellCtrl(this.leftCellCtrls, cellCtrl);
      this.rightCellCtrls = this.removeCellCtrl(this.rightCellCtrls, cellCtrl);
      this.updateColumnLists();
    };
    RowCtrl2.prototype.removeCellCtrl = function(prev, cellCtrlToRemove) {
      var res = {
        list: [],
        map: {}
      };
      prev.list.forEach(function(cellCtrl) {
        if (cellCtrl === cellCtrlToRemove) {
          return;
        }
        res.list.push(cellCtrl);
        res.map[cellCtrl.getInstanceId()] = cellCtrl;
      });
      return res;
    };
    RowCtrl2.prototype.onMouseEvent = function(eventName, mouseEvent) {
      switch (eventName) {
        case "dblclick":
          this.onRowDblClick(mouseEvent);
          break;
        case "click":
          this.onRowClick(mouseEvent);
          break;
        case "touchstart":
        case "mousedown":
          this.onRowMouseDown(mouseEvent);
          break;
      }
    };
    RowCtrl2.prototype.createRowEvent = function(type, domEvent) {
      return this.gridOptionsService.addGridCommonParams({
        type,
        node: this.rowNode,
        data: this.rowNode.data,
        rowIndex: this.rowNode.rowIndex,
        rowPinned: this.rowNode.rowPinned,
        event: domEvent
      });
    };
    RowCtrl2.prototype.createRowEventWithSource = function(type, domEvent) {
      var event = this.createRowEvent(type, domEvent);
      event.source = this;
      return event;
    };
    RowCtrl2.prototype.onRowDblClick = function(mouseEvent) {
      if (isStopPropagationForAgGrid(mouseEvent)) {
        return;
      }
      var agEvent = this.createRowEventWithSource(Events.EVENT_ROW_DOUBLE_CLICKED, mouseEvent);
      this.beans.eventService.dispatchEvent(agEvent);
    };
    RowCtrl2.prototype.onRowMouseDown = function(mouseEvent) {
      this.lastMouseDownOnDragger = isElementChildOfClass(mouseEvent.target, "ag-row-drag", 3);
      if (!this.isFullWidth()) {
        return;
      }
      var node = this.rowNode;
      var columnModel = this.beans.columnModel;
      if (this.beans.rangeService) {
        this.beans.rangeService.removeAllCellRanges();
      }
      this.beans.focusService.setFocusedCell({
        rowIndex: node.rowIndex,
        column: columnModel.getAllDisplayedColumns()[0],
        rowPinned: node.rowPinned,
        forceBrowserFocus: true
      });
    };
    RowCtrl2.prototype.onRowClick = function(mouseEvent) {
      var stop = isStopPropagationForAgGrid(mouseEvent) || this.lastMouseDownOnDragger;
      if (stop) {
        return;
      }
      var agEvent = this.createRowEventWithSource(Events.EVENT_ROW_CLICKED, mouseEvent);
      this.beans.eventService.dispatchEvent(agEvent);
      var isMultiKey = mouseEvent.ctrlKey || mouseEvent.metaKey;
      var isShiftKey = mouseEvent.shiftKey;
      var groupSelectsChildren = this.gridOptionsService.get("groupSelectsChildren");
      if (
        // we do not allow selecting groups by clicking (as the click here expands the group), or if it's a detail row,
        // so return if it's a group row
        groupSelectsChildren && this.rowNode.group || // this is needed so we don't unselect other rows when we click this row, eg if this row is not selectable,
        // and we click it, the selection should not change (ie any currently selected row should stay selected)
        !this.rowNode.selectable || // we also don't allow selection of pinned rows
        this.rowNode.rowPinned || // if no selection method enabled, do nothing
        !this.gridOptionsService.isRowSelection() || // if click selection suppressed, do nothing
        this.gridOptionsService.get("suppressRowClickSelection")
      ) {
        return;
      }
      var multiSelectOnClick = this.gridOptionsService.get("rowMultiSelectWithClick");
      var rowDeselectionWithCtrl = !this.gridOptionsService.get("suppressRowDeselection");
      var source = "rowClicked";
      if (this.rowNode.isSelected()) {
        if (multiSelectOnClick) {
          this.rowNode.setSelectedParams({ newValue: false, event: mouseEvent, source });
        } else if (isMultiKey) {
          if (rowDeselectionWithCtrl) {
            this.rowNode.setSelectedParams({ newValue: false, event: mouseEvent, source });
          }
        } else {
          this.rowNode.setSelectedParams({ newValue: true, clearSelection: !isShiftKey, rangeSelect: isShiftKey, event: mouseEvent, source });
        }
      } else {
        var clearSelection = multiSelectOnClick ? false : !isMultiKey;
        this.rowNode.setSelectedParams({ newValue: true, clearSelection, rangeSelect: isShiftKey, event: mouseEvent, source });
      }
    };
    RowCtrl2.prototype.setupDetailRowAutoHeight = function(eDetailGui) {
      var _this = this;
      if (this.rowType !== RowType$1.FullWidthDetail) {
        return;
      }
      if (!this.gridOptionsService.get("detailRowAutoHeight")) {
        return;
      }
      var checkRowSizeFunc = function() {
        var clientHeight = eDetailGui.clientHeight;
        if (clientHeight != null && clientHeight > 0) {
          var updateRowHeightFunc = function() {
            _this.rowNode.setRowHeight(clientHeight);
            if (_this.beans.clientSideRowModel) {
              _this.beans.clientSideRowModel.onRowHeightChanged();
            } else if (_this.beans.serverSideRowModel) {
              _this.beans.serverSideRowModel.onRowHeightChanged();
            }
          };
          window.setTimeout(updateRowHeightFunc, 0);
        }
      };
      var resizeObserverDestroyFunc = this.beans.resizeObserverService.observeResize(eDetailGui, checkRowSizeFunc);
      this.addDestroyFunc(resizeObserverDestroyFunc);
      checkRowSizeFunc();
    };
    RowCtrl2.prototype.createFullWidthParams = function(eRow, pinned) {
      var _this = this;
      var params = this.gridOptionsService.addGridCommonParams({
        fullWidth: true,
        data: this.rowNode.data,
        node: this.rowNode,
        value: this.rowNode.key,
        valueFormatted: this.rowNode.key,
        rowIndex: this.rowNode.rowIndex,
        // these need to be taken out, as part of 'afterAttached' now
        eGridCell: eRow,
        eParentOfValue: eRow,
        pinned,
        addRenderedRowListener: this.addEventListener.bind(this),
        registerRowDragger: function(rowDraggerElement, dragStartPixels, value, suppressVisibilityChange) {
          return _this.addFullWidthRowDragging(rowDraggerElement, dragStartPixels, value, suppressVisibilityChange);
        }
      });
      return params;
    };
    RowCtrl2.prototype.addFullWidthRowDragging = function(rowDraggerElement, dragStartPixels, value, suppressVisibilityChange) {
      if (value === void 0) {
        value = "";
      }
      if (!this.isFullWidth()) {
        return;
      }
      var rowDragComp = new RowDragComp(function() {
        return value;
      }, this.rowNode, void 0, rowDraggerElement, dragStartPixels, suppressVisibilityChange);
      this.createManagedBean(rowDragComp, this.beans.context);
    };
    RowCtrl2.prototype.onUiLevelChanged = function() {
      var newLevel = this.beans.rowCssClassCalculator.calculateRowLevel(this.rowNode);
      if (this.rowLevel != newLevel) {
        var classToAdd_1 = "ag-row-level-" + newLevel;
        var classToRemove_1 = "ag-row-level-" + this.rowLevel;
        this.allRowGuis.forEach(function(gui) {
          gui.rowComp.addOrRemoveCssClass(classToAdd_1, true);
          gui.rowComp.addOrRemoveCssClass(classToRemove_1, false);
        });
      }
      this.rowLevel = newLevel;
    };
    RowCtrl2.prototype.isFirstRowOnPage = function() {
      return this.rowNode.rowIndex === this.beans.paginationProxy.getPageFirstRow();
    };
    RowCtrl2.prototype.isLastRowOnPage = function() {
      return this.rowNode.rowIndex === this.beans.paginationProxy.getPageLastRow();
    };
    RowCtrl2.prototype.refreshFirstAndLastRowStyles = function() {
      var newFirst = this.isFirstRowOnPage();
      var newLast = this.isLastRowOnPage();
      if (this.firstRowOnPage !== newFirst) {
        this.firstRowOnPage = newFirst;
        this.allRowGuis.forEach(function(gui) {
          return gui.rowComp.addOrRemoveCssClass("ag-row-first", newFirst);
        });
      }
      if (this.lastRowOnPage !== newLast) {
        this.lastRowOnPage = newLast;
        this.allRowGuis.forEach(function(gui) {
          return gui.rowComp.addOrRemoveCssClass("ag-row-last", newLast);
        });
      }
    };
    RowCtrl2.prototype.stopEditing = function(cancel) {
      var e_1, _a;
      if (cancel === void 0) {
        cancel = false;
      }
      if (this.stoppingRowEdit) {
        return;
      }
      var cellControls = this.getAllCellCtrls();
      var isRowEdit = this.editingRow;
      this.stoppingRowEdit = true;
      var fireRowEditEvent = false;
      try {
        for (var cellControls_1 = __values$6(cellControls), cellControls_1_1 = cellControls_1.next(); !cellControls_1_1.done; cellControls_1_1 = cellControls_1.next()) {
          var ctrl = cellControls_1_1.value;
          var valueChanged = ctrl.stopEditing(cancel);
          if (isRowEdit && !cancel && !fireRowEditEvent && valueChanged) {
            fireRowEditEvent = true;
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (cellControls_1_1 && !cellControls_1_1.done && (_a = cellControls_1.return))
            _a.call(cellControls_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      if (fireRowEditEvent) {
        var event_1 = this.createRowEvent(Events.EVENT_ROW_VALUE_CHANGED);
        this.beans.eventService.dispatchEvent(event_1);
      }
      if (isRowEdit) {
        this.setEditingRow(false);
      }
      this.stoppingRowEdit = false;
    };
    RowCtrl2.prototype.setInlineEditingCss = function(editing) {
      this.allRowGuis.forEach(function(gui) {
        gui.rowComp.addOrRemoveCssClass("ag-row-inline-editing", editing);
        gui.rowComp.addOrRemoveCssClass("ag-row-not-inline-editing", !editing);
      });
    };
    RowCtrl2.prototype.setEditingRow = function(value) {
      this.editingRow = value;
      this.allRowGuis.forEach(function(gui) {
        return gui.rowComp.addOrRemoveCssClass("ag-row-editing", value);
      });
      var event = value ? this.createRowEvent(Events.EVENT_ROW_EDITING_STARTED) : this.createRowEvent(Events.EVENT_ROW_EDITING_STOPPED);
      this.beans.eventService.dispatchEvent(event);
    };
    RowCtrl2.prototype.startRowEditing = function(key, sourceRenderedCell, event) {
      if (key === void 0) {
        key = null;
      }
      if (sourceRenderedCell === void 0) {
        sourceRenderedCell = null;
      }
      if (event === void 0) {
        event = null;
      }
      if (this.editingRow) {
        return;
      }
      var atLeastOneEditing = this.getAllCellCtrls().reduce(function(prev, cellCtrl) {
        var cellStartedEdit = cellCtrl === sourceRenderedCell;
        if (cellStartedEdit) {
          cellCtrl.startEditing(key, cellStartedEdit, event);
        } else {
          cellCtrl.startEditing(null, cellStartedEdit, event);
        }
        if (prev) {
          return true;
        }
        return cellCtrl.isEditing();
      }, false);
      if (atLeastOneEditing) {
        this.setEditingRow(true);
      }
    };
    RowCtrl2.prototype.getAllCellCtrls = function() {
      if (this.leftCellCtrls.list.length === 0 && this.rightCellCtrls.list.length === 0) {
        return this.centerCellCtrls.list;
      }
      var res = __spreadArray$k(__spreadArray$k(__spreadArray$k([], __read$p(this.centerCellCtrls.list), false), __read$p(this.leftCellCtrls.list), false), __read$p(this.rightCellCtrls.list), false);
      return res;
    };
    RowCtrl2.prototype.postProcessClassesFromGridOptions = function() {
      var _this = this;
      var cssClasses = this.beans.rowCssClassCalculator.processClassesFromGridOptions(this.rowNode);
      if (!cssClasses || !cssClasses.length) {
        return;
      }
      cssClasses.forEach(function(classStr) {
        _this.allRowGuis.forEach(function(c) {
          return c.rowComp.addOrRemoveCssClass(classStr, true);
        });
      });
    };
    RowCtrl2.prototype.postProcessRowClassRules = function() {
      var _this = this;
      this.beans.rowCssClassCalculator.processRowClassRules(this.rowNode, function(className) {
        _this.allRowGuis.forEach(function(gui) {
          return gui.rowComp.addOrRemoveCssClass(className, true);
        });
      }, function(className) {
        _this.allRowGuis.forEach(function(gui) {
          return gui.rowComp.addOrRemoveCssClass(className, false);
        });
      });
    };
    RowCtrl2.prototype.setStylesFromGridOptions = function(updateStyles, gui) {
      var _this = this;
      if (updateStyles) {
        this.rowStyles = this.processStylesFromGridOptions();
      }
      this.forEachGui(gui, function(gui2) {
        return gui2.rowComp.setUserStyles(_this.rowStyles);
      });
    };
    RowCtrl2.prototype.getPinnedForContainer = function(rowContainerType) {
      var pinned = rowContainerType === RowContainerType.LEFT ? "left" : rowContainerType === RowContainerType.RIGHT ? "right" : null;
      return pinned;
    };
    RowCtrl2.prototype.getInitialRowClasses = function(rowContainerType) {
      var pinned = this.getPinnedForContainer(rowContainerType);
      var params = {
        rowNode: this.rowNode,
        rowFocused: this.rowFocused,
        fadeRowIn: this.fadeInAnimation[rowContainerType],
        rowIsEven: this.rowNode.rowIndex % 2 === 0,
        rowLevel: this.rowLevel,
        fullWidthRow: this.isFullWidth(),
        firstRowOnPage: this.isFirstRowOnPage(),
        lastRowOnPage: this.isLastRowOnPage(),
        printLayout: this.printLayout,
        expandable: this.rowNode.isExpandable(),
        pinned
      };
      return this.beans.rowCssClassCalculator.getInitialRowClasses(params);
    };
    RowCtrl2.prototype.processStylesFromGridOptions = function() {
      var rowStyle = this.gridOptionsService.get("rowStyle");
      if (rowStyle && typeof rowStyle === "function") {
        console.warn("AG Grid: rowStyle should be an object of key/value styles, not be a function, use getRowStyle() instead");
        return;
      }
      var rowStyleFunc = this.gridOptionsService.getCallback("getRowStyle");
      var rowStyleFuncResult;
      if (rowStyleFunc) {
        var params = {
          data: this.rowNode.data,
          node: this.rowNode,
          rowIndex: this.rowNode.rowIndex
        };
        rowStyleFuncResult = rowStyleFunc(params);
      }
      if (rowStyleFuncResult || rowStyle) {
        return Object.assign({}, rowStyle, rowStyleFuncResult);
      }
      return this.emptyStyle;
    };
    RowCtrl2.prototype.onRowSelected = function(gui) {
      var _this = this;
      var selected = !!this.rowNode.isSelected();
      this.forEachGui(gui, function(gui2) {
        gui2.rowComp.addOrRemoveCssClass("ag-row-selected", selected);
        setAriaSelected(gui2.element, selected ? true : void 0);
        var ariaLabel = _this.createAriaLabel();
        setAriaLabel(gui2.element, ariaLabel == null ? "" : ariaLabel);
      });
    };
    RowCtrl2.prototype.createAriaLabel = function() {
      var selected = this.rowNode.isSelected();
      if (selected && this.gridOptionsService.get("suppressRowDeselection")) {
        return void 0;
      }
      var translate = this.beans.localeService.getLocaleTextFunc();
      var label = translate(selected ? "ariaRowDeselect" : "ariaRowSelect", "Press SPACE to ".concat(selected ? "deselect" : "select", " this row."));
      return label;
    };
    RowCtrl2.prototype.isUseAnimationFrameForCreate = function() {
      return this.useAnimationFrameForCreate;
    };
    RowCtrl2.prototype.addHoverFunctionality = function(eRow) {
      var _this = this;
      if (!this.active) {
        return;
      }
      this.addManagedListener(eRow, "mouseenter", function() {
        return _this.rowNode.onMouseEnter();
      });
      this.addManagedListener(eRow, "mouseleave", function() {
        return _this.rowNode.onMouseLeave();
      });
      this.addManagedListener(this.rowNode, RowNode.EVENT_MOUSE_ENTER, function() {
        if (!_this.beans.dragService.isDragging() && !_this.gridOptionsService.get("suppressRowHoverHighlight")) {
          eRow.classList.add("ag-row-hover");
          _this.rowNode.setHovered(true);
        }
      });
      this.addManagedListener(this.rowNode, RowNode.EVENT_MOUSE_LEAVE, function() {
        eRow.classList.remove("ag-row-hover");
        _this.rowNode.setHovered(false);
      });
    };
    RowCtrl2.prototype.roundRowTopToBounds = function(rowTop) {
      var range = this.beans.ctrlsService.getGridBodyCtrl().getScrollFeature().getApproximateVScollPosition();
      var minPixel = this.applyPaginationOffset(range.top, true) - 100;
      var maxPixel = this.applyPaginationOffset(range.bottom, true) + 100;
      return Math.min(Math.max(minPixel, rowTop), maxPixel);
    };
    RowCtrl2.prototype.getFrameworkOverrides = function() {
      return this.beans.frameworkOverrides;
    };
    RowCtrl2.prototype.forEachGui = function(gui, callback) {
      if (gui) {
        callback(gui);
      } else {
        this.allRowGuis.forEach(callback);
      }
    };
    RowCtrl2.prototype.onRowHeightChanged = function(gui) {
      if (this.rowNode.rowHeight == null) {
        return;
      }
      var rowHeight = this.rowNode.rowHeight;
      var defaultRowHeight = this.beans.environment.getDefaultRowHeight();
      var isHeightFromFunc = this.gridOptionsService.isGetRowHeightFunction();
      var heightFromFunc = isHeightFromFunc ? this.gridOptionsService.getRowHeightForNode(this.rowNode).height : void 0;
      var lineHeight = heightFromFunc ? "".concat(Math.min(defaultRowHeight, heightFromFunc) - 2, "px") : void 0;
      this.forEachGui(gui, function(gui2) {
        gui2.element.style.height = "".concat(rowHeight, "px");
        if (lineHeight) {
          gui2.element.style.setProperty("--ag-line-height", lineHeight);
        }
      });
    };
    RowCtrl2.prototype.addEventListener = function(eventType, listener) {
      _super.prototype.addEventListener.call(this, eventType, listener);
    };
    RowCtrl2.prototype.removeEventListener = function(eventType, listener) {
      _super.prototype.removeEventListener.call(this, eventType, listener);
    };
    RowCtrl2.prototype.destroyFirstPass = function(suppressAnimation) {
      if (suppressAnimation === void 0) {
        suppressAnimation = false;
      }
      this.active = false;
      if (!suppressAnimation && this.gridOptionsService.isAnimateRows() && !this.isSticky()) {
        var rowStillVisibleJustNotInViewport = this.rowNode.rowTop != null;
        if (rowStillVisibleJustNotInViewport) {
          var rowTop = this.roundRowTopToBounds(this.rowNode.rowTop);
          this.setRowTop(rowTop);
        } else {
          this.allRowGuis.forEach(function(gui) {
            return gui.rowComp.addOrRemoveCssClass("ag-opacity-zero", true);
          });
        }
      }
      this.rowNode.setHovered(false);
      var event = this.createRowEvent(Events.EVENT_VIRTUAL_ROW_REMOVED);
      this.dispatchEvent(event);
      this.beans.eventService.dispatchEvent(event);
      _super.prototype.destroy.call(this);
    };
    RowCtrl2.prototype.destroySecondPass = function() {
      this.allRowGuis.length = 0;
      this.stopEditing();
      var destroyCellCtrls = function(ctrls) {
        ctrls.list.forEach(function(c) {
          return c.destroy();
        });
        return { list: [], map: {} };
      };
      this.centerCellCtrls = destroyCellCtrls(this.centerCellCtrls);
      this.leftCellCtrls = destroyCellCtrls(this.leftCellCtrls);
      this.rightCellCtrls = destroyCellCtrls(this.rightCellCtrls);
    };
    RowCtrl2.prototype.setFocusedClasses = function(gui) {
      var _this = this;
      this.forEachGui(gui, function(gui2) {
        gui2.rowComp.addOrRemoveCssClass("ag-row-focus", _this.rowFocused);
        gui2.rowComp.addOrRemoveCssClass("ag-row-no-focus", !_this.rowFocused);
      });
    };
    RowCtrl2.prototype.onCellFocusChanged = function() {
      var rowFocused = this.beans.focusService.isRowFocused(this.rowNode.rowIndex, this.rowNode.rowPinned);
      if (rowFocused !== this.rowFocused) {
        this.rowFocused = rowFocused;
        this.setFocusedClasses();
      }
      if (!rowFocused && this.editingRow) {
        this.stopEditing(false);
      }
    };
    RowCtrl2.prototype.onPaginationChanged = function() {
      var currentPage = this.beans.paginationProxy.getCurrentPage();
      if (this.paginationPage !== currentPage) {
        this.paginationPage = currentPage;
        this.onTopChanged();
      }
      this.refreshFirstAndLastRowStyles();
    };
    RowCtrl2.prototype.onTopChanged = function() {
      this.setRowTop(this.rowNode.rowTop);
    };
    RowCtrl2.prototype.onPaginationPixelOffsetChanged = function() {
      this.onTopChanged();
    };
    RowCtrl2.prototype.applyPaginationOffset = function(topPx, reverse) {
      if (reverse === void 0) {
        reverse = false;
      }
      if (this.rowNode.isRowPinned() || this.rowNode.sticky) {
        return topPx;
      }
      var pixelOffset = this.beans.paginationProxy.getPixelOffset();
      var multiplier = reverse ? 1 : -1;
      return topPx + pixelOffset * multiplier;
    };
    RowCtrl2.prototype.setRowTop = function(pixels) {
      if (this.printLayout) {
        return;
      }
      if (exists(pixels)) {
        var afterPaginationPixels = this.applyPaginationOffset(pixels);
        var skipScaling = this.rowNode.isRowPinned() || this.rowNode.sticky;
        var afterScalingPixels = skipScaling ? afterPaginationPixels : this.beans.rowContainerHeightService.getRealPixelPosition(afterPaginationPixels);
        var topPx = "".concat(afterScalingPixels, "px");
        this.setRowTopStyle(topPx);
      }
    };
    RowCtrl2.prototype.getInitialRowTop = function(rowContainerType) {
      return this.suppressRowTransform ? this.getInitialRowTopShared(rowContainerType) : void 0;
    };
    RowCtrl2.prototype.getInitialTransform = function(rowContainerType) {
      return this.suppressRowTransform ? void 0 : "translateY(".concat(this.getInitialRowTopShared(rowContainerType), ")");
    };
    RowCtrl2.prototype.getInitialRowTopShared = function(rowContainerType) {
      if (this.printLayout) {
        return "";
      }
      var rowTop;
      if (this.isSticky()) {
        rowTop = this.rowNode.stickyRowTop;
      } else {
        var pixels = this.slideInAnimation[rowContainerType] ? this.roundRowTopToBounds(this.rowNode.oldRowTop) : this.rowNode.rowTop;
        var afterPaginationPixels = this.applyPaginationOffset(pixels);
        rowTop = this.rowNode.isRowPinned() ? afterPaginationPixels : this.beans.rowContainerHeightService.getRealPixelPosition(afterPaginationPixels);
      }
      return rowTop + "px";
    };
    RowCtrl2.prototype.setRowTopStyle = function(topPx) {
      var _this = this;
      this.allRowGuis.forEach(function(gui) {
        return _this.suppressRowTransform ? gui.rowComp.setTop(topPx) : gui.rowComp.setTransform("translateY(".concat(topPx, ")"));
      });
    };
    RowCtrl2.prototype.getRowNode = function() {
      return this.rowNode;
    };
    RowCtrl2.prototype.getCellCtrl = function(column) {
      var res = null;
      this.getAllCellCtrls().forEach(function(cellCtrl) {
        if (cellCtrl.getColumn() == column) {
          res = cellCtrl;
        }
      });
      if (res != null) {
        return res;
      }
      this.getAllCellCtrls().forEach(function(cellCtrl) {
        if (cellCtrl.getColSpanningList().indexOf(column) >= 0) {
          res = cellCtrl;
        }
      });
      return res;
    };
    RowCtrl2.prototype.onRowIndexChanged = function() {
      if (this.rowNode.rowIndex != null) {
        this.onCellFocusChanged();
        this.updateRowIndexes();
        this.postProcessCss();
      }
    };
    RowCtrl2.prototype.getRowIndex = function() {
      return this.rowNode.getRowIndexString();
    };
    RowCtrl2.prototype.updateRowIndexes = function(gui) {
      var rowIndexStr = this.rowNode.getRowIndexString();
      var headerRowCount = this.beans.headerNavigationService.getHeaderRowCount() + this.beans.filterManager.getHeaderRowCount();
      var rowIsEven = this.rowNode.rowIndex % 2 === 0;
      var ariaRowIndex = headerRowCount + this.rowNode.rowIndex + 1;
      this.forEachGui(gui, function(c) {
        c.rowComp.setRowIndex(rowIndexStr);
        c.rowComp.addOrRemoveCssClass("ag-row-even", rowIsEven);
        c.rowComp.addOrRemoveCssClass("ag-row-odd", !rowIsEven);
        setAriaRowIndex(c.element, ariaRowIndex);
      });
    };
    RowCtrl2.DOM_DATA_KEY_ROW_CTRL = "renderedRow";
    return RowCtrl2;
  }(BeanStub)
);
var __extends$20 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1X = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __read$o = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var RowContainerEventsFeature = (
  /** @class */
  function(_super) {
    __extends$20(RowContainerEventsFeature2, _super);
    function RowContainerEventsFeature2(element) {
      var _this = _super.call(this) || this;
      _this.element = element;
      return _this;
    }
    RowContainerEventsFeature2.prototype.postConstruct = function() {
      this.addKeyboardListeners();
      this.addMouseListeners();
      this.mockContextMenuForIPad();
    };
    RowContainerEventsFeature2.prototype.addKeyboardListeners = function() {
      var eventName = "keydown";
      var listener = this.processKeyboardEvent.bind(this, eventName);
      this.addManagedListener(this.element, eventName, listener);
    };
    RowContainerEventsFeature2.prototype.addMouseListeners = function() {
      var _this = this;
      var mouseDownEvent = isEventSupported("touchstart") ? "touchstart" : "mousedown";
      var eventNames = ["dblclick", "contextmenu", "mouseover", "mouseout", "click", mouseDownEvent];
      eventNames.forEach(function(eventName) {
        var listener = _this.processMouseEvent.bind(_this, eventName);
        _this.addManagedListener(_this.element, eventName, listener);
      });
    };
    RowContainerEventsFeature2.prototype.processMouseEvent = function(eventName, mouseEvent) {
      if (!this.mouseEventService.isEventFromThisGrid(mouseEvent) || isStopPropagationForAgGrid(mouseEvent)) {
        return;
      }
      var rowComp = this.getRowForEvent(mouseEvent);
      var cellCtrl = this.mouseEventService.getRenderedCellForEvent(mouseEvent);
      if (eventName === "contextmenu") {
        this.handleContextMenuMouseEvent(mouseEvent, null, rowComp, cellCtrl);
      } else {
        if (cellCtrl) {
          cellCtrl.onMouseEvent(eventName, mouseEvent);
        }
        if (rowComp) {
          rowComp.onMouseEvent(eventName, mouseEvent);
        }
      }
    };
    RowContainerEventsFeature2.prototype.mockContextMenuForIPad = function() {
      var _this = this;
      if (!isIOSUserAgent()) {
        return;
      }
      var touchListener = new TouchListener(this.element);
      var longTapListener = function(event) {
        var rowComp = _this.getRowForEvent(event.touchEvent);
        var cellComp = _this.mouseEventService.getRenderedCellForEvent(event.touchEvent);
        _this.handleContextMenuMouseEvent(null, event.touchEvent, rowComp, cellComp);
      };
      this.addManagedListener(touchListener, TouchListener.EVENT_LONG_TAP, longTapListener);
      this.addDestroyFunc(function() {
        return touchListener.destroy();
      });
    };
    RowContainerEventsFeature2.prototype.getRowForEvent = function(event) {
      var sourceElement = event.target;
      while (sourceElement) {
        var rowCon = this.gridOptionsService.getDomData(sourceElement, RowCtrl.DOM_DATA_KEY_ROW_CTRL);
        if (rowCon) {
          return rowCon;
        }
        sourceElement = sourceElement.parentElement;
      }
      return null;
    };
    RowContainerEventsFeature2.prototype.handleContextMenuMouseEvent = function(mouseEvent, touchEvent, rowComp, cellCtrl) {
      var rowNode = rowComp ? rowComp.getRowNode() : null;
      var column = cellCtrl ? cellCtrl.getColumn() : null;
      var value = null;
      if (column) {
        var event_1 = mouseEvent ? mouseEvent : touchEvent;
        cellCtrl.dispatchCellContextMenuEvent(event_1);
        value = this.valueService.getValue(column, rowNode);
      }
      var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
      var anchorToElement = cellCtrl ? cellCtrl.getGui() : gridBodyCon.getGridBodyElement();
      if (this.contextMenuFactory) {
        this.contextMenuFactory.onContextMenu(mouseEvent, touchEvent, rowNode, column, value, anchorToElement);
      }
    };
    RowContainerEventsFeature2.prototype.getControlsForEventTarget = function(target) {
      return {
        cellCtrl: getCtrlForEventTarget(this.gridOptionsService, target, CellCtrl.DOM_DATA_KEY_CELL_CTRL),
        rowCtrl: getCtrlForEventTarget(this.gridOptionsService, target, RowCtrl.DOM_DATA_KEY_ROW_CTRL)
      };
    };
    RowContainerEventsFeature2.prototype.processKeyboardEvent = function(eventName, keyboardEvent) {
      var _a = this.getControlsForEventTarget(keyboardEvent.target), cellCtrl = _a.cellCtrl, rowCtrl = _a.rowCtrl;
      if (keyboardEvent.defaultPrevented) {
        return;
      }
      if (cellCtrl) {
        this.processCellKeyboardEvent(cellCtrl, eventName, keyboardEvent);
      } else if (rowCtrl && rowCtrl.isFullWidth()) {
        this.processFullWidthRowKeyboardEvent(rowCtrl, eventName, keyboardEvent);
      }
    };
    RowContainerEventsFeature2.prototype.processCellKeyboardEvent = function(cellCtrl, eventName, keyboardEvent) {
      var rowNode = cellCtrl.getRowNode();
      var column = cellCtrl.getColumn();
      var editing = cellCtrl.isEditing();
      var gridProcessingAllowed = !isUserSuppressingKeyboardEvent(this.gridOptionsService, keyboardEvent, rowNode, column, editing);
      if (gridProcessingAllowed) {
        if (eventName === "keydown") {
          var wasScrollKey = !editing && this.navigationService.handlePageScrollingKey(keyboardEvent);
          if (!wasScrollKey) {
            cellCtrl.onKeyDown(keyboardEvent);
          }
          this.doGridOperations(keyboardEvent, cellCtrl.isEditing());
          if (isEventFromPrintableCharacter(keyboardEvent)) {
            cellCtrl.processCharacter(keyboardEvent);
          }
        }
      }
      if (eventName === "keydown") {
        var cellKeyDownEvent = cellCtrl.createEvent(keyboardEvent, Events.EVENT_CELL_KEY_DOWN);
        this.eventService.dispatchEvent(cellKeyDownEvent);
      }
    };
    RowContainerEventsFeature2.prototype.processFullWidthRowKeyboardEvent = function(rowComp, eventName, keyboardEvent) {
      var rowNode = rowComp.getRowNode();
      var focusedCell = this.focusService.getFocusedCell();
      var column = focusedCell && focusedCell.column;
      var gridProcessingAllowed = !isUserSuppressingKeyboardEvent(this.gridOptionsService, keyboardEvent, rowNode, column, false);
      if (gridProcessingAllowed) {
        var key = keyboardEvent.key;
        if (eventName === "keydown") {
          switch (key) {
            case KeyCode.PAGE_HOME:
            case KeyCode.PAGE_END:
            case KeyCode.PAGE_UP:
            case KeyCode.PAGE_DOWN:
              this.navigationService.handlePageScrollingKey(keyboardEvent, true);
              break;
            case KeyCode.UP:
            case KeyCode.DOWN:
              rowComp.onKeyboardNavigate(keyboardEvent);
              break;
            case KeyCode.TAB:
              rowComp.onTabKeyDown(keyboardEvent);
              break;
          }
        }
      }
      if (eventName === "keydown") {
        var cellKeyDownEvent = rowComp.createRowEvent(Events.EVENT_CELL_KEY_DOWN, keyboardEvent);
        this.eventService.dispatchEvent(cellKeyDownEvent);
      }
    };
    RowContainerEventsFeature2.prototype.doGridOperations = function(keyboardEvent, editing) {
      if (!keyboardEvent.ctrlKey && !keyboardEvent.metaKey) {
        return;
      }
      if (editing) {
        return;
      }
      if (!this.mouseEventService.isEventFromThisGrid(keyboardEvent)) {
        return;
      }
      var keyCode = normaliseQwertyAzerty(keyboardEvent);
      if (keyCode === KeyCode.A) {
        return this.onCtrlAndA(keyboardEvent);
      }
      if (keyCode === KeyCode.C) {
        return this.onCtrlAndC(keyboardEvent);
      }
      if (keyCode === KeyCode.D) {
        return this.onCtrlAndD(keyboardEvent);
      }
      if (keyCode === KeyCode.V) {
        return this.onCtrlAndV(keyboardEvent);
      }
      if (keyCode === KeyCode.X) {
        return this.onCtrlAndX(keyboardEvent);
      }
      if (keyCode === KeyCode.Y) {
        return this.onCtrlAndY();
      }
      if (keyCode === KeyCode.Z) {
        return this.onCtrlAndZ(keyboardEvent);
      }
    };
    RowContainerEventsFeature2.prototype.onCtrlAndA = function(event) {
      var _a = this, pinnedRowModel = _a.pinnedRowModel, paginationProxy = _a.paginationProxy, rangeService = _a.rangeService;
      if (rangeService && paginationProxy.isRowsToRender()) {
        var _b = __read$o([
          pinnedRowModel.isEmpty("top"),
          pinnedRowModel.isEmpty("bottom")
        ], 2), isEmptyPinnedTop = _b[0], isEmptyPinnedBottom = _b[1];
        var floatingStart = isEmptyPinnedTop ? null : "top";
        var floatingEnd = void 0;
        var rowEnd = void 0;
        if (isEmptyPinnedBottom) {
          floatingEnd = null;
          rowEnd = this.paginationProxy.getRowCount() - 1;
        } else {
          floatingEnd = "bottom";
          rowEnd = pinnedRowModel.getPinnedBottomRowData().length - 1;
        }
        var allDisplayedColumns = this.columnModel.getAllDisplayedColumns();
        if (missingOrEmpty(allDisplayedColumns)) {
          return;
        }
        rangeService.setCellRange({
          rowStartIndex: 0,
          rowStartPinned: floatingStart,
          rowEndIndex: rowEnd,
          rowEndPinned: floatingEnd,
          columnStart: allDisplayedColumns[0],
          columnEnd: last(allDisplayedColumns)
        });
      }
      event.preventDefault();
    };
    RowContainerEventsFeature2.prototype.onCtrlAndC = function(event) {
      if (!this.clipboardService || this.gridOptionsService.get("enableCellTextSelection")) {
        return;
      }
      var _a = this.getControlsForEventTarget(event.target), cellCtrl = _a.cellCtrl, rowCtrl = _a.rowCtrl;
      if ((cellCtrl === null || cellCtrl === void 0 ? void 0 : cellCtrl.isEditing()) || (rowCtrl === null || rowCtrl === void 0 ? void 0 : rowCtrl.isEditing())) {
        return;
      }
      event.preventDefault();
      this.clipboardService.copyToClipboard();
    };
    RowContainerEventsFeature2.prototype.onCtrlAndX = function(event) {
      if (!this.clipboardService || this.gridOptionsService.get("enableCellTextSelection") || this.gridOptionsService.get("suppressCutToClipboard")) {
        return;
      }
      var _a = this.getControlsForEventTarget(event.target), cellCtrl = _a.cellCtrl, rowCtrl = _a.rowCtrl;
      if ((cellCtrl === null || cellCtrl === void 0 ? void 0 : cellCtrl.isEditing()) || (rowCtrl === null || rowCtrl === void 0 ? void 0 : rowCtrl.isEditing())) {
        return;
      }
      event.preventDefault();
      this.clipboardService.cutToClipboard(void 0, "ui");
    };
    RowContainerEventsFeature2.prototype.onCtrlAndV = function(event) {
      var _a = this.getControlsForEventTarget(event.target), cellCtrl = _a.cellCtrl, rowCtrl = _a.rowCtrl;
      if ((cellCtrl === null || cellCtrl === void 0 ? void 0 : cellCtrl.isEditing()) || (rowCtrl === null || rowCtrl === void 0 ? void 0 : rowCtrl.isEditing())) {
        return;
      }
      if (this.clipboardService && !this.gridOptionsService.get("suppressClipboardPaste")) {
        this.clipboardService.pasteFromClipboard();
      }
    };
    RowContainerEventsFeature2.prototype.onCtrlAndD = function(event) {
      if (this.clipboardService && !this.gridOptionsService.get("suppressClipboardPaste")) {
        this.clipboardService.copyRangeDown();
      }
      event.preventDefault();
    };
    RowContainerEventsFeature2.prototype.onCtrlAndZ = function(event) {
      if (!this.gridOptionsService.get("undoRedoCellEditing")) {
        return;
      }
      event.preventDefault();
      if (event.shiftKey) {
        this.undoRedoService.redo("ui");
      } else {
        this.undoRedoService.undo("ui");
      }
    };
    RowContainerEventsFeature2.prototype.onCtrlAndY = function() {
      this.undoRedoService.redo("ui");
    };
    __decorate$1X([
      Autowired("mouseEventService")
    ], RowContainerEventsFeature2.prototype, "mouseEventService", void 0);
    __decorate$1X([
      Autowired("valueService")
    ], RowContainerEventsFeature2.prototype, "valueService", void 0);
    __decorate$1X([
      Optional("contextMenuFactory")
    ], RowContainerEventsFeature2.prototype, "contextMenuFactory", void 0);
    __decorate$1X([
      Autowired("ctrlsService")
    ], RowContainerEventsFeature2.prototype, "ctrlsService", void 0);
    __decorate$1X([
      Autowired("navigationService")
    ], RowContainerEventsFeature2.prototype, "navigationService", void 0);
    __decorate$1X([
      Autowired("focusService")
    ], RowContainerEventsFeature2.prototype, "focusService", void 0);
    __decorate$1X([
      Autowired("undoRedoService")
    ], RowContainerEventsFeature2.prototype, "undoRedoService", void 0);
    __decorate$1X([
      Autowired("columnModel")
    ], RowContainerEventsFeature2.prototype, "columnModel", void 0);
    __decorate$1X([
      Autowired("paginationProxy")
    ], RowContainerEventsFeature2.prototype, "paginationProxy", void 0);
    __decorate$1X([
      Autowired("pinnedRowModel")
    ], RowContainerEventsFeature2.prototype, "pinnedRowModel", void 0);
    __decorate$1X([
      Optional("rangeService")
    ], RowContainerEventsFeature2.prototype, "rangeService", void 0);
    __decorate$1X([
      Optional("clipboardService")
    ], RowContainerEventsFeature2.prototype, "clipboardService", void 0);
    __decorate$1X([
      PostConstruct
    ], RowContainerEventsFeature2.prototype, "postConstruct", null);
    return RowContainerEventsFeature2;
  }(BeanStub)
);
var __extends$1$ = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1W = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __read$n = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$j = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var ViewportSizeFeature = (
  /** @class */
  function(_super) {
    __extends$1$(ViewportSizeFeature2, _super);
    function ViewportSizeFeature2(centerContainerCtrl) {
      var _this = _super.call(this) || this;
      _this.centerContainerCtrl = centerContainerCtrl;
      return _this;
    }
    ViewportSizeFeature2.prototype.postConstruct = function() {
      var _this = this;
      this.ctrlsService.whenReady(function() {
        _this.gridBodyCtrl = _this.ctrlsService.getGridBodyCtrl();
        _this.listenForResize();
      });
      this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, this.onScrollbarWidthChanged.bind(this));
      this.addManagedPropertyListeners(["alwaysShowHorizontalScroll", "alwaysShowVerticalScroll"], function() {
        _this.checkViewportAndScrolls();
      });
    };
    ViewportSizeFeature2.prototype.listenForResize = function() {
      var _this = this;
      var listener = function() {
        return _this.onCenterViewportResized();
      };
      this.centerContainerCtrl.registerViewportResizeListener(listener);
      this.gridBodyCtrl.registerBodyViewportResizeListener(listener);
    };
    ViewportSizeFeature2.prototype.onScrollbarWidthChanged = function() {
      this.checkViewportAndScrolls();
    };
    ViewportSizeFeature2.prototype.onCenterViewportResized = function() {
      if (this.centerContainerCtrl.isViewportInTheDOMTree()) {
        this.keepPinnedColumnsNarrowerThanViewport();
        this.checkViewportAndScrolls();
        var newWidth = this.centerContainerCtrl.getCenterWidth();
        if (newWidth !== this.centerWidth) {
          this.centerWidth = newWidth;
          this.columnModel.refreshFlexedColumns({ viewportWidth: this.centerWidth, updateBodyWidths: true, fireResizedEvent: true });
        }
      } else {
        this.bodyHeight = 0;
      }
    };
    ViewportSizeFeature2.prototype.keepPinnedColumnsNarrowerThanViewport = function() {
      var eBodyViewport = this.gridBodyCtrl.getBodyViewportElement();
      var bodyWidth = getInnerWidth(eBodyViewport);
      if (bodyWidth <= 50) {
        return;
      }
      var columnsToRemove = this.getPinnedColumnsOverflowingViewport(bodyWidth - 50);
      var processUnpinnedColumns = this.gridOptionsService.getCallback("processUnpinnedColumns");
      if (!columnsToRemove.length) {
        return;
      }
      if (processUnpinnedColumns) {
        var params = {
          columns: columnsToRemove,
          viewportWidth: bodyWidth
        };
        columnsToRemove = processUnpinnedColumns(params);
      }
      this.columnModel.setColumnsPinned(columnsToRemove, null, "viewportSizeFeature");
    };
    ViewportSizeFeature2.prototype.getPinnedColumnsOverflowingViewport = function(viewportWidth) {
      var pinnedRightWidth = this.pinnedWidthService.getPinnedRightWidth();
      var pinnedLeftWidth = this.pinnedWidthService.getPinnedLeftWidth();
      var totalPinnedWidth = pinnedRightWidth + pinnedLeftWidth;
      if (totalPinnedWidth < viewportWidth) {
        return [];
      }
      var pinnedLeftColumns = __spreadArray$j([], __read$n(this.columnModel.getDisplayedLeftColumns()), false);
      var pinnedRightColumns = __spreadArray$j([], __read$n(this.columnModel.getDisplayedRightColumns()), false);
      var indexRight = 0;
      var indexLeft = 0;
      var totalWidthRemoved = 0;
      var columnsToRemove = [];
      var spaceNecessary = totalPinnedWidth - totalWidthRemoved - viewportWidth;
      while ((indexLeft < pinnedLeftColumns.length || indexRight < pinnedRightColumns.length) && spaceNecessary > 0) {
        if (indexRight < pinnedRightColumns.length) {
          var currentColumn = pinnedRightColumns[indexRight++];
          spaceNecessary -= currentColumn.getActualWidth();
          columnsToRemove.push(currentColumn);
        }
        if (indexLeft < pinnedLeftColumns.length && spaceNecessary > 0) {
          var currentColumn = pinnedLeftColumns[indexLeft++];
          spaceNecessary -= currentColumn.getActualWidth();
          columnsToRemove.push(currentColumn);
        }
      }
      return columnsToRemove;
    };
    ViewportSizeFeature2.prototype.checkViewportAndScrolls = function() {
      this.updateScrollVisibleService();
      this.checkBodyHeight();
      this.onHorizontalViewportChanged();
      this.gridBodyCtrl.getScrollFeature().checkScrollLeft();
    };
    ViewportSizeFeature2.prototype.getBodyHeight = function() {
      return this.bodyHeight;
    };
    ViewportSizeFeature2.prototype.checkBodyHeight = function() {
      var eBodyViewport = this.gridBodyCtrl.getBodyViewportElement();
      var bodyHeight = getInnerHeight(eBodyViewport);
      if (this.bodyHeight !== bodyHeight) {
        this.bodyHeight = bodyHeight;
        var event_1 = {
          type: Events.EVENT_BODY_HEIGHT_CHANGED
        };
        this.eventService.dispatchEvent(event_1);
      }
    };
    ViewportSizeFeature2.prototype.updateScrollVisibleService = function() {
      this.updateScrollVisibleServiceImpl();
      setTimeout(this.updateScrollVisibleServiceImpl.bind(this), 500);
    };
    ViewportSizeFeature2.prototype.updateScrollVisibleServiceImpl = function() {
      var params = {
        horizontalScrollShowing: this.isHorizontalScrollShowing(),
        verticalScrollShowing: this.gridBodyCtrl.isVerticalScrollShowing()
      };
      this.scrollVisibleService.setScrollsVisible(params);
    };
    ViewportSizeFeature2.prototype.isHorizontalScrollShowing = function() {
      return this.centerContainerCtrl.isHorizontalScrollShowing();
    };
    ViewportSizeFeature2.prototype.onHorizontalViewportChanged = function() {
      var scrollWidth = this.centerContainerCtrl.getCenterWidth();
      var scrollPosition = this.centerContainerCtrl.getViewportScrollLeft();
      this.columnModel.setViewportPosition(scrollWidth, scrollPosition);
    };
    __decorate$1W([
      Autowired("ctrlsService")
    ], ViewportSizeFeature2.prototype, "ctrlsService", void 0);
    __decorate$1W([
      Autowired("pinnedWidthService")
    ], ViewportSizeFeature2.prototype, "pinnedWidthService", void 0);
    __decorate$1W([
      Autowired("columnModel")
    ], ViewportSizeFeature2.prototype, "columnModel", void 0);
    __decorate$1W([
      Autowired("scrollVisibleService")
    ], ViewportSizeFeature2.prototype, "scrollVisibleService", void 0);
    __decorate$1W([
      PostConstruct
    ], ViewportSizeFeature2.prototype, "postConstruct", null);
    return ViewportSizeFeature2;
  }(BeanStub)
);
var __extends$1_ = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1V = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SetPinnedLeftWidthFeature = (
  /** @class */
  function(_super) {
    __extends$1_(SetPinnedLeftWidthFeature2, _super);
    function SetPinnedLeftWidthFeature2(element) {
      var _this = _super.call(this) || this;
      _this.element = element;
      return _this;
    }
    SetPinnedLeftWidthFeature2.prototype.postConstruct = function() {
      this.addManagedListener(this.eventService, Events.EVENT_LEFT_PINNED_WIDTH_CHANGED, this.onPinnedLeftWidthChanged.bind(this));
    };
    SetPinnedLeftWidthFeature2.prototype.onPinnedLeftWidthChanged = function() {
      var leftWidth = this.pinnedWidthService.getPinnedLeftWidth();
      var displayed = leftWidth > 0;
      setDisplayed(this.element, displayed);
      setFixedWidth(this.element, leftWidth);
    };
    SetPinnedLeftWidthFeature2.prototype.getWidth = function() {
      return this.pinnedWidthService.getPinnedLeftWidth();
    };
    __decorate$1V([
      Autowired("pinnedWidthService")
    ], SetPinnedLeftWidthFeature2.prototype, "pinnedWidthService", void 0);
    __decorate$1V([
      PostConstruct
    ], SetPinnedLeftWidthFeature2.prototype, "postConstruct", null);
    return SetPinnedLeftWidthFeature2;
  }(BeanStub)
);
var __extends$1Z = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1U = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SetPinnedRightWidthFeature = (
  /** @class */
  function(_super) {
    __extends$1Z(SetPinnedRightWidthFeature2, _super);
    function SetPinnedRightWidthFeature2(element) {
      var _this = _super.call(this) || this;
      _this.element = element;
      return _this;
    }
    SetPinnedRightWidthFeature2.prototype.postConstruct = function() {
      this.addManagedListener(this.eventService, Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED, this.onPinnedRightWidthChanged.bind(this));
    };
    SetPinnedRightWidthFeature2.prototype.onPinnedRightWidthChanged = function() {
      var rightWidth = this.pinnedWidthService.getPinnedRightWidth();
      var displayed = rightWidth > 0;
      setDisplayed(this.element, displayed);
      setFixedWidth(this.element, rightWidth);
    };
    SetPinnedRightWidthFeature2.prototype.getWidth = function() {
      return this.pinnedWidthService.getPinnedRightWidth();
    };
    __decorate$1U([
      Autowired("pinnedWidthService")
    ], SetPinnedRightWidthFeature2.prototype, "pinnedWidthService", void 0);
    __decorate$1U([
      PostConstruct
    ], SetPinnedRightWidthFeature2.prototype, "postConstruct", null);
    return SetPinnedRightWidthFeature2;
  }(BeanStub)
);
var __extends$1Y = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1T = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SetHeightFeature = (
  /** @class */
  function(_super) {
    __extends$1Y(SetHeightFeature2, _super);
    function SetHeightFeature2(eContainer, eViewport) {
      var _this = _super.call(this) || this;
      _this.eContainer = eContainer;
      _this.eViewport = eViewport;
      return _this;
    }
    SetHeightFeature2.prototype.postConstruct = function() {
      this.addManagedListener(this.eventService, Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED, this.onHeightChanged.bind(this));
    };
    SetHeightFeature2.prototype.onHeightChanged = function() {
      var height = this.maxDivHeightScaler.getUiContainerHeight();
      var heightString = height != null ? "".concat(height, "px") : "";
      this.eContainer.style.height = heightString;
      if (this.eViewport) {
        this.eViewport.style.height = heightString;
      }
    };
    __decorate$1T([
      Autowired("rowContainerHeightService")
    ], SetHeightFeature2.prototype, "maxDivHeightScaler", void 0);
    __decorate$1T([
      PostConstruct
    ], SetHeightFeature2.prototype, "postConstruct", null);
    return SetHeightFeature2;
  }(BeanStub)
);
var __extends$1X = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1S = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DragListenerFeature = (
  /** @class */
  function(_super) {
    __extends$1X(DragListenerFeature2, _super);
    function DragListenerFeature2(eContainer) {
      var _this = _super.call(this) || this;
      _this.eContainer = eContainer;
      return _this;
    }
    DragListenerFeature2.prototype.postConstruct = function() {
      var _this = this;
      if (missing(this.rangeService)) {
        return;
      }
      this.params = {
        eElement: this.eContainer,
        onDragStart: this.rangeService.onDragStart.bind(this.rangeService),
        onDragStop: this.rangeService.onDragStop.bind(this.rangeService),
        onDragging: this.rangeService.onDragging.bind(this.rangeService)
      };
      this.addManagedPropertyListener("enableRangeSelection", function(props) {
        var isEnabled = props.currentValue;
        if (isEnabled) {
          _this.enableFeature();
          return;
        }
        _this.disableFeature();
      });
      this.addDestroyFunc(function() {
        return _this.disableFeature();
      });
      var isRangeSelection = this.gridOptionsService.get("enableRangeSelection");
      if (isRangeSelection) {
        this.enableFeature();
      }
    };
    DragListenerFeature2.prototype.enableFeature = function() {
      this.dragService.addDragSource(this.params);
    };
    DragListenerFeature2.prototype.disableFeature = function() {
      this.dragService.removeDragSource(this.params);
    };
    __decorate$1S([
      Optional("rangeService")
    ], DragListenerFeature2.prototype, "rangeService", void 0);
    __decorate$1S([
      Autowired("dragService")
    ], DragListenerFeature2.prototype, "dragService", void 0);
    __decorate$1S([
      PostConstruct
    ], DragListenerFeature2.prototype, "postConstruct", null);
    return DragListenerFeature2;
  }(BeanStub)
);
var __extends$1W = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1R = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CenterWidthFeature = (
  /** @class */
  function(_super) {
    __extends$1W(CenterWidthFeature2, _super);
    function CenterWidthFeature2(callback, addSpacer) {
      if (addSpacer === void 0) {
        addSpacer = false;
      }
      var _this = _super.call(this) || this;
      _this.callback = callback;
      _this.addSpacer = addSpacer;
      return _this;
    }
    CenterWidthFeature2.prototype.postConstruct = function() {
      var listener = this.setWidth.bind(this);
      this.addManagedPropertyListener("domLayout", listener);
      this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);
      this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, listener);
      this.addManagedListener(this.eventService, Events.EVENT_LEFT_PINNED_WIDTH_CHANGED, listener);
      if (this.addSpacer) {
        this.addManagedListener(this.eventService, Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED, listener);
        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, listener);
        this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, listener);
      }
      this.setWidth();
    };
    CenterWidthFeature2.prototype.setWidth = function() {
      var columnModel = this.columnModel;
      var printLayout = this.gridOptionsService.isDomLayout("print");
      var centerWidth = columnModel.getBodyContainerWidth();
      var leftWidth = columnModel.getDisplayedColumnsLeftWidth();
      var rightWidth = columnModel.getDisplayedColumnsRightWidth();
      var totalWidth;
      if (printLayout) {
        totalWidth = centerWidth + leftWidth + rightWidth;
      } else {
        totalWidth = centerWidth;
        if (this.addSpacer) {
          var relevantWidth = this.gridOptionsService.get("enableRtl") ? leftWidth : rightWidth;
          if (relevantWidth === 0 && this.scrollVisibleService.isVerticalScrollShowing()) {
            totalWidth += this.gridOptionsService.getScrollbarWidth();
          }
        }
      }
      this.callback(totalWidth);
    };
    __decorate$1R([
      Autowired("columnModel")
    ], CenterWidthFeature2.prototype, "columnModel", void 0);
    __decorate$1R([
      Autowired("scrollVisibleService")
    ], CenterWidthFeature2.prototype, "scrollVisibleService", void 0);
    __decorate$1R([
      PostConstruct
    ], CenterWidthFeature2.prototype, "postConstruct", null);
    return CenterWidthFeature2;
  }(BeanStub)
);
var __extends$1V = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1Q = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __read$m = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$i = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var RowContainerName;
(function(RowContainerName2) {
  RowContainerName2["LEFT"] = "left";
  RowContainerName2["RIGHT"] = "right";
  RowContainerName2["CENTER"] = "center";
  RowContainerName2["FULL_WIDTH"] = "fullWidth";
  RowContainerName2["TOP_LEFT"] = "topLeft";
  RowContainerName2["TOP_RIGHT"] = "topRight";
  RowContainerName2["TOP_CENTER"] = "topCenter";
  RowContainerName2["TOP_FULL_WIDTH"] = "topFullWidth";
  RowContainerName2["STICKY_TOP_LEFT"] = "stickyTopLeft";
  RowContainerName2["STICKY_TOP_RIGHT"] = "stickyTopRight";
  RowContainerName2["STICKY_TOP_CENTER"] = "stickyTopCenter";
  RowContainerName2["STICKY_TOP_FULL_WIDTH"] = "stickyTopFullWidth";
  RowContainerName2["BOTTOM_LEFT"] = "bottomLeft";
  RowContainerName2["BOTTOM_RIGHT"] = "bottomRight";
  RowContainerName2["BOTTOM_CENTER"] = "bottomCenter";
  RowContainerName2["BOTTOM_FULL_WIDTH"] = "bottomFullWidth";
})(RowContainerName || (RowContainerName = {}));
var RowContainerType;
(function(RowContainerType2) {
  RowContainerType2["LEFT"] = "left";
  RowContainerType2["RIGHT"] = "right";
  RowContainerType2["CENTER"] = "center";
  RowContainerType2["FULL_WIDTH"] = "fullWidth";
})(RowContainerType || (RowContainerType = {}));
function getRowContainerTypeForName(name) {
  switch (name) {
    case RowContainerName.CENTER:
    case RowContainerName.TOP_CENTER:
    case RowContainerName.STICKY_TOP_CENTER:
    case RowContainerName.BOTTOM_CENTER:
      return RowContainerType.CENTER;
    case RowContainerName.LEFT:
    case RowContainerName.TOP_LEFT:
    case RowContainerName.STICKY_TOP_LEFT:
    case RowContainerName.BOTTOM_LEFT:
      return RowContainerType.LEFT;
    case RowContainerName.RIGHT:
    case RowContainerName.TOP_RIGHT:
    case RowContainerName.STICKY_TOP_RIGHT:
    case RowContainerName.BOTTOM_RIGHT:
      return RowContainerType.RIGHT;
    case RowContainerName.FULL_WIDTH:
    case RowContainerName.TOP_FULL_WIDTH:
    case RowContainerName.STICKY_TOP_FULL_WIDTH:
    case RowContainerName.BOTTOM_FULL_WIDTH:
      return RowContainerType.FULL_WIDTH;
    default:
      throw Error("Invalid Row Container Type");
  }
}
var ContainerCssClasses = convertToMap([
  [RowContainerName.CENTER, "ag-center-cols-container"],
  [RowContainerName.LEFT, "ag-pinned-left-cols-container"],
  [RowContainerName.RIGHT, "ag-pinned-right-cols-container"],
  [RowContainerName.FULL_WIDTH, "ag-full-width-container"],
  [RowContainerName.TOP_CENTER, "ag-floating-top-container"],
  [RowContainerName.TOP_LEFT, "ag-pinned-left-floating-top"],
  [RowContainerName.TOP_RIGHT, "ag-pinned-right-floating-top"],
  [RowContainerName.TOP_FULL_WIDTH, "ag-floating-top-full-width-container"],
  [RowContainerName.STICKY_TOP_CENTER, "ag-sticky-top-container"],
  [RowContainerName.STICKY_TOP_LEFT, "ag-pinned-left-sticky-top"],
  [RowContainerName.STICKY_TOP_RIGHT, "ag-pinned-right-sticky-top"],
  [RowContainerName.STICKY_TOP_FULL_WIDTH, "ag-sticky-top-full-width-container"],
  [RowContainerName.BOTTOM_CENTER, "ag-floating-bottom-container"],
  [RowContainerName.BOTTOM_LEFT, "ag-pinned-left-floating-bottom"],
  [RowContainerName.BOTTOM_RIGHT, "ag-pinned-right-floating-bottom"],
  [RowContainerName.BOTTOM_FULL_WIDTH, "ag-floating-bottom-full-width-container"]
]);
var ViewportCssClasses = convertToMap([
  [RowContainerName.CENTER, "ag-center-cols-viewport"],
  [RowContainerName.TOP_CENTER, "ag-floating-top-viewport"],
  [RowContainerName.STICKY_TOP_CENTER, "ag-sticky-top-viewport"],
  [RowContainerName.BOTTOM_CENTER, "ag-floating-bottom-viewport"]
]);
var RowContainerCtrl = (
  /** @class */
  function(_super) {
    __extends$1V(RowContainerCtrl2, _super);
    function RowContainerCtrl2(name) {
      var _this = _super.call(this) || this;
      _this.visible = true;
      _this.EMPTY_CTRLS = [];
      _this.name = name;
      _this.isFullWithContainer = _this.name === RowContainerName.TOP_FULL_WIDTH || _this.name === RowContainerName.STICKY_TOP_FULL_WIDTH || _this.name === RowContainerName.BOTTOM_FULL_WIDTH || _this.name === RowContainerName.FULL_WIDTH;
      return _this;
    }
    RowContainerCtrl2.getRowContainerCssClasses = function(name) {
      var containerClass = ContainerCssClasses.get(name);
      var viewportClass = ViewportCssClasses.get(name);
      return { container: containerClass, viewport: viewportClass };
    };
    RowContainerCtrl2.getPinned = function(name) {
      switch (name) {
        case RowContainerName.BOTTOM_LEFT:
        case RowContainerName.TOP_LEFT:
        case RowContainerName.STICKY_TOP_LEFT:
        case RowContainerName.LEFT:
          return "left";
        case RowContainerName.BOTTOM_RIGHT:
        case RowContainerName.TOP_RIGHT:
        case RowContainerName.STICKY_TOP_RIGHT:
        case RowContainerName.RIGHT:
          return "right";
        default:
          return null;
      }
    };
    RowContainerCtrl2.prototype.postConstruct = function() {
      var _this = this;
      this.enableRtl = this.gridOptionsService.get("enableRtl");
      this.forContainers([RowContainerName.CENTER], function() {
        return _this.viewportSizeFeature = _this.createManagedBean(new ViewportSizeFeature(_this));
      });
    };
    RowContainerCtrl2.prototype.registerWithCtrlsService = function() {
      switch (this.name) {
        case RowContainerName.CENTER:
          this.ctrlsService.registerCenterRowContainerCtrl(this);
          break;
        case RowContainerName.LEFT:
          this.ctrlsService.registerLeftRowContainerCtrl(this);
          break;
        case RowContainerName.RIGHT:
          this.ctrlsService.registerRightRowContainerCtrl(this);
          break;
        case RowContainerName.TOP_CENTER:
          this.ctrlsService.registerTopCenterRowContainerCtrl(this);
          break;
        case RowContainerName.TOP_LEFT:
          this.ctrlsService.registerTopLeftRowContainerCon(this);
          break;
        case RowContainerName.TOP_RIGHT:
          this.ctrlsService.registerTopRightRowContainerCtrl(this);
          break;
        case RowContainerName.STICKY_TOP_CENTER:
          this.ctrlsService.registerStickyTopCenterRowContainerCtrl(this);
          break;
        case RowContainerName.STICKY_TOP_LEFT:
          this.ctrlsService.registerStickyTopLeftRowContainerCon(this);
          break;
        case RowContainerName.STICKY_TOP_RIGHT:
          this.ctrlsService.registerStickyTopRightRowContainerCtrl(this);
          break;
        case RowContainerName.BOTTOM_CENTER:
          this.ctrlsService.registerBottomCenterRowContainerCtrl(this);
          break;
        case RowContainerName.BOTTOM_LEFT:
          this.ctrlsService.registerBottomLeftRowContainerCtrl(this);
          break;
        case RowContainerName.BOTTOM_RIGHT:
          this.ctrlsService.registerBottomRightRowContainerCtrl(this);
          break;
      }
    };
    RowContainerCtrl2.prototype.forContainers = function(names, callback) {
      if (names.indexOf(this.name) >= 0) {
        callback();
      }
    };
    RowContainerCtrl2.prototype.getContainerElement = function() {
      return this.eContainer;
    };
    RowContainerCtrl2.prototype.getViewportSizeFeature = function() {
      return this.viewportSizeFeature;
    };
    RowContainerCtrl2.prototype.setComp = function(view, eContainer, eViewport) {
      var _this = this;
      this.comp = view;
      this.eContainer = eContainer;
      this.eViewport = eViewport;
      this.createManagedBean(new RowContainerEventsFeature(this.eContainer));
      this.addPreventScrollWhileDragging();
      this.listenOnDomOrder();
      this.stopHScrollOnPinnedRows();
      var allTopNoFW = [RowContainerName.TOP_CENTER, RowContainerName.TOP_LEFT, RowContainerName.TOP_RIGHT];
      var allStickyTopNoFW = [RowContainerName.STICKY_TOP_CENTER, RowContainerName.STICKY_TOP_LEFT, RowContainerName.STICKY_TOP_RIGHT];
      var allBottomNoFW = [RowContainerName.BOTTOM_CENTER, RowContainerName.BOTTOM_LEFT, RowContainerName.BOTTOM_RIGHT];
      var allMiddleNoFW = [RowContainerName.CENTER, RowContainerName.LEFT, RowContainerName.RIGHT];
      var allNoFW = __spreadArray$i(__spreadArray$i(__spreadArray$i(__spreadArray$i([], __read$m(allTopNoFW), false), __read$m(allBottomNoFW), false), __read$m(allMiddleNoFW), false), __read$m(allStickyTopNoFW), false);
      var allMiddle = [RowContainerName.CENTER, RowContainerName.LEFT, RowContainerName.RIGHT, RowContainerName.FULL_WIDTH];
      var allCenter = [RowContainerName.CENTER, RowContainerName.TOP_CENTER, RowContainerName.STICKY_TOP_CENTER, RowContainerName.BOTTOM_CENTER];
      var allLeft = [RowContainerName.LEFT, RowContainerName.BOTTOM_LEFT, RowContainerName.TOP_LEFT, RowContainerName.STICKY_TOP_LEFT];
      var allRight = [RowContainerName.RIGHT, RowContainerName.BOTTOM_RIGHT, RowContainerName.TOP_RIGHT, RowContainerName.STICKY_TOP_RIGHT];
      this.forContainers(allLeft, function() {
        _this.pinnedWidthFeature = _this.createManagedBean(new SetPinnedLeftWidthFeature(_this.eContainer));
        _this.addManagedListener(_this.eventService, Events.EVENT_LEFT_PINNED_WIDTH_CHANGED, function() {
          return _this.onPinnedWidthChanged();
        });
      });
      this.forContainers(allRight, function() {
        _this.pinnedWidthFeature = _this.createManagedBean(new SetPinnedRightWidthFeature(_this.eContainer));
        _this.addManagedListener(_this.eventService, Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED, function() {
          return _this.onPinnedWidthChanged();
        });
      });
      this.forContainers(allMiddle, function() {
        return _this.createManagedBean(new SetHeightFeature(_this.eContainer, _this.name === RowContainerName.CENTER ? eViewport : void 0));
      });
      this.forContainers(allNoFW, function() {
        return _this.createManagedBean(new DragListenerFeature(_this.eContainer));
      });
      this.forContainers(allCenter, function() {
        return _this.createManagedBean(new CenterWidthFeature(function(width) {
          return _this.comp.setContainerWidth("".concat(width, "px"));
        }));
      });
      this.addListeners();
      this.registerWithCtrlsService();
    };
    RowContainerCtrl2.prototype.addListeners = function() {
      var _this = this;
      this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, function() {
        return _this.onDisplayedColumnsChanged();
      });
      this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, function() {
        return _this.onDisplayedColumnsWidthChanged();
      });
      this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_ROWS_CHANGED, function(params) {
        return _this.onDisplayedRowsChanged(params.afterScroll);
      });
      this.onDisplayedColumnsChanged();
      this.onDisplayedColumnsWidthChanged();
      this.onDisplayedRowsChanged();
    };
    RowContainerCtrl2.prototype.listenOnDomOrder = function() {
      var _this = this;
      var allStickyContainers = [RowContainerName.STICKY_TOP_CENTER, RowContainerName.STICKY_TOP_LEFT, RowContainerName.STICKY_TOP_RIGHT, RowContainerName.STICKY_TOP_FULL_WIDTH];
      var isStickContainer = allStickyContainers.indexOf(this.name) >= 0;
      if (isStickContainer) {
        this.comp.setDomOrder(true);
        return;
      }
      var listener = function() {
        var isEnsureDomOrder = _this.gridOptionsService.get("ensureDomOrder");
        var isPrintLayout = _this.gridOptionsService.isDomLayout("print");
        _this.comp.setDomOrder(isEnsureDomOrder || isPrintLayout);
      };
      this.addManagedPropertyListener("domLayout", listener);
      listener();
    };
    RowContainerCtrl2.prototype.stopHScrollOnPinnedRows = function() {
      var _this = this;
      this.forContainers([RowContainerName.TOP_CENTER, RowContainerName.STICKY_TOP_CENTER, RowContainerName.BOTTOM_CENTER], function() {
        var resetScrollLeft = function() {
          return _this.eViewport.scrollLeft = 0;
        };
        _this.addManagedListener(_this.eViewport, "scroll", resetScrollLeft);
      });
    };
    RowContainerCtrl2.prototype.onDisplayedColumnsChanged = function() {
      var _this = this;
      this.forContainers([RowContainerName.CENTER], function() {
        return _this.onHorizontalViewportChanged();
      });
    };
    RowContainerCtrl2.prototype.onDisplayedColumnsWidthChanged = function() {
      var _this = this;
      this.forContainers([RowContainerName.CENTER], function() {
        return _this.onHorizontalViewportChanged();
      });
    };
    RowContainerCtrl2.prototype.addPreventScrollWhileDragging = function() {
      var _this = this;
      var preventScroll = function(e) {
        if (_this.dragService.isDragging()) {
          if (e.cancelable) {
            e.preventDefault();
          }
        }
      };
      this.eContainer.addEventListener("touchmove", preventScroll, { passive: false });
      this.addDestroyFunc(function() {
        return _this.eContainer.removeEventListener("touchmove", preventScroll);
      });
    };
    RowContainerCtrl2.prototype.onHorizontalViewportChanged = function(afterScroll) {
      if (afterScroll === void 0) {
        afterScroll = false;
      }
      var scrollWidth = this.getCenterWidth();
      var scrollPosition = this.getCenterViewportScrollLeft();
      this.columnModel.setViewportPosition(scrollWidth, scrollPosition, afterScroll);
    };
    RowContainerCtrl2.prototype.getCenterWidth = function() {
      return getInnerWidth(this.eViewport);
    };
    RowContainerCtrl2.prototype.getCenterViewportScrollLeft = function() {
      return getScrollLeft(this.eViewport, this.enableRtl);
    };
    RowContainerCtrl2.prototype.registerViewportResizeListener = function(listener) {
      var unsubscribeFromResize = this.resizeObserverService.observeResize(this.eViewport, listener);
      this.addDestroyFunc(function() {
        return unsubscribeFromResize();
      });
    };
    RowContainerCtrl2.prototype.isViewportInTheDOMTree = function() {
      return isInDOM(this.eViewport);
    };
    RowContainerCtrl2.prototype.getViewportScrollLeft = function() {
      return getScrollLeft(this.eViewport, this.enableRtl);
    };
    RowContainerCtrl2.prototype.isHorizontalScrollShowing = function() {
      var isAlwaysShowHorizontalScroll = this.gridOptionsService.get("alwaysShowHorizontalScroll");
      return isAlwaysShowHorizontalScroll || isHorizontalScrollShowing(this.eViewport);
    };
    RowContainerCtrl2.prototype.getViewportElement = function() {
      return this.eViewport;
    };
    RowContainerCtrl2.prototype.setContainerTranslateX = function(amount) {
      this.eContainer.style.transform = "translateX(".concat(amount, "px)");
    };
    RowContainerCtrl2.prototype.getHScrollPosition = function() {
      var res = {
        left: this.eViewport.scrollLeft,
        right: this.eViewport.scrollLeft + this.eViewport.offsetWidth
      };
      return res;
    };
    RowContainerCtrl2.prototype.setCenterViewportScrollLeft = function(value) {
      setScrollLeft(this.eViewport, value, this.enableRtl);
    };
    RowContainerCtrl2.prototype.isContainerVisible = function() {
      var pinned = RowContainerCtrl2.getPinned(this.name);
      return !pinned || !!this.pinnedWidthFeature && this.pinnedWidthFeature.getWidth() > 0;
    };
    RowContainerCtrl2.prototype.onPinnedWidthChanged = function() {
      var visible = this.isContainerVisible();
      if (this.visible != visible) {
        this.visible = visible;
        this.onDisplayedRowsChanged();
      }
    };
    RowContainerCtrl2.prototype.onDisplayedRowsChanged = function(afterScroll) {
      var _this = this;
      if (afterScroll === void 0) {
        afterScroll = false;
      }
      if (!this.visible) {
        this.comp.setRowCtrls({ rowCtrls: this.EMPTY_CTRLS });
        return;
      }
      var printLayout = this.gridOptionsService.isDomLayout("print");
      var embedFullWidthRows = this.gridOptionsService.get("embedFullWidthRows");
      var embedFW = embedFullWidthRows || printLayout;
      var rowsThisContainer = this.getRowCtrls().filter(function(rowCtrl) {
        var fullWidthRow = rowCtrl.isFullWidth();
        var match = _this.isFullWithContainer ? !embedFW && fullWidthRow : embedFW || !fullWidthRow;
        return match;
      });
      this.comp.setRowCtrls({ rowCtrls: rowsThisContainer, useFlushSync: afterScroll });
    };
    RowContainerCtrl2.prototype.getRowCtrls = function() {
      switch (this.name) {
        case RowContainerName.TOP_CENTER:
        case RowContainerName.TOP_LEFT:
        case RowContainerName.TOP_RIGHT:
        case RowContainerName.TOP_FULL_WIDTH:
          return this.rowRenderer.getTopRowCtrls();
        case RowContainerName.STICKY_TOP_CENTER:
        case RowContainerName.STICKY_TOP_LEFT:
        case RowContainerName.STICKY_TOP_RIGHT:
        case RowContainerName.STICKY_TOP_FULL_WIDTH:
          return this.rowRenderer.getStickyTopRowCtrls();
        case RowContainerName.BOTTOM_CENTER:
        case RowContainerName.BOTTOM_LEFT:
        case RowContainerName.BOTTOM_RIGHT:
        case RowContainerName.BOTTOM_FULL_WIDTH:
          return this.rowRenderer.getBottomRowCtrls();
        default:
          return this.rowRenderer.getCentreRowCtrls();
      }
    };
    __decorate$1Q([
      Autowired("dragService")
    ], RowContainerCtrl2.prototype, "dragService", void 0);
    __decorate$1Q([
      Autowired("ctrlsService")
    ], RowContainerCtrl2.prototype, "ctrlsService", void 0);
    __decorate$1Q([
      Autowired("columnModel")
    ], RowContainerCtrl2.prototype, "columnModel", void 0);
    __decorate$1Q([
      Autowired("resizeObserverService")
    ], RowContainerCtrl2.prototype, "resizeObserverService", void 0);
    __decorate$1Q([
      Autowired("rowRenderer")
    ], RowContainerCtrl2.prototype, "rowRenderer", void 0);
    __decorate$1Q([
      PostConstruct
    ], RowContainerCtrl2.prototype, "postConstruct", null);
    return RowContainerCtrl2;
  }(BeanStub)
);
var __extends$1U = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1P = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var GRID_BODY_TEMPLATE = (
  /* html */
  '<div class="ag-root ag-unselectable" role="treegrid">\n        <ag-header-root ref="gridHeader"></ag-header-root>\n        <div class="ag-floating-top" ref="eTop" role="presentation">\n            <ag-row-container ref="topLeftContainer" name="'.concat(RowContainerName.TOP_LEFT, '"></ag-row-container>\n            <ag-row-container ref="topCenterContainer" name="').concat(RowContainerName.TOP_CENTER, '"></ag-row-container>\n            <ag-row-container ref="topRightContainer" name="').concat(RowContainerName.TOP_RIGHT, '"></ag-row-container>\n            <ag-row-container ref="topFullWidthContainer" name="').concat(RowContainerName.TOP_FULL_WIDTH, '"></ag-row-container>\n        </div>\n        <div class="ag-body" ref="eBody" role="presentation">\n            <div class="ag-body-viewport" ref="eBodyViewport" role="presentation">\n                <ag-row-container ref="leftContainer" name="').concat(RowContainerName.LEFT, '"></ag-row-container>\n                <ag-row-container ref="centerContainer" name="').concat(RowContainerName.CENTER, '"></ag-row-container>\n                <ag-row-container ref="rightContainer" name="').concat(RowContainerName.RIGHT, '"></ag-row-container>\n                <ag-row-container ref="fullWidthContainer" name="').concat(RowContainerName.FULL_WIDTH, '"></ag-row-container>\n            </div>\n            <ag-fake-vertical-scroll></ag-fake-vertical-scroll>\n        </div>\n        <div class="ag-sticky-top" ref="eStickyTop" role="presentation">\n            <ag-row-container ref="stickyTopLeftContainer" name="').concat(RowContainerName.STICKY_TOP_LEFT, '"></ag-row-container>\n            <ag-row-container ref="stickyTopCenterContainer" name="').concat(RowContainerName.STICKY_TOP_CENTER, '"></ag-row-container>\n            <ag-row-container ref="stickyTopRightContainer" name="').concat(RowContainerName.STICKY_TOP_RIGHT, '"></ag-row-container>\n            <ag-row-container ref="stickyTopFullWidthContainer" name="').concat(RowContainerName.STICKY_TOP_FULL_WIDTH, '"></ag-row-container>\n        </div>\n        <div class="ag-floating-bottom" ref="eBottom" role="presentation">\n            <ag-row-container ref="bottomLeftContainer" name="').concat(RowContainerName.BOTTOM_LEFT, '"></ag-row-container>\n            <ag-row-container ref="bottomCenterContainer" name="').concat(RowContainerName.BOTTOM_CENTER, '"></ag-row-container>\n            <ag-row-container ref="bottomRightContainer" name="').concat(RowContainerName.BOTTOM_RIGHT, '"></ag-row-container>\n            <ag-row-container ref="bottomFullWidthContainer" name="').concat(RowContainerName.BOTTOM_FULL_WIDTH, '"></ag-row-container>\n        </div>\n        <ag-fake-horizontal-scroll></ag-fake-horizontal-scroll>\n        <ag-overlay-wrapper></ag-overlay-wrapper>\n    </div>')
);
var GridBodyComp = (
  /** @class */
  function(_super) {
    __extends$1U(GridBodyComp2, _super);
    function GridBodyComp2() {
      return _super.call(this, GRID_BODY_TEMPLATE) || this;
    }
    GridBodyComp2.prototype.init = function() {
      var _this = this;
      var setHeight = function(height, element) {
        var heightString = "".concat(height, "px");
        element.style.minHeight = heightString;
        element.style.height = heightString;
      };
      var compProxy = {
        setRowAnimationCssOnBodyViewport: function(cssClass, animate) {
          return _this.setRowAnimationCssOnBodyViewport(cssClass, animate);
        },
        setColumnCount: function(count) {
          return setAriaColCount(_this.getGui(), count);
        },
        setRowCount: function(count) {
          return setAriaRowCount(_this.getGui(), count);
        },
        setTopHeight: function(height) {
          return setHeight(height, _this.eTop);
        },
        setBottomHeight: function(height) {
          return setHeight(height, _this.eBottom);
        },
        setTopDisplay: function(display) {
          return _this.eTop.style.display = display;
        },
        setBottomDisplay: function(display) {
          return _this.eBottom.style.display = display;
        },
        setStickyTopHeight: function(height) {
          return _this.eStickyTop.style.height = height;
        },
        setStickyTopTop: function(top) {
          return _this.eStickyTop.style.top = top;
        },
        setStickyTopWidth: function(width) {
          return _this.eStickyTop.style.width = width;
        },
        setColumnMovingCss: function(cssClass, flag) {
          return _this.addOrRemoveCssClass(cssClass, flag);
        },
        updateLayoutClasses: function(cssClass, params) {
          var classLists = [
            _this.eBodyViewport.classList,
            _this.eBody.classList
          ];
          classLists.forEach(function(classList) {
            classList.toggle(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);
            classList.toggle(LayoutCssClasses.NORMAL, params.normal);
            classList.toggle(LayoutCssClasses.PRINT, params.print);
          });
          _this.addOrRemoveCssClass(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);
          _this.addOrRemoveCssClass(LayoutCssClasses.NORMAL, params.normal);
          _this.addOrRemoveCssClass(LayoutCssClasses.PRINT, params.print);
        },
        setAlwaysVerticalScrollClass: function(cssClass, on) {
          return _this.eBodyViewport.classList.toggle(CSS_CLASS_FORCE_VERTICAL_SCROLL, on);
        },
        registerBodyViewportResizeListener: function(listener) {
          var unsubscribeFromResize = _this.resizeObserverService.observeResize(_this.eBodyViewport, listener);
          _this.addDestroyFunc(function() {
            return unsubscribeFromResize();
          });
        },
        setPinnedTopBottomOverflowY: function(overflow) {
          return _this.eTop.style.overflowY = _this.eBottom.style.overflowY = overflow;
        },
        setCellSelectableCss: function(cssClass, selectable) {
          [_this.eTop, _this.eBodyViewport, _this.eBottom].forEach(function(ct) {
            return ct.classList.toggle(cssClass, selectable);
          });
        },
        setBodyViewportWidth: function(width) {
          return _this.eBodyViewport.style.width = width;
        }
      };
      this.ctrl = this.createManagedBean(new GridBodyCtrl());
      this.ctrl.setComp(compProxy, this.getGui(), this.eBodyViewport, this.eTop, this.eBottom, this.eStickyTop);
      if (this.rangeService && this.gridOptionsService.get("enableRangeSelection") || this.gridOptionsService.get("rowSelection") === "multiple") {
        setAriaMultiSelectable(this.getGui(), true);
      }
    };
    GridBodyComp2.prototype.setRowAnimationCssOnBodyViewport = function(cssClass, animateRows) {
      var bodyViewportClassList = this.eBodyViewport.classList;
      bodyViewportClassList.toggle(RowAnimationCssClasses.ANIMATION_ON, animateRows);
      bodyViewportClassList.toggle(RowAnimationCssClasses.ANIMATION_OFF, !animateRows);
    };
    GridBodyComp2.prototype.getFloatingTopBottom = function() {
      return [this.eTop, this.eBottom];
    };
    __decorate$1P([
      Autowired("resizeObserverService")
    ], GridBodyComp2.prototype, "resizeObserverService", void 0);
    __decorate$1P([
      Optional("rangeService")
    ], GridBodyComp2.prototype, "rangeService", void 0);
    __decorate$1P([
      RefSelector("eBodyViewport")
    ], GridBodyComp2.prototype, "eBodyViewport", void 0);
    __decorate$1P([
      RefSelector("eStickyTop")
    ], GridBodyComp2.prototype, "eStickyTop", void 0);
    __decorate$1P([
      RefSelector("eTop")
    ], GridBodyComp2.prototype, "eTop", void 0);
    __decorate$1P([
      RefSelector("eBottom")
    ], GridBodyComp2.prototype, "eBottom", void 0);
    __decorate$1P([
      RefSelector("gridHeader")
    ], GridBodyComp2.prototype, "headerRootComp", void 0);
    __decorate$1P([
      RefSelector("eBody")
    ], GridBodyComp2.prototype, "eBody", void 0);
    __decorate$1P([
      PostConstruct
    ], GridBodyComp2.prototype, "init", null);
    return GridBodyComp2;
  }(Component2)
);
var __extends$1T = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1O = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ScrollVisibleService = (
  /** @class */
  function(_super) {
    __extends$1T(ScrollVisibleService2, _super);
    function ScrollVisibleService2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ScrollVisibleService2.prototype.postConstruct = function() {
      this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));
    };
    ScrollVisibleService2.prototype.onDisplayedColumnsChanged = function() {
      this.update();
    };
    ScrollVisibleService2.prototype.onDisplayedColumnsWidthChanged = function() {
      this.update();
    };
    ScrollVisibleService2.prototype.update = function() {
      this.updateImpl();
      setTimeout(this.updateImpl.bind(this), 500);
    };
    ScrollVisibleService2.prototype.updateImpl = function() {
      var centerRowCtrl = this.ctrlsService.getCenterRowContainerCtrl();
      if (!centerRowCtrl) {
        return;
      }
      var params = {
        horizontalScrollShowing: centerRowCtrl.isHorizontalScrollShowing(),
        verticalScrollShowing: this.isVerticalScrollShowing()
      };
      this.setScrollsVisible(params);
    };
    ScrollVisibleService2.prototype.setScrollsVisible = function(params) {
      var atLeastOneDifferent = this.horizontalScrollShowing !== params.horizontalScrollShowing || this.verticalScrollShowing !== params.verticalScrollShowing;
      if (atLeastOneDifferent) {
        this.horizontalScrollShowing = params.horizontalScrollShowing;
        this.verticalScrollShowing = params.verticalScrollShowing;
        var event_1 = {
          type: Events.EVENT_SCROLL_VISIBILITY_CHANGED
        };
        this.eventService.dispatchEvent(event_1);
      }
    };
    ScrollVisibleService2.prototype.isHorizontalScrollShowing = function() {
      return this.horizontalScrollShowing;
    };
    ScrollVisibleService2.prototype.isVerticalScrollShowing = function() {
      return this.verticalScrollShowing;
    };
    __decorate$1O([
      Autowired("ctrlsService")
    ], ScrollVisibleService2.prototype, "ctrlsService", void 0);
    __decorate$1O([
      PostConstruct
    ], ScrollVisibleService2.prototype, "postConstruct", null);
    ScrollVisibleService2 = __decorate$1O([
      Bean("scrollVisibleService")
    ], ScrollVisibleService2);
    return ScrollVisibleService2;
  }(BeanStub)
);
var __extends$1S = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1N = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var MouseEventService = (
  /** @class */
  function(_super) {
    __extends$1S(MouseEventService2, _super);
    function MouseEventService2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.gridInstanceId = MouseEventService_1.gridInstanceSequence.next();
      return _this;
    }
    MouseEventService_1 = MouseEventService2;
    MouseEventService2.prototype.stampTopLevelGridCompWithGridInstance = function(eGridDiv) {
      eGridDiv[MouseEventService_1.GRID_DOM_KEY] = this.gridInstanceId;
    };
    MouseEventService2.prototype.getRenderedCellForEvent = function(event) {
      return getCtrlForEventTarget(this.gridOptionsService, event.target, CellCtrl.DOM_DATA_KEY_CELL_CTRL);
    };
    MouseEventService2.prototype.isEventFromThisGrid = function(event) {
      var res = this.isElementInThisGrid(event.target);
      return res;
    };
    MouseEventService2.prototype.isElementInThisGrid = function(element) {
      var pointer = element;
      while (pointer) {
        var instanceId = pointer[MouseEventService_1.GRID_DOM_KEY];
        if (exists(instanceId)) {
          var eventFromThisGrid = instanceId === this.gridInstanceId;
          return eventFromThisGrid;
        }
        pointer = pointer.parentElement;
      }
      return false;
    };
    MouseEventService2.prototype.getCellPositionForEvent = function(event) {
      var cellComp = this.getRenderedCellForEvent(event);
      return cellComp ? cellComp.getCellPosition() : null;
    };
    MouseEventService2.prototype.getNormalisedPosition = function(event) {
      var gridPanelHasScrolls = this.gridOptionsService.isDomLayout("normal");
      var e = event;
      var x;
      var y;
      if (e.clientX != null || e.clientY != null) {
        x = e.clientX;
        y = e.clientY;
      } else {
        x = e.x;
        y = e.y;
      }
      if (gridPanelHasScrolls) {
        var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
        var vRange = gridBodyCon.getScrollFeature().getVScrollPosition();
        var hRange = gridBodyCon.getScrollFeature().getHScrollPosition();
        x += hRange.left;
        y += vRange.top;
      }
      return { x, y };
    };
    var MouseEventService_1;
    MouseEventService2.gridInstanceSequence = new NumberSequence();
    MouseEventService2.GRID_DOM_KEY = "__ag_grid_instance";
    __decorate$1N([
      Autowired("ctrlsService")
    ], MouseEventService2.prototype, "ctrlsService", void 0);
    MouseEventService2 = MouseEventService_1 = __decorate$1N([
      Bean("mouseEventService")
    ], MouseEventService2);
    return MouseEventService2;
  }(BeanStub)
);
var __extends$1R = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$b = function() {
  __assign$b = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$b.apply(this, arguments);
};
var __decorate$1M = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var NavigationService = (
  /** @class */
  function(_super) {
    __extends$1R(NavigationService2, _super);
    function NavigationService2() {
      var _this = _super.call(this) || this;
      _this.onPageDown = throttle(_this.onPageDown, 100);
      _this.onPageUp = throttle(_this.onPageUp, 100);
      return _this;
    }
    NavigationService2.prototype.postConstruct = function() {
      var _this = this;
      this.ctrlsService.whenReady(function(p) {
        _this.gridBodyCon = p.gridBodyCtrl;
      });
    };
    NavigationService2.prototype.handlePageScrollingKey = function(event, fromFullWidth) {
      if (fromFullWidth === void 0) {
        fromFullWidth = false;
      }
      var key = event.key;
      var alt = event.altKey;
      var ctrl = event.ctrlKey || event.metaKey;
      var rangeServiceShouldHandleShift = !!this.rangeService && event.shiftKey;
      var currentCell = this.mouseEventService.getCellPositionForEvent(event);
      var processed = false;
      switch (key) {
        case KeyCode.PAGE_HOME:
        case KeyCode.PAGE_END:
          if (!ctrl && !alt) {
            this.onHomeOrEndKey(key);
            processed = true;
          }
          break;
        case KeyCode.LEFT:
        case KeyCode.RIGHT:
        case KeyCode.UP:
        case KeyCode.DOWN:
          if (!currentCell) {
            return false;
          }
          if (ctrl && !alt && !rangeServiceShouldHandleShift) {
            this.onCtrlUpDownLeftRight(key, currentCell);
            processed = true;
          }
          break;
        case KeyCode.PAGE_DOWN:
        case KeyCode.PAGE_UP:
          if (!ctrl && !alt) {
            processed = this.handlePageUpDown(key, currentCell, fromFullWidth);
          }
          break;
      }
      if (processed) {
        event.preventDefault();
      }
      return processed;
    };
    NavigationService2.prototype.handlePageUpDown = function(key, currentCell, fromFullWidth) {
      if (fromFullWidth) {
        currentCell = this.focusService.getFocusedCell();
      }
      if (!currentCell) {
        return false;
      }
      if (key === KeyCode.PAGE_UP) {
        this.onPageUp(currentCell);
      } else {
        this.onPageDown(currentCell);
      }
      return true;
    };
    NavigationService2.prototype.navigateTo = function(navigateParams) {
      var scrollIndex = navigateParams.scrollIndex, scrollType = navigateParams.scrollType, scrollColumn = navigateParams.scrollColumn, focusIndex = navigateParams.focusIndex, focusColumn = navigateParams.focusColumn;
      if (exists(scrollColumn) && !scrollColumn.isPinned()) {
        this.gridBodyCon.getScrollFeature().ensureColumnVisible(scrollColumn);
      }
      if (exists(scrollIndex)) {
        this.gridBodyCon.getScrollFeature().ensureIndexVisible(scrollIndex, scrollType);
      }
      if (!navigateParams.isAsync) {
        this.gridBodyCon.getScrollFeature().ensureIndexVisible(focusIndex);
      }
      this.focusService.setFocusedCell({ rowIndex: focusIndex, column: focusColumn, rowPinned: null, forceBrowserFocus: true });
      if (this.rangeService) {
        var cellPosition = { rowIndex: focusIndex, rowPinned: null, column: focusColumn };
        this.rangeService.setRangeToCell(cellPosition);
      }
    };
    NavigationService2.prototype.onPageDown = function(gridCell) {
      var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
      var scrollPosition = gridBodyCon.getScrollFeature().getVScrollPosition();
      var pixelsInOnePage = this.getViewportHeight();
      var pagingPixelOffset = this.paginationProxy.getPixelOffset();
      var currentPageBottomPixel = scrollPosition.top + pixelsInOnePage;
      var currentPageBottomRow = this.paginationProxy.getRowIndexAtPixel(currentPageBottomPixel + pagingPixelOffset);
      if (this.columnModel.isAutoRowHeightActive()) {
        this.navigateToNextPageWithAutoHeight(gridCell, currentPageBottomRow);
      } else {
        this.navigateToNextPage(gridCell, currentPageBottomRow);
      }
    };
    NavigationService2.prototype.onPageUp = function(gridCell) {
      var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
      var scrollPosition = gridBodyCon.getScrollFeature().getVScrollPosition();
      var pagingPixelOffset = this.paginationProxy.getPixelOffset();
      var currentPageTopPixel = scrollPosition.top;
      var currentPageTopRow = this.paginationProxy.getRowIndexAtPixel(currentPageTopPixel + pagingPixelOffset);
      if (this.columnModel.isAutoRowHeightActive()) {
        this.navigateToNextPageWithAutoHeight(gridCell, currentPageTopRow, true);
      } else {
        this.navigateToNextPage(gridCell, currentPageTopRow, true);
      }
    };
    NavigationService2.prototype.navigateToNextPage = function(gridCell, scrollIndex, up) {
      if (up === void 0) {
        up = false;
      }
      var pixelsInOnePage = this.getViewportHeight();
      var firstRow = this.paginationProxy.getPageFirstRow();
      var lastRow = this.paginationProxy.getPageLastRow();
      var pagingPixelOffset = this.paginationProxy.getPixelOffset();
      var currentRowNode = this.paginationProxy.getRow(gridCell.rowIndex);
      var rowPixelDiff = up ? (currentRowNode === null || currentRowNode === void 0 ? void 0 : currentRowNode.rowHeight) - pixelsInOnePage - pagingPixelOffset : pixelsInOnePage - pagingPixelOffset;
      var nextCellPixel = (currentRowNode === null || currentRowNode === void 0 ? void 0 : currentRowNode.rowTop) + rowPixelDiff;
      var focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);
      if (focusIndex === gridCell.rowIndex) {
        var diff = up ? -1 : 1;
        scrollIndex = focusIndex = gridCell.rowIndex + diff;
      }
      var scrollType;
      if (up) {
        scrollType = "bottom";
        if (focusIndex < firstRow) {
          focusIndex = firstRow;
        }
        if (scrollIndex < firstRow) {
          scrollIndex = firstRow;
        }
      } else {
        scrollType = "top";
        if (focusIndex > lastRow) {
          focusIndex = lastRow;
        }
        if (scrollIndex > lastRow) {
          scrollIndex = lastRow;
        }
      }
      if (this.isRowTallerThanView(focusIndex)) {
        scrollIndex = focusIndex;
        scrollType = "top";
      }
      this.navigateTo({
        scrollIndex,
        scrollType,
        scrollColumn: null,
        focusIndex,
        focusColumn: gridCell.column
      });
    };
    NavigationService2.prototype.navigateToNextPageWithAutoHeight = function(gridCell, scrollIndex, up) {
      var _this = this;
      if (up === void 0) {
        up = false;
      }
      this.navigateTo({
        scrollIndex,
        scrollType: up ? "bottom" : "top",
        scrollColumn: null,
        focusIndex: scrollIndex,
        focusColumn: gridCell.column
      });
      setTimeout(function() {
        var focusIndex = _this.getNextFocusIndexForAutoHeight(gridCell, up);
        _this.navigateTo({
          scrollIndex,
          scrollType: up ? "bottom" : "top",
          scrollColumn: null,
          focusIndex,
          focusColumn: gridCell.column,
          isAsync: true
        });
      }, 50);
    };
    NavigationService2.prototype.getNextFocusIndexForAutoHeight = function(gridCell, up) {
      var _a;
      if (up === void 0) {
        up = false;
      }
      var step = up ? -1 : 1;
      var pixelsInOnePage = this.getViewportHeight();
      var lastRowIndex = this.paginationProxy.getPageLastRow();
      var pixelSum = 0;
      var currentIndex = gridCell.rowIndex;
      while (currentIndex >= 0 && currentIndex <= lastRowIndex) {
        var currentCell = this.paginationProxy.getRow(currentIndex);
        if (currentCell) {
          var currentCellHeight = (_a = currentCell.rowHeight) !== null && _a !== void 0 ? _a : 0;
          if (pixelSum + currentCellHeight > pixelsInOnePage) {
            break;
          }
          pixelSum += currentCellHeight;
        }
        currentIndex += step;
      }
      return Math.max(0, Math.min(currentIndex, lastRowIndex));
    };
    NavigationService2.prototype.getViewportHeight = function() {
      var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
      var scrollPosition = gridBodyCon.getScrollFeature().getVScrollPosition();
      var scrollbarWidth = this.gridOptionsService.getScrollbarWidth();
      var pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;
      if (this.ctrlsService.getCenterRowContainerCtrl().isHorizontalScrollShowing()) {
        pixelsInOnePage -= scrollbarWidth;
      }
      return pixelsInOnePage;
    };
    NavigationService2.prototype.isRowTallerThanView = function(rowIndex) {
      var rowNode = this.paginationProxy.getRow(rowIndex);
      if (!rowNode) {
        return false;
      }
      var rowHeight = rowNode.rowHeight;
      if (typeof rowHeight !== "number") {
        return false;
      }
      return rowHeight > this.getViewportHeight();
    };
    NavigationService2.prototype.onCtrlUpDownLeftRight = function(key, gridCell) {
      var cellToFocus = this.cellNavigationService.getNextCellToFocus(key, gridCell, true);
      var rowIndex = cellToFocus.rowIndex, column = cellToFocus.column;
      this.navigateTo({
        scrollIndex: rowIndex,
        scrollType: null,
        scrollColumn: column,
        focusIndex: rowIndex,
        focusColumn: column
      });
    };
    NavigationService2.prototype.onHomeOrEndKey = function(key) {
      var homeKey = key === KeyCode.PAGE_HOME;
      var allColumns = this.columnModel.getAllDisplayedColumns();
      var columnToSelect = homeKey ? allColumns[0] : last(allColumns);
      var scrollIndex = homeKey ? this.paginationProxy.getPageFirstRow() : this.paginationProxy.getPageLastRow();
      this.navigateTo({
        scrollIndex,
        scrollType: null,
        scrollColumn: columnToSelect,
        focusIndex: scrollIndex,
        focusColumn: columnToSelect
      });
    };
    NavigationService2.prototype.onTabKeyDown = function(previous, keyboardEvent) {
      var backwards = keyboardEvent.shiftKey;
      var movedToNextCell = this.tabToNextCellCommon(previous, backwards, keyboardEvent);
      if (movedToNextCell) {
        keyboardEvent.preventDefault();
        return;
      }
      if (backwards) {
        var _a = previous.getRowPosition(), rowIndex = _a.rowIndex, rowPinned = _a.rowPinned;
        var firstRow = rowPinned ? rowIndex === 0 : rowIndex === this.paginationProxy.getPageFirstRow();
        if (firstRow) {
          if (this.gridOptionsService.get("headerHeight") === 0) {
            this.focusService.focusNextGridCoreContainer(true, true);
          } else {
            keyboardEvent.preventDefault();
            this.focusService.focusPreviousFromFirstCell(keyboardEvent);
          }
        }
      } else {
        if (previous instanceof CellCtrl) {
          previous.focusCell(true);
        }
        if (this.focusService.focusNextGridCoreContainer(backwards)) {
          keyboardEvent.preventDefault();
        }
      }
    };
    NavigationService2.prototype.tabToNextCell = function(backwards, event) {
      var focusedCell = this.focusService.getFocusedCell();
      if (!focusedCell) {
        return false;
      }
      var cellOrRow = this.getCellByPosition(focusedCell);
      if (!cellOrRow) {
        cellOrRow = this.rowRenderer.getRowByPosition(focusedCell);
        if (!cellOrRow || !cellOrRow.isFullWidth()) {
          return false;
        }
      }
      return this.tabToNextCellCommon(cellOrRow, backwards, event);
    };
    NavigationService2.prototype.tabToNextCellCommon = function(previous, backwards, event) {
      var editing = previous.isEditing();
      if (!editing && previous instanceof CellCtrl) {
        var cell = previous;
        var row = cell.getRowCtrl();
        if (row) {
          editing = row.isEditing();
        }
      }
      var res;
      if (editing) {
        if (this.gridOptionsService.get("editType") === "fullRow") {
          res = this.moveToNextEditingRow(previous, backwards, event);
        } else {
          res = this.moveToNextEditingCell(previous, backwards, event);
        }
      } else {
        res = this.moveToNextCellNotEditing(previous, backwards);
      }
      return res || !!this.focusService.getFocusedHeader();
    };
    NavigationService2.prototype.moveToNextEditingCell = function(previousCell, backwards, event) {
      if (event === void 0) {
        event = null;
      }
      var previousPos = previousCell.getCellPosition();
      previousCell.getGui().focus();
      previousCell.stopEditing();
      var nextCell = this.findNextCellToFocusOn(previousPos, backwards, true);
      if (nextCell == null) {
        return false;
      }
      nextCell.startEditing(null, true, event);
      nextCell.focusCell(false);
      return true;
    };
    NavigationService2.prototype.moveToNextEditingRow = function(previousCell, backwards, event) {
      if (event === void 0) {
        event = null;
      }
      var previousPos = previousCell.getCellPosition();
      var nextCell = this.findNextCellToFocusOn(previousPos, backwards, true);
      if (nextCell == null) {
        return false;
      }
      var nextPos = nextCell.getCellPosition();
      var previousEditable = this.isCellEditable(previousPos);
      var nextEditable = this.isCellEditable(nextPos);
      var rowsMatch = nextPos && previousPos.rowIndex === nextPos.rowIndex && previousPos.rowPinned === nextPos.rowPinned;
      if (previousEditable) {
        previousCell.setFocusOutOnEditor();
      }
      if (!rowsMatch) {
        var pRow = previousCell.getRowCtrl();
        pRow.stopEditing();
        var nRow = nextCell.getRowCtrl();
        nRow.startRowEditing(void 0, void 0, event);
      }
      if (nextEditable) {
        nextCell.setFocusInOnEditor();
        nextCell.focusCell();
      } else {
        nextCell.focusCell(true);
      }
      return true;
    };
    NavigationService2.prototype.moveToNextCellNotEditing = function(previousCell, backwards) {
      var displayedColumns = this.columnModel.getAllDisplayedColumns();
      var cellPos;
      if (previousCell instanceof RowCtrl) {
        cellPos = __assign$b(__assign$b({}, previousCell.getRowPosition()), { column: backwards ? displayedColumns[0] : last(displayedColumns) });
      } else {
        cellPos = previousCell.getCellPosition();
      }
      var nextCell = this.findNextCellToFocusOn(cellPos, backwards, false);
      if (nextCell instanceof CellCtrl) {
        nextCell.focusCell(true);
      } else if (nextCell) {
        return this.tryToFocusFullWidthRow(nextCell.getRowPosition(), backwards);
      }
      return exists(nextCell);
    };
    NavigationService2.prototype.findNextCellToFocusOn = function(previousPosition, backwards, startEditing) {
      var nextPosition = previousPosition;
      while (true) {
        if (previousPosition !== nextPosition) {
          previousPosition = nextPosition;
        }
        if (!backwards) {
          nextPosition = this.getLastCellOfColSpan(nextPosition);
        }
        nextPosition = this.cellNavigationService.getNextTabbedCell(nextPosition, backwards);
        var userFunc = this.gridOptionsService.getCallback("tabToNextCell");
        if (exists(userFunc)) {
          var params = {
            backwards,
            editing: startEditing,
            previousCellPosition: previousPosition,
            nextCellPosition: nextPosition ? nextPosition : null
          };
          var userCell = userFunc(params);
          if (exists(userCell)) {
            if (userCell.floating) {
              warnOnce("tabToNextCellFunc return type should have attributes: rowIndex, rowPinned, column. However you had 'floating', maybe you meant 'rowPinned'?");
              userCell.rowPinned = userCell.floating;
            }
            nextPosition = {
              rowIndex: userCell.rowIndex,
              column: userCell.column,
              rowPinned: userCell.rowPinned
            };
          } else {
            nextPosition = null;
          }
        }
        if (!nextPosition) {
          return null;
        }
        if (nextPosition.rowIndex < 0) {
          var headerLen = this.headerNavigationService.getHeaderRowCount();
          this.focusService.focusHeaderPosition({
            headerPosition: {
              headerRowIndex: headerLen + nextPosition.rowIndex,
              column: nextPosition.column
            },
            fromCell: true
          });
          return null;
        }
        var fullRowEdit = this.gridOptionsService.get("editType") === "fullRow";
        if (startEditing && !fullRowEdit) {
          var cellIsEditable = this.isCellEditable(nextPosition);
          if (!cellIsEditable) {
            continue;
          }
        }
        this.ensureCellVisible(nextPosition);
        var nextCell = this.getCellByPosition(nextPosition);
        if (!nextCell) {
          var row = this.rowRenderer.getRowByPosition(nextPosition);
          if (!row || !row.isFullWidth() || startEditing) {
            continue;
          }
          return row;
        }
        if (nextCell.isSuppressNavigable()) {
          continue;
        }
        if (this.rangeService) {
          this.rangeService.setRangeToCell(nextPosition);
        }
        return nextCell;
      }
    };
    NavigationService2.prototype.isCellEditable = function(cell) {
      var rowNode = this.lookupRowNodeForCell(cell);
      if (rowNode) {
        return cell.column.isCellEditable(rowNode);
      }
      return false;
    };
    NavigationService2.prototype.getCellByPosition = function(cellPosition) {
      var rowCtrl = this.rowRenderer.getRowByPosition(cellPosition);
      if (!rowCtrl) {
        return null;
      }
      return rowCtrl.getCellCtrl(cellPosition.column);
    };
    NavigationService2.prototype.lookupRowNodeForCell = function(cell) {
      if (cell.rowPinned === "top") {
        return this.pinnedRowModel.getPinnedTopRow(cell.rowIndex);
      }
      if (cell.rowPinned === "bottom") {
        return this.pinnedRowModel.getPinnedBottomRow(cell.rowIndex);
      }
      return this.paginationProxy.getRow(cell.rowIndex);
    };
    NavigationService2.prototype.navigateToNextCell = function(event, key, currentCell, allowUserOverride) {
      var nextCell = currentCell;
      var hitEdgeOfGrid = false;
      while (nextCell && (nextCell === currentCell || !this.isValidNavigateCell(nextCell))) {
        if (this.gridOptionsService.get("enableRtl")) {
          if (key === KeyCode.LEFT) {
            nextCell = this.getLastCellOfColSpan(nextCell);
          }
        } else if (key === KeyCode.RIGHT) {
          nextCell = this.getLastCellOfColSpan(nextCell);
        }
        nextCell = this.cellNavigationService.getNextCellToFocus(key, nextCell);
        hitEdgeOfGrid = missing(nextCell);
      }
      if (hitEdgeOfGrid && event && event.key === KeyCode.UP) {
        nextCell = {
          rowIndex: -1,
          rowPinned: null,
          column: currentCell.column
        };
      }
      if (allowUserOverride) {
        var userFunc = this.gridOptionsService.getCallback("navigateToNextCell");
        if (exists(userFunc)) {
          var params = {
            key,
            previousCellPosition: currentCell,
            nextCellPosition: nextCell ? nextCell : null,
            event
          };
          var userCell = userFunc(params);
          if (exists(userCell)) {
            if (userCell.floating) {
              warnOnce("tabToNextCellFunc return type should have attributes: rowIndex, rowPinned, column. However you had 'floating', maybe you meant 'rowPinned'?");
              userCell.rowPinned = userCell.floating;
            }
            nextCell = {
              rowPinned: userCell.rowPinned,
              rowIndex: userCell.rowIndex,
              column: userCell.column
            };
          } else {
            nextCell = null;
          }
        }
      }
      if (!nextCell) {
        return;
      }
      if (nextCell.rowIndex < 0) {
        var headerLen = this.headerNavigationService.getHeaderRowCount();
        this.focusService.focusHeaderPosition({
          headerPosition: { headerRowIndex: headerLen + nextCell.rowIndex, column: currentCell.column },
          event: event || void 0,
          fromCell: true
        });
        return;
      }
      var normalisedPosition = this.getNormalisedPosition(nextCell);
      if (normalisedPosition) {
        this.focusPosition(normalisedPosition);
      } else {
        this.tryToFocusFullWidthRow(nextCell);
      }
    };
    NavigationService2.prototype.getNormalisedPosition = function(cellPosition) {
      this.ensureCellVisible(cellPosition);
      var cellCtrl = this.getCellByPosition(cellPosition);
      if (!cellCtrl) {
        return null;
      }
      cellPosition = cellCtrl.getCellPosition();
      this.ensureCellVisible(cellPosition);
      return cellPosition;
    };
    NavigationService2.prototype.tryToFocusFullWidthRow = function(position, backwards) {
      if (backwards === void 0) {
        backwards = false;
      }
      var displayedColumns = this.columnModel.getAllDisplayedColumns();
      var rowComp = this.rowRenderer.getRowByPosition(position);
      if (!rowComp || !rowComp.isFullWidth()) {
        return false;
      }
      var currentCellFocused = this.focusService.getFocusedCell();
      var cellPosition = {
        rowIndex: position.rowIndex,
        rowPinned: position.rowPinned,
        column: position.column || (backwards ? last(displayedColumns) : displayedColumns[0])
      };
      this.focusPosition(cellPosition);
      var fromBelow = currentCellFocused != null ? this.rowPositionUtils.before(cellPosition, currentCellFocused) : false;
      var focusEvent = {
        type: Events.EVENT_FULL_WIDTH_ROW_FOCUSED,
        rowIndex: cellPosition.rowIndex,
        rowPinned: cellPosition.rowPinned,
        column: cellPosition.column,
        isFullWidthCell: true,
        floating: cellPosition.rowPinned,
        fromBelow
      };
      this.eventService.dispatchEvent(focusEvent);
      return true;
    };
    NavigationService2.prototype.focusPosition = function(cellPosition) {
      this.focusService.setFocusedCell({
        rowIndex: cellPosition.rowIndex,
        column: cellPosition.column,
        rowPinned: cellPosition.rowPinned,
        forceBrowserFocus: true
      });
      if (this.rangeService) {
        this.rangeService.setRangeToCell(cellPosition);
      }
    };
    NavigationService2.prototype.isValidNavigateCell = function(cell) {
      var rowNode = this.rowPositionUtils.getRowNode(cell);
      return !!rowNode;
    };
    NavigationService2.prototype.getLastCellOfColSpan = function(cell) {
      var cellCtrl = this.getCellByPosition(cell);
      if (!cellCtrl) {
        return cell;
      }
      var colSpanningList = cellCtrl.getColSpanningList();
      if (colSpanningList.length === 1) {
        return cell;
      }
      return {
        rowIndex: cell.rowIndex,
        column: last(colSpanningList),
        rowPinned: cell.rowPinned
      };
    };
    NavigationService2.prototype.ensureCellVisible = function(gridCell) {
      var isGroupStickyEnabled = this.gridOptionsService.isGroupRowsSticky();
      var rowNode = this.rowModel.getRow(gridCell.rowIndex);
      var skipScrollToRow = isGroupStickyEnabled && (rowNode === null || rowNode === void 0 ? void 0 : rowNode.sticky);
      if (!skipScrollToRow && missing(gridCell.rowPinned)) {
        this.gridBodyCon.getScrollFeature().ensureIndexVisible(gridCell.rowIndex);
      }
      if (!gridCell.column.isPinned()) {
        this.gridBodyCon.getScrollFeature().ensureColumnVisible(gridCell.column);
      }
    };
    __decorate$1M([
      Autowired("mouseEventService")
    ], NavigationService2.prototype, "mouseEventService", void 0);
    __decorate$1M([
      Autowired("paginationProxy")
    ], NavigationService2.prototype, "paginationProxy", void 0);
    __decorate$1M([
      Autowired("focusService")
    ], NavigationService2.prototype, "focusService", void 0);
    __decorate$1M([
      Optional("rangeService")
    ], NavigationService2.prototype, "rangeService", void 0);
    __decorate$1M([
      Autowired("columnModel")
    ], NavigationService2.prototype, "columnModel", void 0);
    __decorate$1M([
      Autowired("rowModel")
    ], NavigationService2.prototype, "rowModel", void 0);
    __decorate$1M([
      Autowired("ctrlsService")
    ], NavigationService2.prototype, "ctrlsService", void 0);
    __decorate$1M([
      Autowired("rowRenderer")
    ], NavigationService2.prototype, "rowRenderer", void 0);
    __decorate$1M([
      Autowired("headerNavigationService")
    ], NavigationService2.prototype, "headerNavigationService", void 0);
    __decorate$1M([
      Autowired("rowPositionUtils")
    ], NavigationService2.prototype, "rowPositionUtils", void 0);
    __decorate$1M([
      Autowired("cellNavigationService")
    ], NavigationService2.prototype, "cellNavigationService", void 0);
    __decorate$1M([
      Autowired("pinnedRowModel")
    ], NavigationService2.prototype, "pinnedRowModel", void 0);
    __decorate$1M([
      PostConstruct
    ], NavigationService2.prototype, "postConstruct", null);
    NavigationService2 = __decorate$1M([
      Bean("navigationService")
    ], NavigationService2);
    return NavigationService2;
  }(BeanStub)
);
var __extends$1Q = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1L = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PopupEditorWrapper = (
  /** @class */
  function(_super) {
    __extends$1Q(PopupEditorWrapper2, _super);
    function PopupEditorWrapper2(params) {
      var _this = _super.call(
        this,
        /* html */
        '<div class="ag-popup-editor" tabindex="-1"/>'
      ) || this;
      _this.params = params;
      return _this;
    }
    PopupEditorWrapper2.prototype.postConstruct = function() {
      this.gridOptionsService.setDomData(this.getGui(), PopupEditorWrapper2.DOM_KEY_POPUP_EDITOR_WRAPPER, true);
      this.addKeyDownListener();
    };
    PopupEditorWrapper2.prototype.addKeyDownListener = function() {
      var _this = this;
      var eGui = this.getGui();
      var params = this.params;
      var listener = function(event) {
        if (!isUserSuppressingKeyboardEvent(_this.gridOptionsService, event, params.node, params.column, true)) {
          params.onKeyDown(event);
        }
      };
      this.addManagedListener(eGui, "keydown", listener);
    };
    PopupEditorWrapper2.DOM_KEY_POPUP_EDITOR_WRAPPER = "popupEditorWrapper";
    __decorate$1L([
      PostConstruct
    ], PopupEditorWrapper2.prototype, "postConstruct", null);
    return PopupEditorWrapper2;
  }(PopupComponent)
);
var __extends$1P = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var CellComp = (
  /** @class */
  function(_super) {
    __extends$1P(CellComp2, _super);
    function CellComp2(beans, cellCtrl, printLayout, eRow, editingRow) {
      var _this = _super.call(this) || this;
      _this.rendererVersion = 0;
      _this.editorVersion = 0;
      _this.beans = beans;
      _this.column = cellCtrl.getColumn();
      _this.rowNode = cellCtrl.getRowNode();
      _this.rowCtrl = cellCtrl.getRowCtrl();
      _this.eRow = eRow;
      _this.cellCtrl = cellCtrl;
      var cellDiv = document.createElement("div");
      cellDiv.setAttribute("comp-id", "".concat(_this.getCompId()));
      _this.setTemplateFromElement(cellDiv);
      var eGui = _this.getGui();
      _this.forceWrapper = cellCtrl.isForceWrapper();
      _this.refreshWrapper(false);
      var setAttribute = function(name, value) {
        if (value != null && value != "") {
          eGui.setAttribute(name, value);
        } else {
          eGui.removeAttribute(name);
        }
      };
      setAriaRole(eGui, cellCtrl.getCellAriaRole());
      setAttribute("col-id", cellCtrl.getColumnIdSanitised());
      var tabIndex = cellCtrl.getTabIndex();
      if (tabIndex !== void 0) {
        setAttribute("tabindex", tabIndex.toString());
      }
      var compProxy = {
        addOrRemoveCssClass: function(cssClassName, on) {
          return _this.addOrRemoveCssClass(cssClassName, on);
        },
        setUserStyles: function(styles) {
          return addStylesToElement(eGui, styles);
        },
        getFocusableElement: function() {
          return _this.getFocusableElement();
        },
        setIncludeSelection: function(include) {
          return _this.includeSelection = include;
        },
        setIncludeRowDrag: function(include) {
          return _this.includeRowDrag = include;
        },
        setIncludeDndSource: function(include) {
          return _this.includeDndSource = include;
        },
        setRenderDetails: function(compDetails, valueToDisplay, force) {
          return _this.setRenderDetails(compDetails, valueToDisplay, force);
        },
        setEditDetails: function(compDetails, popup, position) {
          return _this.setEditDetails(compDetails, popup, position);
        },
        getCellEditor: function() {
          return _this.cellEditor || null;
        },
        getCellRenderer: function() {
          return _this.cellRenderer || null;
        },
        getParentOfValue: function() {
          return _this.getParentOfValue();
        }
      };
      cellCtrl.setComp(compProxy, _this.getGui(), _this.eCellWrapper, printLayout, editingRow);
      return _this;
    }
    CellComp2.prototype.getParentOfValue = function() {
      if (this.eCellValue) {
        return this.eCellValue;
      }
      if (this.eCellWrapper) {
        return this.eCellWrapper;
      }
      return this.getGui();
    };
    CellComp2.prototype.setRenderDetails = function(compDetails, valueToDisplay, forceNewCellRendererInstance) {
      var isInlineEditing = this.cellEditor && !this.cellEditorPopupWrapper;
      if (isInlineEditing) {
        return;
      }
      this.firstRender = this.firstRender == null;
      var controlWrapperChanged = this.refreshWrapper(false);
      this.refreshEditStyles(false);
      if (compDetails) {
        var neverRefresh = forceNewCellRendererInstance || controlWrapperChanged;
        var cellRendererRefreshSuccessful = neverRefresh ? false : this.refreshCellRenderer(compDetails);
        if (!cellRendererRefreshSuccessful) {
          this.destroyRenderer();
          this.createCellRendererInstance(compDetails);
        }
      } else {
        this.destroyRenderer();
        this.insertValueWithoutCellRenderer(valueToDisplay);
      }
    };
    CellComp2.prototype.setEditDetails = function(compDetails, popup, position) {
      if (compDetails) {
        this.createCellEditorInstance(compDetails, popup, position);
      } else {
        this.destroyEditor();
      }
    };
    CellComp2.prototype.removeControls = function() {
      this.checkboxSelectionComp = this.beans.context.destroyBean(this.checkboxSelectionComp);
      this.dndSourceComp = this.beans.context.destroyBean(this.dndSourceComp);
      this.rowDraggingComp = this.beans.context.destroyBean(this.rowDraggingComp);
    };
    CellComp2.prototype.refreshWrapper = function(editing) {
      var providingControls = this.includeRowDrag || this.includeDndSource || this.includeSelection;
      var usingWrapper = providingControls || this.forceWrapper;
      var putWrapperIn = usingWrapper && this.eCellWrapper == null;
      if (putWrapperIn) {
        var wrapperDiv = document.createElement("div");
        wrapperDiv.setAttribute("role", "presentation");
        wrapperDiv.setAttribute("class", "ag-cell-wrapper");
        this.eCellWrapper = wrapperDiv;
        this.getGui().appendChild(this.eCellWrapper);
      }
      var takeWrapperOut = !usingWrapper && this.eCellWrapper != null;
      if (takeWrapperOut) {
        removeFromParent(this.eCellWrapper);
        this.eCellWrapper = void 0;
      }
      this.addOrRemoveCssClass("ag-cell-value", !usingWrapper);
      var usingCellValue = !editing && usingWrapper;
      var putCellValueIn = usingCellValue && this.eCellValue == null;
      if (putCellValueIn) {
        var cellSpan = document.createElement("span");
        cellSpan.setAttribute("role", "presentation");
        cellSpan.setAttribute("class", "ag-cell-value");
        this.eCellValue = cellSpan;
        this.eCellWrapper.appendChild(this.eCellValue);
      }
      var takeCellValueOut = !usingCellValue && this.eCellValue != null;
      if (takeCellValueOut) {
        removeFromParent(this.eCellValue);
        this.eCellValue = void 0;
      }
      var templateChanged = putWrapperIn || takeWrapperOut || putCellValueIn || takeCellValueOut;
      if (templateChanged) {
        this.removeControls();
      }
      if (!editing) {
        if (providingControls) {
          this.addControls();
        }
      }
      return templateChanged;
    };
    CellComp2.prototype.addControls = function() {
      if (this.includeRowDrag) {
        if (this.rowDraggingComp == null) {
          this.rowDraggingComp = this.cellCtrl.createRowDragComp();
          if (this.rowDraggingComp) {
            this.eCellWrapper.insertBefore(this.rowDraggingComp.getGui(), this.eCellValue);
          }
        }
      }
      if (this.includeDndSource) {
        if (this.dndSourceComp == null) {
          this.dndSourceComp = this.cellCtrl.createDndSource();
          this.eCellWrapper.insertBefore(this.dndSourceComp.getGui(), this.eCellValue);
        }
      }
      if (this.includeSelection) {
        if (this.checkboxSelectionComp == null) {
          this.checkboxSelectionComp = this.cellCtrl.createSelectionCheckbox();
          this.eCellWrapper.insertBefore(this.checkboxSelectionComp.getGui(), this.eCellValue);
        }
      }
    };
    CellComp2.prototype.createCellEditorInstance = function(compDetails, popup, position) {
      var _this = this;
      var versionCopy = this.editorVersion;
      var cellEditorPromise = compDetails.newAgStackInstance();
      if (!cellEditorPromise) {
        return;
      }
      var params = compDetails.params;
      cellEditorPromise.then(function(c) {
        return _this.afterCellEditorCreated(versionCopy, c, params, popup, position);
      });
      var cellEditorAsync = missing(this.cellEditor);
      if (cellEditorAsync && params.cellStartedEdit) {
        this.cellCtrl.focusCell(true);
      }
    };
    CellComp2.prototype.insertValueWithoutCellRenderer = function(valueToDisplay) {
      var eParent = this.getParentOfValue();
      clearElement(eParent);
      var escapedValue = valueToDisplay != null ? escapeString(valueToDisplay, true) : null;
      if (escapedValue != null) {
        eParent.textContent = escapedValue;
      }
    };
    CellComp2.prototype.destroyEditorAndRenderer = function() {
      this.destroyRenderer();
      this.destroyEditor();
    };
    CellComp2.prototype.destroyRenderer = function() {
      var context = this.beans.context;
      this.cellRenderer = context.destroyBean(this.cellRenderer);
      removeFromParent(this.cellRendererGui);
      this.cellRendererGui = null;
      this.rendererVersion++;
    };
    CellComp2.prototype.destroyEditor = function() {
      var context = this.beans.context;
      if (this.hideEditorPopup) {
        this.hideEditorPopup();
      }
      this.hideEditorPopup = void 0;
      this.cellEditor = context.destroyBean(this.cellEditor);
      this.cellEditorPopupWrapper = context.destroyBean(this.cellEditorPopupWrapper);
      removeFromParent(this.cellEditorGui);
      this.cellEditorGui = null;
      this.editorVersion++;
    };
    CellComp2.prototype.refreshCellRenderer = function(compClassAndParams) {
      if (this.cellRenderer == null || this.cellRenderer.refresh == null) {
        return false;
      }
      if (this.cellRendererClass !== compClassAndParams.componentClass) {
        return false;
      }
      var result = this.cellRenderer.refresh(compClassAndParams.params);
      return result === true || result === void 0;
    };
    CellComp2.prototype.createCellRendererInstance = function(compDetails) {
      var _this = this;
      var suppressAnimationFrame = this.beans.gridOptionsService.get("suppressAnimationFrame");
      var useTaskService = !suppressAnimationFrame;
      var displayComponentVersionCopy = this.rendererVersion;
      var componentClass = compDetails.componentClass;
      var createCellRendererFunc = function() {
        var staleTask = _this.rendererVersion !== displayComponentVersionCopy || !_this.isAlive();
        if (staleTask) {
          return;
        }
        var componentPromise = compDetails.newAgStackInstance();
        var callback = _this.afterCellRendererCreated.bind(_this, displayComponentVersionCopy, componentClass);
        if (componentPromise) {
          componentPromise.then(callback);
        }
      };
      if (useTaskService && this.firstRender) {
        this.beans.animationFrameService.createTask(createCellRendererFunc, this.rowNode.rowIndex, "createTasksP2");
      } else {
        createCellRendererFunc();
      }
    };
    CellComp2.prototype.getCtrl = function() {
      return this.cellCtrl;
    };
    CellComp2.prototype.getRowCtrl = function() {
      return this.rowCtrl;
    };
    CellComp2.prototype.getCellRenderer = function() {
      return this.cellRenderer;
    };
    CellComp2.prototype.getCellEditor = function() {
      return this.cellEditor;
    };
    CellComp2.prototype.afterCellRendererCreated = function(cellRendererVersion, cellRendererClass, cellRenderer) {
      var staleTask = !this.isAlive() || cellRendererVersion !== this.rendererVersion;
      if (staleTask) {
        this.beans.context.destroyBean(cellRenderer);
        return;
      }
      this.cellRenderer = cellRenderer;
      this.cellRendererClass = cellRendererClass;
      this.cellRendererGui = this.cellRenderer.getGui();
      if (this.cellRendererGui != null) {
        var eParent = this.getParentOfValue();
        clearElement(eParent);
        eParent.appendChild(this.cellRendererGui);
      }
    };
    CellComp2.prototype.afterCellEditorCreated = function(requestVersion, cellEditor, params, popup, position) {
      var staleComp = requestVersion !== this.editorVersion;
      if (staleComp) {
        this.beans.context.destroyBean(cellEditor);
        return;
      }
      var editingCancelledByUserComp = cellEditor.isCancelBeforeStart && cellEditor.isCancelBeforeStart();
      if (editingCancelledByUserComp) {
        this.beans.context.destroyBean(cellEditor);
        this.cellCtrl.stopEditing(true);
        return;
      }
      if (!cellEditor.getGui) {
        console.warn("AG Grid: cellEditor for column ".concat(this.column.getId(), " is missing getGui() method"));
        this.beans.context.destroyBean(cellEditor);
        return;
      }
      this.cellEditor = cellEditor;
      this.cellEditorGui = cellEditor.getGui();
      var cellEditorInPopup = popup || cellEditor.isPopup !== void 0 && cellEditor.isPopup();
      if (cellEditorInPopup) {
        this.addPopupCellEditor(params, position);
      } else {
        this.addInCellEditor();
      }
      this.refreshEditStyles(true, cellEditorInPopup);
      if (cellEditor.afterGuiAttached) {
        cellEditor.afterGuiAttached();
      }
    };
    CellComp2.prototype.refreshEditStyles = function(editing, isPopup) {
      var _a;
      this.addOrRemoveCssClass("ag-cell-inline-editing", editing && !isPopup);
      this.addOrRemoveCssClass("ag-cell-popup-editing", editing && !!isPopup);
      this.addOrRemoveCssClass("ag-cell-not-inline-editing", !editing || !!isPopup);
      (_a = this.rowCtrl) === null || _a === void 0 ? void 0 : _a.setInlineEditingCss(editing);
    };
    CellComp2.prototype.addInCellEditor = function() {
      var eGui = this.getGui();
      var eDocument = this.beans.gridOptionsService.getDocument();
      if (eGui.contains(eDocument.activeElement)) {
        eGui.focus();
      }
      this.destroyRenderer();
      this.refreshWrapper(true);
      this.clearParentOfValue();
      if (this.cellEditorGui) {
        var eParent = this.getParentOfValue();
        eParent.appendChild(this.cellEditorGui);
      }
    };
    CellComp2.prototype.addPopupCellEditor = function(params, position) {
      var _this = this;
      if (this.beans.gridOptionsService.get("editType") === "fullRow") {
        console.warn("AG Grid: popup cellEditor does not work with fullRowEdit - you cannot use them both - either turn off fullRowEdit, or stop using popup editors.");
      }
      var cellEditor = this.cellEditor;
      this.cellEditorPopupWrapper = this.beans.context.createBean(new PopupEditorWrapper(params));
      var ePopupGui = this.cellEditorPopupWrapper.getGui();
      if (this.cellEditorGui) {
        ePopupGui.appendChild(this.cellEditorGui);
      }
      var popupService = this.beans.popupService;
      var useModelPopup = this.beans.gridOptionsService.get("stopEditingWhenCellsLoseFocus");
      var positionToUse = position != null ? position : cellEditor.getPopupPosition ? cellEditor.getPopupPosition() : "over";
      var isRtl = this.beans.gridOptionsService.get("enableRtl");
      var positionParams = {
        ePopup: ePopupGui,
        column: this.column,
        rowNode: this.rowNode,
        type: "popupCellEditor",
        eventSource: this.getGui(),
        position: positionToUse,
        alignSide: isRtl ? "right" : "left",
        keepWithinBounds: true
      };
      var positionCallback = popupService.positionPopupByComponent.bind(popupService, positionParams);
      var translate = this.beans.localeService.getLocaleTextFunc();
      var addPopupRes = popupService.addPopup({
        modal: useModelPopup,
        eChild: ePopupGui,
        closeOnEsc: true,
        closedCallback: function() {
          _this.cellCtrl.onPopupEditorClosed();
        },
        anchorToElement: this.getGui(),
        positionCallback,
        ariaLabel: translate("ariaLabelCellEditor", "Cell Editor")
      });
      if (addPopupRes) {
        this.hideEditorPopup = addPopupRes.hideFunc;
      }
    };
    CellComp2.prototype.detach = function() {
      this.eRow.removeChild(this.getGui());
    };
    CellComp2.prototype.destroy = function() {
      this.cellCtrl.stopEditing();
      this.destroyEditorAndRenderer();
      this.removeControls();
      _super.prototype.destroy.call(this);
    };
    CellComp2.prototype.clearParentOfValue = function() {
      var eGui = this.getGui();
      var eDocument = this.beans.gridOptionsService.getDocument();
      if (eGui.contains(eDocument.activeElement) && browserSupportsPreventScroll()) {
        eGui.focus({ preventScroll: true });
      }
      clearElement(this.getParentOfValue());
    };
    return CellComp2;
  }(Component2)
);
var __extends$1O = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var RowComp = (
  /** @class */
  function(_super) {
    __extends$1O(RowComp2, _super);
    function RowComp2(ctrl, beans, containerType) {
      var _this = _super.call(this) || this;
      _this.cellComps = {};
      _this.beans = beans;
      _this.rowCtrl = ctrl;
      var rowDiv = document.createElement("div");
      rowDiv.setAttribute("comp-id", "".concat(_this.getCompId()));
      rowDiv.setAttribute("style", _this.getInitialStyle(containerType));
      _this.setTemplateFromElement(rowDiv);
      var eGui = _this.getGui();
      var style = eGui.style;
      _this.domOrder = _this.rowCtrl.getDomOrder();
      setAriaRole(eGui, "row");
      var tabIndex = _this.rowCtrl.getTabIndex();
      if (tabIndex != null) {
        eGui.setAttribute("tabindex", tabIndex.toString());
      }
      var compProxy = {
        setDomOrder: function(domOrder) {
          return _this.domOrder = domOrder;
        },
        setCellCtrls: function(cellCtrls) {
          return _this.setCellCtrls(cellCtrls);
        },
        showFullWidth: function(compDetails) {
          return _this.showFullWidth(compDetails);
        },
        getFullWidthCellRenderer: function() {
          return _this.getFullWidthCellRenderer();
        },
        addOrRemoveCssClass: function(name, on) {
          return _this.addOrRemoveCssClass(name, on);
        },
        setUserStyles: function(styles) {
          return addStylesToElement(eGui, styles);
        },
        setTop: function(top) {
          return style.top = top;
        },
        setTransform: function(transform) {
          return style.transform = transform;
        },
        setRowIndex: function(rowIndex) {
          return eGui.setAttribute("row-index", rowIndex);
        },
        setRowId: function(rowId) {
          return eGui.setAttribute("row-id", rowId);
        },
        setRowBusinessKey: function(businessKey) {
          return eGui.setAttribute("row-business-key", businessKey);
        },
        refreshFullWidth: function(getUpdatedParams) {
          return _this.refreshFullWidth(getUpdatedParams);
        }
      };
      ctrl.setComp(compProxy, _this.getGui(), containerType);
      _this.addDestroyFunc(function() {
        ctrl.unsetComp(containerType);
      });
      return _this;
    }
    RowComp2.prototype.getInitialStyle = function(containerType) {
      var transform = this.rowCtrl.getInitialTransform(containerType);
      return transform ? "transform: ".concat(transform) : "top: ".concat(this.rowCtrl.getInitialRowTop(containerType));
    };
    RowComp2.prototype.showFullWidth = function(compDetails) {
      var _this = this;
      var callback = function(cellRenderer) {
        if (_this.isAlive()) {
          var eGui = cellRenderer.getGui();
          _this.getGui().appendChild(eGui);
          _this.rowCtrl.setupDetailRowAutoHeight(eGui);
          _this.setFullWidthRowComp(cellRenderer);
        } else {
          _this.beans.context.destroyBean(cellRenderer);
        }
      };
      var res = compDetails.newAgStackInstance();
      if (!res) {
        return;
      }
      res.then(callback);
    };
    RowComp2.prototype.setCellCtrls = function(cellCtrls) {
      var _this = this;
      var cellsToRemove = Object.assign({}, this.cellComps);
      cellCtrls.forEach(function(cellCtrl) {
        var key = cellCtrl.getInstanceId();
        var existingCellComp = _this.cellComps[key];
        if (existingCellComp == null) {
          _this.newCellComp(cellCtrl);
        } else {
          cellsToRemove[key] = null;
        }
      });
      var cellCompsToRemove = getAllValuesInObject(cellsToRemove).filter(function(cellComp) {
        return cellComp != null;
      });
      this.destroyCells(cellCompsToRemove);
      this.ensureDomOrder(cellCtrls);
    };
    RowComp2.prototype.ensureDomOrder = function(cellCtrls) {
      var _this = this;
      if (!this.domOrder) {
        return;
      }
      var elementsInOrder = [];
      cellCtrls.forEach(function(cellCtrl) {
        var cellComp = _this.cellComps[cellCtrl.getInstanceId()];
        if (cellComp) {
          elementsInOrder.push(cellComp.getGui());
        }
      });
      setDomChildOrder(this.getGui(), elementsInOrder);
    };
    RowComp2.prototype.newCellComp = function(cellCtrl) {
      var cellComp = new CellComp(this.beans, cellCtrl, this.rowCtrl.isPrintLayout(), this.getGui(), this.rowCtrl.isEditing());
      this.cellComps[cellCtrl.getInstanceId()] = cellComp;
      this.getGui().appendChild(cellComp.getGui());
    };
    RowComp2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.destroyAllCells();
    };
    RowComp2.prototype.destroyAllCells = function() {
      var cellsToDestroy = getAllValuesInObject(this.cellComps).filter(function(cp) {
        return cp != null;
      });
      this.destroyCells(cellsToDestroy);
    };
    RowComp2.prototype.setFullWidthRowComp = function(fullWidthRowComponent) {
      var _this = this;
      if (this.fullWidthCellRenderer) {
        console.error("AG Grid - should not be setting fullWidthRowComponent twice");
      }
      this.fullWidthCellRenderer = fullWidthRowComponent;
      this.addDestroyFunc(function() {
        _this.fullWidthCellRenderer = _this.beans.context.destroyBean(_this.fullWidthCellRenderer);
      });
    };
    RowComp2.prototype.getFullWidthCellRenderer = function() {
      return this.fullWidthCellRenderer;
    };
    RowComp2.prototype.destroyCells = function(cellComps) {
      var _this = this;
      cellComps.forEach(function(cellComp) {
        if (!cellComp) {
          return;
        }
        var instanceId = cellComp.getCtrl().getInstanceId();
        if (_this.cellComps[instanceId] !== cellComp) {
          return;
        }
        cellComp.detach();
        cellComp.destroy();
        _this.cellComps[instanceId] = null;
      });
    };
    RowComp2.prototype.refreshFullWidth = function(getUpdatedParams) {
      var fullWidthCellRenderer = this.fullWidthCellRenderer;
      if (!fullWidthCellRenderer || !fullWidthCellRenderer.refresh) {
        return false;
      }
      var params = getUpdatedParams();
      return fullWidthCellRenderer.refresh(params);
    };
    return RowComp2;
  }(Component2)
);
var __extends$1N = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$a = function() {
  __assign$a = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$a.apply(this, arguments);
};
var __decorate$1K = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
function templateFactory() {
  var name = Component2.elementGettingCreated.getAttribute("name");
  var cssClasses = RowContainerCtrl.getRowContainerCssClasses(name);
  var res;
  var centerTemplate = name === RowContainerName.CENTER || name === RowContainerName.TOP_CENTER || name === RowContainerName.STICKY_TOP_CENTER || name === RowContainerName.BOTTOM_CENTER;
  if (centerTemplate) {
    res = /* html */
    '<div class="'.concat(cssClasses.viewport, '" ref="eViewport" role="presentation">\n                <div class="').concat(cssClasses.container, '" ref="eContainer"></div>\n            </div>');
  } else {
    res = /* html */
    '<div class="'.concat(cssClasses.container, '" ref="eContainer"></div>');
  }
  return res;
}
var RowContainerComp = (
  /** @class */
  function(_super) {
    __extends$1N(RowContainerComp2, _super);
    function RowContainerComp2() {
      var _this = _super.call(this, templateFactory()) || this;
      _this.rowComps = {};
      _this.name = Component2.elementGettingCreated.getAttribute("name");
      _this.type = getRowContainerTypeForName(_this.name);
      return _this;
    }
    RowContainerComp2.prototype.postConstruct = function() {
      var _this = this;
      var compProxy = {
        setViewportHeight: function(height) {
          return _this.eViewport.style.height = height;
        },
        setRowCtrls: function(_a) {
          var rowCtrls = _a.rowCtrls;
          return _this.setRowCtrls(rowCtrls);
        },
        setDomOrder: function(domOrder) {
          _this.domOrder = domOrder;
        },
        setContainerWidth: function(width) {
          return _this.eContainer.style.width = width;
        }
      };
      var ctrl = this.createManagedBean(new RowContainerCtrl(this.name));
      ctrl.setComp(compProxy, this.eContainer, this.eViewport);
    };
    RowContainerComp2.prototype.preDestroy = function() {
      this.setRowCtrls([]);
    };
    RowContainerComp2.prototype.setRowCtrls = function(rowCtrls) {
      var _this = this;
      var oldRows = __assign$a({}, this.rowComps);
      this.rowComps = {};
      this.lastPlacedElement = null;
      var processRow = function(rowCon) {
        var instanceId = rowCon.getInstanceId();
        var existingRowComp = oldRows[instanceId];
        if (existingRowComp) {
          _this.rowComps[instanceId] = existingRowComp;
          delete oldRows[instanceId];
          _this.ensureDomOrder(existingRowComp.getGui());
        } else {
          if (!rowCon.getRowNode().displayed) {
            return;
          }
          var rowComp = new RowComp(rowCon, _this.beans, _this.type);
          _this.rowComps[instanceId] = rowComp;
          _this.appendRow(rowComp.getGui());
        }
      };
      rowCtrls.forEach(processRow);
      getAllValuesInObject(oldRows).forEach(function(oldRowComp) {
        _this.eContainer.removeChild(oldRowComp.getGui());
        oldRowComp.destroy();
      });
      setAriaRole(this.eContainer, "rowgroup");
    };
    RowContainerComp2.prototype.appendRow = function(element) {
      if (this.domOrder) {
        insertWithDomOrder(this.eContainer, element, this.lastPlacedElement);
      } else {
        this.eContainer.appendChild(element);
      }
      this.lastPlacedElement = element;
    };
    RowContainerComp2.prototype.ensureDomOrder = function(eRow) {
      if (this.domOrder) {
        ensureDomOrder(this.eContainer, eRow, this.lastPlacedElement);
        this.lastPlacedElement = eRow;
      }
    };
    __decorate$1K([
      Autowired("beans")
    ], RowContainerComp2.prototype, "beans", void 0);
    __decorate$1K([
      RefSelector("eViewport")
    ], RowContainerComp2.prototype, "eViewport", void 0);
    __decorate$1K([
      RefSelector("eContainer")
    ], RowContainerComp2.prototype, "eContainer", void 0);
    __decorate$1K([
      PostConstruct
    ], RowContainerComp2.prototype, "postConstruct", null);
    __decorate$1K([
      PreDestroy
    ], RowContainerComp2.prototype, "preDestroy", null);
    return RowContainerComp2;
  }(Component2)
);
var __decorate$1J = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var BodyDropPivotTarget = (
  /** @class */
  function() {
    function BodyDropPivotTarget2(pinned) {
      this.columnsToAggregate = [];
      this.columnsToGroup = [];
      this.columnsToPivot = [];
      this.pinned = pinned;
    }
    BodyDropPivotTarget2.prototype.onDragEnter = function(draggingEvent) {
      var _this = this;
      this.clearColumnsList();
      if (this.gridOptionsService.get("functionsReadOnly")) {
        return;
      }
      var dragColumns = draggingEvent.dragItem.columns;
      if (!dragColumns) {
        return;
      }
      dragColumns.forEach(function(column) {
        if (!column.isPrimary()) {
          return;
        }
        if (column.isAnyFunctionActive()) {
          return;
        }
        if (column.isAllowValue()) {
          _this.columnsToAggregate.push(column);
        } else if (column.isAllowRowGroup()) {
          _this.columnsToGroup.push(column);
        } else if (column.isAllowPivot()) {
          _this.columnsToPivot.push(column);
        }
      });
    };
    BodyDropPivotTarget2.prototype.getIconName = function() {
      var totalColumns = this.columnsToAggregate.length + this.columnsToGroup.length + this.columnsToPivot.length;
      if (totalColumns > 0) {
        return this.pinned ? DragAndDropService.ICON_PINNED : DragAndDropService.ICON_MOVE;
      }
      return null;
    };
    BodyDropPivotTarget2.prototype.onDragLeave = function(draggingEvent) {
      this.clearColumnsList();
    };
    BodyDropPivotTarget2.prototype.clearColumnsList = function() {
      this.columnsToAggregate.length = 0;
      this.columnsToGroup.length = 0;
      this.columnsToPivot.length = 0;
    };
    BodyDropPivotTarget2.prototype.onDragging = function(draggingEvent) {
    };
    BodyDropPivotTarget2.prototype.onDragStop = function(draggingEvent) {
      if (this.columnsToAggregate.length > 0) {
        this.columnModel.addValueColumns(this.columnsToAggregate, "toolPanelDragAndDrop");
      }
      if (this.columnsToGroup.length > 0) {
        this.columnModel.addRowGroupColumns(this.columnsToGroup, "toolPanelDragAndDrop");
      }
      if (this.columnsToPivot.length > 0) {
        this.columnModel.addPivotColumns(this.columnsToPivot, "toolPanelDragAndDrop");
      }
    };
    __decorate$1J([
      Autowired("columnModel")
    ], BodyDropPivotTarget2.prototype, "columnModel", void 0);
    __decorate$1J([
      Autowired("gridOptionsService")
    ], BodyDropPivotTarget2.prototype, "gridOptionsService", void 0);
    return BodyDropPivotTarget2;
  }()
);
var __read$l = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var ColumnMoveHelper = (
  /** @class */
  function() {
    function ColumnMoveHelper2() {
    }
    ColumnMoveHelper2.attemptMoveColumns = function(params) {
      var isFromHeader = params.isFromHeader, hDirection = params.hDirection, xPosition = params.xPosition, fromEnter = params.fromEnter, fakeEvent = params.fakeEvent, pinned = params.pinned, gridOptionsService = params.gridOptionsService, columnModel = params.columnModel;
      var draggingLeft = hDirection === HorizontalDirection.Left;
      var draggingRight = hDirection === HorizontalDirection.Right;
      var allMovingColumns = params.allMovingColumns;
      if (isFromHeader) {
        var newCols_1 = [];
        allMovingColumns.forEach(function(col) {
          var _a;
          var movingGroup = null;
          var parent = col.getParent();
          while (parent != null && parent.getDisplayedLeafColumns().length === 1) {
            movingGroup = parent;
            parent = parent.getParent();
          }
          if (movingGroup != null) {
            var isMarryChildren = !!((_a = movingGroup.getColGroupDef()) === null || _a === void 0 ? void 0 : _a.marryChildren);
            var columnsToMove = isMarryChildren ? movingGroup.getProvidedColumnGroup().getLeafColumns() : movingGroup.getLeafColumns();
            columnsToMove.forEach(function(newCol) {
              if (!newCols_1.includes(newCol)) {
                newCols_1.push(newCol);
              }
            });
          } else if (!newCols_1.includes(col)) {
            newCols_1.push(col);
          }
        });
        allMovingColumns = newCols_1;
      }
      var allMovingColumnsOrdered = allMovingColumns.slice();
      columnModel.sortColumnsLikeGridColumns(allMovingColumnsOrdered);
      var validMoves = this.calculateValidMoves({
        movingCols: allMovingColumnsOrdered,
        draggingRight,
        xPosition,
        pinned,
        gridOptionsService,
        columnModel
      });
      var oldIndex = this.calculateOldIndex(allMovingColumnsOrdered, columnModel);
      if (validMoves.length === 0) {
        return;
      }
      var firstValidMove = validMoves[0];
      var constrainDirection = oldIndex !== null && !fromEnter;
      if (isFromHeader) {
        constrainDirection = oldIndex !== null;
      }
      if (constrainDirection && !fakeEvent) {
        if (draggingLeft && firstValidMove >= oldIndex) {
          return;
        }
        if (draggingRight && firstValidMove <= oldIndex) {
          return;
        }
      }
      var displayedCols = columnModel.getAllDisplayedColumns();
      var potentialMoves = [];
      var targetOrder = null;
      for (var i = 0; i < validMoves.length; i++) {
        var move = validMoves[i];
        var order = columnModel.getProposedColumnOrder(allMovingColumnsOrdered, move);
        if (!columnModel.doesOrderPassRules(order)) {
          continue;
        }
        var displayedOrder = order.filter(function(col) {
          return displayedCols.includes(col);
        });
        if (targetOrder === null) {
          targetOrder = displayedOrder;
        } else if (!areEqual(displayedOrder, targetOrder)) {
          break;
        }
        var fragCount = this.groupFragCount(order);
        potentialMoves.push({ move, fragCount });
      }
      if (potentialMoves.length === 0) {
        return;
      }
      potentialMoves.sort(function(a, b) {
        return a.fragCount - b.fragCount;
      });
      return this.moveColumns(allMovingColumns, potentialMoves[0].move, "uiColumnMoved", false, columnModel);
    };
    ColumnMoveHelper2.moveColumns = function(columns, toIndex, source, finished, columnModel) {
      columnModel.moveColumns(columns, toIndex, source, finished);
      return finished ? null : { columns, toIndex };
    };
    ColumnMoveHelper2.calculateOldIndex = function(movingCols, columnModel) {
      var gridCols = columnModel.getAllGridColumns();
      var indexes = sortNumerically(movingCols.map(function(col) {
        return gridCols.indexOf(col);
      }));
      var firstIndex = indexes[0];
      var lastIndex = last(indexes);
      var spread = lastIndex - firstIndex;
      var gapsExist = spread !== indexes.length - 1;
      return gapsExist ? null : firstIndex;
    };
    ColumnMoveHelper2.groupFragCount = function(columns) {
      function parents(col) {
        var result = [];
        var parent = col.getOriginalParent();
        while (parent != null) {
          result.push(parent);
          parent = parent.getOriginalParent();
        }
        return result;
      }
      var count = 0;
      var _loop_1 = function(i2) {
        var _a;
        var a = parents(columns[i2]);
        var b = parents(columns[i2 + 1]);
        _a = __read$l(a.length > b.length ? [a, b] : [b, a], 2), a = _a[0], b = _a[1];
        a.forEach(function(parent) {
          if (b.indexOf(parent) === -1) {
            count++;
          }
        });
      };
      for (var i = 0; i < columns.length - 1; i++) {
        _loop_1(i);
      }
      return count;
    };
    ColumnMoveHelper2.calculateValidMoves = function(params) {
      var movingCols = params.movingCols, draggingRight = params.draggingRight, xPosition = params.xPosition, pinned = params.pinned, gridOptionsService = params.gridOptionsService, columnModel = params.columnModel;
      var isMoveBlocked = gridOptionsService.get("suppressMovableColumns") || movingCols.some(function(col2) {
        return col2.getColDef().suppressMovable;
      });
      if (isMoveBlocked) {
        return [];
      }
      var allDisplayedCols = columnModel.getDisplayedColumns(pinned);
      var allGridCols = columnModel.getAllGridColumns();
      var movingDisplayedCols = allDisplayedCols.filter(function(col2) {
        return includes(movingCols, col2);
      });
      var otherDisplayedCols = allDisplayedCols.filter(function(col2) {
        return !includes(movingCols, col2);
      });
      var otherGridCols = allGridCols.filter(function(col2) {
        return !includes(movingCols, col2);
      });
      var displayIndex = 0;
      var availableWidth = xPosition;
      if (draggingRight) {
        var widthOfMovingDisplayedCols_1 = 0;
        movingDisplayedCols.forEach(function(col2) {
          return widthOfMovingDisplayedCols_1 += col2.getActualWidth();
        });
        availableWidth -= widthOfMovingDisplayedCols_1;
      }
      if (availableWidth > 0) {
        for (var i = 0; i < otherDisplayedCols.length; i++) {
          var col = otherDisplayedCols[i];
          availableWidth -= col.getActualWidth();
          if (availableWidth < 0) {
            break;
          }
          displayIndex++;
        }
        if (draggingRight) {
          displayIndex++;
        }
      }
      var firstValidMove;
      if (displayIndex > 0) {
        var leftColumn = otherDisplayedCols[displayIndex - 1];
        firstValidMove = otherGridCols.indexOf(leftColumn) + 1;
      } else {
        firstValidMove = otherGridCols.indexOf(otherDisplayedCols[0]);
        if (firstValidMove === -1) {
          firstValidMove = 0;
        }
      }
      var validMoves = [firstValidMove];
      var numberComparator = function(a, b) {
        return a - b;
      };
      if (draggingRight) {
        var pointer = firstValidMove + 1;
        var lastIndex = allGridCols.length - 1;
        while (pointer <= lastIndex) {
          validMoves.push(pointer);
          pointer++;
        }
        validMoves.sort(numberComparator);
      } else {
        var pointer = firstValidMove;
        var lastIndex = allGridCols.length - 1;
        var displacedCol = allGridCols[pointer];
        while (pointer <= lastIndex && allDisplayedCols.indexOf(displacedCol) < 0) {
          pointer++;
          validMoves.push(pointer);
          displacedCol = allGridCols[pointer];
        }
        pointer = firstValidMove - 1;
        var firstDisplayIndex = 0;
        while (pointer >= firstDisplayIndex) {
          validMoves.push(pointer);
          pointer--;
        }
        validMoves.sort(numberComparator).reverse();
      }
      return validMoves;
    };
    ColumnMoveHelper2.normaliseX = function(x, pinned, fromKeyboard, gridOptionsService, ctrlsService) {
      var eViewport = ctrlsService.getHeaderRowContainerCtrl(pinned).getViewport();
      if (fromKeyboard) {
        x -= eViewport.getBoundingClientRect().left;
      }
      if (gridOptionsService.get("enableRtl")) {
        var clientWidth = eViewport.clientWidth;
        x = clientWidth - x;
      }
      if (pinned == null) {
        x += ctrlsService.getCenterRowContainerCtrl().getCenterViewportScrollLeft();
      }
      return x;
    };
    return ColumnMoveHelper2;
  }()
);
var __decorate$1I = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var MoveColumnFeature = (
  /** @class */
  function() {
    function MoveColumnFeature2(pinned, eContainer) {
      this.needToMoveLeft = false;
      this.needToMoveRight = false;
      this.lastMovedInfo = null;
      this.pinned = pinned;
      this.eContainer = eContainer;
      this.centerContainer = !exists(pinned);
    }
    MoveColumnFeature2.prototype.init = function() {
      var _this = this;
      this.ctrlsService.whenReady(function() {
        _this.gridBodyCon = _this.ctrlsService.getGridBodyCtrl();
      });
    };
    MoveColumnFeature2.prototype.getIconName = function() {
      return this.pinned ? DragAndDropService.ICON_PINNED : DragAndDropService.ICON_MOVE;
    };
    MoveColumnFeature2.prototype.onDragEnter = function(draggingEvent) {
      var columns = draggingEvent.dragItem.columns;
      var dragCameFromToolPanel = draggingEvent.dragSource.type === DragSourceType.ToolPanel;
      if (dragCameFromToolPanel) {
        this.setColumnsVisible(columns, true, "uiColumnDragged");
      } else {
        var visibleState_1 = draggingEvent.dragItem.visibleState;
        var visibleColumns = (columns || []).filter(function(column) {
          return visibleState_1[column.getId()];
        });
        this.setColumnsVisible(visibleColumns, true, "uiColumnDragged");
      }
      this.setColumnsPinned(columns, this.pinned, "uiColumnDragged");
      this.onDragging(draggingEvent, true, true);
    };
    MoveColumnFeature2.prototype.onDragLeave = function() {
      this.ensureIntervalCleared();
      this.lastMovedInfo = null;
    };
    MoveColumnFeature2.prototype.setColumnsVisible = function(columns, visible, source) {
      if (source === void 0) {
        source = "api";
      }
      if (columns) {
        var allowedCols = columns.filter(function(c) {
          return !c.getColDef().lockVisible;
        });
        this.columnModel.setColumnsVisible(allowedCols, visible, source);
      }
    };
    MoveColumnFeature2.prototype.setColumnsPinned = function(columns, pinned, source) {
      if (source === void 0) {
        source = "api";
      }
      if (columns) {
        var allowedCols = columns.filter(function(c) {
          return !c.getColDef().lockPinned;
        });
        this.columnModel.setColumnsPinned(allowedCols, pinned, source);
      }
    };
    MoveColumnFeature2.prototype.onDragStop = function() {
      this.onDragging(this.lastDraggingEvent, false, true, true);
      this.ensureIntervalCleared();
      this.lastMovedInfo = null;
    };
    MoveColumnFeature2.prototype.checkCenterForScrolling = function(xAdjustedForScroll) {
      if (this.centerContainer) {
        var firstVisiblePixel = this.ctrlsService.getCenterRowContainerCtrl().getCenterViewportScrollLeft();
        var lastVisiblePixel = firstVisiblePixel + this.ctrlsService.getCenterRowContainerCtrl().getCenterWidth();
        if (this.gridOptionsService.get("enableRtl")) {
          this.needToMoveRight = xAdjustedForScroll < firstVisiblePixel + 50;
          this.needToMoveLeft = xAdjustedForScroll > lastVisiblePixel - 50;
        } else {
          this.needToMoveLeft = xAdjustedForScroll < firstVisiblePixel + 50;
          this.needToMoveRight = xAdjustedForScroll > lastVisiblePixel - 50;
        }
        if (this.needToMoveLeft || this.needToMoveRight) {
          this.ensureIntervalStarted();
        } else {
          this.ensureIntervalCleared();
        }
      }
    };
    MoveColumnFeature2.prototype.onDragging = function(draggingEvent, fromEnter, fakeEvent, finished) {
      var _this = this;
      var _a;
      if (draggingEvent === void 0) {
        draggingEvent = this.lastDraggingEvent;
      }
      if (fromEnter === void 0) {
        fromEnter = false;
      }
      if (fakeEvent === void 0) {
        fakeEvent = false;
      }
      if (finished === void 0) {
        finished = false;
      }
      if (finished) {
        if (this.lastMovedInfo) {
          var _b = this.lastMovedInfo, columns = _b.columns, toIndex = _b.toIndex;
          ColumnMoveHelper.moveColumns(columns, toIndex, "uiColumnMoved", true, this.columnModel);
        }
        return;
      }
      this.lastDraggingEvent = draggingEvent;
      if (missing(draggingEvent.hDirection)) {
        return;
      }
      var mouseX = ColumnMoveHelper.normaliseX(draggingEvent.x, this.pinned, false, this.gridOptionsService, this.ctrlsService);
      if (!fromEnter) {
        this.checkCenterForScrolling(mouseX);
      }
      var hDirection = this.normaliseDirection(draggingEvent.hDirection);
      var dragSourceType = draggingEvent.dragSource.type;
      var allMovingColumns = ((_a = draggingEvent.dragSource.getDragItem().columns) === null || _a === void 0 ? void 0 : _a.filter(function(col) {
        if (col.getColDef().lockPinned) {
          return col.getPinned() == _this.pinned;
        }
        return true;
      })) || [];
      var lastMovedInfo = ColumnMoveHelper.attemptMoveColumns({
        allMovingColumns,
        isFromHeader: dragSourceType === DragSourceType.HeaderCell,
        hDirection,
        xPosition: mouseX,
        pinned: this.pinned,
        fromEnter,
        fakeEvent,
        gridOptionsService: this.gridOptionsService,
        columnModel: this.columnModel
      });
      if (lastMovedInfo) {
        this.lastMovedInfo = lastMovedInfo;
      }
    };
    MoveColumnFeature2.prototype.normaliseDirection = function(hDirection) {
      if (this.gridOptionsService.get("enableRtl")) {
        switch (hDirection) {
          case HorizontalDirection.Left:
            return HorizontalDirection.Right;
          case HorizontalDirection.Right:
            return HorizontalDirection.Left;
          default:
            console.error("AG Grid: Unknown direction ".concat(hDirection));
        }
      } else {
        return hDirection;
      }
    };
    MoveColumnFeature2.prototype.ensureIntervalStarted = function() {
      if (!this.movingIntervalId) {
        this.intervalCount = 0;
        this.failedMoveAttempts = 0;
        this.movingIntervalId = window.setInterval(this.moveInterval.bind(this), 100);
        if (this.needToMoveLeft) {
          this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_LEFT, true);
        } else {
          this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_RIGHT, true);
        }
      }
    };
    MoveColumnFeature2.prototype.ensureIntervalCleared = function() {
      if (this.movingIntervalId) {
        window.clearInterval(this.movingIntervalId);
        this.movingIntervalId = null;
        this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_MOVE);
      }
    };
    MoveColumnFeature2.prototype.moveInterval = function() {
      var pixelsToMove;
      this.intervalCount++;
      pixelsToMove = 10 + this.intervalCount * 5;
      if (pixelsToMove > 100) {
        pixelsToMove = 100;
      }
      var pixelsMoved = null;
      var scrollFeature = this.gridBodyCon.getScrollFeature();
      if (this.needToMoveLeft) {
        pixelsMoved = scrollFeature.scrollHorizontally(-pixelsToMove);
      } else if (this.needToMoveRight) {
        pixelsMoved = scrollFeature.scrollHorizontally(pixelsToMove);
      }
      if (pixelsMoved !== 0) {
        this.onDragging(this.lastDraggingEvent);
        this.failedMoveAttempts = 0;
      } else {
        this.failedMoveAttempts++;
        var columns = this.lastDraggingEvent.dragItem.columns;
        var columnsThatCanPin = columns.filter(function(c) {
          return !c.getColDef().lockPinned;
        });
        if (columnsThatCanPin.length > 0) {
          this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_PINNED);
          if (this.failedMoveAttempts > 7) {
            var pinType = this.needToMoveLeft ? "left" : "right";
            this.setColumnsPinned(columnsThatCanPin, pinType, "uiColumnDragged");
            this.dragAndDropService.nudge();
          }
        }
      }
    };
    __decorate$1I([
      Autowired("columnModel")
    ], MoveColumnFeature2.prototype, "columnModel", void 0);
    __decorate$1I([
      Autowired("dragAndDropService")
    ], MoveColumnFeature2.prototype, "dragAndDropService", void 0);
    __decorate$1I([
      Autowired("gridOptionsService")
    ], MoveColumnFeature2.prototype, "gridOptionsService", void 0);
    __decorate$1I([
      Autowired("ctrlsService")
    ], MoveColumnFeature2.prototype, "ctrlsService", void 0);
    __decorate$1I([
      PostConstruct
    ], MoveColumnFeature2.prototype, "init", null);
    return MoveColumnFeature2;
  }()
);
var __extends$1M = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1H = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var BodyDropTarget = (
  /** @class */
  function(_super) {
    __extends$1M(BodyDropTarget2, _super);
    function BodyDropTarget2(pinned, eContainer) {
      var _this = _super.call(this) || this;
      _this.pinned = pinned;
      _this.eContainer = eContainer;
      return _this;
    }
    BodyDropTarget2.prototype.postConstruct = function() {
      var _this = this;
      this.ctrlsService.whenReady(function(p) {
        switch (_this.pinned) {
          case "left":
            _this.eSecondaryContainers = [
              [p.gridBodyCtrl.getBodyViewportElement(), p.leftRowContainerCtrl.getContainerElement()],
              [p.bottomLeftRowContainerCtrl.getContainerElement()],
              [p.topLeftRowContainerCtrl.getContainerElement()]
            ];
            break;
          case "right":
            _this.eSecondaryContainers = [
              [p.gridBodyCtrl.getBodyViewportElement(), p.rightRowContainerCtrl.getContainerElement()],
              [p.bottomRightRowContainerCtrl.getContainerElement()],
              [p.topRightRowContainerCtrl.getContainerElement()]
            ];
            break;
          default:
            _this.eSecondaryContainers = [
              [p.gridBodyCtrl.getBodyViewportElement(), p.centerRowContainerCtrl.getViewportElement()],
              [p.bottomCenterRowContainerCtrl.getViewportElement()],
              [p.topCenterRowContainerCtrl.getViewportElement()]
            ];
            break;
        }
      });
    };
    BodyDropTarget2.prototype.isInterestedIn = function(type) {
      return type === DragSourceType.HeaderCell || type === DragSourceType.ToolPanel && this.gridOptionsService.get("allowDragFromColumnsToolPanel");
    };
    BodyDropTarget2.prototype.getSecondaryContainers = function() {
      return this.eSecondaryContainers;
    };
    BodyDropTarget2.prototype.getContainer = function() {
      return this.eContainer;
    };
    BodyDropTarget2.prototype.init = function() {
      this.moveColumnFeature = this.createManagedBean(new MoveColumnFeature(this.pinned, this.eContainer));
      this.bodyDropPivotTarget = this.createManagedBean(new BodyDropPivotTarget(this.pinned));
      this.dragAndDropService.addDropTarget(this);
    };
    BodyDropTarget2.prototype.getIconName = function() {
      return this.currentDropListener.getIconName();
    };
    BodyDropTarget2.prototype.isDropColumnInPivotMode = function(draggingEvent) {
      return this.columnModel.isPivotMode() && draggingEvent.dragSource.type === DragSourceType.ToolPanel;
    };
    BodyDropTarget2.prototype.onDragEnter = function(draggingEvent) {
      this.currentDropListener = this.isDropColumnInPivotMode(draggingEvent) ? this.bodyDropPivotTarget : this.moveColumnFeature;
      this.currentDropListener.onDragEnter(draggingEvent);
    };
    BodyDropTarget2.prototype.onDragLeave = function(params) {
      this.currentDropListener.onDragLeave(params);
    };
    BodyDropTarget2.prototype.onDragging = function(params) {
      this.currentDropListener.onDragging(params);
    };
    BodyDropTarget2.prototype.onDragStop = function(params) {
      this.currentDropListener.onDragStop(params);
    };
    __decorate$1H([
      Autowired("dragAndDropService")
    ], BodyDropTarget2.prototype, "dragAndDropService", void 0);
    __decorate$1H([
      Autowired("columnModel")
    ], BodyDropTarget2.prototype, "columnModel", void 0);
    __decorate$1H([
      Autowired("ctrlsService")
    ], BodyDropTarget2.prototype, "ctrlsService", void 0);
    __decorate$1H([
      PostConstruct
    ], BodyDropTarget2.prototype, "postConstruct", null);
    __decorate$1H([
      PostConstruct
    ], BodyDropTarget2.prototype, "init", null);
    return BodyDropTarget2;
  }(BeanStub)
);
var __extends$1L = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1G = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HeaderCellComp = (
  /** @class */
  function(_super) {
    __extends$1L(HeaderCellComp2, _super);
    function HeaderCellComp2(ctrl) {
      var _this = _super.call(this, HeaderCellComp2.TEMPLATE, ctrl) || this;
      _this.headerCompVersion = 0;
      _this.column = ctrl.getColumnGroupChild();
      _this.pinned = ctrl.getPinned();
      return _this;
    }
    HeaderCellComp2.prototype.postConstruct = function() {
      var _this = this;
      var eGui = this.getGui();
      var setAttribute = function(name, value) {
        if (value != null && value != "") {
          eGui.setAttribute(name, value);
        } else {
          eGui.removeAttribute(name);
        }
      };
      setAttribute("col-id", this.column.getColId());
      var compProxy = {
        setWidth: function(width) {
          return eGui.style.width = width;
        },
        addOrRemoveCssClass: function(cssClassName, on) {
          return _this.addOrRemoveCssClass(cssClassName, on);
        },
        setAriaDescription: function(label) {
          return setAriaDescription(eGui, label);
        },
        setAriaSort: function(sort) {
          return sort ? setAriaSort(eGui, sort) : removeAriaSort(eGui);
        },
        setUserCompDetails: function(compDetails) {
          return _this.setUserCompDetails(compDetails);
        },
        getUserCompInstance: function() {
          return _this.headerComp;
        }
      };
      this.ctrl.setComp(compProxy, this.getGui(), this.eResize, this.eHeaderCompWrapper);
      var selectAllGui = this.ctrl.getSelectAllGui();
      this.eResize.insertAdjacentElement("afterend", selectAllGui);
    };
    HeaderCellComp2.prototype.destroyHeaderComp = function() {
      if (this.headerComp) {
        this.eHeaderCompWrapper.removeChild(this.headerCompGui);
        this.headerComp = this.destroyBean(this.headerComp);
        this.headerCompGui = void 0;
      }
    };
    HeaderCellComp2.prototype.setUserCompDetails = function(compDetails) {
      var _this = this;
      this.headerCompVersion++;
      var versionCopy = this.headerCompVersion;
      compDetails.newAgStackInstance().then(function(comp) {
        return _this.afterCompCreated(versionCopy, comp);
      });
    };
    HeaderCellComp2.prototype.afterCompCreated = function(version, headerComp) {
      if (version != this.headerCompVersion || !this.isAlive()) {
        this.destroyBean(headerComp);
        return;
      }
      this.destroyHeaderComp();
      this.headerComp = headerComp;
      this.headerCompGui = headerComp.getGui();
      this.eHeaderCompWrapper.appendChild(this.headerCompGui);
      this.ctrl.setDragSource(this.getGui());
    };
    HeaderCellComp2.TEMPLATE = '<div class="ag-header-cell" role="columnheader" tabindex="-1">\n            <div ref="eResize" class="ag-header-cell-resize" role="presentation"></div>\n            <div ref="eHeaderCompWrapper" class="ag-header-cell-comp-wrapper" role="presentation"></div>\n        </div>';
    __decorate$1G([
      RefSelector("eResize")
    ], HeaderCellComp2.prototype, "eResize", void 0);
    __decorate$1G([
      RefSelector("eHeaderCompWrapper")
    ], HeaderCellComp2.prototype, "eHeaderCompWrapper", void 0);
    __decorate$1G([
      PostConstruct
    ], HeaderCellComp2.prototype, "postConstruct", null);
    __decorate$1G([
      PreDestroy
    ], HeaderCellComp2.prototype, "destroyHeaderComp", null);
    return HeaderCellComp2;
  }(AbstractHeaderCellComp)
);
var __extends$1K = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1F = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HeaderGroupCellComp = (
  /** @class */
  function(_super) {
    __extends$1K(HeaderGroupCellComp2, _super);
    function HeaderGroupCellComp2(ctrl) {
      return _super.call(this, HeaderGroupCellComp2.TEMPLATE, ctrl) || this;
    }
    HeaderGroupCellComp2.prototype.postConstruct = function() {
      var _this = this;
      var eGui = this.getGui();
      var setAttribute = function(key, value) {
        return value != void 0 ? eGui.setAttribute(key, value) : eGui.removeAttribute(key);
      };
      eGui.setAttribute("col-id", this.ctrl.getColId());
      var compProxy = {
        addOrRemoveCssClass: function(cssClassName, on) {
          return _this.addOrRemoveCssClass(cssClassName, on);
        },
        setResizableDisplayed: function(displayed) {
          return setDisplayed(_this.eResize, displayed);
        },
        setWidth: function(width) {
          return eGui.style.width = width;
        },
        setAriaExpanded: function(expanded) {
          return setAttribute("aria-expanded", expanded);
        },
        setUserCompDetails: function(details) {
          return _this.setUserCompDetails(details);
        },
        getUserCompInstance: function() {
          return _this.headerGroupComp;
        }
      };
      this.ctrl.setComp(compProxy, eGui, this.eResize);
    };
    HeaderGroupCellComp2.prototype.setUserCompDetails = function(details) {
      var _this = this;
      details.newAgStackInstance().then(function(comp) {
        return _this.afterHeaderCompCreated(comp);
      });
    };
    HeaderGroupCellComp2.prototype.afterHeaderCompCreated = function(headerGroupComp) {
      var _this = this;
      var destroyFunc = function() {
        return _this.destroyBean(headerGroupComp);
      };
      if (!this.isAlive()) {
        destroyFunc();
        return;
      }
      var eGui = this.getGui();
      var eHeaderGroupGui = headerGroupComp.getGui();
      eGui.appendChild(eHeaderGroupGui);
      this.addDestroyFunc(destroyFunc);
      this.headerGroupComp = headerGroupComp;
      this.ctrl.setDragSource(eGui);
    };
    HeaderGroupCellComp2.TEMPLATE = '<div class="ag-header-group-cell" role="columnheader" tabindex="-1">\n            <div ref="eResize" class="ag-header-cell-resize" role="presentation"></div>\n        </div>';
    __decorate$1F([
      RefSelector("eResize")
    ], HeaderGroupCellComp2.prototype, "eResize", void 0);
    __decorate$1F([
      PostConstruct
    ], HeaderGroupCellComp2.prototype, "postConstruct", null);
    return HeaderGroupCellComp2;
  }(AbstractHeaderCellComp)
);
var __extends$1J = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1E = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HeaderRowType;
(function(HeaderRowType2) {
  HeaderRowType2["COLUMN_GROUP"] = "group";
  HeaderRowType2["COLUMN"] = "column";
  HeaderRowType2["FLOATING_FILTER"] = "filter";
})(HeaderRowType || (HeaderRowType = {}));
var HeaderRowComp = (
  /** @class */
  function(_super) {
    __extends$1J(HeaderRowComp2, _super);
    function HeaderRowComp2(ctrl) {
      var _this = _super.call(this) || this;
      _this.headerComps = {};
      _this.ctrl = ctrl;
      _this.setTemplate(
        /* html */
        '<div class="'.concat(_this.ctrl.getHeaderRowClass(), '" role="row"></div>')
      );
      return _this;
    }
    HeaderRowComp2.prototype.init = function() {
      var _this = this;
      this.getGui().style.transform = this.ctrl.getTransform();
      setAriaRowIndex(this.getGui(), this.ctrl.getAriaRowIndex());
      var compProxy = {
        setHeight: function(height) {
          return _this.getGui().style.height = height;
        },
        setTop: function(top) {
          return _this.getGui().style.top = top;
        },
        setHeaderCtrls: function(ctrls, forceOrder) {
          return _this.setHeaderCtrls(ctrls, forceOrder);
        },
        setWidth: function(width) {
          return _this.getGui().style.width = width;
        }
      };
      this.ctrl.setComp(compProxy);
    };
    HeaderRowComp2.prototype.destroyHeaderCtrls = function() {
      this.setHeaderCtrls([], false);
    };
    HeaderRowComp2.prototype.setHeaderCtrls = function(ctrls, forceOrder) {
      var _this = this;
      if (!this.isAlive()) {
        return;
      }
      var oldComps = this.headerComps;
      this.headerComps = {};
      ctrls.forEach(function(ctrl) {
        var id = ctrl.getInstanceId();
        var comp = oldComps[id];
        delete oldComps[id];
        if (comp == null) {
          comp = _this.createHeaderComp(ctrl);
          _this.getGui().appendChild(comp.getGui());
        }
        _this.headerComps[id] = comp;
      });
      iterateObject(oldComps, function(id, comp) {
        _this.getGui().removeChild(comp.getGui());
        _this.destroyBean(comp);
      });
      if (forceOrder) {
        var comps = getAllValuesInObject(this.headerComps);
        comps.sort(function(a, b) {
          var leftA = a.getCtrl().getColumnGroupChild().getLeft();
          var leftB = b.getCtrl().getColumnGroupChild().getLeft();
          return leftA - leftB;
        });
        var elementsInOrder = comps.map(function(c) {
          return c.getGui();
        });
        setDomChildOrder(this.getGui(), elementsInOrder);
      }
    };
    HeaderRowComp2.prototype.createHeaderComp = function(headerCtrl) {
      var result;
      switch (this.ctrl.getType()) {
        case HeaderRowType.COLUMN_GROUP:
          result = new HeaderGroupCellComp(headerCtrl);
          break;
        case HeaderRowType.FLOATING_FILTER:
          result = new HeaderFilterCellComp(headerCtrl);
          break;
        default:
          result = new HeaderCellComp(headerCtrl);
          break;
      }
      this.createBean(result);
      result.setParentComponent(this);
      return result;
    };
    __decorate$1E([
      PostConstruct
    ], HeaderRowComp2.prototype, "init", null);
    __decorate$1E([
      PreDestroy
    ], HeaderRowComp2.prototype, "destroyHeaderCtrls", null);
    return HeaderRowComp2;
  }(Component2)
);
var __extends$1I = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1D = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var instanceIdSequence$1 = 0;
var AbstractHeaderCellCtrl = (
  /** @class */
  function(_super) {
    __extends$1I(AbstractHeaderCellCtrl2, _super);
    function AbstractHeaderCellCtrl2(columnGroupChild, parentRowCtrl) {
      var _this = _super.call(this) || this;
      _this.resizeToggleTimeout = 0;
      _this.resizeMultiplier = 1;
      _this.resizeFeature = null;
      _this.lastFocusEvent = null;
      _this.dragSource = null;
      _this.columnGroupChild = columnGroupChild;
      _this.parentRowCtrl = parentRowCtrl;
      _this.instanceId = columnGroupChild.getUniqueId() + "-" + instanceIdSequence$1++;
      return _this;
    }
    AbstractHeaderCellCtrl2.prototype.shouldStopEventPropagation = function(e) {
      var _a = this.focusService.getFocusedHeader(), headerRowIndex = _a.headerRowIndex, column = _a.column;
      return isUserSuppressingHeaderKeyboardEvent(this.gridOptionsService, e, headerRowIndex, column);
    };
    AbstractHeaderCellCtrl2.prototype.getWrapperHasFocus = function() {
      var eDocument = this.gridOptionsService.getDocument();
      var activeEl = eDocument.activeElement;
      return activeEl === this.eGui;
    };
    AbstractHeaderCellCtrl2.prototype.setGui = function(eGui) {
      this.eGui = eGui;
      this.addDomData();
      this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
      this.onDisplayedColumnsChanged();
    };
    AbstractHeaderCellCtrl2.prototype.onDisplayedColumnsChanged = function() {
      if (!this.comp || !this.column) {
        return;
      }
      this.refreshFirstAndLastStyles();
      this.refreshAriaColIndex();
    };
    AbstractHeaderCellCtrl2.prototype.refreshFirstAndLastStyles = function() {
      var _a = this, comp = _a.comp, column = _a.column, beans = _a.beans;
      CssClassApplier.refreshFirstAndLastStyles(comp, column, beans.columnModel);
    };
    AbstractHeaderCellCtrl2.prototype.refreshAriaColIndex = function() {
      var _a = this, beans = _a.beans, column = _a.column;
      var colIdx = beans.columnModel.getAriaColumnIndex(column);
      setAriaColIndex(this.eGui, colIdx);
    };
    AbstractHeaderCellCtrl2.prototype.addResizeAndMoveKeyboardListeners = function() {
      if (!this.resizeFeature) {
        return;
      }
      this.addManagedListener(this.eGui, "keydown", this.onGuiKeyDown.bind(this));
      this.addManagedListener(this.eGui, "keyup", this.onGuiKeyUp.bind(this));
    };
    AbstractHeaderCellCtrl2.prototype.onGuiKeyDown = function(e) {
      var _a;
      var eDocument = this.gridOptionsService.getDocument();
      var activeEl = eDocument.activeElement;
      var isLeftOrRight = e.key === KeyCode.LEFT || e.key === KeyCode.RIGHT;
      if (this.isResizing) {
        e.preventDefault();
        e.stopImmediatePropagation();
      }
      if (
        // if elements within the header are focused, we don't process the event
        activeEl !== this.eGui || // if shiftKey and altKey are not pressed, it's cell navigation so we don't process the event
        !e.shiftKey && !e.altKey
      ) {
        return;
      }
      if (this.isResizing || isLeftOrRight) {
        e.preventDefault();
        e.stopImmediatePropagation();
      }
      if (!isLeftOrRight) {
        return;
      }
      var isLeft = e.key === KeyCode.LEFT !== this.gridOptionsService.get("enableRtl");
      var direction = HorizontalDirection[isLeft ? "Left" : "Right"];
      if (e.altKey) {
        this.isResizing = true;
        this.resizeMultiplier += 1;
        this.resizeHeader(direction, e.shiftKey);
        (_a = this.resizeFeature) === null || _a === void 0 ? void 0 : _a.toggleColumnResizing(true);
      } else {
        this.moveHeader(direction);
      }
    };
    AbstractHeaderCellCtrl2.prototype.onGuiKeyUp = function() {
      var _this = this;
      if (!this.isResizing) {
        return;
      }
      if (this.resizeToggleTimeout) {
        window.clearTimeout(this.resizeToggleTimeout);
        this.resizeToggleTimeout = 0;
      }
      this.isResizing = false;
      this.resizeMultiplier = 1;
      this.resizeToggleTimeout = setTimeout(function() {
        var _a;
        (_a = _this.resizeFeature) === null || _a === void 0 ? void 0 : _a.toggleColumnResizing(false);
      }, 150);
    };
    AbstractHeaderCellCtrl2.prototype.handleKeyDown = function(e) {
      var wrapperHasFocus = this.getWrapperHasFocus();
      switch (e.key) {
        case KeyCode.PAGE_DOWN:
        case KeyCode.PAGE_UP:
        case KeyCode.PAGE_HOME:
        case KeyCode.PAGE_END:
          if (wrapperHasFocus) {
            e.preventDefault();
          }
      }
    };
    AbstractHeaderCellCtrl2.prototype.addDomData = function() {
      var _this = this;
      var key = AbstractHeaderCellCtrl2.DOM_DATA_KEY_HEADER_CTRL;
      this.gridOptionsService.setDomData(this.eGui, key, this);
      this.addDestroyFunc(function() {
        return _this.gridOptionsService.setDomData(_this.eGui, key, null);
      });
    };
    AbstractHeaderCellCtrl2.prototype.getGui = function() {
      return this.eGui;
    };
    AbstractHeaderCellCtrl2.prototype.focus = function(event) {
      if (!this.eGui) {
        return false;
      }
      this.lastFocusEvent = event || null;
      this.eGui.focus();
      return true;
    };
    AbstractHeaderCellCtrl2.prototype.getRowIndex = function() {
      return this.parentRowCtrl.getRowIndex();
    };
    AbstractHeaderCellCtrl2.prototype.getParentRowCtrl = function() {
      return this.parentRowCtrl;
    };
    AbstractHeaderCellCtrl2.prototype.getPinned = function() {
      return this.parentRowCtrl.getPinned();
    };
    AbstractHeaderCellCtrl2.prototype.getInstanceId = function() {
      return this.instanceId;
    };
    AbstractHeaderCellCtrl2.prototype.getColumnGroupChild = function() {
      return this.columnGroupChild;
    };
    AbstractHeaderCellCtrl2.prototype.removeDragSource = function() {
      if (this.dragSource) {
        this.dragAndDropService.removeDragSource(this.dragSource);
        this.dragSource = null;
      }
    };
    AbstractHeaderCellCtrl2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.removeDragSource();
      this.comp = null;
      this.column = null;
      this.resizeFeature = null;
      this.lastFocusEvent = null;
      this.columnGroupChild = null;
      this.parentRowCtrl = null;
      this.eGui = null;
    };
    AbstractHeaderCellCtrl2.DOM_DATA_KEY_HEADER_CTRL = "headerCtrl";
    __decorate$1D([
      Autowired("focusService")
    ], AbstractHeaderCellCtrl2.prototype, "focusService", void 0);
    __decorate$1D([
      Autowired("beans")
    ], AbstractHeaderCellCtrl2.prototype, "beans", void 0);
    __decorate$1D([
      Autowired("userComponentFactory")
    ], AbstractHeaderCellCtrl2.prototype, "userComponentFactory", void 0);
    __decorate$1D([
      Autowired("ctrlsService")
    ], AbstractHeaderCellCtrl2.prototype, "ctrlsService", void 0);
    __decorate$1D([
      Autowired("dragAndDropService")
    ], AbstractHeaderCellCtrl2.prototype, "dragAndDropService", void 0);
    return AbstractHeaderCellCtrl2;
  }(BeanStub)
);
var __extends$1H = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1C = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SetLeftFeature = (
  /** @class */
  function(_super) {
    __extends$1H(SetLeftFeature2, _super);
    function SetLeftFeature2(columnOrGroup, eCell, beans, colsSpanning) {
      var _this = _super.call(this) || this;
      _this.columnOrGroup = columnOrGroup;
      _this.eCell = eCell;
      _this.ariaEl = _this.eCell.querySelector("[role=columnheader]") || _this.eCell;
      _this.colsSpanning = colsSpanning;
      _this.beans = beans;
      return _this;
    }
    SetLeftFeature2.prototype.setColsSpanning = function(colsSpanning) {
      this.colsSpanning = colsSpanning;
      this.onLeftChanged();
    };
    SetLeftFeature2.prototype.getColumnOrGroup = function() {
      if (this.beans.gridOptionsService.get("enableRtl") && this.colsSpanning) {
        return last(this.colsSpanning);
      }
      return this.columnOrGroup;
    };
    SetLeftFeature2.prototype.postConstruct = function() {
      this.addManagedListener(this.columnOrGroup, Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));
      this.setLeftFirstTime();
      this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onLeftChanged.bind(this));
      this.addManagedPropertyListener("domLayout", this.onLeftChanged.bind(this));
    };
    SetLeftFeature2.prototype.setLeftFirstTime = function() {
      var suppressMoveAnimation = this.beans.gridOptionsService.get("suppressColumnMoveAnimation");
      var oldLeftExists = exists(this.columnOrGroup.getOldLeft());
      var animateColumnMove = this.beans.columnAnimationService.isActive() && oldLeftExists && !suppressMoveAnimation;
      if (animateColumnMove) {
        this.animateInLeft();
      } else {
        this.onLeftChanged();
      }
    };
    SetLeftFeature2.prototype.animateInLeft = function() {
      var _this = this;
      var colOrGroup = this.getColumnOrGroup();
      var left = colOrGroup.getLeft();
      var oldLeft = colOrGroup.getOldLeft();
      var oldActualLeft = this.modifyLeftForPrintLayout(colOrGroup, oldLeft);
      var actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left);
      this.setLeft(oldActualLeft);
      this.actualLeft = actualLeft;
      this.beans.columnAnimationService.executeNextVMTurn(function() {
        if (_this.actualLeft === actualLeft) {
          _this.setLeft(actualLeft);
        }
      });
    };
    SetLeftFeature2.prototype.onLeftChanged = function() {
      var colOrGroup = this.getColumnOrGroup();
      var left = colOrGroup.getLeft();
      this.actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left);
      this.setLeft(this.actualLeft);
    };
    SetLeftFeature2.prototype.modifyLeftForPrintLayout = function(colOrGroup, leftPosition) {
      var printLayout = this.beans.gridOptionsService.isDomLayout("print");
      if (!printLayout) {
        return leftPosition;
      }
      if (colOrGroup.getPinned() === "left") {
        return leftPosition;
      }
      var leftWidth = this.beans.columnModel.getDisplayedColumnsLeftWidth();
      if (colOrGroup.getPinned() === "right") {
        var bodyWidth = this.beans.columnModel.getBodyContainerWidth();
        return leftWidth + bodyWidth + leftPosition;
      }
      return leftWidth + leftPosition;
    };
    SetLeftFeature2.prototype.setLeft = function(value) {
      if (exists(value)) {
        this.eCell.style.left = "".concat(value, "px");
      }
      if (this.columnOrGroup instanceof Column) {
        this.columnOrGroup;
      } else {
        var columnGroup = this.columnOrGroup;
        var children = columnGroup.getLeafColumns();
        if (!children.length) {
          return;
        }
        if (children.length > 1) {
          setAriaColSpan(this.ariaEl, children.length);
        }
        children[0];
      }
    };
    __decorate$1C([
      PostConstruct
    ], SetLeftFeature2.prototype, "postConstruct", null);
    return SetLeftFeature2;
  }(BeanStub)
);
var __extends$1G = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1B = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HoverFeature = (
  /** @class */
  function(_super) {
    __extends$1G(HoverFeature2, _super);
    function HoverFeature2(columns, element) {
      var _this = _super.call(this) || this;
      _this.columns = columns;
      _this.element = element;
      return _this;
    }
    HoverFeature2.prototype.postConstruct = function() {
      if (this.gridOptionsService.get("columnHoverHighlight")) {
        this.addMouseHoverListeners();
      }
    };
    HoverFeature2.prototype.addMouseHoverListeners = function() {
      this.addManagedListener(this.element, "mouseout", this.onMouseOut.bind(this));
      this.addManagedListener(this.element, "mouseover", this.onMouseOver.bind(this));
    };
    HoverFeature2.prototype.onMouseOut = function() {
      this.columnHoverService.clearMouseOver();
    };
    HoverFeature2.prototype.onMouseOver = function() {
      this.columnHoverService.setMouseOver(this.columns);
    };
    __decorate$1B([
      Autowired("columnHoverService")
    ], HoverFeature2.prototype, "columnHoverService", void 0);
    __decorate$1B([
      PostConstruct
    ], HoverFeature2.prototype, "postConstruct", null);
    return HoverFeature2;
  }(BeanStub)
);
var __extends$1F = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1A = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HeaderFilterCellCtrl = (
  /** @class */
  function(_super) {
    __extends$1F(HeaderFilterCellCtrl2, _super);
    function HeaderFilterCellCtrl2(column, parentRowCtrl) {
      var _this = _super.call(this, column, parentRowCtrl) || this;
      _this.iconCreated = false;
      _this.column = column;
      return _this;
    }
    HeaderFilterCellCtrl2.prototype.setComp = function(comp, eGui, eButtonShowMainFilter, eFloatingFilterBody) {
      this.comp = comp;
      this.eButtonShowMainFilter = eButtonShowMainFilter;
      this.eFloatingFilterBody = eFloatingFilterBody;
      this.setGui(eGui);
      this.setupActive();
      this.setupWidth();
      this.setupLeft();
      this.setupHover();
      this.setupFocus();
      this.setupAria();
      this.setupFilterButton();
      this.setupUserComp();
      this.setupSyncWithFilter();
      this.setupUi();
      this.addManagedListener(this.eButtonShowMainFilter, "click", this.showParentFilter.bind(this));
      this.setupFilterChangedListener();
      this.addManagedListener(this.column, Column.EVENT_COL_DEF_CHANGED, this.onColDefChanged.bind(this));
    };
    HeaderFilterCellCtrl2.prototype.resizeHeader = function() {
    };
    HeaderFilterCellCtrl2.prototype.moveHeader = function() {
    };
    HeaderFilterCellCtrl2.prototype.setupActive = function() {
      var colDef = this.column.getColDef();
      var filterExists = !!colDef.filter;
      var floatingFilterExists = !!colDef.floatingFilter;
      this.active = filterExists && floatingFilterExists;
    };
    HeaderFilterCellCtrl2.prototype.setupUi = function() {
      this.comp.setButtonWrapperDisplayed(!this.suppressFilterButton && this.active);
      this.comp.addOrRemoveBodyCssClass("ag-floating-filter-full-body", this.suppressFilterButton);
      this.comp.addOrRemoveBodyCssClass("ag-floating-filter-body", !this.suppressFilterButton);
      if (!this.active || this.iconCreated) {
        return;
      }
      var eMenuIcon = createIconNoSpan("filter", this.gridOptionsService, this.column);
      if (eMenuIcon) {
        this.iconCreated = true;
        this.eButtonShowMainFilter.appendChild(eMenuIcon);
      }
    };
    HeaderFilterCellCtrl2.prototype.setupFocus = function() {
      this.createManagedBean(new ManagedFocusFeature(this.eGui, {
        shouldStopEventPropagation: this.shouldStopEventPropagation.bind(this),
        onTabKeyDown: this.onTabKeyDown.bind(this),
        handleKeyDown: this.handleKeyDown.bind(this),
        onFocusIn: this.onFocusIn.bind(this)
      }));
    };
    HeaderFilterCellCtrl2.prototype.setupAria = function() {
      var localeTextFunc = this.localeService.getLocaleTextFunc();
      setAriaLabel(this.eButtonShowMainFilter, localeTextFunc("ariaFilterMenuOpen", "Open Filter Menu"));
    };
    HeaderFilterCellCtrl2.prototype.onTabKeyDown = function(e) {
      var eDocument = this.gridOptionsService.getDocument();
      var activeEl = eDocument.activeElement;
      var wrapperHasFocus = activeEl === this.eGui;
      if (wrapperHasFocus) {
        return;
      }
      var nextFocusableEl = this.focusService.findNextFocusableElement(this.eGui, null, e.shiftKey);
      if (nextFocusableEl) {
        this.beans.headerNavigationService.scrollToColumn(this.column);
        e.preventDefault();
        nextFocusableEl.focus();
        return;
      }
      var nextFocusableColumn = this.findNextColumnWithFloatingFilter(e.shiftKey);
      if (!nextFocusableColumn) {
        return;
      }
      if (this.focusService.focusHeaderPosition({
        headerPosition: {
          headerRowIndex: this.getParentRowCtrl().getRowIndex(),
          column: nextFocusableColumn
        },
        event: e
      })) {
        e.preventDefault();
      }
    };
    HeaderFilterCellCtrl2.prototype.findNextColumnWithFloatingFilter = function(backwards) {
      var columnModel = this.beans.columnModel;
      var nextCol = this.column;
      do {
        nextCol = backwards ? columnModel.getDisplayedColBefore(nextCol) : columnModel.getDisplayedColAfter(nextCol);
        if (!nextCol) {
          break;
        }
      } while (!nextCol.getColDef().filter || !nextCol.getColDef().floatingFilter);
      return nextCol;
    };
    HeaderFilterCellCtrl2.prototype.handleKeyDown = function(e) {
      _super.prototype.handleKeyDown.call(this, e);
      var wrapperHasFocus = this.getWrapperHasFocus();
      switch (e.key) {
        case KeyCode.UP:
        case KeyCode.DOWN:
          if (!wrapperHasFocus) {
            e.preventDefault();
          }
        case KeyCode.LEFT:
        case KeyCode.RIGHT:
          if (wrapperHasFocus) {
            return;
          }
          e.stopPropagation();
        case KeyCode.ENTER:
          if (wrapperHasFocus) {
            if (this.focusService.focusInto(this.eGui)) {
              e.preventDefault();
            }
          }
          break;
        case KeyCode.ESCAPE:
          if (!wrapperHasFocus) {
            this.eGui.focus();
          }
      }
    };
    HeaderFilterCellCtrl2.prototype.onFocusIn = function(e) {
      var isRelatedWithin = this.eGui.contains(e.relatedTarget);
      if (isRelatedWithin) {
        return;
      }
      var notFromHeaderWrapper = !!e.relatedTarget && !e.relatedTarget.classList.contains("ag-floating-filter");
      var fromWithinHeader = !!e.relatedTarget && isElementChildOfClass(e.relatedTarget, "ag-floating-filter");
      if (notFromHeaderWrapper && fromWithinHeader && e.target === this.eGui) {
        var lastFocusEvent = this.lastFocusEvent;
        var fromTab = !!(lastFocusEvent && lastFocusEvent.key === KeyCode.TAB);
        if (lastFocusEvent && fromTab) {
          var shouldFocusLast = lastFocusEvent.shiftKey;
          this.focusService.focusInto(this.eGui, shouldFocusLast);
        }
      }
      var rowIndex = this.getRowIndex();
      this.beans.focusService.setFocusedHeader(rowIndex, this.column);
    };
    HeaderFilterCellCtrl2.prototype.setupHover = function() {
      var _this = this;
      this.createManagedBean(new HoverFeature([this.column], this.eGui));
      var listener = function() {
        if (!_this.gridOptionsService.get("columnHoverHighlight")) {
          return;
        }
        var hovered = _this.columnHoverService.isHovered(_this.column);
        _this.comp.addOrRemoveCssClass("ag-column-hover", hovered);
      };
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, listener);
      listener();
    };
    HeaderFilterCellCtrl2.prototype.setupLeft = function() {
      var setLeftFeature = new SetLeftFeature(this.column, this.eGui, this.beans);
      this.createManagedBean(setLeftFeature);
    };
    HeaderFilterCellCtrl2.prototype.setupFilterButton = function() {
      var colDef = this.column.getColDef();
      this.suppressFilterButton = colDef.floatingFilterComponentParams ? !!colDef.floatingFilterComponentParams.suppressFilterButton : false;
    };
    HeaderFilterCellCtrl2.prototype.setupUserComp = function() {
      var _this = this;
      if (!this.active) {
        return;
      }
      var compDetails = this.filterManager.getFloatingFilterCompDetails(this.column, function() {
        return _this.showParentFilter();
      });
      if (compDetails) {
        this.setCompDetails(compDetails);
      }
    };
    HeaderFilterCellCtrl2.prototype.setCompDetails = function(compDetails) {
      this.userCompDetails = compDetails;
      this.comp.setCompDetails(compDetails);
    };
    HeaderFilterCellCtrl2.prototype.showParentFilter = function() {
      var eventSource = this.suppressFilterButton ? this.eFloatingFilterBody : this.eButtonShowMainFilter;
      this.menuFactory.showMenuAfterButtonClick(this.column, eventSource, "floatingFilter", "filterMenuTab", ["filterMenuTab"]);
    };
    HeaderFilterCellCtrl2.prototype.setupSyncWithFilter = function() {
      var _this = this;
      if (!this.active) {
        return;
      }
      var syncWithFilter = function(filterChangedEvent) {
        var compPromise = _this.comp.getFloatingFilterComp();
        if (!compPromise) {
          return;
        }
        compPromise.then(function(comp) {
          if (comp) {
            var parentModel = _this.filterManager.getCurrentFloatingFilterParentModel(_this.column);
            comp.onParentModelChanged(parentModel, filterChangedEvent);
          }
        });
      };
      this.destroySyncListener = this.addManagedListener(this.column, Column.EVENT_FILTER_CHANGED, syncWithFilter);
      if (this.filterManager.isFilterActive(this.column)) {
        syncWithFilter(null);
      }
    };
    HeaderFilterCellCtrl2.prototype.setupWidth = function() {
      var _this = this;
      var listener = function() {
        var width = "".concat(_this.column.getActualWidth(), "px");
        _this.comp.setWidth(width);
      };
      this.addManagedListener(this.column, Column.EVENT_WIDTH_CHANGED, listener);
      listener();
    };
    HeaderFilterCellCtrl2.prototype.setupFilterChangedListener = function() {
      if (this.active) {
        this.destroyFilterChangedListener = this.addManagedListener(this.column, Column.EVENT_FILTER_CHANGED, this.updateFilterButton.bind(this));
      }
    };
    HeaderFilterCellCtrl2.prototype.updateFilterButton = function() {
      if (!this.suppressFilterButton && this.comp) {
        this.comp.setButtonWrapperDisplayed(this.filterManager.isFilterAllowed(this.column));
      }
    };
    HeaderFilterCellCtrl2.prototype.onColDefChanged = function() {
      var _this = this;
      var _a, _b;
      var wasActive = this.active;
      this.setupActive();
      var becomeActive = !wasActive && this.active;
      if (wasActive && !this.active) {
        (_a = this.destroySyncListener) === null || _a === void 0 ? void 0 : _a.call(this);
        (_b = this.destroyFilterChangedListener) === null || _b === void 0 ? void 0 : _b.call(this);
      }
      var newCompDetails = this.active ? this.filterManager.getFloatingFilterCompDetails(this.column, function() {
        return _this.showParentFilter();
      }) : null;
      var compPromise = this.comp.getFloatingFilterComp();
      if (!compPromise || !newCompDetails) {
        this.updateCompDetails(newCompDetails, becomeActive);
      } else {
        compPromise.then(function(compInstance) {
          var _a2;
          if (!compInstance || _this.filterManager.areFilterCompsDifferent((_a2 = _this.userCompDetails) !== null && _a2 !== void 0 ? _a2 : null, newCompDetails)) {
            _this.updateCompDetails(newCompDetails, becomeActive);
          } else {
            _this.updateFloatingFilterParams(newCompDetails);
          }
        });
      }
    };
    HeaderFilterCellCtrl2.prototype.updateCompDetails = function(compDetails, becomeActive) {
      if (!this.isAlive()) {
        return;
      }
      this.setCompDetails(compDetails);
      this.setupFilterButton();
      this.setupUi();
      if (becomeActive) {
        this.setupSyncWithFilter();
        this.setupFilterChangedListener();
      }
    };
    HeaderFilterCellCtrl2.prototype.updateFloatingFilterParams = function(userCompDetails) {
      var _a;
      if (!userCompDetails) {
        return;
      }
      var params = userCompDetails.params;
      (_a = this.comp.getFloatingFilterComp()) === null || _a === void 0 ? void 0 : _a.then(function(floatingFilter) {
        var hasRefreshed = false;
        if ((floatingFilter === null || floatingFilter === void 0 ? void 0 : floatingFilter.refresh) && typeof floatingFilter.refresh === "function") {
          var result = floatingFilter.refresh(params);
          if (result !== null) {
            hasRefreshed = true;
          }
        }
        if (!hasRefreshed && (floatingFilter === null || floatingFilter === void 0 ? void 0 : floatingFilter.onParamsUpdated) && typeof floatingFilter.onParamsUpdated === "function") {
          floatingFilter.onParamsUpdated(params);
        }
      });
    };
    HeaderFilterCellCtrl2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.eButtonShowMainFilter = null;
      this.eFloatingFilterBody = null;
      this.userCompDetails = null;
      this.destroySyncListener = null;
      this.destroyFilterChangedListener = null;
    };
    __decorate$1A([
      Autowired("filterManager")
    ], HeaderFilterCellCtrl2.prototype, "filterManager", void 0);
    __decorate$1A([
      Autowired("columnHoverService")
    ], HeaderFilterCellCtrl2.prototype, "columnHoverService", void 0);
    __decorate$1A([
      Autowired("menuFactory")
    ], HeaderFilterCellCtrl2.prototype, "menuFactory", void 0);
    return HeaderFilterCellCtrl2;
  }(AbstractHeaderCellCtrl)
);
var __extends$1E = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1z = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ResizeFeature = (
  /** @class */
  function(_super) {
    __extends$1E(ResizeFeature2, _super);
    function ResizeFeature2(pinned, column, eResize, comp, ctrl) {
      var _this = _super.call(this) || this;
      _this.pinned = pinned;
      _this.column = column;
      _this.eResize = eResize;
      _this.comp = comp;
      _this.ctrl = ctrl;
      return _this;
    }
    ResizeFeature2.prototype.postConstruct = function() {
      var _this = this;
      var destroyResizeFuncs = [];
      var canResize;
      var canAutosize;
      var addResize = function() {
        setDisplayed(_this.eResize, canResize);
        if (!canResize) {
          return;
        }
        var finishedWithResizeFunc = _this.horizontalResizeService.addResizeBar({
          eResizeBar: _this.eResize,
          onResizeStart: _this.onResizeStart.bind(_this),
          onResizing: _this.onResizing.bind(_this, false),
          onResizeEnd: _this.onResizing.bind(_this, true)
        });
        destroyResizeFuncs.push(finishedWithResizeFunc);
        if (canAutosize) {
          var skipHeaderOnAutoSize_1 = _this.gridOptionsService.get("skipHeaderOnAutoSize");
          var autoSizeColListener_1 = function() {
            _this.columnModel.autoSizeColumn(_this.column, skipHeaderOnAutoSize_1, "uiColumnResized");
          };
          _this.eResize.addEventListener("dblclick", autoSizeColListener_1);
          var touchListener_1 = new TouchListener(_this.eResize);
          touchListener_1.addEventListener(TouchListener.EVENT_DOUBLE_TAP, autoSizeColListener_1);
          destroyResizeFuncs.push(function() {
            _this.eResize.removeEventListener("dblclick", autoSizeColListener_1);
            touchListener_1.removeEventListener(TouchListener.EVENT_DOUBLE_TAP, autoSizeColListener_1);
            touchListener_1.destroy();
          });
        }
      };
      var removeResize = function() {
        destroyResizeFuncs.forEach(function(f) {
          return f();
        });
        destroyResizeFuncs.length = 0;
      };
      var refresh = function() {
        var resize = _this.column.isResizable();
        var autoSize = !_this.gridOptionsService.get("suppressAutoSize") && !_this.column.getColDef().suppressAutoSize;
        var propertyChange = resize !== canResize || autoSize !== canAutosize;
        if (propertyChange) {
          canResize = resize;
          canAutosize = autoSize;
          removeResize();
          addResize();
        }
      };
      refresh();
      this.addDestroyFunc(removeResize);
      this.ctrl.addRefreshFunction(refresh);
    };
    ResizeFeature2.prototype.onResizing = function(finished, resizeAmount) {
      var _a = this, key = _a.column, lastResizeAmount = _a.lastResizeAmount, resizeStartWidth = _a.resizeStartWidth;
      var resizeAmountNormalised = this.normaliseResizeAmount(resizeAmount);
      var newWidth = resizeStartWidth + resizeAmountNormalised;
      var columnWidths = [{ key, newWidth }];
      if (this.column.getPinned()) {
        var leftWidth = this.pinnedWidthService.getPinnedLeftWidth();
        var rightWidth = this.pinnedWidthService.getPinnedRightWidth();
        var bodyWidth = getInnerWidth(this.ctrlsService.getGridBodyCtrl().getBodyViewportElement()) - 50;
        if (leftWidth + rightWidth + (resizeAmountNormalised - lastResizeAmount) > bodyWidth) {
          return;
        }
      }
      this.lastResizeAmount = resizeAmountNormalised;
      this.columnModel.setColumnWidths(columnWidths, this.resizeWithShiftKey, finished, "uiColumnResized");
      if (finished) {
        this.toggleColumnResizing(false);
      }
    };
    ResizeFeature2.prototype.onResizeStart = function(shiftKey) {
      this.resizeStartWidth = this.column.getActualWidth();
      this.lastResizeAmount = 0;
      this.resizeWithShiftKey = shiftKey;
      this.toggleColumnResizing(true);
    };
    ResizeFeature2.prototype.toggleColumnResizing = function(resizing) {
      this.comp.addOrRemoveCssClass("ag-column-resizing", resizing);
    };
    ResizeFeature2.prototype.normaliseResizeAmount = function(dragChange) {
      var result = dragChange;
      var notPinningLeft = this.pinned !== "left";
      var pinningRight = this.pinned === "right";
      if (this.gridOptionsService.get("enableRtl")) {
        if (notPinningLeft) {
          result *= -1;
        }
      } else {
        if (pinningRight) {
          result *= -1;
        }
      }
      return result;
    };
    __decorate$1z([
      Autowired("horizontalResizeService")
    ], ResizeFeature2.prototype, "horizontalResizeService", void 0);
    __decorate$1z([
      Autowired("pinnedWidthService")
    ], ResizeFeature2.prototype, "pinnedWidthService", void 0);
    __decorate$1z([
      Autowired("ctrlsService")
    ], ResizeFeature2.prototype, "ctrlsService", void 0);
    __decorate$1z([
      Autowired("columnModel")
    ], ResizeFeature2.prototype, "columnModel", void 0);
    __decorate$1z([
      PostConstruct
    ], ResizeFeature2.prototype, "postConstruct", null);
    return ResizeFeature2;
  }(BeanStub)
);
var __extends$1D = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1y = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SelectAllFeature = (
  /** @class */
  function(_super) {
    __extends$1D(SelectAllFeature2, _super);
    function SelectAllFeature2(column) {
      var _this = _super.call(this) || this;
      _this.cbSelectAllVisible = false;
      _this.processingEventFromCheckbox = false;
      _this.column = column;
      return _this;
    }
    SelectAllFeature2.prototype.onSpaceKeyDown = function(e) {
      var checkbox = this.cbSelectAll;
      var eDocument = this.gridOptionsService.getDocument();
      if (checkbox.isDisplayed() && !checkbox.getGui().contains(eDocument.activeElement)) {
        e.preventDefault();
        checkbox.setValue(!checkbox.getValue());
      }
    };
    SelectAllFeature2.prototype.getCheckboxGui = function() {
      return this.cbSelectAll.getGui();
    };
    SelectAllFeature2.prototype.setComp = function(ctrl) {
      this.headerCellCtrl = ctrl;
      this.cbSelectAll = this.createManagedBean(new AgCheckbox());
      this.cbSelectAll.addCssClass("ag-header-select-all");
      setAriaRole(this.cbSelectAll.getGui(), "presentation");
      this.showOrHideSelectAll();
      this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_SELECTION_CHANGED, this.onSelectionChanged.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, this.onSelectionChanged.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onModelChanged.bind(this));
      this.addManagedListener(this.cbSelectAll, Events.EVENT_FIELD_VALUE_CHANGED, this.onCbSelectAll.bind(this));
      setAriaHidden(this.cbSelectAll.getGui(), true);
      this.cbSelectAll.getInputElement().setAttribute("tabindex", "-1");
      this.refreshSelectAllLabel();
    };
    SelectAllFeature2.prototype.onNewColumnsLoaded = function() {
      this.showOrHideSelectAll();
    };
    SelectAllFeature2.prototype.onDisplayedColumnsChanged = function() {
      if (!this.isAlive()) {
        return;
      }
      this.showOrHideSelectAll();
    };
    SelectAllFeature2.prototype.showOrHideSelectAll = function() {
      this.cbSelectAllVisible = this.isCheckboxSelection();
      this.cbSelectAll.setDisplayed(this.cbSelectAllVisible, { skipAriaHidden: true });
      if (this.cbSelectAllVisible) {
        this.checkRightRowModelType("selectAllCheckbox");
        this.checkSelectionType("selectAllCheckbox");
        this.updateStateOfCheckbox();
      }
      this.refreshSelectAllLabel();
    };
    SelectAllFeature2.prototype.onModelChanged = function() {
      if (!this.cbSelectAllVisible) {
        return;
      }
      this.updateStateOfCheckbox();
    };
    SelectAllFeature2.prototype.onSelectionChanged = function() {
      if (!this.cbSelectAllVisible) {
        return;
      }
      this.updateStateOfCheckbox();
    };
    SelectAllFeature2.prototype.updateStateOfCheckbox = function() {
      if (this.processingEventFromCheckbox) {
        return;
      }
      this.processingEventFromCheckbox = true;
      var allSelected = this.selectionService.getSelectAllState(this.isFilteredOnly(), this.isCurrentPageOnly());
      this.cbSelectAll.setValue(allSelected);
      var hasNodesToSelect = this.selectionService.hasNodesToSelect(this.isFilteredOnly(), this.isCurrentPageOnly());
      this.cbSelectAll.setDisabled(!hasNodesToSelect);
      this.refreshSelectAllLabel();
      this.processingEventFromCheckbox = false;
    };
    SelectAllFeature2.prototype.refreshSelectAllLabel = function() {
      var translate = this.localeService.getLocaleTextFunc();
      var checked = this.cbSelectAll.getValue();
      var ariaStatus = checked ? translate("ariaChecked", "checked") : translate("ariaUnchecked", "unchecked");
      var ariaLabel = translate("ariaRowSelectAll", "Press Space to toggle all rows selection");
      if (!this.cbSelectAllVisible) {
        this.headerCellCtrl.setAriaDescriptionProperty("selectAll", null);
      } else {
        this.headerCellCtrl.setAriaDescriptionProperty("selectAll", "".concat(ariaLabel, " (").concat(ariaStatus, ")"));
      }
      this.cbSelectAll.setInputAriaLabel("".concat(ariaLabel, " (").concat(ariaStatus, ")"));
      this.headerCellCtrl.refreshAriaDescription();
    };
    SelectAllFeature2.prototype.checkSelectionType = function(feature) {
      var isMultiSelect = this.gridOptionsService.get("rowSelection") === "multiple";
      if (!isMultiSelect) {
        console.warn("AG Grid: ".concat(feature, " is only available if using 'multiple' rowSelection."));
        return false;
      }
      return true;
    };
    SelectAllFeature2.prototype.checkRightRowModelType = function(feature) {
      var rowModelType = this.rowModel.getType();
      var rowModelMatches = rowModelType === "clientSide" || rowModelType === "serverSide";
      if (!rowModelMatches) {
        console.warn("AG Grid: ".concat(feature, " is only available if using 'clientSide' or 'serverSide' rowModelType, you are using ").concat(rowModelType, "."));
        return false;
      }
      return true;
    };
    SelectAllFeature2.prototype.onCbSelectAll = function() {
      if (this.processingEventFromCheckbox) {
        return;
      }
      if (!this.cbSelectAllVisible) {
        return;
      }
      var value = this.cbSelectAll.getValue();
      var justFiltered = this.isFilteredOnly();
      var justCurrentPage = this.isCurrentPageOnly();
      var source = "uiSelectAll";
      if (justCurrentPage) {
        source = "uiSelectAllCurrentPage";
      } else if (justFiltered) {
        source = "uiSelectAllFiltered";
      }
      var params = {
        source,
        justFiltered,
        justCurrentPage
      };
      if (value) {
        this.selectionService.selectAllRowNodes(params);
      } else {
        this.selectionService.deselectAllRowNodes(params);
      }
    };
    SelectAllFeature2.prototype.isCheckboxSelection = function() {
      var result = this.column.getColDef().headerCheckboxSelection;
      if (typeof result === "function") {
        var func = result;
        var params = this.gridOptionsService.addGridCommonParams({
          column: this.column,
          colDef: this.column.getColDef()
        });
        result = func(params);
      }
      if (result) {
        return this.checkRightRowModelType("headerCheckboxSelection") && this.checkSelectionType("headerCheckboxSelection");
      }
      return false;
    };
    SelectAllFeature2.prototype.isFilteredOnly = function() {
      return !!this.column.getColDef().headerCheckboxSelectionFilteredOnly;
    };
    SelectAllFeature2.prototype.isCurrentPageOnly = function() {
      return !!this.column.getColDef().headerCheckboxSelectionCurrentPageOnly;
    };
    __decorate$1y([
      Autowired("rowModel")
    ], SelectAllFeature2.prototype, "rowModel", void 0);
    __decorate$1y([
      Autowired("selectionService")
    ], SelectAllFeature2.prototype, "selectionService", void 0);
    return SelectAllFeature2;
  }(BeanStub)
);
var __extends$1C = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1x = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HeaderCellCtrl = (
  /** @class */
  function(_super) {
    __extends$1C(HeaderCellCtrl2, _super);
    function HeaderCellCtrl2(column, parentRowCtrl) {
      var _this = _super.call(this, column, parentRowCtrl) || this;
      _this.refreshFunctions = [];
      _this.userHeaderClasses = /* @__PURE__ */ new Set();
      _this.ariaDescriptionProperties = /* @__PURE__ */ new Map();
      _this.column = column;
      return _this;
    }
    HeaderCellCtrl2.prototype.setComp = function(comp, eGui, eResize, eHeaderCompWrapper) {
      var _this = this;
      this.comp = comp;
      this.setGui(eGui);
      this.updateState();
      this.setupWidth();
      this.setupMovingCss();
      this.setupMenuClass();
      this.setupSortableClass();
      this.setupWrapTextClass();
      this.refreshSpanHeaderHeight();
      this.setupAutoHeight(eHeaderCompWrapper);
      this.addColumnHoverListener();
      this.setupFilterClass();
      this.setupClassesFromColDef();
      this.setupTooltip();
      this.addActiveHeaderMouseListeners();
      this.setupSelectAll();
      this.setupUserComp();
      this.refreshAria();
      this.resizeFeature = this.createManagedBean(new ResizeFeature(this.getPinned(), this.column, eResize, comp, this));
      this.createManagedBean(new HoverFeature([this.column], eGui));
      this.createManagedBean(new SetLeftFeature(this.column, eGui, this.beans));
      this.createManagedBean(new ManagedFocusFeature(eGui, {
        shouldStopEventPropagation: function(e) {
          return _this.shouldStopEventPropagation(e);
        },
        onTabKeyDown: function() {
          return null;
        },
        handleKeyDown: this.handleKeyDown.bind(this),
        onFocusIn: this.onFocusIn.bind(this),
        onFocusOut: this.onFocusOut.bind(this)
      }));
      this.addResizeAndMoveKeyboardListeners();
      this.addManagedPropertyListeners(["suppressMovableColumns", "suppressMenuHide", "suppressAggFuncInHeader"], this.refresh.bind(this));
      this.addManagedListener(this.column, Column.EVENT_COL_DEF_CHANGED, this.refresh.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.onColumnValueChanged.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onColumnRowGroupChanged.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, this.onColumnPivotChanged.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_HEADER_HEIGHT_CHANGED, this.onHeaderHeightChanged.bind(this));
    };
    HeaderCellCtrl2.prototype.resizeHeader = function(direction, shiftKey) {
      var _a, _b;
      if (!this.column.isResizable()) {
        return;
      }
      var pinned = this.column.getPinned();
      var isRtl = this.gridOptionsService.get("enableRtl");
      var actualWidth = this.column.getActualWidth();
      var minWidth = (_a = this.column.getMinWidth()) !== null && _a !== void 0 ? _a : 0;
      var maxWidth = (_b = this.column.getMaxWidth()) !== null && _b !== void 0 ? _b : Number.MAX_SAFE_INTEGER;
      var isLeft = direction === HorizontalDirection.Left;
      if (pinned) {
        if (isRtl !== (pinned === "right")) {
          isLeft = !isLeft;
        }
      }
      var diff = (isLeft ? -1 : 1) * this.resizeMultiplier;
      var newWidth = Math.min(Math.max(actualWidth + diff, minWidth), maxWidth);
      if (pinned) {
        var leftWidth = this.pinnedWidthService.getPinnedLeftWidth();
        var rightWidth = this.pinnedWidthService.getPinnedRightWidth();
        var bodyWidth = getInnerWidth(this.ctrlsService.getGridBodyCtrl().getBodyViewportElement()) - 50;
        if (leftWidth + rightWidth + diff > bodyWidth) {
          return;
        }
      }
      this.columnModel.setColumnWidths([{ key: this.column, newWidth }], shiftKey, true);
    };
    HeaderCellCtrl2.prototype.moveHeader = function(hDirection) {
      var _a = this, eGui = _a.eGui, column = _a.column, columnModel = _a.columnModel, gridOptionsService = _a.gridOptionsService, ctrlsService = _a.ctrlsService;
      var pinned = this.getPinned();
      var left = eGui.getBoundingClientRect().left;
      var width = column.getActualWidth();
      var isRtl = gridOptionsService.get("enableRtl");
      var isLeft = hDirection === HorizontalDirection.Left !== isRtl;
      var xPosition = ColumnMoveHelper.normaliseX(isLeft ? left - 20 : left + width + 20, pinned, true, gridOptionsService, ctrlsService);
      ColumnMoveHelper.attemptMoveColumns({
        allMovingColumns: [column],
        isFromHeader: true,
        hDirection,
        xPosition,
        pinned,
        fromEnter: false,
        fakeEvent: false,
        gridOptionsService,
        columnModel
      });
      ctrlsService.getGridBodyCtrl().getScrollFeature().ensureColumnVisible(column, "auto");
    };
    HeaderCellCtrl2.prototype.setupUserComp = function() {
      var compDetails = this.lookupUserCompDetails();
      this.setCompDetails(compDetails);
    };
    HeaderCellCtrl2.prototype.setCompDetails = function(compDetails) {
      this.userCompDetails = compDetails;
      this.comp.setUserCompDetails(compDetails);
    };
    HeaderCellCtrl2.prototype.lookupUserCompDetails = function() {
      var params = this.createParams();
      var colDef = this.column.getColDef();
      return this.userComponentFactory.getHeaderCompDetails(colDef, params);
    };
    HeaderCellCtrl2.prototype.createParams = function() {
      var _this = this;
      var params = this.gridOptionsService.addGridCommonParams({
        column: this.column,
        displayName: this.displayName,
        enableSorting: this.column.isSortable(),
        enableMenu: this.menuEnabled,
        showColumnMenu: function(source) {
          _this.gridApi.showColumnMenuAfterButtonClick(_this.column, source);
        },
        progressSort: function(multiSort) {
          _this.sortController.progressSort(_this.column, !!multiSort, "uiColumnSorted");
        },
        setSort: function(sort, multiSort) {
          _this.sortController.setSortForColumn(_this.column, sort, !!multiSort, "uiColumnSorted");
        },
        eGridHeader: this.getGui()
      });
      return params;
    };
    HeaderCellCtrl2.prototype.setupSelectAll = function() {
      this.selectAllFeature = this.createManagedBean(new SelectAllFeature(this.column));
      this.selectAllFeature.setComp(this);
    };
    HeaderCellCtrl2.prototype.getSelectAllGui = function() {
      return this.selectAllFeature.getCheckboxGui();
    };
    HeaderCellCtrl2.prototype.handleKeyDown = function(e) {
      _super.prototype.handleKeyDown.call(this, e);
      if (e.key === KeyCode.SPACE) {
        this.selectAllFeature.onSpaceKeyDown(e);
      }
      if (e.key === KeyCode.ENTER) {
        this.onEnterKeyDown(e);
      }
    };
    HeaderCellCtrl2.prototype.onEnterKeyDown = function(e) {
      var headerComp = this.comp.getUserCompInstance();
      if (!headerComp) {
        return;
      }
      if (e.ctrlKey || e.metaKey) {
        if (this.menuEnabled && headerComp.showMenu) {
          e.preventDefault();
          headerComp.showMenu();
        }
      } else if (this.sortable) {
        var multiSort = e.shiftKey;
        this.sortController.progressSort(this.column, multiSort, "uiColumnSorted");
      }
    };
    HeaderCellCtrl2.prototype.isMenuEnabled = function() {
      return this.menuEnabled;
    };
    HeaderCellCtrl2.prototype.onFocusIn = function(e) {
      if (!this.getGui().contains(e.relatedTarget)) {
        var rowIndex = this.getRowIndex();
        this.focusService.setFocusedHeader(rowIndex, this.column);
      }
      this.setActiveHeader(true);
    };
    HeaderCellCtrl2.prototype.onFocusOut = function(e) {
      if (this.getGui().contains(e.relatedTarget)) {
        return;
      }
      this.setActiveHeader(false);
    };
    HeaderCellCtrl2.prototype.setupTooltip = function() {
      var _this = this;
      var tooltipCtrl = {
        getColumn: function() {
          return _this.column;
        },
        getColDef: function() {
          return _this.column.getColDef();
        },
        getGui: function() {
          return _this.eGui;
        },
        getLocation: function() {
          return "header";
        },
        getTooltipValue: function() {
          var res = _this.column.getColDef().headerTooltip;
          return res;
        }
      };
      var tooltipFeature = this.createManagedBean(new TooltipFeature(tooltipCtrl, this.beans));
      tooltipFeature.setComp(this.eGui);
      this.refreshFunctions.push(function() {
        return tooltipFeature.refreshToolTip();
      });
    };
    HeaderCellCtrl2.prototype.setupClassesFromColDef = function() {
      var _this = this;
      var refreshHeaderClasses = function() {
        var colDef = _this.column.getColDef();
        var classes = CssClassApplier.getHeaderClassesFromColDef(colDef, _this.gridOptionsService, _this.column, null);
        var oldClasses = _this.userHeaderClasses;
        _this.userHeaderClasses = new Set(classes);
        classes.forEach(function(c) {
          if (oldClasses.has(c)) {
            oldClasses.delete(c);
          } else {
            _this.comp.addOrRemoveCssClass(c, true);
          }
        });
        oldClasses.forEach(function(c) {
          return _this.comp.addOrRemoveCssClass(c, false);
        });
      };
      this.refreshFunctions.push(refreshHeaderClasses);
      refreshHeaderClasses();
    };
    HeaderCellCtrl2.prototype.setDragSource = function(eSource) {
      var _this = this;
      this.dragSourceElement = eSource;
      this.removeDragSource();
      if (!eSource || !this.draggable) {
        return;
      }
      var _a = this, column = _a.column, columnModel = _a.columnModel, displayName = _a.displayName, dragAndDropService = _a.dragAndDropService, gridOptionsService = _a.gridOptionsService;
      var hideColumnOnExit = !this.gridOptionsService.get("suppressDragLeaveHidesColumns");
      var dragSource = this.dragSource = {
        type: DragSourceType.HeaderCell,
        eElement: eSource,
        getDefaultIconName: function() {
          return hideColumnOnExit ? DragAndDropService.ICON_HIDE : DragAndDropService.ICON_NOT_ALLOWED;
        },
        getDragItem: function() {
          return _this.createDragItem(column);
        },
        dragItemName: displayName,
        onDragStarted: function() {
          hideColumnOnExit = !gridOptionsService.get("suppressDragLeaveHidesColumns");
          column.setMoving(true, "uiColumnMoved");
        },
        onDragStopped: function() {
          return column.setMoving(false, "uiColumnMoved");
        },
        onGridEnter: function(dragItem) {
          var _a2;
          if (hideColumnOnExit) {
            var unlockedColumns = ((_a2 = dragItem === null || dragItem === void 0 ? void 0 : dragItem.columns) === null || _a2 === void 0 ? void 0 : _a2.filter(function(col) {
              return !col.getColDef().lockVisible;
            })) || [];
            columnModel.setColumnsVisible(unlockedColumns, true, "uiColumnMoved");
          }
        },
        onGridExit: function(dragItem) {
          var _a2;
          if (hideColumnOnExit) {
            var unlockedColumns = ((_a2 = dragItem === null || dragItem === void 0 ? void 0 : dragItem.columns) === null || _a2 === void 0 ? void 0 : _a2.filter(function(col) {
              return !col.getColDef().lockVisible;
            })) || [];
            columnModel.setColumnsVisible(unlockedColumns, false, "uiColumnMoved");
          }
        }
      };
      dragAndDropService.addDragSource(dragSource, true);
    };
    HeaderCellCtrl2.prototype.createDragItem = function(column) {
      var visibleState = {};
      visibleState[column.getId()] = column.isVisible();
      return {
        columns: [column],
        visibleState
      };
    };
    HeaderCellCtrl2.prototype.updateState = function() {
      var colDef = this.column.getColDef();
      this.menuEnabled = this.menuFactory.isMenuEnabled(this.column) && !colDef.suppressMenu;
      this.sortable = this.column.isSortable();
      this.displayName = this.calculateDisplayName();
      this.draggable = this.workOutDraggable();
    };
    HeaderCellCtrl2.prototype.addRefreshFunction = function(func) {
      this.refreshFunctions.push(func);
    };
    HeaderCellCtrl2.prototype.refresh = function() {
      this.updateState();
      this.refreshHeaderComp();
      this.refreshAria();
      this.refreshFunctions.forEach(function(f) {
        return f();
      });
    };
    HeaderCellCtrl2.prototype.refreshHeaderComp = function() {
      var newCompDetails = this.lookupUserCompDetails();
      var compInstance = this.comp.getUserCompInstance();
      var attemptRefresh = compInstance != null && this.userCompDetails.componentClass == newCompDetails.componentClass;
      var headerCompRefreshed = attemptRefresh ? this.attemptHeaderCompRefresh(newCompDetails.params) : false;
      if (headerCompRefreshed) {
        this.setDragSource(this.dragSourceElement);
      } else {
        this.setCompDetails(newCompDetails);
      }
    };
    HeaderCellCtrl2.prototype.attemptHeaderCompRefresh = function(params) {
      var headerComp = this.comp.getUserCompInstance();
      if (!headerComp) {
        return false;
      }
      if (!headerComp.refresh) {
        return false;
      }
      var res = headerComp.refresh(params);
      return res;
    };
    HeaderCellCtrl2.prototype.calculateDisplayName = function() {
      return this.columnModel.getDisplayNameForColumn(this.column, "header", true);
    };
    HeaderCellCtrl2.prototype.checkDisplayName = function() {
      if (this.displayName !== this.calculateDisplayName()) {
        this.refresh();
      }
    };
    HeaderCellCtrl2.prototype.workOutDraggable = function() {
      var colDef = this.column.getColDef();
      var isSuppressMovableColumns = this.gridOptionsService.get("suppressMovableColumns");
      var colCanMove = !isSuppressMovableColumns && !colDef.suppressMovable && !colDef.lockPosition;
      return !!colCanMove || !!colDef.enableRowGroup || !!colDef.enablePivot;
    };
    HeaderCellCtrl2.prototype.onColumnRowGroupChanged = function() {
      this.checkDisplayName();
    };
    HeaderCellCtrl2.prototype.onColumnPivotChanged = function() {
      this.checkDisplayName();
    };
    HeaderCellCtrl2.prototype.onColumnValueChanged = function() {
      this.checkDisplayName();
    };
    HeaderCellCtrl2.prototype.setupWidth = function() {
      var _this = this;
      var listener = function() {
        var columnWidth = _this.column.getActualWidth();
        _this.comp.setWidth("".concat(columnWidth, "px"));
      };
      this.addManagedListener(this.column, Column.EVENT_WIDTH_CHANGED, listener);
      listener();
    };
    HeaderCellCtrl2.prototype.setupMovingCss = function() {
      var _this = this;
      var listener = function() {
        _this.comp.addOrRemoveCssClass("ag-header-cell-moving", _this.column.isMoving());
      };
      this.addManagedListener(this.column, Column.EVENT_MOVING_CHANGED, listener);
      listener();
    };
    HeaderCellCtrl2.prototype.setupMenuClass = function() {
      var _this = this;
      var listener = function() {
        _this.comp.addOrRemoveCssClass("ag-column-menu-visible", _this.column.isMenuVisible());
      };
      this.addManagedListener(this.column, Column.EVENT_MENU_VISIBLE_CHANGED, listener);
      listener();
    };
    HeaderCellCtrl2.prototype.setupSortableClass = function() {
      var _this = this;
      var updateSortableCssClass = function() {
        _this.comp.addOrRemoveCssClass("ag-header-cell-sortable", !!_this.sortable);
      };
      updateSortableCssClass();
      this.addRefreshFunction(updateSortableCssClass);
      this.addManagedListener(this.eventService, Column.EVENT_SORT_CHANGED, this.refreshAriaSort.bind(this));
    };
    HeaderCellCtrl2.prototype.setupFilterClass = function() {
      var _this = this;
      var listener = function() {
        var isFilterActive = _this.column.isFilterActive();
        _this.comp.addOrRemoveCssClass("ag-header-cell-filtered", isFilterActive);
        _this.refreshAria();
      };
      this.addManagedListener(this.column, Column.EVENT_FILTER_ACTIVE_CHANGED, listener);
      listener();
    };
    HeaderCellCtrl2.prototype.setupWrapTextClass = function() {
      var _this = this;
      var listener = function() {
        var wrapText = !!_this.column.getColDef().wrapHeaderText;
        _this.comp.addOrRemoveCssClass("ag-header-cell-wrap-text", wrapText);
      };
      listener();
      this.addRefreshFunction(listener);
    };
    HeaderCellCtrl2.prototype.onDisplayedColumnsChanged = function() {
      _super.prototype.onDisplayedColumnsChanged.call(this);
      if (!this.isAlive()) {
        return;
      }
      this.onHeaderHeightChanged();
    };
    HeaderCellCtrl2.prototype.onHeaderHeightChanged = function() {
      this.refreshSpanHeaderHeight();
    };
    HeaderCellCtrl2.prototype.refreshSpanHeaderHeight = function() {
      var _a = this, eGui = _a.eGui, column = _a.column, comp = _a.comp, columnModel = _a.columnModel;
      _a.gridOptionsService;
      if (!column.isSpanHeaderHeight()) {
        eGui.style.removeProperty("top");
        eGui.style.removeProperty("height");
        comp.addOrRemoveCssClass("ag-header-span-height", false);
        comp.addOrRemoveCssClass("ag-header-span-total", false);
        return;
      }
      var _b = this.getColumnGroupPaddingInfo(), numberOfParents = _b.numberOfParents, isSpanningTotal = _b.isSpanningTotal;
      comp.addOrRemoveCssClass("ag-header-span-height", numberOfParents > 0);
      var headerHeight = columnModel.getColumnHeaderRowHeight();
      if (numberOfParents === 0) {
        comp.addOrRemoveCssClass("ag-header-span-total", false);
        eGui.style.setProperty("top", "0px");
        eGui.style.setProperty("height", "".concat(headerHeight, "px"));
        return;
      }
      comp.addOrRemoveCssClass("ag-header-span-total", isSpanningTotal);
      var pivotMode = columnModel.isPivotMode();
      var groupHeaderHeight = pivotMode ? columnModel.getPivotGroupHeaderHeight() : columnModel.getGroupHeaderHeight();
      var extraHeight = numberOfParents * groupHeaderHeight;
      eGui.style.setProperty("top", "".concat(-extraHeight, "px"));
      eGui.style.setProperty("height", "".concat(headerHeight + extraHeight, "px"));
    };
    HeaderCellCtrl2.prototype.getColumnGroupPaddingInfo = function() {
      var parent = this.column.getParent();
      if (!parent || !parent.isPadding()) {
        return { numberOfParents: 0, isSpanningTotal: false };
      }
      var numberOfParents = parent.getPaddingLevel() + 1;
      var isSpanningTotal = true;
      while (parent) {
        if (!parent.isPadding()) {
          isSpanningTotal = false;
          break;
        }
        parent = parent.getParent();
      }
      return { numberOfParents, isSpanningTotal };
    };
    HeaderCellCtrl2.prototype.setupAutoHeight = function(wrapperElement) {
      var _this = this;
      var measureHeight = function(timesCalled) {
        if (!_this.isAlive()) {
          return;
        }
        var _a = getElementSize(_this.getGui()), paddingTop = _a.paddingTop, paddingBottom = _a.paddingBottom, borderBottomWidth = _a.borderBottomWidth, borderTopWidth = _a.borderTopWidth;
        var extraHeight = paddingTop + paddingBottom + borderBottomWidth + borderTopWidth;
        var wrapperHeight = wrapperElement.offsetHeight;
        var autoHeight = wrapperHeight + extraHeight;
        if (timesCalled < 5) {
          var doc = _this.beans.gridOptionsService.getDocument();
          var notYetInDom = !doc || !doc.contains(wrapperElement);
          var possiblyNoContentYet = autoHeight == 0;
          if (notYetInDom || possiblyNoContentYet) {
            window.setTimeout(function() {
              return measureHeight(timesCalled + 1);
            }, 0);
            return;
          }
        }
        _this.columnModel.setColumnHeaderHeight(_this.column, autoHeight);
      };
      var isMeasuring = false;
      var stopResizeObserver;
      var checkMeasuring = function() {
        var newValue = _this.column.isAutoHeaderHeight();
        if (newValue && !isMeasuring) {
          startMeasuring();
        }
        if (!newValue && isMeasuring) {
          stopMeasuring();
        }
      };
      var startMeasuring = function() {
        isMeasuring = true;
        measureHeight(0);
        _this.comp.addOrRemoveCssClass("ag-header-cell-auto-height", true);
        stopResizeObserver = _this.resizeObserverService.observeResize(wrapperElement, function() {
          return measureHeight(0);
        });
      };
      var stopMeasuring = function() {
        isMeasuring = false;
        if (stopResizeObserver) {
          stopResizeObserver();
        }
        _this.comp.addOrRemoveCssClass("ag-header-cell-auto-height", false);
        stopResizeObserver = void 0;
      };
      checkMeasuring();
      this.addDestroyFunc(function() {
        return stopMeasuring();
      });
      this.addManagedListener(this.column, Column.EVENT_WIDTH_CHANGED, function() {
        return isMeasuring && measureHeight(0);
      });
      this.addManagedListener(this.eventService, Column.EVENT_SORT_CHANGED, function() {
        if (isMeasuring) {
          window.setTimeout(function() {
            return measureHeight(0);
          });
        }
      });
      this.addRefreshFunction(checkMeasuring);
    };
    HeaderCellCtrl2.prototype.refreshAriaSort = function() {
      if (this.sortable) {
        var translate = this.localeService.getLocaleTextFunc();
        var sort = this.sortController.getDisplaySortForColumn(this.column) || null;
        this.comp.setAriaSort(getAriaSortState(sort));
        this.setAriaDescriptionProperty("sort", translate("ariaSortableColumn", "Press ENTER to sort"));
      } else {
        this.comp.setAriaSort();
        this.setAriaDescriptionProperty("sort", null);
      }
    };
    HeaderCellCtrl2.prototype.refreshAriaMenu = function() {
      if (this.menuEnabled) {
        var translate = this.localeService.getLocaleTextFunc();
        this.setAriaDescriptionProperty("menu", translate("ariaMenuColumn", "Press CTRL ENTER to open column menu"));
      } else {
        this.setAriaDescriptionProperty("menu", null);
      }
    };
    HeaderCellCtrl2.prototype.refreshAriaFiltered = function() {
      var translate = this.localeService.getLocaleTextFunc();
      var isFilterActive = this.column.isFilterActive();
      if (isFilterActive) {
        this.setAriaDescriptionProperty("filter", translate("ariaColumnFiltered", "Column Filtered"));
      } else {
        this.setAriaDescriptionProperty("filter", null);
      }
    };
    HeaderCellCtrl2.prototype.setAriaDescriptionProperty = function(property, value) {
      if (value != null) {
        this.ariaDescriptionProperties.set(property, value);
      } else {
        this.ariaDescriptionProperties.delete(property);
      }
    };
    HeaderCellCtrl2.prototype.refreshAriaDescription = function() {
      var _this = this;
      var ariaDescription = Array.from(this.ariaDescriptionProperties.keys()).sort(function(a, b) {
        return a === "filter" ? -1 : b.charCodeAt(0) - a.charCodeAt(0);
      }).map(function(key) {
        return _this.ariaDescriptionProperties.get(key);
      }).join(". ");
      this.comp.setAriaDescription(ariaDescription !== null && ariaDescription !== void 0 ? ariaDescription : void 0);
    };
    HeaderCellCtrl2.prototype.refreshAria = function() {
      this.refreshAriaSort();
      this.refreshAriaMenu();
      this.refreshAriaFiltered();
      this.refreshAriaDescription();
    };
    HeaderCellCtrl2.prototype.addColumnHoverListener = function() {
      var _this = this;
      var listener = function() {
        if (!_this.gridOptionsService.get("columnHoverHighlight")) {
          return;
        }
        var isHovered = _this.columnHoverService.isHovered(_this.column);
        _this.comp.addOrRemoveCssClass("ag-column-hover", isHovered);
      };
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, listener);
      listener();
    };
    HeaderCellCtrl2.prototype.getColId = function() {
      return this.column.getColId();
    };
    HeaderCellCtrl2.prototype.addActiveHeaderMouseListeners = function() {
      var _this = this;
      var listener = function(e) {
        return _this.handleMouseOverChange(e.type === "mouseenter");
      };
      var clickListener = function(event) {
        return _this.handleColumnClick(event, false);
      };
      var contextMenuListener = function(event) {
        return _this.handleColumnClick(event, true);
      };
      this.addManagedListener(this.getGui(), "mouseenter", listener);
      this.addManagedListener(this.getGui(), "mouseleave", listener);
      this.addManagedListener(this.getGui(), "click", clickListener);
      this.addManagedListener(this.getGui(), "contextmenu", contextMenuListener);
    };
    HeaderCellCtrl2.prototype.handleMouseOverChange = function(isMouseOver) {
      this.setActiveHeader(isMouseOver);
      var eventType = isMouseOver ? Events.EVENT_COLUMN_HEADER_MOUSE_OVER : Events.EVENT_COLUMN_HEADER_MOUSE_LEAVE;
      var event = {
        type: eventType,
        column: this.column
      };
      this.eventService.dispatchEvent(event);
    };
    HeaderCellCtrl2.prototype.handleColumnClick = function(mouseEvent, isContextMenuEvent) {
      var eventType = isContextMenuEvent ? Events.EVENT_COLUMN_HEADER_CONTEXT_MENU : Events.EVENT_COLUMN_HEADER_CLICKED;
      if (isContextMenuEvent && this.gridOptionsService.get("preventDefaultOnContextMenu")) {
        mouseEvent.preventDefault();
      }
      var event = {
        type: eventType,
        column: this.column
      };
      this.eventService.dispatchEvent(event);
    };
    HeaderCellCtrl2.prototype.setActiveHeader = function(active) {
      this.comp.addOrRemoveCssClass("ag-header-active", active);
    };
    HeaderCellCtrl2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.refreshFunctions = null;
      this.selectAllFeature = null;
      this.dragSourceElement = null;
      this.userCompDetails = null;
      this.userHeaderClasses = null;
      this.ariaDescriptionProperties = null;
    };
    __decorate$1x([
      Autowired("columnModel")
    ], HeaderCellCtrl2.prototype, "columnModel", void 0);
    __decorate$1x([
      Autowired("pinnedWidthService")
    ], HeaderCellCtrl2.prototype, "pinnedWidthService", void 0);
    __decorate$1x([
      Autowired("columnHoverService")
    ], HeaderCellCtrl2.prototype, "columnHoverService", void 0);
    __decorate$1x([
      Autowired("sortController")
    ], HeaderCellCtrl2.prototype, "sortController", void 0);
    __decorate$1x([
      Autowired("menuFactory")
    ], HeaderCellCtrl2.prototype, "menuFactory", void 0);
    __decorate$1x([
      Autowired("resizeObserverService")
    ], HeaderCellCtrl2.prototype, "resizeObserverService", void 0);
    __decorate$1x([
      Autowired("gridApi")
    ], HeaderCellCtrl2.prototype, "gridApi", void 0);
    return HeaderCellCtrl2;
  }(AbstractHeaderCellCtrl)
);
var __extends$1B = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1w = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var GroupResizeFeature = (
  /** @class */
  function(_super) {
    __extends$1B(GroupResizeFeature2, _super);
    function GroupResizeFeature2(comp, eResize, pinned, columnGroup) {
      var _this = _super.call(this) || this;
      _this.eResize = eResize;
      _this.comp = comp;
      _this.pinned = pinned;
      _this.columnGroup = columnGroup;
      return _this;
    }
    GroupResizeFeature2.prototype.postConstruct = function() {
      var _this = this;
      if (!this.columnGroup.isResizable()) {
        this.comp.setResizableDisplayed(false);
        return;
      }
      var finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({
        eResizeBar: this.eResize,
        onResizeStart: this.onResizeStart.bind(this),
        onResizing: this.onResizing.bind(this, false),
        onResizeEnd: this.onResizing.bind(this, true)
      });
      this.addDestroyFunc(finishedWithResizeFunc);
      if (!this.gridOptionsService.get("suppressAutoSize")) {
        var skipHeaderOnAutoSize_1 = this.gridOptionsService.get("skipHeaderOnAutoSize");
        this.eResize.addEventListener("dblclick", function() {
          var keys2 = [];
          var leafCols = _this.columnGroup.getDisplayedLeafColumns();
          leafCols.forEach(function(column) {
            if (!column.getColDef().suppressAutoSize) {
              keys2.push(column.getColId());
            }
          });
          if (keys2.length > 0) {
            _this.columnModel.autoSizeColumns({
              columns: keys2,
              skipHeader: skipHeaderOnAutoSize_1,
              stopAtGroup: _this.columnGroup,
              source: "uiColumnResized"
            });
          }
          _this.resizeLeafColumnsToFit("uiColumnResized");
        });
      }
    };
    GroupResizeFeature2.prototype.onResizeStart = function(shiftKey) {
      var initialValues = this.getInitialValues(shiftKey);
      this.storeLocalValues(initialValues);
      this.toggleColumnResizing(true);
    };
    GroupResizeFeature2.prototype.onResizing = function(finished, resizeAmount, source) {
      if (source === void 0) {
        source = "uiColumnResized";
      }
      var resizeAmountNormalised = this.normaliseDragChange(resizeAmount);
      var width = this.resizeStartWidth + resizeAmountNormalised;
      this.resizeColumnsFromLocalValues(width, source, finished);
    };
    GroupResizeFeature2.prototype.getInitialValues = function(shiftKey) {
      var columnsToResize = this.getColumnsToResize();
      var resizeStartWidth = this.getInitialSizeOfColumns(columnsToResize);
      var resizeRatios = this.getSizeRatiosOfColumns(columnsToResize, resizeStartWidth);
      var columnSizeAndRatios = {
        columnsToResize,
        resizeStartWidth,
        resizeRatios
      };
      var groupAfter = null;
      if (shiftKey) {
        groupAfter = this.columnModel.getDisplayedGroupAfter(this.columnGroup);
      }
      if (groupAfter) {
        var takeFromLeafCols = groupAfter.getDisplayedLeafColumns();
        var groupAfterColumns = columnSizeAndRatios.groupAfterColumns = takeFromLeafCols.filter(function(col) {
          return col.isResizable();
        });
        var groupAfterStartWidth = columnSizeAndRatios.groupAfterStartWidth = this.getInitialSizeOfColumns(groupAfterColumns);
        columnSizeAndRatios.groupAfterRatios = this.getSizeRatiosOfColumns(groupAfterColumns, groupAfterStartWidth);
      } else {
        columnSizeAndRatios.groupAfterColumns = void 0;
        columnSizeAndRatios.groupAfterStartWidth = void 0;
        columnSizeAndRatios.groupAfterRatios = void 0;
      }
      return columnSizeAndRatios;
    };
    GroupResizeFeature2.prototype.storeLocalValues = function(initialValues) {
      var columnsToResize = initialValues.columnsToResize, resizeStartWidth = initialValues.resizeStartWidth, resizeRatios = initialValues.resizeRatios, groupAfterColumns = initialValues.groupAfterColumns, groupAfterStartWidth = initialValues.groupAfterStartWidth, groupAfterRatios = initialValues.groupAfterRatios;
      this.resizeCols = columnsToResize;
      this.resizeStartWidth = resizeStartWidth;
      this.resizeRatios = resizeRatios;
      this.resizeTakeFromCols = groupAfterColumns;
      this.resizeTakeFromStartWidth = groupAfterStartWidth;
      this.resizeTakeFromRatios = groupAfterRatios;
    };
    GroupResizeFeature2.prototype.clearLocalValues = function() {
      this.resizeCols = void 0;
      this.resizeRatios = void 0;
      this.resizeTakeFromCols = void 0;
      this.resizeTakeFromRatios = void 0;
    };
    GroupResizeFeature2.prototype.resizeLeafColumnsToFit = function(source) {
      var preferredSize = this.autoWidthCalculator.getPreferredWidthForColumnGroup(this.columnGroup);
      var initialValues = this.getInitialValues();
      if (preferredSize > initialValues.resizeStartWidth) {
        this.resizeColumns(initialValues, preferredSize, source, true);
      }
    };
    GroupResizeFeature2.prototype.resizeColumnsFromLocalValues = function(totalWidth, source, finished) {
      var _a, _b, _c;
      if (finished === void 0) {
        finished = true;
      }
      if (!this.resizeCols || !this.resizeRatios) {
        return;
      }
      var initialValues = {
        columnsToResize: this.resizeCols,
        resizeStartWidth: this.resizeStartWidth,
        resizeRatios: this.resizeRatios,
        groupAfterColumns: (_a = this.resizeTakeFromCols) !== null && _a !== void 0 ? _a : void 0,
        groupAfterStartWidth: (_b = this.resizeTakeFromStartWidth) !== null && _b !== void 0 ? _b : void 0,
        groupAfterRatios: (_c = this.resizeTakeFromRatios) !== null && _c !== void 0 ? _c : void 0
      };
      this.resizeColumns(initialValues, totalWidth, source, finished);
    };
    GroupResizeFeature2.prototype.resizeColumns = function(initialValues, totalWidth, source, finished) {
      if (finished === void 0) {
        finished = true;
      }
      var columnsToResize = initialValues.columnsToResize, resizeStartWidth = initialValues.resizeStartWidth, resizeRatios = initialValues.resizeRatios, groupAfterColumns = initialValues.groupAfterColumns, groupAfterStartWidth = initialValues.groupAfterStartWidth, groupAfterRatios = initialValues.groupAfterRatios;
      var resizeSets = [];
      resizeSets.push({
        columns: columnsToResize,
        ratios: resizeRatios,
        width: totalWidth
      });
      if (groupAfterColumns) {
        var diff = totalWidth - resizeStartWidth;
        resizeSets.push({
          columns: groupAfterColumns,
          ratios: groupAfterRatios,
          width: groupAfterStartWidth - diff
        });
      }
      this.columnModel.resizeColumnSets({
        resizeSets,
        finished,
        source
      });
      if (finished) {
        this.toggleColumnResizing(false);
      }
    };
    GroupResizeFeature2.prototype.toggleColumnResizing = function(resizing) {
      this.comp.addOrRemoveCssClass("ag-column-resizing", resizing);
    };
    GroupResizeFeature2.prototype.getColumnsToResize = function() {
      var leafCols = this.columnGroup.getDisplayedLeafColumns();
      return leafCols.filter(function(col) {
        return col.isResizable();
      });
    };
    GroupResizeFeature2.prototype.getInitialSizeOfColumns = function(columns) {
      return columns.reduce(function(totalWidth, column) {
        return totalWidth + column.getActualWidth();
      }, 0);
    };
    GroupResizeFeature2.prototype.getSizeRatiosOfColumns = function(columns, initialSizeOfColumns) {
      return columns.map(function(column) {
        return column.getActualWidth() / initialSizeOfColumns;
      });
    };
    GroupResizeFeature2.prototype.normaliseDragChange = function(dragChange) {
      var result = dragChange;
      if (this.gridOptionsService.get("enableRtl")) {
        if (this.pinned !== "left") {
          result *= -1;
        }
      } else if (this.pinned === "right") {
        result *= -1;
      }
      return result;
    };
    GroupResizeFeature2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.clearLocalValues();
    };
    __decorate$1w([
      Autowired("horizontalResizeService")
    ], GroupResizeFeature2.prototype, "horizontalResizeService", void 0);
    __decorate$1w([
      Autowired("autoWidthCalculator")
    ], GroupResizeFeature2.prototype, "autoWidthCalculator", void 0);
    __decorate$1w([
      Autowired("columnModel")
    ], GroupResizeFeature2.prototype, "columnModel", void 0);
    __decorate$1w([
      PostConstruct
    ], GroupResizeFeature2.prototype, "postConstruct", null);
    return GroupResizeFeature2;
  }(BeanStub)
);
var __extends$1A = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1v = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var GroupWidthFeature = (
  /** @class */
  function(_super) {
    __extends$1A(GroupWidthFeature2, _super);
    function GroupWidthFeature2(comp, columnGroup) {
      var _this = _super.call(this) || this;
      _this.removeChildListenersFuncs = [];
      _this.columnGroup = columnGroup;
      _this.comp = comp;
      return _this;
    }
    GroupWidthFeature2.prototype.postConstruct = function() {
      this.addListenersToChildrenColumns();
      this.addManagedListener(this.columnGroup, ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED, this.onDisplayedChildrenChanged.bind(this));
      this.onWidthChanged();
      this.addDestroyFunc(this.removeListenersOnChildrenColumns.bind(this));
    };
    GroupWidthFeature2.prototype.addListenersToChildrenColumns = function() {
      var _this = this;
      this.removeListenersOnChildrenColumns();
      var widthChangedListener = this.onWidthChanged.bind(this);
      this.columnGroup.getLeafColumns().forEach(function(column) {
        column.addEventListener("widthChanged", widthChangedListener);
        column.addEventListener("visibleChanged", widthChangedListener);
        _this.removeChildListenersFuncs.push(function() {
          column.removeEventListener("widthChanged", widthChangedListener);
          column.removeEventListener("visibleChanged", widthChangedListener);
        });
      });
    };
    GroupWidthFeature2.prototype.removeListenersOnChildrenColumns = function() {
      this.removeChildListenersFuncs.forEach(function(func) {
        return func();
      });
      this.removeChildListenersFuncs = [];
    };
    GroupWidthFeature2.prototype.onDisplayedChildrenChanged = function() {
      this.addListenersToChildrenColumns();
      this.onWidthChanged();
    };
    GroupWidthFeature2.prototype.onWidthChanged = function() {
      var columnWidth = this.columnGroup.getActualWidth();
      this.comp.setWidth("".concat(columnWidth, "px"));
      this.comp.addOrRemoveCssClass("ag-hidden", columnWidth === 0);
    };
    __decorate$1v([
      PostConstruct
    ], GroupWidthFeature2.prototype, "postConstruct", null);
    return GroupWidthFeature2;
  }(BeanStub)
);
var __extends$1z = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$9 = function() {
  __assign$9 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$9.apply(this, arguments);
};
var __decorate$1u = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HeaderGroupCellCtrl = (
  /** @class */
  function(_super) {
    __extends$1z(HeaderGroupCellCtrl2, _super);
    function HeaderGroupCellCtrl2(columnGroup, parentRowCtrl) {
      var _this = _super.call(this, columnGroup, parentRowCtrl) || this;
      _this.onSuppressColMoveChange = function() {
        if (!_this.isAlive() || _this.isSuppressMoving()) {
          _this.removeDragSource();
        } else {
          if (!_this.dragSource) {
            var eGui = _this.getGui();
            _this.setDragSource(eGui);
          }
        }
      };
      _this.column = columnGroup;
      return _this;
    }
    HeaderGroupCellCtrl2.prototype.setComp = function(comp, eGui, eResize) {
      this.comp = comp;
      this.setGui(eGui);
      this.displayName = this.columnModel.getDisplayNameForColumnGroup(this.column, "header");
      this.addClasses();
      this.setupMovingCss();
      this.setupExpandable();
      this.setupTooltip();
      this.setupUserComp();
      this.addHeaderMouseListeners();
      var pinned = this.getParentRowCtrl().getPinned();
      var leafCols = this.column.getProvidedColumnGroup().getLeafColumns();
      this.createManagedBean(new HoverFeature(leafCols, eGui));
      this.createManagedBean(new SetLeftFeature(this.column, eGui, this.beans));
      this.createManagedBean(new GroupWidthFeature(comp, this.column));
      this.resizeFeature = this.createManagedBean(new GroupResizeFeature(comp, eResize, pinned, this.column));
      this.createManagedBean(new ManagedFocusFeature(eGui, {
        shouldStopEventPropagation: this.shouldStopEventPropagation.bind(this),
        onTabKeyDown: function() {
          return void 0;
        },
        handleKeyDown: this.handleKeyDown.bind(this),
        onFocusIn: this.onFocusIn.bind(this)
      }));
      this.addManagedPropertyListener(Events.EVENT_SUPPRESS_COLUMN_MOVE_CHANGED, this.onSuppressColMoveChange);
      this.addResizeAndMoveKeyboardListeners();
    };
    HeaderGroupCellCtrl2.prototype.resizeHeader = function(direction, shiftKey) {
      if (!this.resizeFeature) {
        return;
      }
      var isLeft = direction === HorizontalDirection.Left;
      var diff = (isLeft ? -1 : 1) * this.resizeMultiplier;
      var initialValues = this.resizeFeature.getInitialValues(shiftKey);
      this.resizeFeature.resizeColumns(initialValues, initialValues.resizeStartWidth + diff, "uiColumnResized", true);
    };
    HeaderGroupCellCtrl2.prototype.moveHeader = function(hDirection) {
      var _a = this, eGui = _a.eGui, column = _a.column, columnModel = _a.columnModel, gridOptionsService = _a.gridOptionsService, ctrlsService = _a.ctrlsService;
      var isRtl = gridOptionsService.get("enableRtl");
      var isLeft = hDirection === HorizontalDirection.Left;
      var pinned = this.getPinned();
      var rect = eGui.getBoundingClientRect();
      var left = rect.left;
      var width = rect.width;
      var xPosition = ColumnMoveHelper.normaliseX(isLeft !== isRtl ? left - 20 : left + width + 20, pinned, true, gridOptionsService, ctrlsService);
      var id = column.getGroupId();
      var headerPosition = this.focusService.getFocusedHeader();
      ColumnMoveHelper.attemptMoveColumns({
        allMovingColumns: this.column.getLeafColumns(),
        isFromHeader: true,
        hDirection,
        xPosition,
        pinned,
        fromEnter: false,
        fakeEvent: false,
        gridOptionsService,
        columnModel
      });
      var displayedLeafColumns = column.getDisplayedLeafColumns();
      var targetColumn = isLeft ? displayedLeafColumns[0] : last(displayedLeafColumns);
      this.ctrlsService.getGridBodyCtrl().getScrollFeature().ensureColumnVisible(targetColumn, "auto");
      if (!this.isAlive() && headerPosition) {
        this.restoreFocus(id, column, headerPosition);
      }
    };
    HeaderGroupCellCtrl2.prototype.restoreFocus = function(groupId, previousColumnGroup, previousPosition) {
      var leafCols = previousColumnGroup.getLeafColumns();
      if (!leafCols.length) {
        return;
      }
      var parent = leafCols[0].getParent();
      if (!parent) {
        return;
      }
      var newColumnGroup = this.findGroupWidthId(parent, groupId);
      if (newColumnGroup) {
        this.focusService.focusHeaderPosition({
          headerPosition: __assign$9(__assign$9({}, previousPosition), { column: newColumnGroup })
        });
      }
    };
    HeaderGroupCellCtrl2.prototype.findGroupWidthId = function(columnGroup, id) {
      while (columnGroup) {
        if (columnGroup.getGroupId() === id) {
          return columnGroup;
        }
        columnGroup = columnGroup.getParent();
      }
      return null;
    };
    HeaderGroupCellCtrl2.prototype.resizeLeafColumnsToFit = function(source) {
      if (!this.resizeFeature) {
        return;
      }
      this.resizeFeature.resizeLeafColumnsToFit(source);
    };
    HeaderGroupCellCtrl2.prototype.setupUserComp = function() {
      var _this = this;
      var params = this.gridOptionsService.addGridCommonParams({
        displayName: this.displayName,
        columnGroup: this.column,
        setExpanded: function(expanded) {
          _this.columnModel.setColumnGroupOpened(_this.column.getProvidedColumnGroup(), expanded, "gridInitializing");
        }
      });
      var compDetails = this.userComponentFactory.getHeaderGroupCompDetails(params);
      this.comp.setUserCompDetails(compDetails);
    };
    HeaderGroupCellCtrl2.prototype.addHeaderMouseListeners = function() {
      var _this = this;
      var listener = function(e) {
        return _this.handleMouseOverChange(e.type === "mouseenter");
      };
      var clickListener = function(event) {
        return _this.handleColumnClick(event, false);
      };
      var contextMenuListener = function(event) {
        return _this.handleColumnClick(event, true);
      };
      this.addManagedListener(this.getGui(), "mouseenter", listener);
      this.addManagedListener(this.getGui(), "mouseleave", listener);
      this.addManagedListener(this.getGui(), "click", clickListener);
      this.addManagedListener(this.getGui(), "contextmenu", contextMenuListener);
    };
    HeaderGroupCellCtrl2.prototype.handleMouseOverChange = function(isMouseOver) {
      var eventType = isMouseOver ? Events.EVENT_COLUMN_HEADER_MOUSE_OVER : Events.EVENT_COLUMN_HEADER_MOUSE_LEAVE;
      var event = {
        type: eventType,
        column: this.column.getProvidedColumnGroup()
      };
      this.eventService.dispatchEvent(event);
    };
    HeaderGroupCellCtrl2.prototype.handleColumnClick = function(mouseEvent, isContextMenuEvent) {
      var eventType = isContextMenuEvent ? Events.EVENT_COLUMN_HEADER_CONTEXT_MENU : Events.EVENT_COLUMN_HEADER_CLICKED;
      if (isContextMenuEvent && this.gridOptionsService.get("preventDefaultOnContextMenu")) {
        mouseEvent.preventDefault();
      }
      var event = {
        type: eventType,
        column: this.column.getProvidedColumnGroup()
      };
      this.eventService.dispatchEvent(event);
    };
    HeaderGroupCellCtrl2.prototype.setupTooltip = function() {
      var _this = this;
      var colGroupDef = this.column.getColGroupDef();
      var tooltipCtrl = {
        getColumn: function() {
          return _this.column;
        },
        getGui: function() {
          return _this.eGui;
        },
        getLocation: function() {
          return "headerGroup";
        },
        getTooltipValue: function() {
          return colGroupDef && colGroupDef.headerTooltip;
        }
      };
      if (colGroupDef) {
        tooltipCtrl.getColDef = function() {
          return colGroupDef;
        };
      }
      var tooltipFeature = this.createManagedBean(new TooltipFeature(tooltipCtrl, this.beans));
      tooltipFeature.setComp(this.eGui);
    };
    HeaderGroupCellCtrl2.prototype.setupExpandable = function() {
      var providedColGroup = this.column.getProvidedColumnGroup();
      this.refreshExpanded();
      this.addManagedListener(providedColGroup, ProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED, this.refreshExpanded.bind(this));
      this.addManagedListener(providedColGroup, ProvidedColumnGroup.EVENT_EXPANDED_CHANGED, this.refreshExpanded.bind(this));
    };
    HeaderGroupCellCtrl2.prototype.refreshExpanded = function() {
      var column = this.column;
      this.expandable = column.isExpandable();
      var expanded = column.isExpanded();
      if (this.expandable) {
        this.comp.setAriaExpanded(expanded ? "true" : "false");
      } else {
        this.comp.setAriaExpanded(void 0);
      }
    };
    HeaderGroupCellCtrl2.prototype.getColId = function() {
      return this.column.getUniqueId();
    };
    HeaderGroupCellCtrl2.prototype.addClasses = function() {
      var _this = this;
      var colGroupDef = this.column.getColGroupDef();
      var classes = CssClassApplier.getHeaderClassesFromColDef(colGroupDef, this.gridOptionsService, null, this.column);
      if (this.column.isPadding()) {
        classes.push("ag-header-group-cell-no-group");
        var leafCols = this.column.getLeafColumns();
        if (leafCols.every(function(col) {
          return col.isSpanHeaderHeight();
        })) {
          classes.push("ag-header-span-height");
        }
      } else {
        classes.push("ag-header-group-cell-with-group");
      }
      classes.forEach(function(c) {
        return _this.comp.addOrRemoveCssClass(c, true);
      });
    };
    HeaderGroupCellCtrl2.prototype.setupMovingCss = function() {
      var _this = this;
      var providedColumnGroup = this.column.getProvidedColumnGroup();
      var leafColumns = providedColumnGroup.getLeafColumns();
      var listener = function() {
        return _this.comp.addOrRemoveCssClass("ag-header-cell-moving", _this.column.isMoving());
      };
      leafColumns.forEach(function(col) {
        _this.addManagedListener(col, Column.EVENT_MOVING_CHANGED, listener);
      });
      listener();
    };
    HeaderGroupCellCtrl2.prototype.onFocusIn = function(e) {
      if (!this.eGui.contains(e.relatedTarget)) {
        var rowIndex = this.getRowIndex();
        this.beans.focusService.setFocusedHeader(rowIndex, this.column);
      }
    };
    HeaderGroupCellCtrl2.prototype.handleKeyDown = function(e) {
      _super.prototype.handleKeyDown.call(this, e);
      var wrapperHasFocus = this.getWrapperHasFocus();
      if (!this.expandable || !wrapperHasFocus) {
        return;
      }
      if (e.key === KeyCode.ENTER) {
        var column = this.column;
        var newExpandedValue = !column.isExpanded();
        this.columnModel.setColumnGroupOpened(column.getProvidedColumnGroup(), newExpandedValue, "uiColumnExpanded");
      }
    };
    HeaderGroupCellCtrl2.prototype.setDragSource = function(eHeaderGroup) {
      var _this = this;
      if (!this.isAlive() || this.isSuppressMoving()) {
        return;
      }
      this.removeDragSource();
      if (!eHeaderGroup) {
        return;
      }
      var _a = this, column = _a.column, columnModel = _a.columnModel, displayName = _a.displayName, gridOptionsService = _a.gridOptionsService, dragAndDropService = _a.dragAndDropService;
      var allLeafColumns = column.getProvidedColumnGroup().getLeafColumns();
      var hideColumnOnExit = !gridOptionsService.get("suppressDragLeaveHidesColumns");
      var dragSource = this.dragSource = {
        type: DragSourceType.HeaderCell,
        eElement: eHeaderGroup,
        getDefaultIconName: function() {
          return hideColumnOnExit ? DragAndDropService.ICON_HIDE : DragAndDropService.ICON_NOT_ALLOWED;
        },
        dragItemName: displayName,
        // we add in the original group leaf columns, so we move both visible and non-visible items
        getDragItem: function() {
          return _this.getDragItemForGroup(column);
        },
        onDragStarted: function() {
          hideColumnOnExit = !gridOptionsService.get("suppressDragLeaveHidesColumns");
          allLeafColumns.forEach(function(col) {
            return col.setMoving(true, "uiColumnDragged");
          });
        },
        onDragStopped: function() {
          return allLeafColumns.forEach(function(col) {
            return col.setMoving(false, "uiColumnDragged");
          });
        },
        onGridEnter: function(dragItem) {
          var _a2;
          if (hideColumnOnExit) {
            var unlockedColumns = ((_a2 = dragItem === null || dragItem === void 0 ? void 0 : dragItem.columns) === null || _a2 === void 0 ? void 0 : _a2.filter(function(col) {
              return !col.getColDef().lockVisible;
            })) || [];
            columnModel.setColumnsVisible(unlockedColumns, true, "uiColumnMoved");
          }
        },
        onGridExit: function(dragItem) {
          var _a2;
          if (hideColumnOnExit) {
            var unlockedColumns = ((_a2 = dragItem === null || dragItem === void 0 ? void 0 : dragItem.columns) === null || _a2 === void 0 ? void 0 : _a2.filter(function(col) {
              return !col.getColDef().lockVisible;
            })) || [];
            columnModel.setColumnsVisible(unlockedColumns, false, "uiColumnMoved");
          }
        }
      };
      dragAndDropService.addDragSource(dragSource, true);
    };
    HeaderGroupCellCtrl2.prototype.getDragItemForGroup = function(columnGroup) {
      var allColumnsOriginalOrder = columnGroup.getProvidedColumnGroup().getLeafColumns();
      var visibleState = {};
      allColumnsOriginalOrder.forEach(function(column) {
        return visibleState[column.getId()] = column.isVisible();
      });
      var allColumnsCurrentOrder = [];
      this.columnModel.getAllDisplayedColumns().forEach(function(column) {
        if (allColumnsOriginalOrder.indexOf(column) >= 0) {
          allColumnsCurrentOrder.push(column);
          removeFromArray(allColumnsOriginalOrder, column);
        }
      });
      allColumnsOriginalOrder.forEach(function(column) {
        return allColumnsCurrentOrder.push(column);
      });
      return {
        columns: allColumnsCurrentOrder,
        visibleState
      };
    };
    HeaderGroupCellCtrl2.prototype.isSuppressMoving = function() {
      var childSuppressesMoving = false;
      this.column.getLeafColumns().forEach(function(column) {
        if (column.getColDef().suppressMovable || column.getColDef().lockPosition) {
          childSuppressesMoving = true;
        }
      });
      var result = childSuppressesMoving || this.gridOptionsService.get("suppressMovableColumns");
      return result;
    };
    __decorate$1u([
      Autowired("columnModel")
    ], HeaderGroupCellCtrl2.prototype, "columnModel", void 0);
    return HeaderGroupCellCtrl2;
  }(AbstractHeaderCellCtrl)
);
var __extends$1y = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1t = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __values$5 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read$k = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var instanceIdSequence = 0;
var HeaderRowCtrl = (
  /** @class */
  function(_super) {
    __extends$1y(HeaderRowCtrl2, _super);
    function HeaderRowCtrl2(rowIndex, pinned, type) {
      var _this = _super.call(this) || this;
      _this.instanceId = instanceIdSequence++;
      _this.rowIndex = rowIndex;
      _this.pinned = pinned;
      _this.type = type;
      var typeClass = type == HeaderRowType.COLUMN_GROUP ? "ag-header-row-column-group" : type == HeaderRowType.FLOATING_FILTER ? "ag-header-row-column-filter" : "ag-header-row-column";
      _this.headerRowClass = "ag-header-row ".concat(typeClass);
      return _this;
    }
    HeaderRowCtrl2.prototype.postConstruct = function() {
      this.isPrintLayout = this.gridOptionsService.isDomLayout("print");
      this.isEnsureDomOrder = this.gridOptionsService.get("ensureDomOrder");
    };
    HeaderRowCtrl2.prototype.getInstanceId = function() {
      return this.instanceId;
    };
    HeaderRowCtrl2.prototype.setComp = function(comp, initCompState) {
      if (initCompState === void 0) {
        initCompState = true;
      }
      this.comp = comp;
      if (initCompState) {
        this.onRowHeightChanged();
        this.onVirtualColumnsChanged();
      }
      this.setWidth();
      this.addEventListeners();
    };
    HeaderRowCtrl2.prototype.getHeaderRowClass = function() {
      return this.headerRowClass;
    };
    HeaderRowCtrl2.prototype.getAriaRowIndex = function() {
      return this.rowIndex + 1;
    };
    HeaderRowCtrl2.prototype.getTransform = function() {
      if (isBrowserSafari()) {
        return "translateZ(0)";
      }
    };
    HeaderRowCtrl2.prototype.addEventListeners = function() {
      var _this = this;
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_VIRTUAL_COLUMNS_CHANGED, function(params) {
        return _this.onVirtualColumnsChanged(params.afterScroll);
      });
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HEADER_HEIGHT_CHANGED, this.onRowHeightChanged.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_GRID_STYLES_CHANGED, this.onRowHeightChanged.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_ADVANCED_FILTER_ENABLED_CHANGED, this.onRowHeightChanged.bind(this));
      this.addManagedPropertyListener("domLayout", this.onDisplayedColumnsChanged.bind(this));
      this.addManagedPropertyListener("ensureDomOrder", function(e) {
        return _this.isEnsureDomOrder = e.currentValue;
      });
      this.addManagedPropertyListener("headerHeight", this.onRowHeightChanged.bind(this));
      this.addManagedPropertyListener("pivotHeaderHeight", this.onRowHeightChanged.bind(this));
      this.addManagedPropertyListener("groupHeaderHeight", this.onRowHeightChanged.bind(this));
      this.addManagedPropertyListener("pivotGroupHeaderHeight", this.onRowHeightChanged.bind(this));
      this.addManagedPropertyListener("floatingFiltersHeight", this.onRowHeightChanged.bind(this));
    };
    HeaderRowCtrl2.prototype.getHeaderCellCtrl = function(column) {
      if (!this.headerCellCtrls) {
        return;
      }
      return values(this.headerCellCtrls).find(function(cellCtrl) {
        return cellCtrl.getColumnGroupChild() === column;
      });
    };
    HeaderRowCtrl2.prototype.onDisplayedColumnsChanged = function() {
      this.isPrintLayout = this.gridOptionsService.isDomLayout("print");
      this.onVirtualColumnsChanged();
      this.setWidth();
      this.onRowHeightChanged();
    };
    HeaderRowCtrl2.prototype.getType = function() {
      return this.type;
    };
    HeaderRowCtrl2.prototype.onColumnResized = function() {
      this.setWidth();
    };
    HeaderRowCtrl2.prototype.setWidth = function() {
      var width = this.getWidthForRow();
      this.comp.setWidth("".concat(width, "px"));
    };
    HeaderRowCtrl2.prototype.getWidthForRow = function() {
      if (this.isPrintLayout) {
        var pinned = this.pinned != null;
        if (pinned) {
          return 0;
        }
        return this.columnModel.getContainerWidth("right") + this.columnModel.getContainerWidth("left") + this.columnModel.getContainerWidth(null);
      }
      return this.columnModel.getContainerWidth(this.pinned);
    };
    HeaderRowCtrl2.prototype.onRowHeightChanged = function() {
      var _a = this.getTopAndHeight(), topOffset = _a.topOffset, rowHeight = _a.rowHeight;
      this.comp.setTop(topOffset + "px");
      this.comp.setHeight(rowHeight + "px");
    };
    HeaderRowCtrl2.prototype.getTopAndHeight = function() {
      var headerRowCount = this.columnModel.getHeaderRowCount();
      var sizes = [];
      var numberOfFloating = 0;
      if (this.filterManager.hasFloatingFilters()) {
        headerRowCount++;
        numberOfFloating = 1;
      }
      var groupHeight = this.columnModel.getColumnGroupHeaderRowHeight();
      var headerHeight = this.columnModel.getColumnHeaderRowHeight();
      var numberOfNonGroups = 1 + numberOfFloating;
      var numberOfGroups = headerRowCount - numberOfNonGroups;
      for (var i = 0; i < numberOfGroups; i++) {
        sizes.push(groupHeight);
      }
      sizes.push(headerHeight);
      for (var i = 0; i < numberOfFloating; i++) {
        sizes.push(this.columnModel.getFloatingFiltersHeight());
      }
      var topOffset = 0;
      for (var i = 0; i < this.rowIndex; i++) {
        topOffset += sizes[i];
      }
      var rowHeight = sizes[this.rowIndex];
      return { topOffset, rowHeight };
    };
    HeaderRowCtrl2.prototype.getPinned = function() {
      return this.pinned;
    };
    HeaderRowCtrl2.prototype.getRowIndex = function() {
      return this.rowIndex;
    };
    HeaderRowCtrl2.prototype.onVirtualColumnsChanged = function(afterScroll) {
      if (afterScroll === void 0) {
        afterScroll = false;
      }
      var ctrlsToDisplay = this.getHeaderCtrls();
      var forceOrder = this.isEnsureDomOrder || this.isPrintLayout;
      this.comp.setHeaderCtrls(ctrlsToDisplay, forceOrder, afterScroll);
    };
    HeaderRowCtrl2.prototype.getHeaderCtrls = function() {
      var e_1, _a, e_2, _b;
      var _this = this;
      var oldCtrls = this.headerCellCtrls;
      this.headerCellCtrls = /* @__PURE__ */ new Map();
      var columns = this.getColumnsInViewport();
      try {
        for (var columns_1 = __values$5(columns), columns_1_1 = columns_1.next(); !columns_1_1.done; columns_1_1 = columns_1.next()) {
          var child = columns_1_1.value;
          this.recycleAndCreateHeaderCtrls(child, oldCtrls);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (columns_1_1 && !columns_1_1.done && (_a = columns_1.return))
            _a.call(columns_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      var isFocusedAndDisplayed = function(ctrl) {
        var isFocused = _this.focusService.isHeaderWrapperFocused(ctrl);
        if (!isFocused) {
          return false;
        }
        var isDisplayed = _this.columnModel.isDisplayed(ctrl.getColumnGroupChild());
        return isDisplayed;
      };
      if (oldCtrls) {
        try {
          for (var oldCtrls_1 = __values$5(oldCtrls), oldCtrls_1_1 = oldCtrls_1.next(); !oldCtrls_1_1.done; oldCtrls_1_1 = oldCtrls_1.next()) {
            var _c = __read$k(oldCtrls_1_1.value, 2), id = _c[0], oldCtrl = _c[1];
            var keepCtrl = isFocusedAndDisplayed(oldCtrl);
            if (keepCtrl) {
              this.headerCellCtrls.set(id, oldCtrl);
            } else {
              this.destroyBean(oldCtrl);
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (oldCtrls_1_1 && !oldCtrls_1_1.done && (_b = oldCtrls_1.return))
              _b.call(oldCtrls_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      }
      var ctrlsToDisplay = Array.from(this.headerCellCtrls.values());
      return ctrlsToDisplay;
    };
    HeaderRowCtrl2.prototype.recycleAndCreateHeaderCtrls = function(headerColumn, oldCtrls) {
      if (!this.headerCellCtrls) {
        return;
      }
      if (headerColumn.isEmptyGroup()) {
        return;
      }
      var idOfChild = headerColumn.getUniqueId();
      var headerCtrl;
      if (oldCtrls) {
        headerCtrl = oldCtrls.get(idOfChild);
        oldCtrls.delete(idOfChild);
      }
      var forOldColumn = headerCtrl && headerCtrl.getColumnGroupChild() != headerColumn;
      if (forOldColumn) {
        this.destroyBean(headerCtrl);
        headerCtrl = void 0;
      }
      if (headerCtrl == null) {
        switch (this.type) {
          case HeaderRowType.FLOATING_FILTER:
            headerCtrl = this.createBean(new HeaderFilterCellCtrl(headerColumn, this));
            break;
          case HeaderRowType.COLUMN_GROUP:
            headerCtrl = this.createBean(new HeaderGroupCellCtrl(headerColumn, this));
            break;
          default:
            headerCtrl = this.createBean(new HeaderCellCtrl(headerColumn, this));
            break;
        }
      }
      this.headerCellCtrls.set(idOfChild, headerCtrl);
    };
    HeaderRowCtrl2.prototype.getColumnsInViewport = function() {
      return this.isPrintLayout ? this.getColumnsInViewportPrintLayout() : this.getColumnsInViewportNormalLayout();
    };
    HeaderRowCtrl2.prototype.getColumnsInViewportPrintLayout = function() {
      var _this = this;
      if (this.pinned != null) {
        return [];
      }
      var viewportColumns = [];
      var actualDepth = this.getActualDepth();
      ["left", null, "right"].forEach(function(pinned) {
        var items = _this.columnModel.getVirtualHeaderGroupRow(pinned, actualDepth);
        viewportColumns = viewportColumns.concat(items);
      });
      return viewportColumns;
    };
    HeaderRowCtrl2.prototype.getActualDepth = function() {
      return this.type == HeaderRowType.FLOATING_FILTER ? this.rowIndex - 1 : this.rowIndex;
    };
    HeaderRowCtrl2.prototype.getColumnsInViewportNormalLayout = function() {
      return this.columnModel.getVirtualHeaderGroupRow(this.pinned, this.getActualDepth());
    };
    HeaderRowCtrl2.prototype.focusHeader = function(column, event) {
      if (!this.headerCellCtrls) {
        return false;
      }
      var allCtrls = Array.from(this.headerCellCtrls.values());
      var ctrl = allCtrls.find(function(ctrl2) {
        return ctrl2.getColumnGroupChild() == column;
      });
      if (!ctrl) {
        return false;
      }
      return ctrl.focus(event);
    };
    HeaderRowCtrl2.prototype.destroy = function() {
      var _this = this;
      if (this.headerCellCtrls) {
        this.headerCellCtrls.forEach(function(ctrl) {
          _this.destroyBean(ctrl);
        });
      }
      this.headerCellCtrls = void 0;
      _super.prototype.destroy.call(this);
    };
    __decorate$1t([
      Autowired("columnModel")
    ], HeaderRowCtrl2.prototype, "columnModel", void 0);
    __decorate$1t([
      Autowired("focusService")
    ], HeaderRowCtrl2.prototype, "focusService", void 0);
    __decorate$1t([
      Autowired("filterManager")
    ], HeaderRowCtrl2.prototype, "filterManager", void 0);
    __decorate$1t([
      PostConstruct
    ], HeaderRowCtrl2.prototype, "postConstruct", null);
    return HeaderRowCtrl2;
  }(BeanStub)
);
var __extends$1x = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1s = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __read$j = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$h = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var HeaderRowContainerCtrl = (
  /** @class */
  function(_super) {
    __extends$1x(HeaderRowContainerCtrl2, _super);
    function HeaderRowContainerCtrl2(pinned) {
      var _this = _super.call(this) || this;
      _this.hidden = false;
      _this.includeFloatingFilter = false;
      _this.groupsRowCtrls = [];
      _this.pinned = pinned;
      return _this;
    }
    HeaderRowContainerCtrl2.prototype.setComp = function(comp, eGui) {
      this.comp = comp;
      this.eViewport = eGui;
      this.setupCenterWidth();
      this.setupPinnedWidth();
      this.setupDragAndDrop(this.eViewport);
      this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_ADVANCED_FILTER_ENABLED_CHANGED, this.onDisplayedColumnsChanged.bind(this));
      this.ctrlsService.registerHeaderContainer(this, this.pinned);
      if (this.columnModel.isReady()) {
        this.refresh();
      }
    };
    HeaderRowContainerCtrl2.prototype.setupDragAndDrop = function(dropContainer) {
      var bodyDropTarget = new BodyDropTarget(this.pinned, dropContainer);
      this.createManagedBean(bodyDropTarget);
    };
    HeaderRowContainerCtrl2.prototype.refresh = function(keepColumns) {
      var _this = this;
      if (keepColumns === void 0) {
        keepColumns = false;
      }
      var sequence = new NumberSequence();
      var focusedHeaderPosition = this.focusService.getFocusHeaderToUseAfterRefresh();
      var refreshColumnGroups = function() {
        var groupRowCount = _this.columnModel.getHeaderRowCount() - 1;
        _this.groupsRowCtrls = _this.destroyBeans(_this.groupsRowCtrls);
        for (var i = 0; i < groupRowCount; i++) {
          var ctrl = _this.createBean(new HeaderRowCtrl(sequence.next(), _this.pinned, HeaderRowType.COLUMN_GROUP));
          _this.groupsRowCtrls.push(ctrl);
        }
      };
      var refreshColumns = function() {
        var rowIndex = sequence.next();
        var needNewInstance = !_this.hidden && (_this.columnsRowCtrl == null || !keepColumns || _this.columnsRowCtrl.getRowIndex() !== rowIndex);
        var shouldDestroyInstance = needNewInstance || _this.hidden;
        if (shouldDestroyInstance) {
          _this.columnsRowCtrl = _this.destroyBean(_this.columnsRowCtrl);
        }
        if (needNewInstance) {
          _this.columnsRowCtrl = _this.createBean(new HeaderRowCtrl(rowIndex, _this.pinned, HeaderRowType.COLUMN));
        }
      };
      var refreshFilters = function() {
        _this.includeFloatingFilter = _this.filterManager.hasFloatingFilters() && !_this.hidden;
        var destroyPreviousComp = function() {
          _this.filtersRowCtrl = _this.destroyBean(_this.filtersRowCtrl);
        };
        if (!_this.includeFloatingFilter) {
          destroyPreviousComp();
          return;
        }
        var rowIndex = sequence.next();
        if (_this.filtersRowCtrl) {
          var rowIndexMismatch = _this.filtersRowCtrl.getRowIndex() !== rowIndex;
          if (!keepColumns || rowIndexMismatch) {
            destroyPreviousComp();
          }
        }
        if (!_this.filtersRowCtrl) {
          _this.filtersRowCtrl = _this.createBean(new HeaderRowCtrl(rowIndex, _this.pinned, HeaderRowType.FLOATING_FILTER));
        }
      };
      refreshColumnGroups();
      refreshColumns();
      refreshFilters();
      var allCtrls = this.getAllCtrls();
      this.comp.setCtrls(allCtrls);
      this.restoreFocusOnHeader(focusedHeaderPosition);
    };
    HeaderRowContainerCtrl2.prototype.restoreFocusOnHeader = function(position) {
      if (position == null || position.column.getPinned() != this.pinned) {
        return;
      }
      this.focusService.focusHeaderPosition({ headerPosition: position });
    };
    HeaderRowContainerCtrl2.prototype.getAllCtrls = function() {
      var res = __spreadArray$h([], __read$j(this.groupsRowCtrls), false);
      if (this.columnsRowCtrl) {
        res.push(this.columnsRowCtrl);
      }
      if (this.filtersRowCtrl) {
        res.push(this.filtersRowCtrl);
      }
      return res;
    };
    HeaderRowContainerCtrl2.prototype.onGridColumnsChanged = function() {
      this.refresh(true);
    };
    HeaderRowContainerCtrl2.prototype.onDisplayedColumnsChanged = function() {
      var includeFloatingFilter = this.filterManager.hasFloatingFilters() && !this.hidden;
      if (this.includeFloatingFilter !== includeFloatingFilter) {
        this.refresh(true);
      }
    };
    HeaderRowContainerCtrl2.prototype.setupCenterWidth = function() {
      var _this = this;
      if (this.pinned != null) {
        return;
      }
      this.createManagedBean(new CenterWidthFeature(function(width) {
        return _this.comp.setCenterWidth("".concat(width, "px"));
      }, true));
    };
    HeaderRowContainerCtrl2.prototype.setHorizontalScroll = function(offset) {
      this.comp.setViewportScrollLeft(offset);
    };
    HeaderRowContainerCtrl2.prototype.setupPinnedWidth = function() {
      var _this = this;
      if (this.pinned == null) {
        return;
      }
      var pinningLeft = this.pinned === "left";
      var pinningRight = this.pinned === "right";
      this.hidden = true;
      var listener = function() {
        var width = pinningLeft ? _this.pinnedWidthService.getPinnedLeftWidth() : _this.pinnedWidthService.getPinnedRightWidth();
        if (width == null) {
          return;
        }
        var hidden = width == 0;
        var hiddenChanged = _this.hidden !== hidden;
        var isRtl = _this.gridOptionsService.get("enableRtl");
        var scrollbarWidth = _this.gridOptionsService.getScrollbarWidth();
        var addPaddingForScrollbar = _this.scrollVisibleService.isVerticalScrollShowing() && (isRtl && pinningLeft || !isRtl && pinningRight);
        var widthWithPadding = addPaddingForScrollbar ? width + scrollbarWidth : width;
        _this.comp.setPinnedContainerWidth("".concat(widthWithPadding, "px"));
        _this.comp.setDisplayed(!hidden);
        if (hiddenChanged) {
          _this.hidden = hidden;
          _this.refresh();
        }
      };
      this.addManagedListener(this.eventService, Events.EVENT_LEFT_PINNED_WIDTH_CHANGED, listener);
      this.addManagedListener(this.eventService, Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED, listener);
      this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, listener);
      this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, listener);
    };
    HeaderRowContainerCtrl2.prototype.getHeaderCtrlForColumn = function(column) {
      if (column instanceof Column) {
        if (!this.columnsRowCtrl) {
          return;
        }
        return this.columnsRowCtrl.getHeaderCellCtrl(column);
      }
      if (this.groupsRowCtrls.length === 0) {
        return;
      }
      for (var i = 0; i < this.groupsRowCtrls.length; i++) {
        var ctrl = this.groupsRowCtrls[i].getHeaderCellCtrl(column);
        if (ctrl) {
          return ctrl;
        }
      }
    };
    HeaderRowContainerCtrl2.prototype.getHtmlElementForColumnHeader = function(column) {
      var cellCtrl = this.getHeaderCtrlForColumn(column);
      if (!cellCtrl) {
        return null;
      }
      return cellCtrl.getGui();
    };
    HeaderRowContainerCtrl2.prototype.getRowType = function(rowIndex) {
      var allCtrls = this.getAllCtrls();
      var ctrl = allCtrls[rowIndex];
      return ctrl ? ctrl.getType() : void 0;
    };
    HeaderRowContainerCtrl2.prototype.focusHeader = function(rowIndex, column, event) {
      var allCtrls = this.getAllCtrls();
      var ctrl = allCtrls[rowIndex];
      if (!ctrl) {
        return false;
      }
      return ctrl.focusHeader(column, event);
    };
    HeaderRowContainerCtrl2.prototype.getViewport = function() {
      return this.eViewport;
    };
    HeaderRowContainerCtrl2.prototype.getRowCount = function() {
      return this.groupsRowCtrls.length + (this.columnsRowCtrl ? 1 : 0) + (this.filtersRowCtrl ? 1 : 0);
    };
    HeaderRowContainerCtrl2.prototype.destroy = function() {
      if (this.filtersRowCtrl) {
        this.filtersRowCtrl = this.destroyBean(this.filtersRowCtrl);
      }
      if (this.columnsRowCtrl) {
        this.columnsRowCtrl = this.destroyBean(this.columnsRowCtrl);
      }
      if (this.groupsRowCtrls && this.groupsRowCtrls.length) {
        this.groupsRowCtrls = this.destroyBeans(this.groupsRowCtrls);
      }
      _super.prototype.destroy.call(this);
    };
    __decorate$1s([
      Autowired("ctrlsService")
    ], HeaderRowContainerCtrl2.prototype, "ctrlsService", void 0);
    __decorate$1s([
      Autowired("scrollVisibleService")
    ], HeaderRowContainerCtrl2.prototype, "scrollVisibleService", void 0);
    __decorate$1s([
      Autowired("pinnedWidthService")
    ], HeaderRowContainerCtrl2.prototype, "pinnedWidthService", void 0);
    __decorate$1s([
      Autowired("columnModel")
    ], HeaderRowContainerCtrl2.prototype, "columnModel", void 0);
    __decorate$1s([
      Autowired("focusService")
    ], HeaderRowContainerCtrl2.prototype, "focusService", void 0);
    __decorate$1s([
      Autowired("filterManager")
    ], HeaderRowContainerCtrl2.prototype, "filterManager", void 0);
    return HeaderRowContainerCtrl2;
  }(BeanStub)
);
var __extends$1w = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1r = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HeaderRowContainerComp = (
  /** @class */
  function(_super) {
    __extends$1w(HeaderRowContainerComp2, _super);
    function HeaderRowContainerComp2(pinned) {
      var _this = _super.call(this) || this;
      _this.headerRowComps = {};
      _this.rowCompsList = [];
      _this.pinned = pinned;
      return _this;
    }
    HeaderRowContainerComp2.prototype.init = function() {
      var _this = this;
      this.selectAndSetTemplate();
      var compProxy = {
        setDisplayed: function(displayed) {
          return _this.setDisplayed(displayed);
        },
        setCtrls: function(ctrls) {
          return _this.setCtrls(ctrls);
        },
        // only gets called for center section
        setCenterWidth: function(width) {
          return _this.eCenterContainer.style.width = width;
        },
        setViewportScrollLeft: function(left) {
          return _this.getGui().scrollLeft = left;
        },
        // only gets called for pinned sections
        setPinnedContainerWidth: function(width) {
          var eGui = _this.getGui();
          eGui.style.width = width;
          eGui.style.maxWidth = width;
          eGui.style.minWidth = width;
        }
      };
      var ctrl = this.createManagedBean(new HeaderRowContainerCtrl(this.pinned));
      ctrl.setComp(compProxy, this.getGui());
    };
    HeaderRowContainerComp2.prototype.selectAndSetTemplate = function() {
      var pinnedLeft = this.pinned == "left";
      var pinnedRight = this.pinned == "right";
      var template = pinnedLeft ? HeaderRowContainerComp2.PINNED_LEFT_TEMPLATE : pinnedRight ? HeaderRowContainerComp2.PINNED_RIGHT_TEMPLATE : HeaderRowContainerComp2.CENTER_TEMPLATE;
      this.setTemplate(template);
      this.eRowContainer = this.eCenterContainer ? this.eCenterContainer : this.getGui();
    };
    HeaderRowContainerComp2.prototype.destroyRowComps = function() {
      this.setCtrls([]);
    };
    HeaderRowContainerComp2.prototype.destroyRowComp = function(rowComp) {
      this.destroyBean(rowComp);
      this.eRowContainer.removeChild(rowComp.getGui());
    };
    HeaderRowContainerComp2.prototype.setCtrls = function(ctrls) {
      var _this = this;
      var oldRowComps = this.headerRowComps;
      this.headerRowComps = {};
      this.rowCompsList = [];
      var prevGui;
      var appendEnsuringDomOrder = function(rowComp) {
        var eGui = rowComp.getGui();
        var notAlreadyIn = eGui.parentElement != _this.eRowContainer;
        if (notAlreadyIn) {
          _this.eRowContainer.appendChild(eGui);
        }
        if (prevGui) {
          ensureDomOrder(_this.eRowContainer, eGui, prevGui);
        }
        prevGui = eGui;
      };
      ctrls.forEach(function(ctrl) {
        var ctrlId = ctrl.getInstanceId();
        var existingComp = oldRowComps[ctrlId];
        delete oldRowComps[ctrlId];
        var rowComp = existingComp ? existingComp : _this.createBean(new HeaderRowComp(ctrl));
        _this.headerRowComps[ctrlId] = rowComp;
        _this.rowCompsList.push(rowComp);
        appendEnsuringDomOrder(rowComp);
      });
      getAllValuesInObject(oldRowComps).forEach(function(c) {
        return _this.destroyRowComp(c);
      });
    };
    HeaderRowContainerComp2.PINNED_LEFT_TEMPLATE = '<div class="ag-pinned-left-header" role="rowgroup"></div>';
    HeaderRowContainerComp2.PINNED_RIGHT_TEMPLATE = '<div class="ag-pinned-right-header" role="rowgroup"></div>';
    HeaderRowContainerComp2.CENTER_TEMPLATE = '<div class="ag-header-viewport" role="presentation">\n            <div class="ag-header-container" ref="eCenterContainer" role="rowgroup"></div>\n        </div>';
    __decorate$1r([
      RefSelector("eCenterContainer")
    ], HeaderRowContainerComp2.prototype, "eCenterContainer", void 0);
    __decorate$1r([
      PostConstruct
    ], HeaderRowContainerComp2.prototype, "init", null);
    __decorate$1r([
      PreDestroy
    ], HeaderRowContainerComp2.prototype, "destroyRowComps", null);
    return HeaderRowContainerComp2;
  }(Component2)
);
var __extends$1v = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1q = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HeaderNavigationDirection;
(function(HeaderNavigationDirection2) {
  HeaderNavigationDirection2[HeaderNavigationDirection2["UP"] = 0] = "UP";
  HeaderNavigationDirection2[HeaderNavigationDirection2["DOWN"] = 1] = "DOWN";
  HeaderNavigationDirection2[HeaderNavigationDirection2["LEFT"] = 2] = "LEFT";
  HeaderNavigationDirection2[HeaderNavigationDirection2["RIGHT"] = 3] = "RIGHT";
})(HeaderNavigationDirection || (HeaderNavigationDirection = {}));
var HeaderNavigationService = (
  /** @class */
  function(_super) {
    __extends$1v(HeaderNavigationService2, _super);
    function HeaderNavigationService2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    HeaderNavigationService2.prototype.postConstruct = function() {
      var _this = this;
      this.ctrlsService.whenReady(function(p) {
        _this.gridBodyCon = p.gridBodyCtrl;
      });
    };
    HeaderNavigationService2.prototype.getHeaderRowCount = function() {
      var centerHeaderContainer = this.ctrlsService.getHeaderRowContainerCtrl();
      return centerHeaderContainer ? centerHeaderContainer.getRowCount() : 0;
    };
    HeaderNavigationService2.prototype.navigateVertically = function(direction, fromHeader, event) {
      if (!fromHeader) {
        fromHeader = this.focusService.getFocusedHeader();
      }
      if (!fromHeader) {
        return false;
      }
      var headerRowIndex = fromHeader.headerRowIndex, column = fromHeader.column;
      var rowLen = this.getHeaderRowCount();
      var isUp = direction === HeaderNavigationDirection.UP;
      var _a = isUp ? this.headerPositionUtils.getColumnVisibleParent(column, headerRowIndex) : this.headerPositionUtils.getColumnVisibleChild(column, headerRowIndex), nextRow = _a.nextRow, nextFocusColumn = _a.nextFocusColumn;
      var skipColumn = false;
      if (nextRow < 0) {
        nextRow = 0;
        nextFocusColumn = column;
        skipColumn = true;
      }
      if (nextRow >= rowLen) {
        nextRow = -1;
      }
      if (!skipColumn && !nextFocusColumn) {
        return false;
      }
      return this.focusService.focusHeaderPosition({
        headerPosition: { headerRowIndex: nextRow, column: nextFocusColumn },
        allowUserOverride: true,
        event
      });
    };
    HeaderNavigationService2.prototype.navigateHorizontally = function(direction, fromTab, event) {
      if (fromTab === void 0) {
        fromTab = false;
      }
      var focusedHeader = this.focusService.getFocusedHeader();
      var isLeft = direction === HeaderNavigationDirection.LEFT;
      var isRtl = this.gridOptionsService.get("enableRtl");
      var nextHeader;
      var normalisedDirection;
      if (isLeft !== isRtl) {
        normalisedDirection = "Before";
        nextHeader = this.headerPositionUtils.findHeader(focusedHeader, normalisedDirection);
      } else {
        normalisedDirection = "After";
        nextHeader = this.headerPositionUtils.findHeader(focusedHeader, normalisedDirection);
      }
      if (nextHeader || !fromTab) {
        return this.focusService.focusHeaderPosition({
          headerPosition: nextHeader,
          direction: normalisedDirection,
          fromTab,
          allowUserOverride: true,
          event
        });
      }
      return this.focusNextHeaderRow(focusedHeader, normalisedDirection, event);
    };
    HeaderNavigationService2.prototype.focusNextHeaderRow = function(focusedHeader, direction, event) {
      var currentIndex = focusedHeader.headerRowIndex;
      var nextPosition = null;
      var nextRowIndex;
      if (direction === "Before") {
        if (currentIndex > 0) {
          nextRowIndex = currentIndex - 1;
          nextPosition = this.headerPositionUtils.findColAtEdgeForHeaderRow(nextRowIndex, "end");
        }
      } else {
        nextRowIndex = currentIndex + 1;
        nextPosition = this.headerPositionUtils.findColAtEdgeForHeaderRow(nextRowIndex, "start");
      }
      return this.focusService.focusHeaderPosition({
        headerPosition: nextPosition,
        direction,
        fromTab: true,
        allowUserOverride: true,
        event
      });
    };
    HeaderNavigationService2.prototype.scrollToColumn = function(column, direction) {
      if (direction === void 0) {
        direction = "After";
      }
      if (column.getPinned()) {
        return;
      }
      var columnToScrollTo;
      if (column instanceof ColumnGroup) {
        var columns = column.getDisplayedLeafColumns();
        columnToScrollTo = direction === "Before" ? last(columns) : columns[0];
      } else {
        columnToScrollTo = column;
      }
      this.gridBodyCon.getScrollFeature().ensureColumnVisible(columnToScrollTo);
    };
    __decorate$1q([
      Autowired("focusService")
    ], HeaderNavigationService2.prototype, "focusService", void 0);
    __decorate$1q([
      Autowired("headerPositionUtils")
    ], HeaderNavigationService2.prototype, "headerPositionUtils", void 0);
    __decorate$1q([
      Autowired("ctrlsService")
    ], HeaderNavigationService2.prototype, "ctrlsService", void 0);
    __decorate$1q([
      PostConstruct
    ], HeaderNavigationService2.prototype, "postConstruct", null);
    HeaderNavigationService2 = __decorate$1q([
      Bean("headerNavigationService")
    ], HeaderNavigationService2);
    return HeaderNavigationService2;
  }(BeanStub)
);
var __extends$1u = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1p = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var GridHeaderCtrl = (
  /** @class */
  function(_super) {
    __extends$1u(GridHeaderCtrl2, _super);
    function GridHeaderCtrl2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    GridHeaderCtrl2.prototype.setComp = function(comp, eGui, eFocusableElement) {
      this.comp = comp;
      this.eGui = eGui;
      this.createManagedBean(new ManagedFocusFeature(eFocusableElement, {
        onTabKeyDown: this.onTabKeyDown.bind(this),
        handleKeyDown: this.handleKeyDown.bind(this),
        onFocusOut: this.onFocusOut.bind(this)
      }));
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onPivotModeChanged.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
      this.onPivotModeChanged();
      this.setupHeaderHeight();
      this.ctrlsService.registerGridHeaderCtrl(this);
    };
    GridHeaderCtrl2.prototype.setupHeaderHeight = function() {
      var listener = this.setHeaderHeight.bind(this);
      listener();
      this.addManagedPropertyListener("headerHeight", listener);
      this.addManagedPropertyListener("pivotHeaderHeight", listener);
      this.addManagedPropertyListener("groupHeaderHeight", listener);
      this.addManagedPropertyListener("pivotGroupHeaderHeight", listener);
      this.addManagedPropertyListener("floatingFiltersHeight", listener);
      this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HEADER_HEIGHT_CHANGED, listener);
      this.addManagedListener(this.eventService, Events.EVENT_GRID_STYLES_CHANGED, listener);
      this.addManagedListener(this.eventService, Events.EVENT_ADVANCED_FILTER_ENABLED_CHANGED, listener);
    };
    GridHeaderCtrl2.prototype.getHeaderHeight = function() {
      return this.headerHeight;
    };
    GridHeaderCtrl2.prototype.setHeaderHeight = function() {
      var columnModel = this.columnModel;
      var numberOfFloating = 0;
      var headerRowCount = columnModel.getHeaderRowCount();
      var totalHeaderHeight;
      var hasFloatingFilters = this.filterManager.hasFloatingFilters();
      if (hasFloatingFilters) {
        headerRowCount++;
        numberOfFloating = 1;
      }
      var groupHeight = this.columnModel.getColumnGroupHeaderRowHeight();
      var headerHeight = this.columnModel.getColumnHeaderRowHeight();
      var numberOfNonGroups = 1 + numberOfFloating;
      var numberOfGroups = headerRowCount - numberOfNonGroups;
      totalHeaderHeight = numberOfFloating * columnModel.getFloatingFiltersHeight();
      totalHeaderHeight += numberOfGroups * groupHeight;
      totalHeaderHeight += headerHeight;
      if (this.headerHeight === totalHeaderHeight) {
        return;
      }
      this.headerHeight = totalHeaderHeight;
      var px = "".concat(totalHeaderHeight + 1, "px");
      this.comp.setHeightAndMinHeight(px);
      this.eventService.dispatchEvent({
        type: Events.EVENT_HEADER_HEIGHT_CHANGED
      });
    };
    GridHeaderCtrl2.prototype.onPivotModeChanged = function() {
      var pivotMode = this.columnModel.isPivotMode();
      this.comp.addOrRemoveCssClass("ag-pivot-on", pivotMode);
      this.comp.addOrRemoveCssClass("ag-pivot-off", !pivotMode);
    };
    GridHeaderCtrl2.prototype.onDisplayedColumnsChanged = function() {
      var columns = this.columnModel.getAllDisplayedColumns();
      var shouldAllowOverflow = columns.some(function(col) {
        return col.isSpanHeaderHeight();
      });
      this.comp.addOrRemoveCssClass("ag-header-allow-overflow", shouldAllowOverflow);
    };
    GridHeaderCtrl2.prototype.onTabKeyDown = function(e) {
      var isRtl = this.gridOptionsService.get("enableRtl");
      var direction = e.shiftKey !== isRtl ? HeaderNavigationDirection.LEFT : HeaderNavigationDirection.RIGHT;
      if (this.headerNavigationService.navigateHorizontally(direction, true, e) || this.focusService.focusNextGridCoreContainer(e.shiftKey)) {
        e.preventDefault();
      }
    };
    GridHeaderCtrl2.prototype.handleKeyDown = function(e) {
      var direction = null;
      switch (e.key) {
        case KeyCode.LEFT:
          direction = HeaderNavigationDirection.LEFT;
        case KeyCode.RIGHT:
          if (!exists(direction)) {
            direction = HeaderNavigationDirection.RIGHT;
          }
          this.headerNavigationService.navigateHorizontally(direction, false, e);
          break;
        case KeyCode.UP:
          direction = HeaderNavigationDirection.UP;
        case KeyCode.DOWN:
          if (!exists(direction)) {
            direction = HeaderNavigationDirection.DOWN;
          }
          if (this.headerNavigationService.navigateVertically(direction, null, e)) {
            e.preventDefault();
          }
          break;
        default:
          return;
      }
    };
    GridHeaderCtrl2.prototype.onFocusOut = function(e) {
      var eDocument = this.gridOptionsService.getDocument();
      var relatedTarget = e.relatedTarget;
      if (!relatedTarget && this.eGui.contains(eDocument.activeElement)) {
        return;
      }
      if (!this.eGui.contains(relatedTarget)) {
        this.focusService.clearFocusedHeader();
      }
    };
    __decorate$1p([
      Autowired("headerNavigationService")
    ], GridHeaderCtrl2.prototype, "headerNavigationService", void 0);
    __decorate$1p([
      Autowired("focusService")
    ], GridHeaderCtrl2.prototype, "focusService", void 0);
    __decorate$1p([
      Autowired("columnModel")
    ], GridHeaderCtrl2.prototype, "columnModel", void 0);
    __decorate$1p([
      Autowired("ctrlsService")
    ], GridHeaderCtrl2.prototype, "ctrlsService", void 0);
    __decorate$1p([
      Autowired("filterManager")
    ], GridHeaderCtrl2.prototype, "filterManager", void 0);
    return GridHeaderCtrl2;
  }(BeanStub)
);
var __extends$1t = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1o = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var GridHeaderComp = (
  /** @class */
  function(_super) {
    __extends$1t(GridHeaderComp2, _super);
    function GridHeaderComp2() {
      return _super.call(this, GridHeaderComp2.TEMPLATE) || this;
    }
    GridHeaderComp2.prototype.postConstruct = function() {
      var _this = this;
      var compProxy = {
        addOrRemoveCssClass: function(cssClassName, on) {
          return _this.addOrRemoveCssClass(cssClassName, on);
        },
        setHeightAndMinHeight: function(height) {
          _this.getGui().style.height = height;
          _this.getGui().style.minHeight = height;
        }
      };
      var ctrl = this.createManagedBean(new GridHeaderCtrl());
      ctrl.setComp(compProxy, this.getGui(), this.getFocusableElement());
      var addContainer = function(container) {
        _this.createManagedBean(container);
        _this.appendChild(container);
      };
      addContainer(new HeaderRowContainerComp("left"));
      addContainer(new HeaderRowContainerComp(null));
      addContainer(new HeaderRowContainerComp("right"));
    };
    GridHeaderComp2.TEMPLATE = '<div class="ag-header" role="presentation"/>';
    __decorate$1o([
      PostConstruct
    ], GridHeaderComp2.prototype, "postConstruct", null);
    return GridHeaderComp2;
  }(Component2)
);
var __extends$1s = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1n = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HorizontalResizeService = (
  /** @class */
  function(_super) {
    __extends$1s(HorizontalResizeService2, _super);
    function HorizontalResizeService2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    HorizontalResizeService2.prototype.addResizeBar = function(params) {
      var _this = this;
      var dragSource = {
        dragStartPixels: params.dragStartPixels || 0,
        eElement: params.eResizeBar,
        onDragStart: this.onDragStart.bind(this, params),
        onDragStop: this.onDragStop.bind(this, params),
        onDragging: this.onDragging.bind(this, params),
        includeTouch: true,
        stopPropagationForTouch: true
      };
      this.dragService.addDragSource(dragSource);
      var finishedWithResizeFunc = function() {
        return _this.dragService.removeDragSource(dragSource);
      };
      return finishedWithResizeFunc;
    };
    HorizontalResizeService2.prototype.onDragStart = function(params, mouseEvent) {
      this.dragStartX = mouseEvent.clientX;
      this.setResizeIcons();
      var shiftKey = mouseEvent instanceof MouseEvent && mouseEvent.shiftKey === true;
      params.onResizeStart(shiftKey);
    };
    HorizontalResizeService2.prototype.setResizeIcons = function() {
      var ctrl = this.ctrlsService.getGridCtrl();
      ctrl.setResizeCursor(true);
      ctrl.disableUserSelect(true);
    };
    HorizontalResizeService2.prototype.onDragStop = function(params, mouseEvent) {
      params.onResizeEnd(this.resizeAmount);
      this.resetIcons();
    };
    HorizontalResizeService2.prototype.resetIcons = function() {
      var ctrl = this.ctrlsService.getGridCtrl();
      ctrl.setResizeCursor(false);
      ctrl.disableUserSelect(false);
    };
    HorizontalResizeService2.prototype.onDragging = function(params, mouseEvent) {
      this.resizeAmount = mouseEvent.clientX - this.dragStartX;
      params.onResizing(this.resizeAmount);
    };
    __decorate$1n([
      Autowired("dragService")
    ], HorizontalResizeService2.prototype, "dragService", void 0);
    __decorate$1n([
      Autowired("ctrlsService")
    ], HorizontalResizeService2.prototype, "ctrlsService", void 0);
    HorizontalResizeService2 = __decorate$1n([
      Bean("horizontalResizeService")
    ], HorizontalResizeService2);
    return HorizontalResizeService2;
  }(BeanStub)
);
var __extends$1r = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1m = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var StandardMenuFactory = (
  /** @class */
  function(_super) {
    __extends$1r(StandardMenuFactory2, _super);
    function StandardMenuFactory2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    StandardMenuFactory2.prototype.hideActiveMenu = function() {
      if (this.hidePopup) {
        this.hidePopup();
      }
    };
    StandardMenuFactory2.prototype.showMenuAfterMouseEvent = function(column, mouseEvent) {
      var _this = this;
      this.showPopup(column, function(eMenu) {
        _this.popupService.positionPopupUnderMouseEvent({
          column,
          type: "columnMenu",
          mouseEvent,
          ePopup: eMenu
        });
      }, "columnMenu", mouseEvent.target);
    };
    StandardMenuFactory2.prototype.showMenuAfterButtonClick = function(column, eventSource, containerType) {
      var _this = this;
      this.showPopup(column, function(eMenu) {
        _this.popupService.positionPopupByComponent({
          type: containerType,
          eventSource,
          ePopup: eMenu,
          keepWithinBounds: true,
          position: "under",
          column
        });
      }, containerType, eventSource);
    };
    StandardMenuFactory2.prototype.showPopup = function(column, positionCallback, containerType, eventSource) {
      var _this = this;
      var filterWrapper = this.filterManager.getOrCreateFilterWrapper(column, "COLUMN_MENU");
      if (!filterWrapper) {
        throw new Error("AG Grid - unable to show popup filter, filter instantiation failed");
      }
      var eMenu = document.createElement("div");
      setAriaRole(eMenu, "presentation");
      eMenu.classList.add("ag-menu");
      this.tabListener = this.addManagedListener(eMenu, "keydown", function(e) {
        return _this.trapFocusWithin(e, eMenu);
      });
      filterWrapper.guiPromise.then(function(gui) {
        return eMenu.appendChild(gui);
      });
      var hidePopup;
      var afterGuiDetached = function() {
        var _a;
        return (_a = filterWrapper.filterPromise) === null || _a === void 0 ? void 0 : _a.then(function(filter) {
          var _a2;
          return (_a2 = filter === null || filter === void 0 ? void 0 : filter.afterGuiDetached) === null || _a2 === void 0 ? void 0 : _a2.call(filter);
        });
      };
      var anchorToElement = eventSource || this.ctrlsService.getGridBodyCtrl().getGui();
      var closedCallback = function(e) {
        column.setMenuVisible(false, "contextMenu");
        var isKeyboardEvent = e instanceof KeyboardEvent;
        if (_this.tabListener) {
          _this.tabListener = _this.tabListener();
        }
        if (isKeyboardEvent && eventSource && isVisible(eventSource)) {
          var focusableEl = _this.focusService.findTabbableParent(eventSource);
          if (focusableEl) {
            focusableEl.focus();
          }
        }
        afterGuiDetached();
      };
      var translate = this.localeService.getLocaleTextFunc();
      var addPopupRes = this.popupService.addPopup({
        modal: true,
        eChild: eMenu,
        closeOnEsc: true,
        closedCallback,
        positionCallback: function() {
          return positionCallback(eMenu);
        },
        anchorToElement,
        ariaLabel: translate("ariaLabelColumnMenu", "Column Menu")
      });
      if (addPopupRes) {
        this.hidePopup = hidePopup = addPopupRes.hideFunc;
      }
      filterWrapper.filterPromise.then(function(filter) {
        positionCallback(eMenu);
        if (filter.afterGuiAttached) {
          filter.afterGuiAttached({ container: containerType, hidePopup });
        }
      });
      column.setMenuVisible(true, "contextMenu");
    };
    StandardMenuFactory2.prototype.trapFocusWithin = function(e, menu) {
      if (e.key !== KeyCode.TAB || e.defaultPrevented || this.focusService.findNextFocusableElement(menu, false, e.shiftKey)) {
        return;
      }
      e.preventDefault();
      this.focusService.focusInto(menu, e.shiftKey);
    };
    StandardMenuFactory2.prototype.isMenuEnabled = function(column) {
      return column.isFilterAllowed() && column.getMenuTabs(["filterMenuTab"]).includes("filterMenuTab");
    };
    __decorate$1m([
      Autowired("filterManager")
    ], StandardMenuFactory2.prototype, "filterManager", void 0);
    __decorate$1m([
      Autowired("popupService")
    ], StandardMenuFactory2.prototype, "popupService", void 0);
    __decorate$1m([
      Autowired("focusService")
    ], StandardMenuFactory2.prototype, "focusService", void 0);
    __decorate$1m([
      Autowired("ctrlsService")
    ], StandardMenuFactory2.prototype, "ctrlsService", void 0);
    StandardMenuFactory2 = __decorate$1m([
      Bean("menuFactory")
    ], StandardMenuFactory2);
    return StandardMenuFactory2;
  }(BeanStub)
);
var __extends$1q = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1l = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TabGuardClassNames;
(function(TabGuardClassNames2) {
  TabGuardClassNames2["TAB_GUARD"] = "ag-tab-guard";
  TabGuardClassNames2["TAB_GUARD_TOP"] = "ag-tab-guard-top";
  TabGuardClassNames2["TAB_GUARD_BOTTOM"] = "ag-tab-guard-bottom";
})(TabGuardClassNames || (TabGuardClassNames = {}));
var TabGuardCtrl = (
  /** @class */
  function(_super) {
    __extends$1q(TabGuardCtrl2, _super);
    function TabGuardCtrl2(params) {
      var _this = _super.call(this) || this;
      _this.skipTabGuardFocus = false;
      var comp = params.comp, eTopGuard = params.eTopGuard, eBottomGuard = params.eBottomGuard, focusTrapActive = params.focusTrapActive, focusInnerElement = params.focusInnerElement, onFocusIn = params.onFocusIn, onFocusOut = params.onFocusOut, shouldStopEventPropagation = params.shouldStopEventPropagation, onTabKeyDown = params.onTabKeyDown, handleKeyDown = params.handleKeyDown, eFocusableElement = params.eFocusableElement;
      _this.comp = comp;
      _this.eTopGuard = eTopGuard;
      _this.eBottomGuard = eBottomGuard;
      _this.providedFocusInnerElement = focusInnerElement;
      _this.eFocusableElement = eFocusableElement;
      _this.focusTrapActive = !!focusTrapActive;
      _this.providedFocusIn = onFocusIn;
      _this.providedFocusOut = onFocusOut;
      _this.providedShouldStopEventPropagation = shouldStopEventPropagation;
      _this.providedOnTabKeyDown = onTabKeyDown;
      _this.providedHandleKeyDown = handleKeyDown;
      return _this;
    }
    TabGuardCtrl2.prototype.postConstruct = function() {
      var _this = this;
      this.createManagedBean(new ManagedFocusFeature(this.eFocusableElement, {
        shouldStopEventPropagation: function() {
          return _this.shouldStopEventPropagation();
        },
        onTabKeyDown: function(e) {
          return _this.onTabKeyDown(e);
        },
        handleKeyDown: function(e) {
          return _this.handleKeyDown(e);
        },
        onFocusIn: function(e) {
          return _this.onFocusIn(e);
        },
        onFocusOut: function(e) {
          return _this.onFocusOut(e);
        }
      }));
      this.activateTabGuards();
      [this.eTopGuard, this.eBottomGuard].forEach(function(guard) {
        return _this.addManagedListener(guard, "focus", _this.onFocus.bind(_this));
      });
    };
    TabGuardCtrl2.prototype.handleKeyDown = function(e) {
      if (this.providedHandleKeyDown) {
        this.providedHandleKeyDown(e);
      }
    };
    TabGuardCtrl2.prototype.tabGuardsAreActive = function() {
      return !!this.eTopGuard && this.eTopGuard.hasAttribute("tabIndex");
    };
    TabGuardCtrl2.prototype.shouldStopEventPropagation = function() {
      if (this.providedShouldStopEventPropagation) {
        return this.providedShouldStopEventPropagation();
      }
      return false;
    };
    TabGuardCtrl2.prototype.activateTabGuards = function() {
      var tabIndex = this.gridOptionsService.get("tabIndex");
      this.comp.setTabIndex(tabIndex.toString());
    };
    TabGuardCtrl2.prototype.deactivateTabGuards = function() {
      this.comp.setTabIndex();
    };
    TabGuardCtrl2.prototype.onFocus = function(e) {
      if (this.skipTabGuardFocus) {
        this.skipTabGuardFocus = false;
        return;
      }
      var fromBottom = e.target === this.eBottomGuard;
      if (this.providedFocusInnerElement) {
        this.providedFocusInnerElement(fromBottom);
      } else {
        this.focusInnerElement(fromBottom);
      }
    };
    TabGuardCtrl2.prototype.onFocusIn = function(e) {
      if (this.focusTrapActive) {
        return;
      }
      if (this.providedFocusIn) {
        this.providedFocusIn(e);
      }
      this.deactivateTabGuards();
    };
    TabGuardCtrl2.prototype.onFocusOut = function(e) {
      if (this.focusTrapActive) {
        return;
      }
      if (this.providedFocusOut) {
        this.providedFocusOut(e);
      }
      if (!this.eFocusableElement.contains(e.relatedTarget)) {
        this.activateTabGuards();
      }
    };
    TabGuardCtrl2.prototype.onTabKeyDown = function(e) {
      var _this = this;
      if (this.providedOnTabKeyDown) {
        this.providedOnTabKeyDown(e);
        return;
      }
      if (this.focusTrapActive) {
        return;
      }
      if (e.defaultPrevented) {
        return;
      }
      var tabGuardsAreActive = this.tabGuardsAreActive();
      if (tabGuardsAreActive) {
        this.deactivateTabGuards();
      }
      var nextRoot = this.getNextFocusableElement(e.shiftKey);
      if (tabGuardsAreActive) {
        setTimeout(function() {
          return _this.activateTabGuards();
        }, 0);
      }
      if (!nextRoot) {
        return;
      }
      nextRoot.focus();
      e.preventDefault();
    };
    TabGuardCtrl2.prototype.focusInnerElement = function(fromBottom) {
      if (fromBottom === void 0) {
        fromBottom = false;
      }
      var focusable = this.focusService.findFocusableElements(this.eFocusableElement);
      if (this.tabGuardsAreActive()) {
        focusable.splice(0, 1);
        focusable.splice(focusable.length - 1, 1);
      }
      if (!focusable.length) {
        return;
      }
      focusable[fromBottom ? focusable.length - 1 : 0].focus({ preventScroll: true });
    };
    TabGuardCtrl2.prototype.getNextFocusableElement = function(backwards) {
      return this.focusService.findNextFocusableElement(this.eFocusableElement, false, backwards);
    };
    TabGuardCtrl2.prototype.forceFocusOutOfContainer = function(up) {
      var _this = this;
      if (up === void 0) {
        up = false;
      }
      var tabGuardToFocus = up ? this.eTopGuard : this.eBottomGuard;
      this.activateTabGuards();
      this.skipTabGuardFocus = true;
      tabGuardToFocus.focus();
      window.setTimeout(function() {
        _this.activateTabGuards();
      });
    };
    __decorate$1l([
      Autowired("focusService")
    ], TabGuardCtrl2.prototype, "focusService", void 0);
    __decorate$1l([
      PostConstruct
    ], TabGuardCtrl2.prototype, "postConstruct", null);
    return TabGuardCtrl2;
  }(BeanStub)
);
var __extends$1p = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __read$i = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$g = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var TabGuardComp = (
  /** @class */
  function(_super) {
    __extends$1p(TabGuardComp2, _super);
    function TabGuardComp2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    TabGuardComp2.prototype.initialiseTabGuard = function(params) {
      this.eTopGuard = this.createTabGuard("top");
      this.eBottomGuard = this.createTabGuard("bottom");
      this.eFocusableElement = this.getFocusableElement();
      var tabGuards = [this.eTopGuard, this.eBottomGuard];
      var compProxy = {
        setTabIndex: function(tabIndex) {
          tabGuards.forEach(function(tabGuard) {
            return tabIndex != null ? tabGuard.setAttribute("tabindex", tabIndex) : tabGuard.removeAttribute("tabindex");
          });
        }
      };
      this.addTabGuards(this.eTopGuard, this.eBottomGuard);
      this.tabGuardCtrl = this.createManagedBean(new TabGuardCtrl({
        comp: compProxy,
        focusTrapActive: !!params.focusTrapActive,
        eTopGuard: this.eTopGuard,
        eBottomGuard: this.eBottomGuard,
        eFocusableElement: this.eFocusableElement,
        onFocusIn: params.onFocusIn,
        onFocusOut: params.onFocusOut,
        focusInnerElement: params.focusInnerElement,
        handleKeyDown: params.handleKeyDown,
        onTabKeyDown: params.onTabKeyDown,
        shouldStopEventPropagation: params.shouldStopEventPropagation
      }));
    };
    TabGuardComp2.prototype.createTabGuard = function(side) {
      var tabGuard = document.createElement("div");
      var cls = side === "top" ? TabGuardClassNames.TAB_GUARD_TOP : TabGuardClassNames.TAB_GUARD_BOTTOM;
      tabGuard.classList.add(TabGuardClassNames.TAB_GUARD, cls);
      setAriaRole(tabGuard, "presentation");
      return tabGuard;
    };
    TabGuardComp2.prototype.addTabGuards = function(topTabGuard, bottomTabGuard) {
      this.eFocusableElement.insertAdjacentElement("afterbegin", topTabGuard);
      this.eFocusableElement.insertAdjacentElement("beforeend", bottomTabGuard);
    };
    TabGuardComp2.prototype.removeAllChildrenExceptTabGuards = function() {
      var tabGuards = [this.eTopGuard, this.eBottomGuard];
      clearElement(this.getFocusableElement());
      this.addTabGuards.apply(this, __spreadArray$g([], __read$i(tabGuards), false));
    };
    TabGuardComp2.prototype.forceFocusOutOfContainer = function(up) {
      if (up === void 0) {
        up = false;
      }
      this.tabGuardCtrl.forceFocusOutOfContainer(up);
    };
    TabGuardComp2.prototype.appendChild = function(newChild, container) {
      if (!isNodeOrElement(newChild)) {
        newChild = newChild.getGui();
      }
      var bottomTabGuard = this.eBottomGuard;
      if (bottomTabGuard) {
        bottomTabGuard.insertAdjacentElement("beforebegin", newChild);
      } else {
        _super.prototype.appendChild.call(this, newChild, container);
      }
    };
    return TabGuardComp2;
  }(Component2)
);
var __extends$1o = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1k = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TabbedLayout = (
  /** @class */
  function(_super) {
    __extends$1o(TabbedLayout2, _super);
    function TabbedLayout2(params) {
      var _this = _super.call(this, TabbedLayout2.getTemplate(params.cssClass)) || this;
      _this.items = [];
      _this.tabbedItemScrollMap = /* @__PURE__ */ new Map();
      _this.params = params;
      if (params.items) {
        params.items.forEach(function(item) {
          return _this.addItem(item);
        });
      }
      return _this;
    }
    TabbedLayout2.prototype.postConstruct = function() {
      var _this = this;
      this.initialiseTabGuard({
        onTabKeyDown: this.onTabKeyDown.bind(this),
        handleKeyDown: this.handleKeyDown.bind(this),
        focusInnerElement: this.focusInnerElement.bind(this),
        focusTrapActive: true
      });
      this.addDestroyFunc(function() {
        var _a, _b, _c;
        return (_c = (_b = (_a = _this.activeItem) === null || _a === void 0 ? void 0 : _a.tabbedItem) === null || _b === void 0 ? void 0 : _b.afterDetachedCallback) === null || _c === void 0 ? void 0 : _c.call(_b);
      });
    };
    TabbedLayout2.getTemplate = function(cssClass) {
      return (
        /* html */
        '<div class="ag-tabs '.concat(cssClass, '">\n            <div ref="eHeader" role="tablist" class="ag-tabs-header ').concat(cssClass ? "".concat(cssClass, "-header") : "", '"></div>\n            <div ref="eBody" role="presentation" class="ag-tabs-body ').concat(cssClass ? "".concat(cssClass, "-body") : "", '"></div>\n        </div>')
      );
    };
    TabbedLayout2.prototype.handleKeyDown = function(e) {
      var eDocument = this.gridOptionsService.getDocument();
      switch (e.key) {
        case KeyCode.RIGHT:
        case KeyCode.LEFT:
          if (!this.eHeader.contains(eDocument.activeElement)) {
            return;
          }
          var isRightKey = e.key === KeyCode.RIGHT;
          var isRtl = this.gridOptionsService.get("enableRtl");
          var currentPosition = this.items.indexOf(this.activeItem);
          var nextPosition = isRightKey !== isRtl ? Math.min(currentPosition + 1, this.items.length - 1) : Math.max(currentPosition - 1, 0);
          if (currentPosition === nextPosition) {
            return;
          }
          e.preventDefault();
          var nextItem = this.items[nextPosition];
          this.showItemWrapper(nextItem);
          nextItem.eHeaderButton.focus();
          break;
        case KeyCode.UP:
        case KeyCode.DOWN:
          e.stopPropagation();
          break;
      }
    };
    TabbedLayout2.prototype.onTabKeyDown = function(e) {
      if (e.defaultPrevented) {
        return;
      }
      var _a = this, focusService = _a.focusService, eHeader = _a.eHeader, eBody = _a.eBody, activeItem = _a.activeItem;
      var eDocument = this.gridOptionsService.getDocument();
      var activeElement = eDocument.activeElement;
      var target = e.target;
      e.preventDefault();
      if (eHeader.contains(activeElement)) {
        this.focusBody(e.shiftKey);
        return;
      }
      var nextEl = null;
      if (focusService.isTargetUnderManagedComponent(eBody, target)) {
        if (e.shiftKey) {
          nextEl = this.focusService.findFocusableElementBeforeTabGuard(eBody, target);
        }
        if (!nextEl) {
          nextEl = activeItem.eHeaderButton;
        }
      }
      if (!nextEl && eBody.contains(activeElement)) {
        nextEl = focusService.findNextFocusableElement(eBody, false, e.shiftKey);
        if (!nextEl) {
          this.focusHeader();
        }
      }
      if (nextEl) {
        nextEl.focus();
      }
    };
    TabbedLayout2.prototype.focusInnerElement = function(fromBottom) {
      if (fromBottom) {
        this.focusHeader();
      } else {
        this.focusBody(true);
      }
    };
    TabbedLayout2.prototype.focusHeader = function() {
      this.activeItem.eHeaderButton.focus();
    };
    TabbedLayout2.prototype.focusBody = function(fromBottom) {
      this.focusService.focusInto(this.eBody, fromBottom);
    };
    TabbedLayout2.prototype.setAfterAttachedParams = function(params) {
      this.afterAttachedParams = params;
    };
    TabbedLayout2.prototype.showFirstItem = function() {
      if (this.items.length > 0) {
        this.showItemWrapper(this.items[0]);
      }
    };
    TabbedLayout2.prototype.addItem = function(item) {
      var eHeaderButton = document.createElement("span");
      setAriaRole(eHeaderButton, "tab");
      eHeaderButton.setAttribute("tabindex", "-1");
      eHeaderButton.appendChild(item.title);
      eHeaderButton.classList.add("ag-tab");
      this.eHeader.appendChild(eHeaderButton);
      setAriaLabel(eHeaderButton, item.titleLabel);
      var wrapper = {
        tabbedItem: item,
        eHeaderButton
      };
      this.items.push(wrapper);
      eHeaderButton.addEventListener("click", this.showItemWrapper.bind(this, wrapper));
    };
    TabbedLayout2.prototype.showItem = function(tabbedItem) {
      var itemWrapper = this.items.find(function(wrapper) {
        return wrapper.tabbedItem === tabbedItem;
      });
      if (itemWrapper) {
        this.showItemWrapper(itemWrapper);
      }
    };
    TabbedLayout2.prototype.showItemWrapper = function(wrapper) {
      var _this = this;
      var _a, _b;
      var tabbedItem = wrapper.tabbedItem, eHeaderButton = wrapper.eHeaderButton;
      if (this.params.onItemClicked) {
        this.params.onItemClicked({ item: tabbedItem });
      }
      if (this.activeItem === wrapper) {
        callIfPresent(this.params.onActiveItemClicked);
        return;
      }
      if (this.lastScrollListener) {
        this.lastScrollListener = this.lastScrollListener();
      }
      clearElement(this.eBody);
      tabbedItem.bodyPromise.then(function(body) {
        _this.eBody.appendChild(body);
        var onlyUnmanaged = !_this.focusService.isKeyboardMode();
        _this.focusService.focusInto(_this.eBody, false, onlyUnmanaged);
        if (tabbedItem.afterAttachedCallback) {
          tabbedItem.afterAttachedCallback(_this.afterAttachedParams);
        }
        if (_this.params.keepScrollPosition) {
          var scrollableContainer_1 = tabbedItem.getScrollableContainer && tabbedItem.getScrollableContainer() || body;
          _this.lastScrollListener = _this.addManagedListener(scrollableContainer_1, "scroll", function() {
            _this.tabbedItemScrollMap.set(tabbedItem.name, scrollableContainer_1.scrollTop);
          });
          var scrollPosition_1 = _this.tabbedItemScrollMap.get(tabbedItem.name);
          if (scrollPosition_1 !== void 0) {
            setTimeout(function() {
              scrollableContainer_1.scrollTop = scrollPosition_1;
            }, 0);
          }
        }
      });
      if (this.activeItem) {
        this.activeItem.eHeaderButton.classList.remove("ag-tab-selected");
        (_b = (_a = this.activeItem.tabbedItem).afterDetachedCallback) === null || _b === void 0 ? void 0 : _b.call(_a);
      }
      eHeaderButton.classList.add("ag-tab-selected");
      this.activeItem = wrapper;
    };
    __decorate$1k([
      Autowired("focusService")
    ], TabbedLayout2.prototype, "focusService", void 0);
    __decorate$1k([
      RefSelector("eHeader")
    ], TabbedLayout2.prototype, "eHeader", void 0);
    __decorate$1k([
      RefSelector("eBody")
    ], TabbedLayout2.prototype, "eBody", void 0);
    __decorate$1k([
      PostConstruct
    ], TabbedLayout2.prototype, "postConstruct", null);
    return TabbedLayout2;
  }(TabGuardComp)
);
var __extends$1n = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1j = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DEBOUNCE_DELAY = 50;
var ResizeObserverService = (
  /** @class */
  function(_super) {
    __extends$1n(ResizeObserverService2, _super);
    function ResizeObserverService2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.polyfillFunctions = [];
      return _this;
    }
    ResizeObserverService2.prototype.observeResize = function(element, callback) {
      var _this = this;
      var win = this.gridOptionsService.getWindow();
      var useBrowserResizeObserver = function() {
        var resizeObserver = new win.ResizeObserver(callback);
        resizeObserver.observe(element);
        return function() {
          return resizeObserver.disconnect();
        };
      };
      var usePolyfill = function() {
        var _a, _b;
        var widthLastTime = (_a = element === null || element === void 0 ? void 0 : element.clientWidth) !== null && _a !== void 0 ? _a : 0;
        var heightLastTime = (_b = element === null || element === void 0 ? void 0 : element.clientHeight) !== null && _b !== void 0 ? _b : 0;
        var running = true;
        var periodicallyCheckWidthAndHeight = function() {
          var _a2, _b2;
          if (running) {
            var newWidth = (_a2 = element === null || element === void 0 ? void 0 : element.clientWidth) !== null && _a2 !== void 0 ? _a2 : 0;
            var newHeight = (_b2 = element === null || element === void 0 ? void 0 : element.clientHeight) !== null && _b2 !== void 0 ? _b2 : 0;
            var changed = newWidth !== widthLastTime || newHeight !== heightLastTime;
            if (changed) {
              widthLastTime = newWidth;
              heightLastTime = newHeight;
              callback();
            }
            _this.doNextPolyfillTurn(periodicallyCheckWidthAndHeight);
          }
        };
        periodicallyCheckWidthAndHeight();
        return function() {
          return running = false;
        };
      };
      var suppressResize = this.gridOptionsService.get("suppressBrowserResizeObserver");
      var resizeObserverExists = !!win.ResizeObserver;
      if (resizeObserverExists && !suppressResize) {
        return useBrowserResizeObserver();
      }
      return this.getFrameworkOverrides().wrapIncoming(function() {
        return usePolyfill();
      }, "resize-observer");
    };
    ResizeObserverService2.prototype.doNextPolyfillTurn = function(func) {
      this.polyfillFunctions.push(func);
      this.schedulePolyfill();
    };
    ResizeObserverService2.prototype.schedulePolyfill = function() {
      var _this = this;
      if (this.polyfillScheduled) {
        return;
      }
      var executeAllFuncs = function() {
        var funcs = _this.polyfillFunctions;
        _this.polyfillScheduled = false;
        _this.polyfillFunctions = [];
        funcs.forEach(function(f) {
          return f();
        });
      };
      this.polyfillScheduled = true;
      window.setTimeout(executeAllFuncs, DEBOUNCE_DELAY);
    };
    ResizeObserverService2 = __decorate$1j([
      Bean("resizeObserverService")
    ], ResizeObserverService2);
    return ResizeObserverService2;
  }(BeanStub)
);
var __extends$1m = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1i = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AnimationFrameService = (
  /** @class */
  function(_super) {
    __extends$1m(AnimationFrameService2, _super);
    function AnimationFrameService2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.createTasksP1 = { list: [], sorted: false };
      _this.createTasksP2 = { list: [], sorted: false };
      _this.destroyTasks = [];
      _this.ticking = false;
      _this.scrollGoingDown = true;
      _this.lastPage = 0;
      _this.lastScrollTop = 0;
      _this.taskCount = 0;
      _this.cancelledTasks = /* @__PURE__ */ new Set();
      return _this;
    }
    AnimationFrameService2.prototype.setScrollTop = function(scrollTop) {
      var isPaginationActive = this.gridOptionsService.get("pagination");
      this.scrollGoingDown = scrollTop >= this.lastScrollTop;
      if (isPaginationActive && scrollTop === 0) {
        var currentPage = this.paginationProxy.getCurrentPage();
        if (currentPage !== this.lastPage) {
          this.lastPage = currentPage;
          this.scrollGoingDown = true;
        }
      }
      this.lastScrollTop = scrollTop;
    };
    AnimationFrameService2.prototype.init = function() {
      this.useAnimationFrame = !this.gridOptionsService.get("suppressAnimationFrame");
    };
    AnimationFrameService2.prototype.isOn = function() {
      return this.useAnimationFrame;
    };
    AnimationFrameService2.prototype.verifyAnimationFrameOn = function(methodName) {
      if (this.useAnimationFrame === false) {
        console.warn("AG Grid: AnimationFrameService.".concat(methodName, " called but animation frames are off"));
      }
    };
    AnimationFrameService2.prototype.createTask = function(task, index, list) {
      this.verifyAnimationFrameOn(list);
      var taskItem = { task, index, createOrder: ++this.taskCount };
      this.addTaskToList(this[list], taskItem);
      this.schedule();
    };
    AnimationFrameService2.prototype.cancelTask = function(task) {
      this.cancelledTasks.add(task);
    };
    AnimationFrameService2.prototype.addTaskToList = function(taskList, task) {
      taskList.list.push(task);
      taskList.sorted = false;
    };
    AnimationFrameService2.prototype.sortTaskList = function(taskList) {
      if (taskList.sorted) {
        return;
      }
      var sortDirection = this.scrollGoingDown ? 1 : -1;
      taskList.list.sort(function(a, b) {
        return a.index !== b.index ? sortDirection * (b.index - a.index) : b.createOrder - a.createOrder;
      });
      taskList.sorted = true;
    };
    AnimationFrameService2.prototype.addDestroyTask = function(task) {
      this.verifyAnimationFrameOn("createTasksP3");
      this.destroyTasks.push(task);
      this.schedule();
    };
    AnimationFrameService2.prototype.executeFrame = function(millis) {
      this.verifyAnimationFrameOn("executeFrame");
      var p1TaskList = this.createTasksP1;
      var p1Tasks = p1TaskList.list;
      var p2TaskList = this.createTasksP2;
      var p2Tasks = p2TaskList.list;
      var destroyTasks = this.destroyTasks;
      var frameStart = (/* @__PURE__ */ new Date()).getTime();
      var duration = (/* @__PURE__ */ new Date()).getTime() - frameStart;
      var noMaxMillis = millis <= 0;
      var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
      while (noMaxMillis || duration < millis) {
        var gridBodyDidSomething = gridBodyCon.getScrollFeature().scrollGridIfNeeded();
        if (!gridBodyDidSomething) {
          var task = void 0;
          if (p1Tasks.length) {
            this.sortTaskList(p1TaskList);
            task = p1Tasks.pop().task;
          } else if (p2Tasks.length) {
            this.sortTaskList(p2TaskList);
            task = p2Tasks.pop().task;
          } else if (destroyTasks.length) {
            task = destroyTasks.pop();
          } else {
            this.cancelledTasks.clear();
            break;
          }
          if (!this.cancelledTasks.has(task)) {
            task();
          }
        }
        duration = (/* @__PURE__ */ new Date()).getTime() - frameStart;
      }
      if (p1Tasks.length || p2Tasks.length || destroyTasks.length) {
        this.requestFrame();
      } else {
        this.stopTicking();
      }
    };
    AnimationFrameService2.prototype.stopTicking = function() {
      this.ticking = false;
    };
    AnimationFrameService2.prototype.flushAllFrames = function() {
      if (!this.useAnimationFrame) {
        return;
      }
      this.executeFrame(-1);
    };
    AnimationFrameService2.prototype.schedule = function() {
      if (!this.useAnimationFrame) {
        return;
      }
      if (!this.ticking) {
        this.ticking = true;
        this.requestFrame();
      }
    };
    AnimationFrameService2.prototype.requestFrame = function() {
      var callback = this.executeFrame.bind(this, 60);
      this.requestAnimationFrame(callback);
    };
    AnimationFrameService2.prototype.requestAnimationFrame = function(callback) {
      var win = this.gridOptionsService.getWindow();
      if (win.requestAnimationFrame) {
        win.requestAnimationFrame(callback);
      } else if (win.webkitRequestAnimationFrame) {
        win.webkitRequestAnimationFrame(callback);
      } else {
        win.setTimeout(callback, 0);
      }
    };
    AnimationFrameService2.prototype.isQueueEmpty = function() {
      return !this.ticking;
    };
    AnimationFrameService2.prototype.debounce = function(func) {
      var _this = this;
      var pending = false;
      return function() {
        if (!_this.isOn()) {
          window.setTimeout(func, 0);
          return;
        }
        if (pending) {
          return;
        }
        pending = true;
        _this.addDestroyTask(function() {
          pending = false;
          func();
        });
      };
    };
    __decorate$1i([
      Autowired("ctrlsService")
    ], AnimationFrameService2.prototype, "ctrlsService", void 0);
    __decorate$1i([
      Autowired("paginationProxy")
    ], AnimationFrameService2.prototype, "paginationProxy", void 0);
    __decorate$1i([
      PostConstruct
    ], AnimationFrameService2.prototype, "init", null);
    AnimationFrameService2 = __decorate$1i([
      Bean("animationFrameService")
    ], AnimationFrameService2);
    return AnimationFrameService2;
  }(BeanStub)
);
var ClientSideRowModelSteps;
(function(ClientSideRowModelSteps2) {
  ClientSideRowModelSteps2["EVERYTHING"] = "group";
  ClientSideRowModelSteps2["FILTER"] = "filter";
  ClientSideRowModelSteps2["SORT"] = "sort";
  ClientSideRowModelSteps2["MAP"] = "map";
  ClientSideRowModelSteps2["AGGREGATE"] = "aggregate";
  ClientSideRowModelSteps2["FILTER_AGGREGATES"] = "filter_aggregates";
  ClientSideRowModelSteps2["PIVOT"] = "pivot";
  ClientSideRowModelSteps2["NOTHING"] = "nothing";
})(ClientSideRowModelSteps || (ClientSideRowModelSteps = {}));
var __extends$1l = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1h = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ExpansionService = (
  /** @class */
  function(_super) {
    __extends$1l(ExpansionService2, _super);
    function ExpansionService2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ExpansionService2.prototype.postConstruct = function() {
      this.isClientSideRowModel = this.rowModel.getType() === "clientSide";
    };
    ExpansionService2.prototype.expandRows = function(rowIds) {
      if (!this.isClientSideRowModel) {
        return;
      }
      var rowIdSet = new Set(rowIds);
      this.rowModel.forEachNode(function(node) {
        if (node.id && rowIdSet.has(node.id)) {
          node.expanded = true;
        }
      });
      this.onGroupExpandedOrCollapsed();
    };
    ExpansionService2.prototype.getExpandedRows = function() {
      var expandedRows = [];
      this.rowModel.forEachNode(function(_a) {
        var expanded = _a.expanded, id = _a.id;
        if (expanded && id) {
          expandedRows.push(id);
        }
      });
      return expandedRows;
    };
    ExpansionService2.prototype.expandAll = function(value) {
      if (!this.isClientSideRowModel) {
        return;
      }
      this.rowModel.expandOrCollapseAll(value);
    };
    ExpansionService2.prototype.setRowNodeExpanded = function(rowNode, expanded, expandParents) {
      if (rowNode) {
        if (expandParents && rowNode.parent && rowNode.parent.level !== -1) {
          this.setRowNodeExpanded(rowNode.parent, expanded, expandParents);
        }
        rowNode.setExpanded(expanded);
      }
    };
    ExpansionService2.prototype.onGroupExpandedOrCollapsed = function() {
      if (!this.isClientSideRowModel) {
        return;
      }
      this.rowModel.refreshModel({ step: ClientSideRowModelSteps.MAP });
    };
    __decorate$1h([
      Autowired("rowModel")
    ], ExpansionService2.prototype, "rowModel", void 0);
    __decorate$1h([
      PostConstruct
    ], ExpansionService2.prototype, "postConstruct", null);
    ExpansionService2 = __decorate$1h([
      Bean("expansionService")
    ], ExpansionService2);
    return ExpansionService2;
  }(BeanStub)
);
var __extends$1k = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1g = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AutoWidthCalculator = (
  /** @class */
  function(_super) {
    __extends$1k(AutoWidthCalculator2, _super);
    function AutoWidthCalculator2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    AutoWidthCalculator2.prototype.postConstruct = function() {
      var _this = this;
      this.ctrlsService.whenReady(function(p) {
        _this.centerRowContainerCtrl = p.centerRowContainerCtrl;
      });
    };
    AutoWidthCalculator2.prototype.getPreferredWidthForColumn = function(column, skipHeader) {
      var eHeaderCell = this.getHeaderCellForColumn(column);
      if (!eHeaderCell) {
        return -1;
      }
      var elements = this.rowRenderer.getAllCellsForColumn(column);
      if (!skipHeader) {
        elements.push(eHeaderCell);
      }
      return this.addElementsToContainerAndGetWidth(elements);
    };
    AutoWidthCalculator2.prototype.getPreferredWidthForColumnGroup = function(columnGroup) {
      var eHeaderCell = this.getHeaderCellForColumn(columnGroup);
      if (!eHeaderCell) {
        return -1;
      }
      return this.addElementsToContainerAndGetWidth([eHeaderCell]);
    };
    AutoWidthCalculator2.prototype.addElementsToContainerAndGetWidth = function(elements) {
      var _this = this;
      var eDummyContainer = document.createElement("form");
      eDummyContainer.style.position = "fixed";
      var eBodyContainer = this.centerRowContainerCtrl.getContainerElement();
      elements.forEach(function(el) {
        return _this.cloneItemIntoDummy(el, eDummyContainer);
      });
      eBodyContainer.appendChild(eDummyContainer);
      var dummyContainerWidth = eDummyContainer.offsetWidth;
      eBodyContainer.removeChild(eDummyContainer);
      var autoSizePadding = this.getAutoSizePadding();
      return dummyContainerWidth + autoSizePadding;
    };
    AutoWidthCalculator2.prototype.getAutoSizePadding = function() {
      return this.gridOptionsService.get("autoSizePadding");
    };
    AutoWidthCalculator2.prototype.getHeaderCellForColumn = function(column) {
      var element = null;
      this.ctrlsService.getHeaderRowContainerCtrls().forEach(function(container) {
        var res = container.getHtmlElementForColumnHeader(column);
        if (res != null) {
          element = res;
        }
      });
      return element;
    };
    AutoWidthCalculator2.prototype.cloneItemIntoDummy = function(eCell, eDummyContainer) {
      var eCellClone = eCell.cloneNode(true);
      eCellClone.style.width = "";
      eCellClone.style.position = "static";
      eCellClone.style.left = "";
      var eCloneParent = document.createElement("div");
      var eCloneParentClassList = eCloneParent.classList;
      var isHeader = ["ag-header-cell", "ag-header-group-cell"].some(function(cls) {
        return eCellClone.classList.contains(cls);
      });
      if (isHeader) {
        eCloneParentClassList.add("ag-header", "ag-header-row");
        eCloneParent.style.position = "static";
      } else {
        eCloneParentClassList.add("ag-row");
      }
      var pointer = eCell.parentElement;
      while (pointer) {
        var isRow = ["ag-header-row", "ag-row"].some(function(cls) {
          return pointer.classList.contains(cls);
        });
        if (isRow) {
          for (var i = 0; i < pointer.classList.length; i++) {
            var item = pointer.classList[i];
            if (item != "ag-row-position-absolute") {
              eCloneParentClassList.add(item);
            }
          }
          break;
        }
        pointer = pointer.parentElement;
      }
      eCloneParent.appendChild(eCellClone);
      eDummyContainer.appendChild(eCloneParent);
    };
    __decorate$1g([
      Autowired("rowRenderer")
    ], AutoWidthCalculator2.prototype, "rowRenderer", void 0);
    __decorate$1g([
      Autowired("ctrlsService")
    ], AutoWidthCalculator2.prototype, "ctrlsService", void 0);
    __decorate$1g([
      Autowired("rowCssClassCalculator")
    ], AutoWidthCalculator2.prototype, "rowCssClassCalculator", void 0);
    __decorate$1g([
      PostConstruct
    ], AutoWidthCalculator2.prototype, "postConstruct", null);
    AutoWidthCalculator2 = __decorate$1g([
      Bean("autoWidthCalculator")
    ], AutoWidthCalculator2);
    return AutoWidthCalculator2;
  }(BeanStub)
);
var __extends$1j = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1f = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __values$4 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read$h = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$f = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var StickyRowFeature = (
  /** @class */
  function(_super) {
    __extends$1j(StickyRowFeature2, _super);
    function StickyRowFeature2(createRowCon, destroyRowCtrls) {
      var _this = _super.call(this) || this;
      _this.createRowCon = createRowCon;
      _this.destroyRowCtrls = destroyRowCtrls;
      _this.stickyRowCtrls = [];
      _this.containerHeight = 0;
      return _this;
    }
    StickyRowFeature2.prototype.postConstruct = function() {
      var _this = this;
      this.isClientSide = this.rowModel.getType() === "clientSide";
      this.ctrlsService.whenReady(function(params) {
        _this.gridBodyCtrl = params.gridBodyCtrl;
      });
    };
    StickyRowFeature2.prototype.getStickyRowCtrls = function() {
      return this.stickyRowCtrls;
    };
    StickyRowFeature2.prototype.checkStickyRows = function() {
      var _this = this;
      var height = 0;
      if (!this.gridOptionsService.isGroupRowsSticky()) {
        return this.refreshNodesAndContainerHeight([], height);
      }
      var stickyRows = [];
      var firstPixel = this.rowRenderer.getFirstVisibleVerticalPixel();
      var addStickyRow = function(stickyRow) {
        var _a, _b, _c;
        stickyRows.push(stickyRow);
        var lastChildBottom;
        if (_this.isClientSide) {
          var lastAncestor = stickyRow;
          while (lastAncestor.isExpandable() && lastAncestor.expanded) {
            if (lastAncestor.master) {
              lastAncestor = lastAncestor.detailNode;
            } else if (lastAncestor.childrenAfterSort) {
              if (lastAncestor.childrenAfterSort.length === 0) {
                break;
              }
              lastAncestor = last(lastAncestor.childrenAfterSort);
            }
          }
          lastChildBottom = lastAncestor.rowTop + lastAncestor.rowHeight;
        } else {
          if (stickyRow.master) {
            lastChildBottom = stickyRow.detailNode.rowTop + stickyRow.detailNode.rowHeight;
          } else {
            var storeBounds = (_a = stickyRow.childStore) === null || _a === void 0 ? void 0 : _a.getStoreBounds();
            lastChildBottom = ((_b = storeBounds === null || storeBounds === void 0 ? void 0 : storeBounds.heightPx) !== null && _b !== void 0 ? _b : 0) + ((_c = storeBounds === null || storeBounds === void 0 ? void 0 : storeBounds.topPx) !== null && _c !== void 0 ? _c : 0);
          }
        }
        var stickRowBottom = firstPixel + height + stickyRow.rowHeight;
        if (lastChildBottom < stickRowBottom) {
          stickyRow.stickyRowTop = height + (lastChildBottom - stickRowBottom);
        } else {
          stickyRow.stickyRowTop = height;
        }
        height = 0;
        stickyRows.forEach(function(rowNode) {
          var thisRowLastPx = rowNode.stickyRowTop + rowNode.rowHeight;
          if (height < thisRowLastPx) {
            height = thisRowLastPx;
          }
        });
      };
      var counter = 0;
      while (true) {
        var firstPixelAfterStickyRows = firstPixel + height;
        var firstIndex = this.rowModel.getRowIndexAtPixel(firstPixelAfterStickyRows);
        var firstRow = this.rowModel.getRow(firstIndex);
        if (firstRow == null) {
          break;
        }
        if (firstRow.level < 0) {
          break;
        }
        if (counter++ === 100) {
          break;
        }
        var parents = [];
        var p = firstRow.parent;
        while (p.level >= 0) {
          parents.push(p);
          p = p.parent;
        }
        var firstMissingParent = parents.reverse().find(function(parent) {
          return stickyRows.indexOf(parent) < 0 && parent.displayed;
        });
        if (firstMissingParent) {
          addStickyRow(firstMissingParent);
          continue;
        }
        if (firstRow.isExpandable() && firstRow.expanded && firstRow.rowTop < firstPixelAfterStickyRows) {
          addStickyRow(firstRow);
          continue;
        }
        break;
      }
      return this.refreshNodesAndContainerHeight(stickyRows, height);
    };
    StickyRowFeature2.prototype.refreshStickyNode = function(stickRowNode) {
      var allStickyNodes = [];
      for (var i = 0; i < this.stickyRowCtrls.length; i++) {
        var currentNode = this.stickyRowCtrls[i].getRowNode();
        if (currentNode !== stickRowNode) {
          allStickyNodes.push(currentNode);
        }
      }
      if (this.refreshNodesAndContainerHeight(allStickyNodes, this.containerHeight)) {
        this.checkStickyRows();
      }
    };
    StickyRowFeature2.prototype.refreshNodesAndContainerHeight = function(allStickyNodes, height) {
      var e_1, _a, _b;
      var _this = this;
      var stickyRowsChanged = false;
      var removedCtrls = this.stickyRowCtrls.filter(function(ctrl2) {
        return allStickyNodes.indexOf(ctrl2.getRowNode()) === -1;
      });
      var addedNodes = allStickyNodes.filter(function(rowNode) {
        return _this.stickyRowCtrls.findIndex(function(ctrl2) {
          return ctrl2.getRowNode() === rowNode;
        }) === -1;
      });
      if (removedCtrls.length || addedNodes.length) {
        stickyRowsChanged = true;
      }
      var ctrlsToDestroy = {};
      removedCtrls.forEach(function(removedCtrl) {
        ctrlsToDestroy[removedCtrl.getRowNode().id] = removedCtrl;
        _this.stickyRowCtrls = _this.stickyRowCtrls.filter(function(ctrl2) {
          return ctrl2 !== removedCtrl;
        });
      });
      try {
        for (var _c = __values$4(Object.values(ctrlsToDestroy)), _d = _c.next(); !_d.done; _d = _c.next()) {
          var ctrl = _d.value;
          ctrl.getRowNode().sticky = false;
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_d && !_d.done && (_a = _c.return))
            _a.call(_c);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      this.destroyRowCtrls(ctrlsToDestroy, false);
      var newCtrls = addedNodes.map(function(rowNode) {
        rowNode.sticky = true;
        return _this.createRowCon(rowNode, false, false);
      });
      (_b = this.stickyRowCtrls).push.apply(_b, __spreadArray$f([], __read$h(newCtrls), false));
      this.stickyRowCtrls.forEach(function(ctrl2) {
        return ctrl2.setRowTop(ctrl2.getRowNode().stickyRowTop);
      });
      this.stickyRowCtrls.sort(function(a, b) {
        return b.getRowNode().rowIndex - a.getRowNode().rowIndex;
      });
      if (this.containerHeight !== height) {
        this.containerHeight = height;
        this.gridBodyCtrl.setStickyTopHeight(height);
        stickyRowsChanged = true;
      }
      return stickyRowsChanged;
    };
    __decorate$1f([
      Autowired("rowModel")
    ], StickyRowFeature2.prototype, "rowModel", void 0);
    __decorate$1f([
      Autowired("rowRenderer")
    ], StickyRowFeature2.prototype, "rowRenderer", void 0);
    __decorate$1f([
      Autowired("ctrlsService")
    ], StickyRowFeature2.prototype, "ctrlsService", void 0);
    __decorate$1f([
      PostConstruct
    ], StickyRowFeature2.prototype, "postConstruct", null);
    return StickyRowFeature2;
  }(BeanStub)
);
var __extends$1i = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1e = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __read$g = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$e = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var __values$3 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var RowRenderer = (
  /** @class */
  function(_super) {
    __extends$1i(RowRenderer2, _super);
    function RowRenderer2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.destroyFuncsForColumnListeners = [];
      _this.rowCtrlsByRowIndex = {};
      _this.zombieRowCtrls = {};
      _this.allRowCtrls = [];
      _this.topRowCtrls = [];
      _this.bottomRowCtrls = [];
      _this.refreshInProgress = false;
      _this.dataFirstRenderedFired = false;
      _this.setupRangeSelectionListeners = function() {
        var onRangeSelectionChanged = function() {
          _this.getAllCellCtrls().forEach(function(cellCtrl) {
            return cellCtrl.onRangeSelectionChanged();
          });
        };
        var onColumnMovedPinnedVisible = function() {
          _this.getAllCellCtrls().forEach(function(cellCtrl) {
            return cellCtrl.updateRangeBordersIfRangeCount();
          });
        };
        var addRangeSelectionListeners = function() {
          _this.eventService.addEventListener(Events.EVENT_RANGE_SELECTION_CHANGED, onRangeSelectionChanged);
          _this.eventService.addEventListener(Events.EVENT_COLUMN_MOVED, onColumnMovedPinnedVisible);
          _this.eventService.addEventListener(Events.EVENT_COLUMN_PINNED, onColumnMovedPinnedVisible);
          _this.eventService.addEventListener(Events.EVENT_COLUMN_VISIBLE, onColumnMovedPinnedVisible);
        };
        var removeRangeSelectionListeners = function() {
          _this.eventService.removeEventListener(Events.EVENT_RANGE_SELECTION_CHANGED, onRangeSelectionChanged);
          _this.eventService.removeEventListener(Events.EVENT_COLUMN_MOVED, onColumnMovedPinnedVisible);
          _this.eventService.removeEventListener(Events.EVENT_COLUMN_PINNED, onColumnMovedPinnedVisible);
          _this.eventService.removeEventListener(Events.EVENT_COLUMN_VISIBLE, onColumnMovedPinnedVisible);
        };
        _this.addDestroyFunc(function() {
          return removeRangeSelectionListeners();
        });
        _this.addManagedPropertyListener("enableRangeSelection", function(params) {
          var isEnabled = params.currentValue;
          if (isEnabled) {
            addRangeSelectionListeners();
          } else {
            removeRangeSelectionListeners();
          }
        });
        var rangeSelectionEnabled = _this.gridOptionsService.get("enableRangeSelection");
        if (rangeSelectionEnabled) {
          addRangeSelectionListeners();
        }
      };
      return _this;
    }
    RowRenderer2.prototype.postConstruct = function() {
      var _this = this;
      this.ctrlsService.whenReady(function() {
        _this.gridBodyCtrl = _this.ctrlsService.getGridBodyCtrl();
        _this.initialise();
      });
    };
    RowRenderer2.prototype.initialise = function() {
      var _this = this;
      this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, this.onPageLoaded.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, this.onBodyScroll.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.redraw.bind(this));
      this.addManagedPropertyListeners(["domLayout", "embedFullWidthRows"], function() {
        return _this.onDomLayoutChanged();
      });
      this.addManagedPropertyListeners(["suppressMaxRenderedRowRestriction", "rowBuffer"], function() {
        return _this.redraw();
      });
      this.addManagedPropertyListeners([
        "suppressCellFocus",
        "getBusinessKeyForNode",
        "fullWidthCellRenderer",
        "fullWidthCellRendererParams",
        "rowStyle",
        "getRowStyle",
        "rowClass",
        "getRowClass",
        "rowClassRules",
        "groupRowRenderer",
        "groupRowRendererParams",
        "loadingCellRenderer",
        "loadingCellRendererParams",
        "detailCellRenderer",
        "detailCellRendererParams",
        "enableRangeSelection",
        "enableCellTextSelection"
      ], function() {
        return _this.redrawRows();
      });
      if (this.gridOptionsService.isGroupRowsSticky()) {
        var rowModelType = this.rowModel.getType();
        if (rowModelType === "clientSide" || rowModelType === "serverSide") {
          this.stickyRowFeature = this.createManagedBean(new StickyRowFeature(this.createRowCon.bind(this), this.destroyRowCtrls.bind(this)));
        }
      }
      this.registerCellEventListeners();
      this.initialiseCache();
      this.printLayout = this.gridOptionsService.isDomLayout("print");
      this.embedFullWidthRows = this.printLayout || this.gridOptionsService.get("embedFullWidthRows");
      this.redrawAfterModelUpdate();
    };
    RowRenderer2.prototype.initialiseCache = function() {
      if (this.gridOptionsService.get("keepDetailRows")) {
        var countProp = this.getKeepDetailRowsCount();
        var count = countProp != null ? countProp : 3;
        this.cachedRowCtrls = new RowCtrlCache(count);
      }
    };
    RowRenderer2.prototype.getKeepDetailRowsCount = function() {
      return this.gridOptionsService.get("keepDetailRowsCount");
    };
    RowRenderer2.prototype.getStickyTopRowCtrls = function() {
      if (!this.stickyRowFeature) {
        return [];
      }
      return this.stickyRowFeature.getStickyRowCtrls();
    };
    RowRenderer2.prototype.updateAllRowCtrls = function() {
      var liveList = getAllValuesInObject(this.rowCtrlsByRowIndex);
      var zombieList = getAllValuesInObject(this.zombieRowCtrls);
      var cachedList = this.cachedRowCtrls ? this.cachedRowCtrls.getEntries() : [];
      if (zombieList.length > 0 || cachedList.length > 0) {
        this.allRowCtrls = __spreadArray$e(__spreadArray$e(__spreadArray$e([], __read$g(liveList), false), __read$g(zombieList), false), __read$g(cachedList), false);
      } else {
        this.allRowCtrls = liveList;
      }
    };
    RowRenderer2.prototype.onCellFocusChanged = function(event) {
      this.getAllCellCtrls().forEach(function(cellCtrl) {
        return cellCtrl.onCellFocused(event);
      });
      this.getFullWidthRowCtrls().forEach(function(rowCtrl) {
        return rowCtrl.onFullWidthRowFocused(event);
      });
    };
    RowRenderer2.prototype.registerCellEventListeners = function() {
      var _this = this;
      this.addManagedListener(this.eventService, Events.EVENT_CELL_FOCUSED, function(event) {
        _this.onCellFocusChanged(event);
      });
      this.addManagedListener(this.eventService, Events.EVENT_CELL_FOCUS_CLEARED, function() {
        _this.onCellFocusChanged();
      });
      this.addManagedListener(this.eventService, Events.EVENT_FLASH_CELLS, function(event) {
        _this.getAllCellCtrls().forEach(function(cellCtrl) {
          return cellCtrl.onFlashCells(event);
        });
      });
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, function() {
        _this.getAllCellCtrls().forEach(function(cellCtrl) {
          return cellCtrl.onColumnHover();
        });
      });
      this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, function() {
        _this.getAllCellCtrls().forEach(function(cellCtrl) {
          return cellCtrl.onDisplayedColumnsChanged();
        });
      });
      this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, function() {
        if (_this.printLayout) {
          _this.getAllCellCtrls().forEach(function(cellCtrl) {
            return cellCtrl.onLeftChanged();
          });
        }
      });
      this.setupRangeSelectionListeners();
      this.refreshListenersToColumnsForCellComps();
      this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.refreshListenersToColumnsForCellComps.bind(this));
      this.addDestroyFunc(this.removeGridColumnListeners.bind(this));
    };
    RowRenderer2.prototype.removeGridColumnListeners = function() {
      this.destroyFuncsForColumnListeners.forEach(function(func) {
        return func();
      });
      this.destroyFuncsForColumnListeners.length = 0;
    };
    RowRenderer2.prototype.refreshListenersToColumnsForCellComps = function() {
      var _this = this;
      this.removeGridColumnListeners();
      var cols = this.columnModel.getAllGridColumns();
      cols.forEach(function(col) {
        var forEachCellWithThisCol = function(callback) {
          _this.getAllCellCtrls().forEach(function(cellCtrl) {
            if (cellCtrl.getColumn() === col) {
              callback(cellCtrl);
            }
          });
        };
        var leftChangedListener = function() {
          forEachCellWithThisCol(function(cellCtrl) {
            return cellCtrl.onLeftChanged();
          });
        };
        var widthChangedListener = function() {
          forEachCellWithThisCol(function(cellCtrl) {
            return cellCtrl.onWidthChanged();
          });
        };
        var firstRightPinnedChangedListener = function() {
          forEachCellWithThisCol(function(cellCtrl) {
            return cellCtrl.onFirstRightPinnedChanged();
          });
        };
        var lastLeftPinnedChangedListener = function() {
          forEachCellWithThisCol(function(cellCtrl) {
            return cellCtrl.onLastLeftPinnedChanged();
          });
        };
        var colDefChangedListener = function() {
          forEachCellWithThisCol(function(cellCtrl) {
            return cellCtrl.onColDefChanged();
          });
        };
        col.addEventListener("leftChanged", leftChangedListener);
        col.addEventListener("widthChanged", widthChangedListener);
        col.addEventListener("firstRightPinnedChanged", firstRightPinnedChangedListener);
        col.addEventListener("lastLeftPinnedChanged", lastLeftPinnedChangedListener);
        col.addEventListener("colDefChanged", colDefChangedListener);
        _this.destroyFuncsForColumnListeners.push(function() {
          col.removeEventListener("leftChanged", leftChangedListener);
          col.removeEventListener("widthChanged", widthChangedListener);
          col.removeEventListener("firstRightPinnedChanged", firstRightPinnedChangedListener);
          col.removeEventListener("lastLeftPinnedChanged", lastLeftPinnedChangedListener);
          col.removeEventListener("colDefChanged", colDefChangedListener);
        });
      });
    };
    RowRenderer2.prototype.onDomLayoutChanged = function() {
      var printLayout = this.gridOptionsService.isDomLayout("print");
      var embedFullWidthRows = printLayout || this.gridOptionsService.get("embedFullWidthRows");
      var destroyRows = embedFullWidthRows !== this.embedFullWidthRows || this.printLayout !== printLayout;
      this.printLayout = printLayout;
      this.embedFullWidthRows = embedFullWidthRows;
      if (destroyRows) {
        this.redrawAfterModelUpdate({ domLayoutChanged: true });
      }
    };
    RowRenderer2.prototype.datasourceChanged = function() {
      this.firstRenderedRow = 0;
      this.lastRenderedRow = -1;
      var rowIndexesToRemove = Object.keys(this.rowCtrlsByRowIndex);
      this.removeRowCtrls(rowIndexesToRemove);
    };
    RowRenderer2.prototype.onPageLoaded = function(event) {
      var params = {
        recycleRows: event.keepRenderedRows,
        animate: event.animate,
        newData: event.newData,
        newPage: event.newPage,
        // because this is a model updated event (not pinned rows), we
        // can skip updating the pinned rows. this is needed so that if user
        // is doing transaction updates, the pinned rows are not getting constantly
        // trashed - or editing cells in pinned rows are not refreshed and put into read mode
        onlyBody: true
      };
      this.redrawAfterModelUpdate(params);
    };
    RowRenderer2.prototype.getAllCellsForColumn = function(column) {
      var res = [];
      this.getAllRowCtrls().forEach(function(rowCtrl) {
        var eCell = rowCtrl.getCellElement(column);
        if (eCell) {
          res.push(eCell);
        }
      });
      return res;
    };
    RowRenderer2.prototype.refreshFloatingRowComps = function() {
      this.refreshFloatingRows(this.topRowCtrls, this.pinnedRowModel.getPinnedTopRowData());
      this.refreshFloatingRows(this.bottomRowCtrls, this.pinnedRowModel.getPinnedBottomRowData());
    };
    RowRenderer2.prototype.getTopRowCtrls = function() {
      return this.topRowCtrls;
    };
    RowRenderer2.prototype.getCentreRowCtrls = function() {
      return this.allRowCtrls;
    };
    RowRenderer2.prototype.getBottomRowCtrls = function() {
      return this.bottomRowCtrls;
    };
    RowRenderer2.prototype.refreshFloatingRows = function(rowComps, rowNodes) {
      var _this = this;
      rowComps.forEach(function(row) {
        row.destroyFirstPass();
        row.destroySecondPass();
      });
      rowComps.length = 0;
      if (!rowNodes) {
        return;
      }
      rowNodes.forEach(function(rowNode) {
        var rowCtrl = new RowCtrl(rowNode, _this.beans, false, false, _this.printLayout);
        rowComps.push(rowCtrl);
      });
    };
    RowRenderer2.prototype.onPinnedRowDataChanged = function() {
      var params = {
        recycleRows: true
      };
      this.redrawAfterModelUpdate(params);
    };
    RowRenderer2.prototype.redrawRow = function(rowNode, suppressEvent) {
      var _this = this;
      if (suppressEvent === void 0) {
        suppressEvent = false;
      }
      if (rowNode.sticky) {
        this.stickyRowFeature.refreshStickyNode(rowNode);
      } else {
        var destroyAndRecreateCtrl = function(dataStruct) {
          var ctrl = dataStruct[rowNode.rowIndex];
          if (!ctrl) {
            return;
          }
          if (ctrl.getRowNode() !== rowNode) {
            return;
          }
          ctrl.destroyFirstPass();
          ctrl.destroySecondPass();
          dataStruct[rowNode.rowIndex] = _this.createRowCon(rowNode, false, false);
        };
        switch (rowNode.rowPinned) {
          case "top":
            destroyAndRecreateCtrl(this.topRowCtrls);
          case "bottom":
            destroyAndRecreateCtrl(this.bottomRowCtrls);
          default:
            destroyAndRecreateCtrl(this.rowCtrlsByRowIndex);
            this.updateAllRowCtrls();
        }
      }
      if (!suppressEvent) {
        this.dispatchDisplayedRowsChanged(false);
      }
    };
    RowRenderer2.prototype.redrawRows = function(rowNodes) {
      var _this = this;
      var partialRefresh = rowNodes != null;
      if (partialRefresh) {
        rowNodes === null || rowNodes === void 0 ? void 0 : rowNodes.forEach(function(node) {
          return _this.redrawRow(node, true);
        });
        this.dispatchDisplayedRowsChanged(false);
        return;
      }
      this.redrawAfterModelUpdate();
    };
    RowRenderer2.prototype.getCellToRestoreFocusToAfterRefresh = function(params) {
      var focusedCell = (params === null || params === void 0 ? void 0 : params.suppressKeepFocus) ? null : this.focusService.getFocusCellToUseAfterRefresh();
      if (focusedCell == null) {
        return null;
      }
      var eDocument = this.gridOptionsService.getDocument();
      var activeElement = eDocument.activeElement;
      var cellDomData = this.gridOptionsService.getDomData(activeElement, CellCtrl.DOM_DATA_KEY_CELL_CTRL);
      var rowDomData = this.gridOptionsService.getDomData(activeElement, RowCtrl.DOM_DATA_KEY_ROW_CTRL);
      var gridElementFocused = cellDomData || rowDomData;
      return gridElementFocused ? focusedCell : null;
    };
    RowRenderer2.prototype.redrawAfterModelUpdate = function(params) {
      if (params === void 0) {
        params = {};
      }
      this.getLockOnRefresh();
      var focusedCell = this.getCellToRestoreFocusToAfterRefresh(params);
      this.updateContainerHeights();
      this.scrollToTopIfNewData(params);
      var recycleRows = !params.domLayoutChanged && !!params.recycleRows;
      var animate = params.animate && this.gridOptionsService.isAnimateRows();
      var rowsToRecycle = recycleRows ? this.getRowsToRecycle() : null;
      if (!recycleRows) {
        this.removeAllRowComps();
      }
      this.workOutFirstAndLastRowsToRender();
      if (this.stickyRowFeature) {
        this.stickyRowFeature.checkStickyRows();
      }
      this.recycleRows(rowsToRecycle, animate);
      this.gridBodyCtrl.updateRowCount();
      if (!params.onlyBody) {
        this.refreshFloatingRowComps();
      }
      this.dispatchDisplayedRowsChanged();
      if (focusedCell != null) {
        this.restoreFocusedCell(focusedCell);
      }
      this.releaseLockOnRefresh();
    };
    RowRenderer2.prototype.scrollToTopIfNewData = function(params) {
      var scrollToTop = params.newData || params.newPage;
      var suppressScrollToTop = this.gridOptionsService.get("suppressScrollOnNewData");
      if (scrollToTop && !suppressScrollToTop) {
        this.gridBodyCtrl.getScrollFeature().scrollToTop();
      }
    };
    RowRenderer2.prototype.updateContainerHeights = function() {
      if (this.printLayout) {
        this.rowContainerHeightService.setModelHeight(null);
        return;
      }
      var containerHeight = this.paginationProxy.getCurrentPageHeight();
      if (containerHeight === 0) {
        containerHeight = 1;
      }
      this.rowContainerHeightService.setModelHeight(containerHeight);
    };
    RowRenderer2.prototype.getLockOnRefresh = function() {
      if (this.refreshInProgress) {
        throw new Error("AG Grid: cannot get grid to draw rows when it is in the middle of drawing rows. Your code probably called a grid API method while the grid was in the render stage. To overcome this, put the API call into a timeout, e.g. instead of api.redrawRows(), call setTimeout(function() { api.redrawRows(); }, 0). To see what part of your code that caused the refresh check this stacktrace.");
      }
      this.refreshInProgress = true;
    };
    RowRenderer2.prototype.releaseLockOnRefresh = function() {
      this.refreshInProgress = false;
    };
    RowRenderer2.prototype.isRefreshInProgress = function() {
      return this.refreshInProgress;
    };
    RowRenderer2.prototype.restoreFocusedCell = function(cellPosition) {
      if (cellPosition) {
        this.focusService.setRestoreFocusedCell(cellPosition);
        this.onCellFocusChanged(this.beans.gridOptionsService.addGridCommonParams({
          rowIndex: cellPosition.rowIndex,
          column: cellPosition.column,
          rowPinned: cellPosition.rowPinned,
          forceBrowserFocus: true,
          preventScrollOnBrowserFocus: true,
          type: "mock"
        }));
      }
    };
    RowRenderer2.prototype.stopEditing = function(cancel) {
      if (cancel === void 0) {
        cancel = false;
      }
      this.getAllRowCtrls().forEach(function(rowCtrl) {
        rowCtrl.stopEditing(cancel);
      });
    };
    RowRenderer2.prototype.getAllCellCtrls = function() {
      var res = [];
      var rowCtrls = this.getAllRowCtrls();
      var rowCtrlsLength = rowCtrls.length;
      for (var i = 0; i < rowCtrlsLength; i++) {
        var cellCtrls = rowCtrls[i].getAllCellCtrls();
        var cellCtrlsLength = cellCtrls.length;
        for (var j = 0; j < cellCtrlsLength; j++) {
          res.push(cellCtrls[j]);
        }
      }
      return res;
    };
    RowRenderer2.prototype.getAllRowCtrls = function() {
      var e_1, _a;
      var stickyRowCtrls = this.stickyRowFeature && this.stickyRowFeature.getStickyRowCtrls() || [];
      var res = __spreadArray$e(__spreadArray$e(__spreadArray$e([], __read$g(this.topRowCtrls), false), __read$g(this.bottomRowCtrls), false), __read$g(stickyRowCtrls), false);
      try {
        for (var _b = __values$3(Object.keys(this.rowCtrlsByRowIndex)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var key = _c.value;
          res.push(this.rowCtrlsByRowIndex[key]);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return res;
    };
    RowRenderer2.prototype.addRenderedRowListener = function(eventName, rowIndex, callback) {
      var rowComp = this.rowCtrlsByRowIndex[rowIndex];
      if (rowComp) {
        rowComp.addEventListener(eventName, callback);
      }
    };
    RowRenderer2.prototype.flashCells = function(params) {
      if (params === void 0) {
        params = {};
      }
      var flashDelay = params.flashDelay, fadeDelay = params.fadeDelay;
      this.getCellCtrls(params.rowNodes, params.columns).forEach(function(cellCtrl) {
        return cellCtrl.flashCell({ flashDelay, fadeDelay });
      });
    };
    RowRenderer2.prototype.refreshCells = function(params) {
      var _this = this;
      if (params === void 0) {
        params = {};
      }
      var refreshCellParams = {
        forceRefresh: params.force,
        newData: false,
        suppressFlash: params.suppressFlash
      };
      this.getCellCtrls(params.rowNodes, params.columns).forEach(function(cellCtrl) {
        return cellCtrl.refreshOrDestroyCell(refreshCellParams);
      });
      if (params.rowNodes) {
        this.getRowCtrls(params.rowNodes).forEach(function(rowCtrl) {
          if (!rowCtrl.isFullWidth()) {
            return;
          }
          var refreshed = rowCtrl.refreshFullWidth();
          if (!refreshed) {
            _this.redrawRow(rowCtrl.getRowNode(), true);
          }
        });
        this.dispatchDisplayedRowsChanged(false);
      }
    };
    RowRenderer2.prototype.getCellRendererInstances = function(params) {
      var _this = this;
      var _a;
      var cellRenderers = this.getCellCtrls(params.rowNodes, params.columns).map(function(cellCtrl) {
        return cellCtrl.getCellRenderer();
      }).filter(function(renderer) {
        return renderer != null;
      });
      if ((_a = params.columns) === null || _a === void 0 ? void 0 : _a.length) {
        return cellRenderers;
      }
      var fullWidthRenderers = [];
      var rowIdMap = this.mapRowNodes(params.rowNodes);
      this.getAllRowCtrls().forEach(function(rowCtrl) {
        if (rowIdMap && !_this.isRowInMap(rowCtrl.getRowNode(), rowIdMap)) {
          return;
        }
        if (!rowCtrl.isFullWidth()) {
          return;
        }
        var renderers = rowCtrl.getFullWidthCellRenderers();
        for (var i = 0; i < renderers.length; i++) {
          var renderer = renderers[i];
          if (renderer != null) {
            fullWidthRenderers.push(renderer);
          }
        }
      });
      return __spreadArray$e(__spreadArray$e([], __read$g(fullWidthRenderers), false), __read$g(cellRenderers), false);
    };
    RowRenderer2.prototype.getCellEditorInstances = function(params) {
      var res = [];
      this.getCellCtrls(params.rowNodes, params.columns).forEach(function(cellCtrl) {
        var cellEditor = cellCtrl.getCellEditor();
        if (cellEditor) {
          res.push(cellEditor);
        }
      });
      return res;
    };
    RowRenderer2.prototype.getEditingCells = function() {
      var res = [];
      this.getAllCellCtrls().forEach(function(cellCtrl) {
        if (cellCtrl.isEditing()) {
          var cellPosition = cellCtrl.getCellPosition();
          res.push(cellPosition);
        }
      });
      return res;
    };
    RowRenderer2.prototype.mapRowNodes = function(rowNodes) {
      if (!rowNodes) {
        return;
      }
      var res = {
        top: {},
        bottom: {},
        normal: {}
      };
      rowNodes.forEach(function(rowNode) {
        var id = rowNode.id;
        if (rowNode.rowPinned === "top") {
          res.top[id] = rowNode;
        } else if (rowNode.rowPinned === "bottom") {
          res.bottom[id] = rowNode;
        } else {
          res.normal[id] = rowNode;
        }
      });
      return res;
    };
    RowRenderer2.prototype.isRowInMap = function(rowNode, rowIdsMap) {
      var id = rowNode.id;
      var floating = rowNode.rowPinned;
      if (floating === "bottom") {
        return rowIdsMap.bottom[id] != null;
      }
      if (floating === "top") {
        return rowIdsMap.top[id] != null;
      }
      return rowIdsMap.normal[id] != null;
    };
    RowRenderer2.prototype.getRowCtrls = function(rowNodes) {
      var _this = this;
      var rowIdsMap = this.mapRowNodes(rowNodes);
      var allRowCtrls = this.getAllRowCtrls();
      if (!rowNodes || !rowIdsMap) {
        return allRowCtrls;
      }
      return allRowCtrls.filter(function(rowCtrl) {
        var rowNode = rowCtrl.getRowNode();
        return _this.isRowInMap(rowNode, rowIdsMap);
      });
    };
    RowRenderer2.prototype.getCellCtrls = function(rowNodes, columns) {
      var _this = this;
      var colIdsMap;
      if (exists(columns)) {
        colIdsMap = {};
        columns.forEach(function(colKey) {
          var column = _this.columnModel.getGridColumn(colKey);
          if (exists(column)) {
            colIdsMap[column.getId()] = true;
          }
        });
      }
      var res = [];
      this.getRowCtrls(rowNodes).forEach(function(rowCtrl) {
        rowCtrl.getAllCellCtrls().forEach(function(cellCtrl) {
          var colId = cellCtrl.getColumn().getId();
          var excludeColFromRefresh = colIdsMap && !colIdsMap[colId];
          if (excludeColFromRefresh) {
            return;
          }
          res.push(cellCtrl);
        });
      });
      return res;
    };
    RowRenderer2.prototype.destroy = function() {
      this.removeAllRowComps();
      _super.prototype.destroy.call(this);
    };
    RowRenderer2.prototype.removeAllRowComps = function() {
      var rowIndexesToRemove = Object.keys(this.rowCtrlsByRowIndex);
      this.removeRowCtrls(rowIndexesToRemove);
    };
    RowRenderer2.prototype.getRowsToRecycle = function() {
      var stubNodeIndexes = [];
      iterateObject(this.rowCtrlsByRowIndex, function(index, rowComp) {
        var stubNode = rowComp.getRowNode().id == null;
        if (stubNode) {
          stubNodeIndexes.push(index);
        }
      });
      this.removeRowCtrls(stubNodeIndexes);
      var ctrlsByIdMap = {};
      iterateObject(this.rowCtrlsByRowIndex, function(index, rowComp) {
        var rowNode = rowComp.getRowNode();
        ctrlsByIdMap[rowNode.id] = rowComp;
      });
      this.rowCtrlsByRowIndex = {};
      return ctrlsByIdMap;
    };
    RowRenderer2.prototype.removeRowCtrls = function(rowsToRemove, suppressAnimation) {
      var _this = this;
      if (suppressAnimation === void 0) {
        suppressAnimation = false;
      }
      rowsToRemove.forEach(function(indexToRemove) {
        var rowCtrl = _this.rowCtrlsByRowIndex[indexToRemove];
        if (rowCtrl) {
          rowCtrl.destroyFirstPass(suppressAnimation);
          rowCtrl.destroySecondPass();
        }
        delete _this.rowCtrlsByRowIndex[indexToRemove];
      });
    };
    RowRenderer2.prototype.onBodyScroll = function(e) {
      if (e.direction !== "vertical") {
        return;
      }
      this.redraw({ afterScroll: true });
    };
    RowRenderer2.prototype.redraw = function(params) {
      if (params === void 0) {
        params = {};
      }
      var afterScroll = params.afterScroll;
      var cellFocused;
      if (this.stickyRowFeature && browserSupportsPreventScroll()) {
        cellFocused = this.getCellToRestoreFocusToAfterRefresh() || void 0;
      }
      var oldFirstRow = this.firstRenderedRow;
      var oldLastRow = this.lastRenderedRow;
      this.workOutFirstAndLastRowsToRender();
      var hasStickyRowChanges = false;
      if (this.stickyRowFeature) {
        hasStickyRowChanges = this.stickyRowFeature.checkStickyRows();
      }
      var rangeChanged = this.firstRenderedRow !== oldFirstRow || this.lastRenderedRow !== oldLastRow;
      if (afterScroll && !hasStickyRowChanges && !rangeChanged) {
        return;
      }
      this.getLockOnRefresh();
      this.recycleRows(null, false, afterScroll);
      this.releaseLockOnRefresh();
      this.dispatchDisplayedRowsChanged(afterScroll && !hasStickyRowChanges);
      if (cellFocused != null) {
        var newFocusedCell = this.getCellToRestoreFocusToAfterRefresh();
        if (cellFocused != null && newFocusedCell == null) {
          this.animationFrameService.flushAllFrames();
          this.restoreFocusedCell(cellFocused);
        }
      }
    };
    RowRenderer2.prototype.removeRowCompsNotToDraw = function(indexesToDraw, suppressAnimation) {
      var indexesToDrawMap = {};
      indexesToDraw.forEach(function(index) {
        return indexesToDrawMap[index] = true;
      });
      var existingIndexes = Object.keys(this.rowCtrlsByRowIndex);
      var indexesNotToDraw = existingIndexes.filter(function(index) {
        return !indexesToDrawMap[index];
      });
      this.removeRowCtrls(indexesNotToDraw, suppressAnimation);
    };
    RowRenderer2.prototype.calculateIndexesToDraw = function(rowsToRecycle) {
      var _this = this;
      var indexesToDraw = createArrayOfNumbers(this.firstRenderedRow, this.lastRenderedRow);
      var checkRowToDraw = function(indexStr, rowComp) {
        var index = rowComp.getRowNode().rowIndex;
        if (index == null) {
          return;
        }
        if (index < _this.firstRenderedRow || index > _this.lastRenderedRow) {
          if (_this.doNotUnVirtualiseRow(rowComp)) {
            indexesToDraw.push(index);
          }
        }
      };
      iterateObject(this.rowCtrlsByRowIndex, checkRowToDraw);
      iterateObject(rowsToRecycle, checkRowToDraw);
      indexesToDraw.sort(function(a, b) {
        return a - b;
      });
      var ret = [];
      for (var i = 0; i < indexesToDraw.length; i++) {
        var currRow = indexesToDraw[i];
        var rowNode = this.paginationProxy.getRow(currRow);
        if (rowNode && !rowNode.sticky) {
          ret.push(currRow);
        }
      }
      return ret;
    };
    RowRenderer2.prototype.recycleRows = function(rowsToRecycle, animate, afterScroll) {
      var _this = this;
      if (animate === void 0) {
        animate = false;
      }
      if (afterScroll === void 0) {
        afterScroll = false;
      }
      var indexesToDraw = this.calculateIndexesToDraw(rowsToRecycle);
      if (this.printLayout || afterScroll) {
        animate = false;
      }
      this.removeRowCompsNotToDraw(indexesToDraw, !animate);
      indexesToDraw.forEach(function(rowIndex) {
        var rowCtrl = _this.createOrUpdateRowCtrl(rowIndex, rowsToRecycle, animate, afterScroll);
        if (exists(rowCtrl))
          ;
      });
      if (rowsToRecycle) {
        var useAnimationFrame = afterScroll && !this.gridOptionsService.get("suppressAnimationFrame") && !this.printLayout;
        if (useAnimationFrame) {
          this.beans.animationFrameService.addDestroyTask(function() {
            _this.destroyRowCtrls(rowsToRecycle, animate);
            _this.updateAllRowCtrls();
            _this.dispatchDisplayedRowsChanged();
          });
        } else {
          this.destroyRowCtrls(rowsToRecycle, animate);
        }
      }
      this.updateAllRowCtrls();
    };
    RowRenderer2.prototype.dispatchDisplayedRowsChanged = function(afterScroll) {
      if (afterScroll === void 0) {
        afterScroll = false;
      }
      var event = { type: Events.EVENT_DISPLAYED_ROWS_CHANGED, afterScroll };
      this.eventService.dispatchEvent(event);
    };
    RowRenderer2.prototype.onDisplayedColumnsChanged = function() {
      var pinningLeft = this.columnModel.isPinningLeft();
      var pinningRight = this.columnModel.isPinningRight();
      var atLeastOneChanged = this.pinningLeft !== pinningLeft || pinningRight !== this.pinningRight;
      if (atLeastOneChanged) {
        this.pinningLeft = pinningLeft;
        this.pinningRight = pinningRight;
        if (this.embedFullWidthRows) {
          this.redrawFullWidthEmbeddedRows();
        }
      }
    };
    RowRenderer2.prototype.redrawFullWidthEmbeddedRows = function() {
      var rowsToRemove = [];
      this.getFullWidthRowCtrls().forEach(function(fullWidthCtrl) {
        var rowIndex = fullWidthCtrl.getRowNode().rowIndex;
        rowsToRemove.push(rowIndex.toString());
      });
      this.refreshFloatingRowComps();
      this.removeRowCtrls(rowsToRemove);
      this.redraw({ afterScroll: true });
    };
    RowRenderer2.prototype.getFullWidthRowCtrls = function(rowNodes) {
      var _this = this;
      var rowNodesMap = this.mapRowNodes(rowNodes);
      return this.getAllRowCtrls().filter(function(rowCtrl) {
        if (!rowCtrl.isFullWidth()) {
          return false;
        }
        var rowNode = rowCtrl.getRowNode();
        if (rowNodesMap != null && !_this.isRowInMap(rowNode, rowNodesMap)) {
          return false;
        }
        return true;
      });
    };
    RowRenderer2.prototype.createOrUpdateRowCtrl = function(rowIndex, rowsToRecycle, animate, afterScroll) {
      var rowNode;
      var rowCtrl = this.rowCtrlsByRowIndex[rowIndex];
      if (!rowCtrl) {
        rowNode = this.paginationProxy.getRow(rowIndex);
        if (exists(rowNode) && exists(rowsToRecycle) && rowsToRecycle[rowNode.id] && rowNode.alreadyRendered) {
          rowCtrl = rowsToRecycle[rowNode.id];
          rowsToRecycle[rowNode.id] = null;
        }
      }
      var creatingNewRowCtrl = !rowCtrl;
      if (creatingNewRowCtrl) {
        if (!rowNode) {
          rowNode = this.paginationProxy.getRow(rowIndex);
        }
        if (exists(rowNode)) {
          rowCtrl = this.createRowCon(rowNode, animate, afterScroll);
        } else {
          return;
        }
      }
      if (rowNode) {
        rowNode.alreadyRendered = true;
      }
      this.rowCtrlsByRowIndex[rowIndex] = rowCtrl;
      return rowCtrl;
    };
    RowRenderer2.prototype.destroyRowCtrls = function(rowCtrlsMap, animate) {
      var _this = this;
      var executeInAWhileFuncs = [];
      iterateObject(rowCtrlsMap, function(nodeId, rowCtrl) {
        if (!rowCtrl) {
          return;
        }
        if (_this.cachedRowCtrls && rowCtrl.isCacheable()) {
          _this.cachedRowCtrls.addRow(rowCtrl);
          return;
        }
        rowCtrl.destroyFirstPass(!animate);
        if (animate) {
          _this.zombieRowCtrls[rowCtrl.getInstanceId()] = rowCtrl;
          executeInAWhileFuncs.push(function() {
            rowCtrl.destroySecondPass();
            delete _this.zombieRowCtrls[rowCtrl.getInstanceId()];
          });
        } else {
          rowCtrl.destroySecondPass();
        }
      });
      if (animate) {
        executeInAWhileFuncs.push(function() {
          _this.updateAllRowCtrls();
          _this.dispatchDisplayedRowsChanged();
        });
        executeInAWhile(executeInAWhileFuncs);
      }
    };
    RowRenderer2.prototype.getRowBuffer = function() {
      return this.gridOptionsService.get("rowBuffer");
    };
    RowRenderer2.prototype.getRowBufferInPixels = function() {
      var rowsToBuffer = this.getRowBuffer();
      var defaultRowHeight = this.gridOptionsService.getRowHeightAsNumber();
      return rowsToBuffer * defaultRowHeight;
    };
    RowRenderer2.prototype.workOutFirstAndLastRowsToRender = function() {
      this.rowContainerHeightService.updateOffset();
      var newFirst;
      var newLast;
      if (!this.paginationProxy.isRowsToRender()) {
        newFirst = 0;
        newLast = -1;
      } else if (this.printLayout) {
        this.environment.refreshRowHeightVariable();
        newFirst = this.paginationProxy.getPageFirstRow();
        newLast = this.paginationProxy.getPageLastRow();
      } else {
        var bufferPixels = this.getRowBufferInPixels();
        var gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();
        var suppressRowVirtualisation = this.gridOptionsService.get("suppressRowVirtualisation");
        var rowHeightsChanged = false;
        var firstPixel = void 0;
        var lastPixel = void 0;
        do {
          var paginationOffset = this.paginationProxy.getPixelOffset();
          var _a = this.paginationProxy.getCurrentPagePixelRange(), pageFirstPixel = _a.pageFirstPixel, pageLastPixel = _a.pageLastPixel;
          var divStretchOffset = this.rowContainerHeightService.getDivStretchOffset();
          var bodyVRange = gridBodyCtrl.getScrollFeature().getVScrollPosition();
          var bodyTopPixel = bodyVRange.top;
          var bodyBottomPixel = bodyVRange.bottom;
          if (suppressRowVirtualisation) {
            firstPixel = pageFirstPixel + divStretchOffset;
            lastPixel = pageLastPixel + divStretchOffset;
          } else {
            firstPixel = Math.max(bodyTopPixel + paginationOffset - bufferPixels, pageFirstPixel) + divStretchOffset;
            lastPixel = Math.min(bodyBottomPixel + paginationOffset + bufferPixels, pageLastPixel) + divStretchOffset;
          }
          this.firstVisibleVPixel = Math.max(bodyTopPixel + paginationOffset, pageFirstPixel) + divStretchOffset;
          rowHeightsChanged = this.ensureAllRowsInRangeHaveHeightsCalculated(firstPixel, lastPixel);
        } while (rowHeightsChanged);
        var firstRowIndex = this.paginationProxy.getRowIndexAtPixel(firstPixel);
        var lastRowIndex = this.paginationProxy.getRowIndexAtPixel(lastPixel);
        var pageFirstRow = this.paginationProxy.getPageFirstRow();
        var pageLastRow = this.paginationProxy.getPageLastRow();
        if (firstRowIndex < pageFirstRow) {
          firstRowIndex = pageFirstRow;
        }
        if (lastRowIndex > pageLastRow) {
          lastRowIndex = pageLastRow;
        }
        newFirst = firstRowIndex;
        newLast = lastRowIndex;
      }
      var rowLayoutNormal = this.gridOptionsService.isDomLayout("normal");
      var suppressRowCountRestriction = this.gridOptionsService.get("suppressMaxRenderedRowRestriction");
      var rowBufferMaxSize = Math.max(this.getRowBuffer(), 500);
      if (rowLayoutNormal && !suppressRowCountRestriction) {
        if (newLast - newFirst > rowBufferMaxSize) {
          newLast = newFirst + rowBufferMaxSize;
        }
      }
      var firstDiffers = newFirst !== this.firstRenderedRow;
      var lastDiffers = newLast !== this.lastRenderedRow;
      if (firstDiffers || lastDiffers) {
        this.firstRenderedRow = newFirst;
        this.lastRenderedRow = newLast;
        var event_1 = {
          type: Events.EVENT_VIEWPORT_CHANGED,
          firstRow: newFirst,
          lastRow: newLast
        };
        this.eventService.dispatchEvent(event_1);
      }
    };
    RowRenderer2.prototype.dispatchFirstDataRenderedEvent = function() {
      var _this = this;
      if (this.dataFirstRenderedFired) {
        return;
      }
      this.dataFirstRenderedFired = true;
      var event = {
        type: Events.EVENT_FIRST_DATA_RENDERED,
        firstRow: this.firstRenderedRow,
        lastRow: this.lastRenderedRow
      };
      window.requestAnimationFrame(function() {
        _this.beans.eventService.dispatchEvent(event);
      });
    };
    RowRenderer2.prototype.ensureAllRowsInRangeHaveHeightsCalculated = function(topPixel, bottomPixel) {
      var res = this.paginationProxy.ensureRowHeightsValid(topPixel, bottomPixel, -1, -1);
      if (res) {
        this.updateContainerHeights();
      }
      return res;
    };
    RowRenderer2.prototype.getFirstVisibleVerticalPixel = function() {
      return this.firstVisibleVPixel;
    };
    RowRenderer2.prototype.getFirstVirtualRenderedRow = function() {
      return this.firstRenderedRow;
    };
    RowRenderer2.prototype.getLastVirtualRenderedRow = function() {
      return this.lastRenderedRow;
    };
    RowRenderer2.prototype.doNotUnVirtualiseRow = function(rowComp) {
      var REMOVE_ROW = false;
      var KEEP_ROW = true;
      var rowNode = rowComp.getRowNode();
      var rowHasFocus = this.focusService.isRowNodeFocused(rowNode);
      var rowIsEditing = rowComp.isEditing();
      var rowIsDetail = rowNode.detail;
      var mightWantToKeepRow = rowHasFocus || rowIsEditing || rowIsDetail;
      if (!mightWantToKeepRow) {
        return REMOVE_ROW;
      }
      var rowNodePresent = this.paginationProxy.isRowPresent(rowNode);
      return rowNodePresent ? KEEP_ROW : REMOVE_ROW;
    };
    RowRenderer2.prototype.createRowCon = function(rowNode, animate, afterScroll) {
      var rowCtrlFromCache = this.cachedRowCtrls ? this.cachedRowCtrls.getRow(rowNode) : null;
      if (rowCtrlFromCache) {
        return rowCtrlFromCache;
      }
      var suppressAnimationFrame = this.gridOptionsService.get("suppressAnimationFrame");
      var useAnimationFrameForCreate = afterScroll && !suppressAnimationFrame && !this.printLayout;
      var res = new RowCtrl(rowNode, this.beans, animate, useAnimationFrameForCreate, this.printLayout);
      return res;
    };
    RowRenderer2.prototype.getRenderedNodes = function() {
      var renderedRows = this.rowCtrlsByRowIndex;
      return Object.keys(renderedRows).map(function(key) {
        return renderedRows[key].getRowNode();
      });
    };
    RowRenderer2.prototype.getRowByPosition = function(rowPosition) {
      var rowCtrl;
      var rowIndex = rowPosition.rowIndex;
      switch (rowPosition.rowPinned) {
        case "top":
          rowCtrl = this.topRowCtrls[rowIndex];
          break;
        case "bottom":
          rowCtrl = this.bottomRowCtrls[rowIndex];
          break;
        default:
          rowCtrl = this.rowCtrlsByRowIndex[rowIndex];
          if (!rowCtrl) {
            rowCtrl = this.getStickyTopRowCtrls().find(function(ctrl) {
              return ctrl.getRowNode().rowIndex === rowIndex;
            }) || null;
          }
          break;
      }
      return rowCtrl;
    };
    RowRenderer2.prototype.getRowNode = function(gridRow) {
      switch (gridRow.rowPinned) {
        case "top":
          return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];
        case "bottom":
          return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];
        default:
          return this.rowModel.getRow(gridRow.rowIndex);
      }
    };
    RowRenderer2.prototype.isRangeInRenderedViewport = function(startIndex, endIndex) {
      var parentClosed = startIndex == null || endIndex == null;
      if (parentClosed) {
        return false;
      }
      var blockAfterViewport = startIndex > this.lastRenderedRow;
      var blockBeforeViewport = endIndex < this.firstRenderedRow;
      var blockInsideViewport = !blockBeforeViewport && !blockAfterViewport;
      return blockInsideViewport;
    };
    __decorate$1e([
      Autowired("animationFrameService")
    ], RowRenderer2.prototype, "animationFrameService", void 0);
    __decorate$1e([
      Autowired("paginationProxy")
    ], RowRenderer2.prototype, "paginationProxy", void 0);
    __decorate$1e([
      Autowired("columnModel")
    ], RowRenderer2.prototype, "columnModel", void 0);
    __decorate$1e([
      Autowired("pinnedRowModel")
    ], RowRenderer2.prototype, "pinnedRowModel", void 0);
    __decorate$1e([
      Autowired("rowModel")
    ], RowRenderer2.prototype, "rowModel", void 0);
    __decorate$1e([
      Autowired("focusService")
    ], RowRenderer2.prototype, "focusService", void 0);
    __decorate$1e([
      Autowired("beans")
    ], RowRenderer2.prototype, "beans", void 0);
    __decorate$1e([
      Autowired("rowContainerHeightService")
    ], RowRenderer2.prototype, "rowContainerHeightService", void 0);
    __decorate$1e([
      Autowired("ctrlsService")
    ], RowRenderer2.prototype, "ctrlsService", void 0);
    __decorate$1e([
      PostConstruct
    ], RowRenderer2.prototype, "postConstruct", null);
    RowRenderer2 = __decorate$1e([
      Bean("rowRenderer")
    ], RowRenderer2);
    return RowRenderer2;
  }(BeanStub)
);
var RowCtrlCache = (
  /** @class */
  function() {
    function RowCtrlCache2(maxCount) {
      this.entriesMap = {};
      this.entriesList = [];
      this.maxCount = maxCount;
    }
    RowCtrlCache2.prototype.addRow = function(rowCtrl) {
      this.entriesMap[rowCtrl.getRowNode().id] = rowCtrl;
      this.entriesList.push(rowCtrl);
      rowCtrl.setCached(true);
      if (this.entriesList.length > this.maxCount) {
        var rowCtrlToDestroy = this.entriesList[0];
        rowCtrlToDestroy.destroyFirstPass();
        rowCtrlToDestroy.destroySecondPass();
        this.removeFromCache(rowCtrlToDestroy);
      }
    };
    RowCtrlCache2.prototype.getRow = function(rowNode) {
      if (rowNode == null || rowNode.id == null) {
        return null;
      }
      var res = this.entriesMap[rowNode.id];
      if (!res) {
        return null;
      }
      this.removeFromCache(res);
      res.setCached(false);
      var rowNodeMismatch = res.getRowNode() != rowNode;
      return rowNodeMismatch ? null : res;
    };
    RowCtrlCache2.prototype.removeFromCache = function(rowCtrl) {
      var rowNodeId = rowCtrl.getRowNode().id;
      delete this.entriesMap[rowNodeId];
      removeFromArray(this.entriesList, rowCtrl);
    };
    RowCtrlCache2.prototype.getEntries = function() {
      return this.entriesList;
    };
    return RowCtrlCache2;
  }()
);
var __extends$1h = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1d = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ValueFormatterService = (
  /** @class */
  function(_super) {
    __extends$1h(ValueFormatterService2, _super);
    function ValueFormatterService2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ValueFormatterService2.prototype.formatValue = function(column, node, value, suppliedFormatter, useFormatterFromColumn) {
      if (useFormatterFromColumn === void 0) {
        useFormatterFromColumn = true;
      }
      var result = null;
      var formatter;
      var colDef = column.getColDef();
      if (suppliedFormatter) {
        formatter = suppliedFormatter;
      } else if (useFormatterFromColumn) {
        formatter = colDef.valueFormatter;
      }
      if (formatter) {
        var params = this.gridOptionsService.addGridCommonParams({
          value,
          node,
          data: node ? node.data : null,
          colDef,
          column
        });
        if (typeof formatter === "function") {
          result = formatter(params);
        } else {
          result = this.expressionService.evaluate(formatter, params);
        }
      } else if (colDef.refData) {
        return colDef.refData[value] || "";
      }
      if (result == null && Array.isArray(value)) {
        result = value.join(", ");
      }
      return result;
    };
    __decorate$1d([
      Autowired("expressionService")
    ], ValueFormatterService2.prototype, "expressionService", void 0);
    ValueFormatterService2 = __decorate$1d([
      Bean("valueFormatterService")
    ], ValueFormatterService2);
    return ValueFormatterService2;
  }(BeanStub)
);
var __extends$1g = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1c = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PinnedRowModel = (
  /** @class */
  function(_super) {
    __extends$1g(PinnedRowModel2, _super);
    function PinnedRowModel2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    PinnedRowModel2.prototype.init = function() {
      var _this = this;
      this.setPinnedTopRowData();
      this.setPinnedBottomRowData();
      this.addManagedPropertyListener("pinnedTopRowData", function() {
        return _this.setPinnedTopRowData();
      });
      this.addManagedPropertyListener("pinnedBottomRowData", function() {
        return _this.setPinnedBottomRowData();
      });
    };
    PinnedRowModel2.prototype.isEmpty = function(floating) {
      var rows = floating === "top" ? this.pinnedTopRows : this.pinnedBottomRows;
      return missingOrEmpty(rows);
    };
    PinnedRowModel2.prototype.isRowsToRender = function(floating) {
      return !this.isEmpty(floating);
    };
    PinnedRowModel2.prototype.getRowAtPixel = function(pixel, floating) {
      var rows = floating === "top" ? this.pinnedTopRows : this.pinnedBottomRows;
      if (missingOrEmpty(rows)) {
        return 0;
      }
      for (var i = 0; i < rows.length; i++) {
        var rowNode = rows[i];
        var rowTopPixel = rowNode.rowTop + rowNode.rowHeight - 1;
        if (rowTopPixel >= pixel) {
          return i;
        }
      }
      return rows.length - 1;
    };
    PinnedRowModel2.prototype.setPinnedTopRowData = function() {
      var rowData = this.gridOptionsService.get("pinnedTopRowData");
      this.pinnedTopRows = this.createNodesFromData(rowData, true);
      var event = {
        type: Events.EVENT_PINNED_ROW_DATA_CHANGED
      };
      this.eventService.dispatchEvent(event);
    };
    PinnedRowModel2.prototype.setPinnedBottomRowData = function() {
      var rowData = this.gridOptionsService.get("pinnedBottomRowData");
      this.pinnedBottomRows = this.createNodesFromData(rowData, false);
      var event = {
        type: Events.EVENT_PINNED_ROW_DATA_CHANGED
      };
      this.eventService.dispatchEvent(event);
    };
    PinnedRowModel2.prototype.createNodesFromData = function(allData, isTop) {
      var _this = this;
      var rowNodes = [];
      if (allData) {
        var nextRowTop_1 = 0;
        allData.forEach(function(dataItem, index) {
          var rowNode = new RowNode(_this.beans);
          rowNode.data = dataItem;
          var idPrefix = isTop ? RowNode.ID_PREFIX_TOP_PINNED : RowNode.ID_PREFIX_BOTTOM_PINNED;
          rowNode.id = idPrefix + index;
          rowNode.rowPinned = isTop ? "top" : "bottom";
          rowNode.setRowTop(nextRowTop_1);
          rowNode.setRowHeight(_this.gridOptionsService.getRowHeightForNode(rowNode).height);
          rowNode.setRowIndex(index);
          nextRowTop_1 += rowNode.rowHeight;
          rowNodes.push(rowNode);
        });
      }
      return rowNodes;
    };
    PinnedRowModel2.prototype.getPinnedTopRowData = function() {
      return this.pinnedTopRows;
    };
    PinnedRowModel2.prototype.getPinnedBottomRowData = function() {
      return this.pinnedBottomRows;
    };
    PinnedRowModel2.prototype.getPinnedTopTotalHeight = function() {
      return this.getTotalHeight(this.pinnedTopRows);
    };
    PinnedRowModel2.prototype.getPinnedTopRowCount = function() {
      return this.pinnedTopRows ? this.pinnedTopRows.length : 0;
    };
    PinnedRowModel2.prototype.getPinnedBottomRowCount = function() {
      return this.pinnedBottomRows ? this.pinnedBottomRows.length : 0;
    };
    PinnedRowModel2.prototype.getPinnedTopRow = function(index) {
      return this.pinnedTopRows[index];
    };
    PinnedRowModel2.prototype.getPinnedBottomRow = function(index) {
      return this.pinnedBottomRows[index];
    };
    PinnedRowModel2.prototype.forEachPinnedTopRow = function(callback) {
      if (missingOrEmpty(this.pinnedTopRows)) {
        return;
      }
      this.pinnedTopRows.forEach(callback);
    };
    PinnedRowModel2.prototype.forEachPinnedBottomRow = function(callback) {
      if (missingOrEmpty(this.pinnedBottomRows)) {
        return;
      }
      this.pinnedBottomRows.forEach(callback);
    };
    PinnedRowModel2.prototype.getPinnedBottomTotalHeight = function() {
      return this.getTotalHeight(this.pinnedBottomRows);
    };
    PinnedRowModel2.prototype.getTotalHeight = function(rowNodes) {
      if (!rowNodes || rowNodes.length === 0) {
        return 0;
      }
      var lastNode = last(rowNodes);
      return lastNode.rowTop + lastNode.rowHeight;
    };
    __decorate$1c([
      Autowired("beans")
    ], PinnedRowModel2.prototype, "beans", void 0);
    __decorate$1c([
      PostConstruct
    ], PinnedRowModel2.prototype, "init", null);
    PinnedRowModel2 = __decorate$1c([
      Bean("pinnedRowModel")
    ], PinnedRowModel2);
    return PinnedRowModel2;
  }(BeanStub)
);
var ServerSideTransactionResultStatus;
(function(ServerSideTransactionResultStatus2) {
  ServerSideTransactionResultStatus2["Applied"] = "Applied";
  ServerSideTransactionResultStatus2["StoreNotFound"] = "StoreNotFound";
  ServerSideTransactionResultStatus2["StoreLoading"] = "StoreLoading";
  ServerSideTransactionResultStatus2["StoreWaitingToLoad"] = "StoreWaitingToLoad";
  ServerSideTransactionResultStatus2["StoreLoadingFailed"] = "StoreLoadingFailed";
  ServerSideTransactionResultStatus2["StoreWrongType"] = "StoreWrongType";
  ServerSideTransactionResultStatus2["Cancelled"] = "Cancelled";
  ServerSideTransactionResultStatus2["StoreNotStarted"] = "StoreNotStarted";
})(ServerSideTransactionResultStatus || (ServerSideTransactionResultStatus = {}));
var ChangedPath = (
  /** @class */
  function() {
    function ChangedPath2(keepingColumns, rootNode) {
      this.active = true;
      this.nodeIdsToColumns = {};
      this.mapToItems = {};
      this.keepingColumns = keepingColumns;
      this.pathRoot = {
        rowNode: rootNode,
        children: null
      };
      this.mapToItems[rootNode.id] = this.pathRoot;
    }
    ChangedPath2.prototype.setInactive = function() {
      this.active = false;
    };
    ChangedPath2.prototype.isActive = function() {
      return this.active;
    };
    ChangedPath2.prototype.depthFirstSearchChangedPath = function(pathItem, callback) {
      if (pathItem.children) {
        for (var i = 0; i < pathItem.children.length; i++) {
          this.depthFirstSearchChangedPath(pathItem.children[i], callback);
        }
      }
      callback(pathItem.rowNode);
    };
    ChangedPath2.prototype.depthFirstSearchEverything = function(rowNode, callback, traverseEverything) {
      if (rowNode.childrenAfterGroup) {
        for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {
          var childNode = rowNode.childrenAfterGroup[i];
          if (childNode.childrenAfterGroup) {
            this.depthFirstSearchEverything(rowNode.childrenAfterGroup[i], callback, traverseEverything);
          } else if (traverseEverything) {
            callback(childNode);
          }
        }
      }
      callback(rowNode);
    };
    ChangedPath2.prototype.forEachChangedNodeDepthFirst = function(callback, traverseLeafNodes, includeUnchangedNodes) {
      if (traverseLeafNodes === void 0) {
        traverseLeafNodes = false;
      }
      if (includeUnchangedNodes === void 0) {
        includeUnchangedNodes = false;
      }
      if (this.active && !includeUnchangedNodes) {
        this.depthFirstSearchChangedPath(this.pathRoot, callback);
      } else {
        this.depthFirstSearchEverything(this.pathRoot.rowNode, callback, traverseLeafNodes);
      }
    };
    ChangedPath2.prototype.executeFromRootNode = function(callback) {
      callback(this.pathRoot.rowNode);
    };
    ChangedPath2.prototype.createPathItems = function(rowNode) {
      var pointer = rowNode;
      var newEntryCount = 0;
      while (!this.mapToItems[pointer.id]) {
        var newEntry = {
          rowNode: pointer,
          children: null
        };
        this.mapToItems[pointer.id] = newEntry;
        newEntryCount++;
        pointer = pointer.parent;
      }
      return newEntryCount;
    };
    ChangedPath2.prototype.populateColumnsMap = function(rowNode, columns) {
      var _this = this;
      if (!this.keepingColumns || !columns) {
        return;
      }
      var pointer = rowNode;
      while (pointer) {
        if (!this.nodeIdsToColumns[pointer.id]) {
          this.nodeIdsToColumns[pointer.id] = {};
        }
        columns.forEach(function(col) {
          return _this.nodeIdsToColumns[pointer.id][col.getId()] = true;
        });
        pointer = pointer.parent;
      }
    };
    ChangedPath2.prototype.linkPathItems = function(rowNode, newEntryCount) {
      var pointer = rowNode;
      for (var i = 0; i < newEntryCount; i++) {
        var thisItem = this.mapToItems[pointer.id];
        var parentItem = this.mapToItems[pointer.parent.id];
        if (!parentItem.children) {
          parentItem.children = [];
        }
        parentItem.children.push(thisItem);
        pointer = pointer.parent;
      }
    };
    ChangedPath2.prototype.addParentNode = function(rowNode, columns) {
      if (!rowNode || rowNode.isRowPinned()) {
        return;
      }
      var newEntryCount = this.createPathItems(rowNode);
      this.linkPathItems(rowNode, newEntryCount);
      this.populateColumnsMap(rowNode, columns);
    };
    ChangedPath2.prototype.canSkip = function(rowNode) {
      return this.active && !this.mapToItems[rowNode.id];
    };
    ChangedPath2.prototype.getValueColumnsForNode = function(rowNode, valueColumns) {
      if (!this.keepingColumns) {
        return valueColumns;
      }
      var colsForThisNode = this.nodeIdsToColumns[rowNode.id];
      var result = valueColumns.filter(function(col) {
        return colsForThisNode[col.getId()];
      });
      return result;
    };
    ChangedPath2.prototype.getNotValueColumnsForNode = function(rowNode, valueColumns) {
      if (!this.keepingColumns) {
        return null;
      }
      var colsForThisNode = this.nodeIdsToColumns[rowNode.id];
      var result = valueColumns.filter(function(col) {
        return !colsForThisNode[col.getId()];
      });
      return result;
    };
    return ChangedPath2;
  }()
);
var __extends$1f = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var RowNodeBlock = (
  /** @class */
  function(_super) {
    __extends$1f(RowNodeBlock2, _super);
    function RowNodeBlock2(id) {
      var _this = _super.call(this) || this;
      _this.state = RowNodeBlock2.STATE_WAITING_TO_LOAD;
      _this.version = 0;
      _this.id = id;
      return _this;
    }
    RowNodeBlock2.prototype.getId = function() {
      return this.id;
    };
    RowNodeBlock2.prototype.load = function() {
      this.state = RowNodeBlock2.STATE_LOADING;
      this.loadFromDatasource();
    };
    RowNodeBlock2.prototype.getVersion = function() {
      return this.version;
    };
    RowNodeBlock2.prototype.setStateWaitingToLoad = function() {
      this.version++;
      this.state = RowNodeBlock2.STATE_WAITING_TO_LOAD;
    };
    RowNodeBlock2.prototype.getState = function() {
      return this.state;
    };
    RowNodeBlock2.prototype.pageLoadFailed = function(version) {
      var requestMostRecentAndLive = this.isRequestMostRecentAndLive(version);
      if (requestMostRecentAndLive) {
        this.state = RowNodeBlock2.STATE_FAILED;
        this.processServerFail();
      }
      this.dispatchLoadCompleted(false);
    };
    RowNodeBlock2.prototype.success = function(version, params) {
      this.successCommon(version, params);
    };
    RowNodeBlock2.prototype.pageLoaded = function(version, rows, lastRow) {
      this.successCommon(version, { rowData: rows, rowCount: lastRow });
    };
    RowNodeBlock2.prototype.isRequestMostRecentAndLive = function(version) {
      var thisIsMostRecentRequest = version === this.version;
      var weAreNotDestroyed = this.isAlive();
      return thisIsMostRecentRequest && weAreNotDestroyed;
    };
    RowNodeBlock2.prototype.successCommon = function(version, params) {
      this.dispatchLoadCompleted();
      var requestMostRecentAndLive = this.isRequestMostRecentAndLive(version);
      if (requestMostRecentAndLive) {
        this.state = RowNodeBlock2.STATE_LOADED;
        this.processServerResult(params);
      }
    };
    RowNodeBlock2.prototype.dispatchLoadCompleted = function(success) {
      if (success === void 0) {
        success = true;
      }
      var event = {
        type: RowNodeBlock2.EVENT_LOAD_COMPLETE,
        success,
        block: this
      };
      this.dispatchEvent(event);
    };
    RowNodeBlock2.EVENT_LOAD_COMPLETE = "loadComplete";
    RowNodeBlock2.STATE_WAITING_TO_LOAD = "needsLoading";
    RowNodeBlock2.STATE_LOADING = "loading";
    RowNodeBlock2.STATE_LOADED = "loaded";
    RowNodeBlock2.STATE_FAILED = "failed";
    return RowNodeBlock2;
  }(BeanStub)
);
var __extends$1e = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1b = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param$5 = function(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
};
var RowNodeBlockLoader = (
  /** @class */
  function(_super) {
    __extends$1e(RowNodeBlockLoader2, _super);
    function RowNodeBlockLoader2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.activeBlockLoadsCount = 0;
      _this.blocks = [];
      _this.active = true;
      return _this;
    }
    RowNodeBlockLoader_1 = RowNodeBlockLoader2;
    RowNodeBlockLoader2.prototype.postConstruct = function() {
      this.maxConcurrentRequests = this.getMaxConcurrentDatasourceRequests();
      var blockLoadDebounceMillis = this.gridOptionsService.get("blockLoadDebounceMillis");
      if (blockLoadDebounceMillis && blockLoadDebounceMillis > 0) {
        this.checkBlockToLoadDebounce = _.debounce(this.performCheckBlocksToLoad.bind(this), blockLoadDebounceMillis);
      }
    };
    RowNodeBlockLoader2.prototype.setBeans = function(loggerFactory) {
      this.logger = loggerFactory.create("RowNodeBlockLoader");
    };
    RowNodeBlockLoader2.prototype.getMaxConcurrentDatasourceRequests = function() {
      var res = this.gridOptionsService.get("maxConcurrentDatasourceRequests");
      if (res == null) {
        return 2;
      }
      if (res <= 0) {
        return;
      }
      return res;
    };
    RowNodeBlockLoader2.prototype.addBlock = function(block) {
      this.blocks.push(block);
      block.addEventListener(RowNodeBlock.EVENT_LOAD_COMPLETE, this.loadComplete.bind(this));
      this.checkBlockToLoad();
    };
    RowNodeBlockLoader2.prototype.removeBlock = function(block) {
      _.removeFromArray(this.blocks, block);
    };
    RowNodeBlockLoader2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.active = false;
    };
    RowNodeBlockLoader2.prototype.loadComplete = function() {
      this.activeBlockLoadsCount--;
      this.checkBlockToLoad();
      this.dispatchEvent({ type: RowNodeBlockLoader_1.BLOCK_LOADED_EVENT });
      if (this.activeBlockLoadsCount == 0) {
        this.dispatchEvent({ type: RowNodeBlockLoader_1.BLOCK_LOADER_FINISHED_EVENT });
      }
    };
    RowNodeBlockLoader2.prototype.checkBlockToLoad = function() {
      if (this.checkBlockToLoadDebounce) {
        this.checkBlockToLoadDebounce();
      } else {
        this.performCheckBlocksToLoad();
      }
    };
    RowNodeBlockLoader2.prototype.performCheckBlocksToLoad = function() {
      if (!this.active) {
        return;
      }
      this.printCacheStatus();
      if (this.maxConcurrentRequests != null && this.activeBlockLoadsCount >= this.maxConcurrentRequests) {
        this.logger.log("checkBlockToLoad: max loads exceeded");
        return;
      }
      var loadAvailability = this.getAvailableLoadingCount();
      var blocksToLoad = this.blocks.filter(function(block) {
        return block.getState() === RowNodeBlock.STATE_WAITING_TO_LOAD;
      }).slice(0, loadAvailability);
      this.registerLoads(blocksToLoad.length);
      blocksToLoad.forEach(function(block) {
        return block.load();
      });
      this.printCacheStatus();
    };
    RowNodeBlockLoader2.prototype.getBlockState = function() {
      if (this.gridOptionsService.isRowModelType("serverSide")) {
        var ssrm = this.rowModel;
        return ssrm.getBlockStates();
      }
      var result = {};
      this.blocks.forEach(function(block) {
        var _a = block.getBlockStateJson(), id = _a.id, state = _a.state;
        result[id] = state;
      });
      return result;
    };
    RowNodeBlockLoader2.prototype.printCacheStatus = function() {
      if (this.logger.isLogging()) {
        this.logger.log("printCacheStatus: activePageLoadsCount = ".concat(this.activeBlockLoadsCount, ",") + " blocks = ".concat(JSON.stringify(this.getBlockState())));
      }
    };
    RowNodeBlockLoader2.prototype.isLoading = function() {
      return this.activeBlockLoadsCount > 0;
    };
    RowNodeBlockLoader2.prototype.registerLoads = function(count) {
      this.activeBlockLoadsCount += count;
    };
    RowNodeBlockLoader2.prototype.getAvailableLoadingCount = function() {
      return this.maxConcurrentRequests !== void 0 ? this.maxConcurrentRequests - this.activeBlockLoadsCount : void 0;
    };
    var RowNodeBlockLoader_1;
    RowNodeBlockLoader2.BLOCK_LOADED_EVENT = "blockLoaded";
    RowNodeBlockLoader2.BLOCK_LOADER_FINISHED_EVENT = "blockLoaderFinished";
    __decorate$1b([
      Autowired("rowModel")
    ], RowNodeBlockLoader2.prototype, "rowModel", void 0);
    __decorate$1b([
      PostConstruct
    ], RowNodeBlockLoader2.prototype, "postConstruct", null);
    __decorate$1b([
      __param$5(0, Qualifier("loggerFactory"))
    ], RowNodeBlockLoader2.prototype, "setBeans", null);
    RowNodeBlockLoader2 = RowNodeBlockLoader_1 = __decorate$1b([
      Bean("rowNodeBlockLoader")
    ], RowNodeBlockLoader2);
    return RowNodeBlockLoader2;
  }(BeanStub)
);
var __extends$1d = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1a = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PaginationProxy = (
  /** @class */
  function(_super) {
    __extends$1d(PaginationProxy2, _super);
    function PaginationProxy2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.currentPage = 0;
      _this.topDisplayedRowIndex = 0;
      _this.bottomDisplayedRowIndex = 0;
      _this.pixelOffset = 0;
      _this.masterRowCount = 0;
      return _this;
    }
    PaginationProxy2.prototype.postConstruct = function() {
      this.active = this.gridOptionsService.get("pagination");
      this.pageSizeFromGridOptions = this.gridOptionsService.get("paginationPageSize");
      this.paginateChildRows = this.isPaginateChildRows();
      this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));
      this.addManagedPropertyListener("pagination", this.onPaginationGridOptionChanged.bind(this));
      this.addManagedPropertyListener("paginationPageSize", this.onPageSizeGridOptionChanged.bind(this));
      this.onModelUpdated();
    };
    PaginationProxy2.prototype.ensureRowHeightsValid = function(startPixel, endPixel, startLimitIndex, endLimitIndex) {
      var res = this.rowModel.ensureRowHeightsValid(startPixel, endPixel, this.getPageFirstRow(), this.getPageLastRow());
      if (res) {
        this.calculatePages();
      }
      return res;
    };
    PaginationProxy2.prototype.isPaginateChildRows = function() {
      var shouldPaginate = this.gridOptionsService.get("groupRemoveSingleChildren") || this.gridOptionsService.get("groupRemoveLowestSingleChildren");
      if (shouldPaginate) {
        return true;
      }
      return this.gridOptionsService.get("paginateChildRows");
    };
    PaginationProxy2.prototype.onModelUpdated = function(modelUpdatedEvent) {
      this.calculatePages();
      var paginationChangedEvent = {
        type: Events.EVENT_PAGINATION_CHANGED,
        animate: modelUpdatedEvent ? modelUpdatedEvent.animate : false,
        newData: modelUpdatedEvent ? modelUpdatedEvent.newData : false,
        newPage: modelUpdatedEvent ? modelUpdatedEvent.newPage : false,
        newPageSize: modelUpdatedEvent ? modelUpdatedEvent.newPageSize : false,
        keepRenderedRows: modelUpdatedEvent ? modelUpdatedEvent.keepRenderedRows : false
      };
      this.eventService.dispatchEvent(paginationChangedEvent);
    };
    PaginationProxy2.prototype.onPaginationGridOptionChanged = function() {
      this.active = this.gridOptionsService.get("pagination");
      this.calculatePages();
      var paginationChangedEvent = {
        type: Events.EVENT_PAGINATION_CHANGED,
        animate: false,
        newData: false,
        newPage: false,
        newPageSize: false,
        // important to keep rendered rows, otherwise every time grid is resized,
        // we would destroy all the rows.
        keepRenderedRows: true
      };
      this.eventService.dispatchEvent(paginationChangedEvent);
    };
    PaginationProxy2.prototype.onPageSizeGridOptionChanged = function() {
      this.setPageSize(this.gridOptionsService.get("paginationPageSize"), "gridOptions");
    };
    PaginationProxy2.prototype.goToPage = function(page) {
      if (!this.active || this.currentPage === page || typeof this.currentPage !== "number") {
        return;
      }
      this.currentPage = page;
      var event = {
        type: Events.EVENT_MODEL_UPDATED,
        animate: false,
        keepRenderedRows: false,
        newData: false,
        newPage: true,
        newPageSize: false
      };
      this.onModelUpdated(event);
    };
    PaginationProxy2.prototype.getPixelOffset = function() {
      return this.pixelOffset;
    };
    PaginationProxy2.prototype.getRow = function(index) {
      return this.rowModel.getRow(index);
    };
    PaginationProxy2.prototype.getRowNode = function(id) {
      return this.rowModel.getRowNode(id);
    };
    PaginationProxy2.prototype.getRowIndexAtPixel = function(pixel) {
      return this.rowModel.getRowIndexAtPixel(pixel);
    };
    PaginationProxy2.prototype.getCurrentPageHeight = function() {
      if (missing(this.topRowBounds) || missing(this.bottomRowBounds)) {
        return 0;
      }
      return Math.max(this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight - this.topRowBounds.rowTop, 0);
    };
    PaginationProxy2.prototype.getCurrentPagePixelRange = function() {
      var pageFirstPixel = this.topRowBounds ? this.topRowBounds.rowTop : 0;
      var pageLastPixel = this.bottomRowBounds ? this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight : 0;
      return { pageFirstPixel, pageLastPixel };
    };
    PaginationProxy2.prototype.isRowPresent = function(rowNode) {
      if (!this.rowModel.isRowPresent(rowNode)) {
        return false;
      }
      var nodeIsInPage = rowNode.rowIndex >= this.topDisplayedRowIndex && rowNode.rowIndex <= this.bottomDisplayedRowIndex;
      return nodeIsInPage;
    };
    PaginationProxy2.prototype.isEmpty = function() {
      return this.rowModel.isEmpty();
    };
    PaginationProxy2.prototype.isRowsToRender = function() {
      return this.rowModel.isRowsToRender();
    };
    PaginationProxy2.prototype.forEachNode = function(callback) {
      return this.rowModel.forEachNode(callback);
    };
    PaginationProxy2.prototype.forEachNodeOnPage = function(callback) {
      var firstRow = this.getPageFirstRow();
      var lastRow = this.getPageLastRow();
      for (var i = firstRow; i <= lastRow; i++) {
        var node = this.getRow(i);
        if (node) {
          callback(node);
        }
      }
    };
    PaginationProxy2.prototype.getType = function() {
      return this.rowModel.getType();
    };
    PaginationProxy2.prototype.getRowBounds = function(index) {
      var res = this.rowModel.getRowBounds(index);
      res.rowIndex = index;
      return res;
    };
    PaginationProxy2.prototype.getPageFirstRow = function() {
      return this.topRowBounds ? this.topRowBounds.rowIndex : -1;
    };
    PaginationProxy2.prototype.getPageLastRow = function() {
      return this.bottomRowBounds ? this.bottomRowBounds.rowIndex : -1;
    };
    PaginationProxy2.prototype.getRowCount = function() {
      return this.rowModel.getRowCount();
    };
    PaginationProxy2.prototype.getPageForIndex = function(index) {
      return Math.floor(index / this.pageSize);
    };
    PaginationProxy2.prototype.goToPageWithIndex = function(index) {
      if (!this.active) {
        return;
      }
      var pageNumber = this.getPageForIndex(index);
      this.goToPage(pageNumber);
    };
    PaginationProxy2.prototype.isRowInPage = function(row) {
      if (!this.active) {
        return true;
      }
      var rowPage = this.getPageForIndex(row.rowIndex);
      return rowPage === this.currentPage;
    };
    PaginationProxy2.prototype.isLastPageFound = function() {
      return this.rowModel.isLastRowIndexKnown();
    };
    PaginationProxy2.prototype.getCurrentPage = function() {
      return this.currentPage;
    };
    PaginationProxy2.prototype.goToNextPage = function() {
      this.goToPage(this.currentPage + 1);
    };
    PaginationProxy2.prototype.goToPreviousPage = function() {
      this.goToPage(this.currentPage - 1);
    };
    PaginationProxy2.prototype.goToFirstPage = function() {
      this.goToPage(0);
    };
    PaginationProxy2.prototype.goToLastPage = function() {
      var rowCount = this.rowModel.getRowCount();
      var lastPage = Math.floor(rowCount / this.pageSize);
      this.goToPage(lastPage);
    };
    PaginationProxy2.prototype.getPageSize = function() {
      return this.pageSize;
    };
    PaginationProxy2.prototype.getTotalPages = function() {
      return this.totalPages;
    };
    PaginationProxy2.prototype.setPage = function(page) {
      this.currentPage = page;
    };
    Object.defineProperty(PaginationProxy2.prototype, "pageSize", {
      get: function() {
        if (exists(this.pageSizeAutoCalculated)) {
          return this.pageSizeAutoCalculated;
        }
        if (exists(this.pageSizeFromPageSizeSelector)) {
          return this.pageSizeFromPageSizeSelector;
        }
        if (exists(this.pageSizeFromInitialState)) {
          return this.pageSizeFromInitialState;
        }
        if (exists(this.pageSizeFromGridOptions)) {
          return this.pageSizeFromGridOptions;
        }
        return this.defaultPageSize;
      },
      enumerable: false,
      configurable: true
    });
    PaginationProxy2.prototype.unsetAutoCalculatedPageSize = function() {
      if (this.pageSizeAutoCalculated === void 0) {
        return;
      }
      var oldPageSize = this.pageSizeAutoCalculated;
      this.pageSizeAutoCalculated = void 0;
      if (this.pageSize === oldPageSize) {
        return;
      }
      this.onModelUpdated({
        type: Events.EVENT_MODEL_UPDATED,
        animate: false,
        keepRenderedRows: false,
        newData: false,
        newPage: false,
        newPageSize: true
      });
    };
    PaginationProxy2.prototype.setPageSize = function(size, source) {
      var currentSize = this.pageSize;
      switch (source) {
        case "autoCalculated":
          this.pageSizeAutoCalculated = size;
          break;
        case "pageSizeSelector":
          this.pageSizeFromPageSizeSelector = size;
          if (this.currentPage !== 0) {
            this.goToFirstPage();
          }
          break;
        case "initialState":
          this.pageSizeFromInitialState = size;
          break;
        case "gridOptions":
          this.pageSizeFromGridOptions = size;
          this.pageSizeFromInitialState = void 0;
          this.pageSizeFromPageSizeSelector = void 0;
          if (this.currentPage !== 0) {
            this.goToFirstPage();
          }
          break;
      }
      if (currentSize !== this.pageSize) {
        var event_1 = {
          type: Events.EVENT_MODEL_UPDATED,
          animate: false,
          keepRenderedRows: false,
          newData: false,
          newPage: false,
          newPageSize: true
        };
        this.onModelUpdated(event_1);
      }
    };
    PaginationProxy2.prototype.calculatePages = function() {
      if (this.active) {
        if (this.paginateChildRows) {
          this.calculatePagesAllRows();
        } else {
          this.calculatePagesMasterRowsOnly();
        }
      } else {
        this.calculatedPagesNotActive();
      }
      this.topRowBounds = this.rowModel.getRowBounds(this.topDisplayedRowIndex);
      if (this.topRowBounds) {
        this.topRowBounds.rowIndex = this.topDisplayedRowIndex;
      }
      this.bottomRowBounds = this.rowModel.getRowBounds(this.bottomDisplayedRowIndex);
      if (this.bottomRowBounds) {
        this.bottomRowBounds.rowIndex = this.bottomDisplayedRowIndex;
      }
      this.setPixelOffset(exists(this.topRowBounds) ? this.topRowBounds.rowTop : 0);
    };
    PaginationProxy2.prototype.setPixelOffset = function(value) {
      if (this.pixelOffset === value) {
        return;
      }
      this.pixelOffset = value;
      this.eventService.dispatchEvent({ type: Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED });
    };
    PaginationProxy2.prototype.setZeroRows = function() {
      this.masterRowCount = 0;
      this.topDisplayedRowIndex = 0;
      this.bottomDisplayedRowIndex = -1;
      this.currentPage = 0;
      this.totalPages = 0;
    };
    PaginationProxy2.prototype.adjustCurrentPageIfInvalid = function() {
      if (this.currentPage >= this.totalPages) {
        this.currentPage = this.totalPages - 1;
      }
      if (!isFinite(this.currentPage) || isNaN(this.currentPage) || this.currentPage < 0) {
        this.currentPage = 0;
      }
    };
    PaginationProxy2.prototype.calculatePagesMasterRowsOnly = function() {
      this.masterRowCount = this.rowModel.getTopLevelRowCount();
      if (this.masterRowCount <= 0) {
        this.setZeroRows();
        return;
      }
      var masterLastRowIndex = this.masterRowCount - 1;
      this.totalPages = Math.floor(masterLastRowIndex / this.pageSize) + 1;
      this.adjustCurrentPageIfInvalid();
      var masterPageStartIndex = this.pageSize * this.currentPage;
      var masterPageEndIndex = this.pageSize * (this.currentPage + 1) - 1;
      if (masterPageEndIndex > masterLastRowIndex) {
        masterPageEndIndex = masterLastRowIndex;
      }
      this.topDisplayedRowIndex = this.rowModel.getTopLevelRowDisplayedIndex(masterPageStartIndex);
      if (masterPageEndIndex === masterLastRowIndex) {
        this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;
      } else {
        var firstIndexNotToShow = this.rowModel.getTopLevelRowDisplayedIndex(masterPageEndIndex + 1);
        this.bottomDisplayedRowIndex = firstIndexNotToShow - 1;
      }
    };
    PaginationProxy2.prototype.getMasterRowCount = function() {
      return this.masterRowCount;
    };
    PaginationProxy2.prototype.calculatePagesAllRows = function() {
      this.masterRowCount = this.rowModel.getRowCount();
      if (this.masterRowCount === 0) {
        this.setZeroRows();
        return;
      }
      var maxRowIndex = this.masterRowCount - 1;
      this.totalPages = Math.floor(maxRowIndex / this.pageSize) + 1;
      this.adjustCurrentPageIfInvalid();
      this.topDisplayedRowIndex = this.pageSize * this.currentPage;
      this.bottomDisplayedRowIndex = this.pageSize * (this.currentPage + 1) - 1;
      if (this.bottomDisplayedRowIndex > maxRowIndex) {
        this.bottomDisplayedRowIndex = maxRowIndex;
      }
    };
    PaginationProxy2.prototype.calculatedPagesNotActive = function() {
      this.setPageSize(this.masterRowCount, "autoCalculated");
      this.totalPages = 1;
      this.currentPage = 0;
      this.topDisplayedRowIndex = 0;
      this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;
    };
    __decorate$1a([
      Autowired("rowModel")
    ], PaginationProxy2.prototype, "rowModel", void 0);
    __decorate$1a([
      PostConstruct
    ], PaginationProxy2.prototype, "postConstruct", null);
    PaginationProxy2 = __decorate$1a([
      Bean("paginationProxy")
    ], PaginationProxy2);
    return PaginationProxy2;
  }(BeanStub)
);
var __extends$1c = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$19 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var StylingService = (
  /** @class */
  function(_super) {
    __extends$1c(StylingService2, _super);
    function StylingService2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    StylingService2.prototype.processAllCellClasses = function(colDef, params, onApplicableClass, onNotApplicableClass) {
      this.processClassRules(void 0, colDef.cellClassRules, params, onApplicableClass, onNotApplicableClass);
      this.processStaticCellClasses(colDef, params, onApplicableClass);
    };
    StylingService2.prototype.processClassRules = function(previousClassRules, classRules, params, onApplicableClass, onNotApplicableClass) {
      if (classRules == null && previousClassRules == null) {
        return;
      }
      var classesToApply = {};
      var classesToRemove = {};
      var forEachSingleClass = function(className, callback) {
        className.split(" ").forEach(function(singleClass) {
          if (singleClass.trim() == "")
            return;
          callback(singleClass);
        });
      };
      if (classRules) {
        var classNames = Object.keys(classRules);
        var _loop_1 = function(i2) {
          var className = classNames[i2];
          var rule = classRules[className];
          var resultOfRule;
          if (typeof rule === "string") {
            resultOfRule = this_1.expressionService.evaluate(rule, params);
          } else if (typeof rule === "function") {
            resultOfRule = rule(params);
          }
          forEachSingleClass(className, function(singleClass) {
            resultOfRule ? classesToApply[singleClass] = true : classesToRemove[singleClass] = true;
          });
        };
        var this_1 = this;
        for (var i = 0; i < classNames.length; i++) {
          _loop_1(i);
        }
      }
      if (previousClassRules && onNotApplicableClass) {
        Object.keys(previousClassRules).forEach(function(className) {
          return forEachSingleClass(className, function(singleClass) {
            if (!classesToApply[singleClass]) {
              classesToRemove[singleClass] = true;
            }
          });
        });
      }
      if (onNotApplicableClass) {
        Object.keys(classesToRemove).forEach(onNotApplicableClass);
      }
      Object.keys(classesToApply).forEach(onApplicableClass);
    };
    StylingService2.prototype.getStaticCellClasses = function(colDef, params) {
      var cellClass = colDef.cellClass;
      if (!cellClass) {
        return [];
      }
      var classOrClasses;
      if (typeof cellClass === "function") {
        var cellClassFunc = cellClass;
        classOrClasses = cellClassFunc(params);
      } else {
        classOrClasses = cellClass;
      }
      if (typeof classOrClasses === "string") {
        classOrClasses = [classOrClasses];
      }
      return classOrClasses || [];
    };
    StylingService2.prototype.processStaticCellClasses = function(colDef, params, onApplicableClass) {
      var classOrClasses = this.getStaticCellClasses(colDef, params);
      classOrClasses.forEach(function(cssClassItem) {
        onApplicableClass(cssClassItem);
      });
    };
    __decorate$19([
      Autowired("expressionService")
    ], StylingService2.prototype, "expressionService", void 0);
    StylingService2 = __decorate$19([
      Bean("stylingService")
    ], StylingService2);
    return StylingService2;
  }(BeanStub)
);
var __extends$1b = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AgToggleButton = (
  /** @class */
  function(_super) {
    __extends$1b(AgToggleButton2, _super);
    function AgToggleButton2(config) {
      return _super.call(this, config, "ag-toggle-button") || this;
    }
    AgToggleButton2.prototype.setValue = function(value, silent) {
      _super.prototype.setValue.call(this, value, silent);
      this.addOrRemoveCssClass("ag-selected", this.getValue());
      return this;
    };
    return AgToggleButton2;
  }(AgCheckbox)
);
var __extends$1a = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AgInputTextArea = (
  /** @class */
  function(_super) {
    __extends$1a(AgInputTextArea2, _super);
    function AgInputTextArea2(config) {
      return _super.call(this, config, "ag-text-area", null, "textarea") || this;
    }
    AgInputTextArea2.prototype.setValue = function(value, silent) {
      var ret = _super.prototype.setValue.call(this, value, silent);
      this.eInput.value = value;
      return ret;
    };
    AgInputTextArea2.prototype.setCols = function(cols) {
      this.eInput.cols = cols;
      return this;
    };
    AgInputTextArea2.prototype.setRows = function(rows) {
      this.eInput.rows = rows;
      return this;
    };
    return AgInputTextArea2;
  }(AgAbstractInputField)
);
var __extends$19 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AgInputDateField = (
  /** @class */
  function(_super) {
    __extends$19(AgInputDateField2, _super);
    function AgInputDateField2(config) {
      return _super.call(this, config, "ag-date-field", "date") || this;
    }
    AgInputDateField2.prototype.postConstruct = function() {
      var _this = this;
      _super.prototype.postConstruct.call(this);
      this.addManagedListener(this.eInput, "wheel", this.onWheel.bind(this));
      var usingSafari = isBrowserSafari();
      this.addManagedListener(this.eInput, "mousedown", function() {
        if (_this.isDisabled() || usingSafari) {
          return;
        }
        _this.eInput.focus();
      });
      this.eInput.step = "any";
    };
    AgInputDateField2.prototype.onWheel = function(e) {
      if (document.activeElement === this.eInput) {
        e.preventDefault();
      }
    };
    AgInputDateField2.prototype.setMin = function(minDate) {
      var _a;
      var min = minDate instanceof Date ? (_a = serialiseDate(minDate !== null && minDate !== void 0 ? minDate : null, false)) !== null && _a !== void 0 ? _a : void 0 : minDate;
      if (this.min === min) {
        return this;
      }
      this.min = min;
      addOrRemoveAttribute(this.eInput, "min", min);
      return this;
    };
    AgInputDateField2.prototype.setMax = function(maxDate) {
      var _a;
      var max = maxDate instanceof Date ? (_a = serialiseDate(maxDate !== null && maxDate !== void 0 ? maxDate : null, false)) !== null && _a !== void 0 ? _a : void 0 : maxDate;
      if (this.max === max) {
        return this;
      }
      this.max = max;
      addOrRemoveAttribute(this.eInput, "max", max);
      return this;
    };
    AgInputDateField2.prototype.setStep = function(step) {
      if (this.step === step) {
        return this;
      }
      this.step = step;
      addOrRemoveAttribute(this.eInput, "step", step);
      return this;
    };
    AgInputDateField2.prototype.getDate = function() {
      var _a;
      if (!this.eInput.validity.valid) {
        return void 0;
      }
      return (_a = parseDateTimeFromString(this.getValue())) !== null && _a !== void 0 ? _a : void 0;
    };
    AgInputDateField2.prototype.setDate = function(date, silent) {
      this.setValue(serialiseDate(date !== null && date !== void 0 ? date : null, false), silent);
    };
    return AgInputDateField2;
  }(AgInputTextField)
);
var __extends$18 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AgInputRange = (
  /** @class */
  function(_super) {
    __extends$18(AgInputRange2, _super);
    function AgInputRange2(config) {
      return _super.call(this, config, "ag-range-field", "range") || this;
    }
    AgInputRange2.prototype.postConstruct = function() {
      _super.prototype.postConstruct.call(this);
      var _a = this.config, min = _a.min, max = _a.max, step = _a.step;
      if (min != null) {
        this.setMinValue(min);
      }
      if (max != null) {
        this.setMaxValue(max);
      }
      this.setStep(step || 1);
    };
    AgInputRange2.prototype.addInputListeners = function() {
      var _this = this;
      this.addManagedListener(this.eInput, "input", function(e) {
        var value = e.target.value;
        _this.setValue(value);
      });
    };
    AgInputRange2.prototype.setMinValue = function(value) {
      this.min = value;
      this.eInput.setAttribute("min", value.toString());
      return this;
    };
    AgInputRange2.prototype.setMaxValue = function(value) {
      this.max = value;
      this.eInput.setAttribute("max", value.toString());
      return this;
    };
    AgInputRange2.prototype.setStep = function(value) {
      this.eInput.setAttribute("step", value.toString());
      return this;
    };
    AgInputRange2.prototype.setValue = function(value, silent) {
      if (this.min != null) {
        value = Math.max(parseFloat(value), this.min).toString();
      }
      if (this.max != null) {
        value = Math.min(parseFloat(value), this.max).toString();
      }
      var ret = _super.prototype.setValue.call(this, value, silent);
      this.eInput.value = value;
      return ret;
    };
    return AgInputRange2;
  }(AgAbstractInputField)
);
var __extends$17 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$18 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RichSelectRow = (
  /** @class */
  function(_super) {
    __extends$17(RichSelectRow2, _super);
    function RichSelectRow2(params, wrapperEl) {
      var _this = _super.call(
        this,
        /* html */
        '<div class="ag-rich-select-row" role="presentation"></div>'
      ) || this;
      _this.params = params;
      _this.wrapperEl = wrapperEl;
      return _this;
    }
    RichSelectRow2.prototype.postConstruct = function() {
      this.addManagedListener(this.getGui(), "click", this.onClick.bind(this));
    };
    RichSelectRow2.prototype.setState = function(value) {
      var formattedValue = "";
      if (this.params.valueFormatter) {
        formattedValue = this.params.valueFormatter(value);
      }
      var rendererSuccessful = this.populateWithRenderer(value, formattedValue);
      if (!rendererSuccessful) {
        this.populateWithoutRenderer(value, formattedValue);
      }
      this.value = value;
    };
    RichSelectRow2.prototype.highlightString = function(matchString) {
      var parsedValue = this.parsedValue;
      if (this.params.cellRenderer || !exists(parsedValue)) {
        return;
      }
      var hasMatch = exists(matchString);
      if (hasMatch) {
        var index = parsedValue === null || parsedValue === void 0 ? void 0 : parsedValue.toLocaleLowerCase().indexOf(matchString.toLocaleLowerCase());
        if (index >= 0) {
          var highlightEndIndex = index + matchString.length;
          var startPart = escapeString(parsedValue.slice(0, index), true);
          var highlightedPart = escapeString(parsedValue.slice(index, highlightEndIndex), true);
          var endPart = escapeString(parsedValue.slice(highlightEndIndex));
          this.renderValueWithoutRenderer("".concat(startPart, '<span class="ag-rich-select-row-text-highlight">').concat(highlightedPart, "</span>").concat(endPart));
        } else {
          hasMatch = false;
        }
      }
      if (!hasMatch) {
        this.renderValueWithoutRenderer(parsedValue);
      }
    };
    RichSelectRow2.prototype.updateHighlighted = function(highlighted) {
      var _a;
      var eGui = this.getGui();
      var parentId = "ag-rich-select-row-".concat(this.getCompId());
      (_a = eGui.parentElement) === null || _a === void 0 ? void 0 : _a.setAttribute("id", parentId);
      if (highlighted) {
        var parentAriaEl = this.getParentComponent().getAriaElement();
        setAriaActiveDescendant(parentAriaEl, parentId);
        this.wrapperEl.setAttribute("data-active-option", parentId);
      }
      setAriaSelected(eGui.parentElement, highlighted);
      this.addOrRemoveCssClass("ag-rich-select-row-selected", highlighted);
    };
    RichSelectRow2.prototype.populateWithoutRenderer = function(value, valueFormatted) {
      var eDocument = this.gridOptionsService.getDocument();
      var eGui = this.getGui();
      var span = eDocument.createElement("span");
      span.style.overflow = "hidden";
      span.style.textOverflow = "ellipsis";
      var parsedValue = escapeString(exists(valueFormatted) ? valueFormatted : value, true);
      this.parsedValue = exists(parsedValue) ? parsedValue : null;
      eGui.appendChild(span);
      this.renderValueWithoutRenderer(parsedValue);
    };
    RichSelectRow2.prototype.renderValueWithoutRenderer = function(value) {
      var span = this.getGui().querySelector("span");
      if (!span) {
        return;
      }
      span.innerHTML = exists(value) ? value : "&nbsp;";
    };
    RichSelectRow2.prototype.populateWithRenderer = function(value, valueFormatted) {
      var _this = this;
      var cellRendererPromise;
      var userCompDetails;
      if (this.params.cellRenderer) {
        userCompDetails = this.userComponentFactory.getCellRendererDetails(this.params, {
          value,
          valueFormatted
        });
      }
      if (userCompDetails) {
        cellRendererPromise = userCompDetails.newAgStackInstance();
      }
      if (cellRendererPromise) {
        bindCellRendererToHtmlElement(cellRendererPromise, this.getGui());
      }
      if (cellRendererPromise) {
        cellRendererPromise.then(function(childComponent) {
          _this.addDestroyFunc(function() {
            _this.getContext().destroyBean(childComponent);
          });
        });
        return true;
      }
      return false;
    };
    RichSelectRow2.prototype.onClick = function() {
      var parent = this.getParentComponent();
      var event = {
        type: Events.EVENT_FIELD_PICKER_VALUE_SELECTED,
        fromEnterKey: false,
        value: this.value
      };
      parent === null || parent === void 0 ? void 0 : parent.dispatchEvent(event);
    };
    __decorate$18([
      Autowired("userComponentFactory")
    ], RichSelectRow2.prototype, "userComponentFactory", void 0);
    __decorate$18([
      PostConstruct
    ], RichSelectRow2.prototype, "postConstruct", null);
    return RichSelectRow2;
  }(Component2)
);
var __extends$16 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$17 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var VirtualList = (
  /** @class */
  function(_super) {
    __extends$16(VirtualList2, _super);
    function VirtualList2(params) {
      var _this = _super.call(this, VirtualList2.getTemplate((params === null || params === void 0 ? void 0 : params.cssIdentifier) || "default")) || this;
      _this.renderedRows = /* @__PURE__ */ new Map();
      _this.rowHeight = 20;
      var _a = params || {}, _b = _a.cssIdentifier, cssIdentifier = _b === void 0 ? "default" : _b, _c = _a.ariaRole, ariaRole = _c === void 0 ? "listbox" : _c, listName = _a.listName;
      _this.cssIdentifier = cssIdentifier;
      _this.ariaRole = ariaRole;
      _this.listName = listName;
      return _this;
    }
    VirtualList2.prototype.postConstruct = function() {
      var _this = this;
      this.addScrollListener();
      this.rowHeight = this.getItemHeight();
      this.addResizeObserver();
      this.initialiseTabGuard({
        onFocusIn: function(e) {
          return _this.onFocusIn(e);
        },
        onFocusOut: function(e) {
          return _this.onFocusOut(e);
        },
        focusInnerElement: function(fromBottom) {
          return _this.focusInnerElement(fromBottom);
        },
        onTabKeyDown: function(e) {
          return _this.onTabKeyDown(e);
        },
        handleKeyDown: function(e) {
          return _this.handleKeyDown(e);
        }
      });
      this.setAriaProperties();
      this.addManagedListener(this.eventService, Events.EVENT_GRID_STYLES_CHANGED, this.onGridStylesChanged.bind(this));
    };
    VirtualList2.prototype.onGridStylesChanged = function() {
      this.rowHeight = this.getItemHeight();
      this.refresh();
    };
    VirtualList2.prototype.setAriaProperties = function() {
      var translate = this.localeService.getLocaleTextFunc();
      var listName = translate("ariaDefaultListName", this.listName || "List");
      var ariaEl = this.eContainer;
      setAriaRole(ariaEl, this.ariaRole);
      setAriaLabel(ariaEl, listName);
    };
    VirtualList2.prototype.addResizeObserver = function() {
      var _this = this;
      var listener = function() {
        return _this.animationFrameService.requestAnimationFrame(function() {
          return _this.drawVirtualRows();
        });
      };
      var destroyObserver = this.resizeObserverService.observeResize(this.getGui(), listener);
      this.addDestroyFunc(destroyObserver);
    };
    VirtualList2.prototype.focusInnerElement = function(fromBottom) {
      this.focusRow(fromBottom ? this.model.getRowCount() - 1 : 0);
    };
    VirtualList2.prototype.onFocusIn = function(e) {
      var target = e.target;
      if (target.classList.contains("ag-virtual-list-item")) {
        this.lastFocusedRowIndex = getAriaPosInSet(target) - 1;
      }
    };
    VirtualList2.prototype.onFocusOut = function(e) {
      if (!this.getFocusableElement().contains(e.relatedTarget)) {
        this.lastFocusedRowIndex = null;
      }
    };
    VirtualList2.prototype.handleKeyDown = function(e) {
      switch (e.key) {
        case KeyCode.UP:
        case KeyCode.DOWN:
          if (this.navigate(e.key === KeyCode.UP)) {
            e.preventDefault();
          }
          break;
      }
    };
    VirtualList2.prototype.onTabKeyDown = function(e) {
      if (this.navigate(e.shiftKey)) {
        e.preventDefault();
      } else {
        stopPropagationForAgGrid(e);
        this.forceFocusOutOfContainer(e.shiftKey);
      }
    };
    VirtualList2.prototype.navigate = function(up) {
      if (this.lastFocusedRowIndex == null) {
        return false;
      }
      var nextRow = this.lastFocusedRowIndex + (up ? -1 : 1);
      if (nextRow < 0 || nextRow >= this.model.getRowCount()) {
        return false;
      }
      this.focusRow(nextRow);
      return true;
    };
    VirtualList2.prototype.getLastFocusedRow = function() {
      return this.lastFocusedRowIndex;
    };
    VirtualList2.prototype.focusRow = function(rowNumber) {
      var _this = this;
      this.ensureIndexVisible(rowNumber);
      window.setTimeout(function() {
        if (!_this.isAlive()) {
          return;
        }
        var renderedRow = _this.renderedRows.get(rowNumber);
        if (renderedRow) {
          renderedRow.eDiv.focus();
        }
      }, 10);
    };
    VirtualList2.prototype.getComponentAt = function(rowIndex) {
      var comp = this.renderedRows.get(rowIndex);
      return comp && comp.rowComponent;
    };
    VirtualList2.prototype.forEachRenderedRow = function(func) {
      this.renderedRows.forEach(function(value, key) {
        return func(value.rowComponent, key);
      });
    };
    VirtualList2.getTemplate = function(cssIdentifier) {
      return (
        /* html */
        '<div class="ag-virtual-list-viewport ag-'.concat(cssIdentifier, '-virtual-list-viewport" role="presentation">\n                <div class="ag-virtual-list-container ag-').concat(cssIdentifier, '-virtual-list-container" ref="eContainer"></div>\n            </div>')
      );
    };
    VirtualList2.prototype.getItemHeight = function() {
      return this.environment.getListItemHeight();
    };
    VirtualList2.prototype.ensureIndexVisible = function(index, scrollPartialIntoView) {
      if (scrollPartialIntoView === void 0) {
        scrollPartialIntoView = true;
      }
      var lastRow = this.model.getRowCount();
      if (typeof index !== "number" || index < 0 || index >= lastRow) {
        console.warn("AG Grid: invalid row index for ensureIndexVisible: " + index);
        return false;
      }
      var rowTopPixel = index * this.rowHeight;
      var rowBottomPixel = rowTopPixel + this.rowHeight;
      var eGui = this.getGui();
      var viewportTopPixel = eGui.scrollTop;
      var viewportHeight = eGui.offsetHeight;
      var viewportBottomPixel = viewportTopPixel + viewportHeight;
      var diff = scrollPartialIntoView ? 0 : this.rowHeight;
      var viewportScrolledPastRow = viewportTopPixel > rowTopPixel + diff;
      var viewportScrolledBeforeRow = viewportBottomPixel < rowBottomPixel - diff;
      if (viewportScrolledPastRow) {
        eGui.scrollTop = rowTopPixel;
        return true;
      }
      if (viewportScrolledBeforeRow) {
        var newScrollPosition = rowBottomPixel - viewportHeight;
        eGui.scrollTop = newScrollPosition;
        return true;
      }
      return false;
    };
    VirtualList2.prototype.setComponentCreator = function(componentCreator) {
      this.componentCreator = componentCreator;
    };
    VirtualList2.prototype.setComponentUpdater = function(componentUpdater) {
      this.componentUpdater = componentUpdater;
    };
    VirtualList2.prototype.getRowHeight = function() {
      return this.rowHeight;
    };
    VirtualList2.prototype.getScrollTop = function() {
      return this.getGui().scrollTop;
    };
    VirtualList2.prototype.setRowHeight = function(rowHeight) {
      this.rowHeight = rowHeight;
      this.refresh();
    };
    VirtualList2.prototype.refresh = function(softRefresh) {
      var _this = this;
      if (this.model == null || !this.isAlive()) {
        return;
      }
      var rowCount = this.model.getRowCount();
      this.eContainer.style.height = "".concat(rowCount * this.rowHeight, "px");
      waitUntil(function() {
        return _this.eContainer.clientHeight >= rowCount * _this.rowHeight;
      }, function() {
        if (!_this.isAlive()) {
          return;
        }
        if (_this.canSoftRefresh(softRefresh)) {
          _this.drawVirtualRows(true);
        } else {
          _this.clearVirtualRows();
          _this.drawVirtualRows();
        }
      });
    };
    VirtualList2.prototype.canSoftRefresh = function(softRefresh) {
      return !!(softRefresh && this.renderedRows.size && typeof this.model.areRowsEqual === "function" && this.componentUpdater);
    };
    VirtualList2.prototype.clearVirtualRows = function() {
      var _this = this;
      this.renderedRows.forEach(function(_2, rowIndex) {
        return _this.removeRow(rowIndex);
      });
    };
    VirtualList2.prototype.drawVirtualRows = function(softRefresh) {
      if (!this.isAlive() || !this.model) {
        return;
      }
      var gui = this.getGui();
      var topPixel = gui.scrollTop;
      var bottomPixel = topPixel + gui.offsetHeight;
      var firstRow = Math.floor(topPixel / this.rowHeight);
      var lastRow = Math.floor(bottomPixel / this.rowHeight);
      this.ensureRowsRendered(firstRow, lastRow, softRefresh);
    };
    VirtualList2.prototype.ensureRowsRendered = function(start, finish, softRefresh) {
      var _this = this;
      this.renderedRows.forEach(function(_2, rowIndex2) {
        if ((rowIndex2 < start || rowIndex2 > finish) && rowIndex2 !== _this.lastFocusedRowIndex) {
          _this.removeRow(rowIndex2);
        }
      });
      if (softRefresh) {
        this.refreshRows();
      }
      for (var rowIndex = start; rowIndex <= finish; rowIndex++) {
        if (this.renderedRows.has(rowIndex)) {
          continue;
        }
        if (rowIndex < this.model.getRowCount()) {
          this.insertRow(rowIndex);
        }
      }
    };
    VirtualList2.prototype.insertRow = function(rowIndex) {
      var _this = this;
      var value = this.model.getRow(rowIndex);
      var eDiv = document.createElement("div");
      eDiv.classList.add("ag-virtual-list-item", "ag-".concat(this.cssIdentifier, "-virtual-list-item"));
      setAriaRole(eDiv, this.ariaRole === "tree" ? "treeitem" : "option");
      setAriaSetSize(eDiv, this.model.getRowCount());
      setAriaPosInSet(eDiv, rowIndex + 1);
      eDiv.setAttribute("tabindex", "-1");
      eDiv.style.height = "".concat(this.rowHeight, "px");
      eDiv.style.top = "".concat(this.rowHeight * rowIndex, "px");
      var rowComponent = this.componentCreator(value, eDiv);
      rowComponent.addGuiEventListener("focusin", function() {
        return _this.lastFocusedRowIndex = rowIndex;
      });
      eDiv.appendChild(rowComponent.getGui());
      if (this.renderedRows.has(rowIndex - 1)) {
        this.renderedRows.get(rowIndex - 1).eDiv.insertAdjacentElement("afterend", eDiv);
      } else if (this.renderedRows.has(rowIndex + 1)) {
        this.renderedRows.get(rowIndex + 1).eDiv.insertAdjacentElement("beforebegin", eDiv);
      } else {
        this.eContainer.appendChild(eDiv);
      }
      this.renderedRows.set(rowIndex, { rowComponent, eDiv, value });
    };
    VirtualList2.prototype.removeRow = function(rowIndex) {
      var component = this.renderedRows.get(rowIndex);
      this.eContainer.removeChild(component.eDiv);
      this.destroyBean(component.rowComponent);
      this.renderedRows.delete(rowIndex);
    };
    VirtualList2.prototype.refreshRows = function() {
      var _this = this;
      var rowCount = this.model.getRowCount();
      this.renderedRows.forEach(function(row, rowIndex) {
        var _a, _b;
        if (rowIndex >= rowCount) {
          _this.removeRow(rowIndex);
        } else {
          var newValue = _this.model.getRow(rowIndex);
          if ((_b = (_a = _this.model).areRowsEqual) === null || _b === void 0 ? void 0 : _b.call(_a, row.value, newValue)) {
            _this.componentUpdater(newValue, row.rowComponent);
          } else {
            _this.removeRow(rowIndex);
          }
        }
      });
    };
    VirtualList2.prototype.addScrollListener = function() {
      var _this = this;
      this.addGuiEventListener("scroll", function() {
        return _this.drawVirtualRows();
      }, { passive: true });
    };
    VirtualList2.prototype.setModel = function(model) {
      this.model = model;
    };
    VirtualList2.prototype.getAriaElement = function() {
      return this.eContainer;
    };
    VirtualList2.prototype.destroy = function() {
      if (!this.isAlive()) {
        return;
      }
      this.clearVirtualRows();
      _super.prototype.destroy.call(this);
    };
    __decorate$17([
      Autowired("resizeObserverService")
    ], VirtualList2.prototype, "resizeObserverService", void 0);
    __decorate$17([
      Autowired("animationFrameService")
    ], VirtualList2.prototype, "animationFrameService", void 0);
    __decorate$17([
      RefSelector("eContainer")
    ], VirtualList2.prototype, "eContainer", void 0);
    __decorate$17([
      PostConstruct
    ], VirtualList2.prototype, "postConstruct", null);
    return VirtualList2;
  }(TabGuardComp)
);
var __extends$15 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$8 = function() {
  __assign$8 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$8.apply(this, arguments);
};
var __decorate$16 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TEMPLATE = (
  /* html */
  '\n    <div class="ag-picker-field" role="presentation">\n        <div ref="eLabel"></div>\n            <div ref="eWrapper" class="ag-wrapper ag-picker-field-wrapper ag-rich-select-value ag-picker-collapsed">\n            <div ref="eDisplayField" class="ag-picker-field-display"></div>\n            <ag-input-text-field ref="eInput" class="ag-rich-select-field-input"></ag-input-text-field>\n            <div ref="eIcon" class="ag-picker-field-icon" aria-hidden="true"></div>\n        </div>\n    </div>'
);
var AgRichSelect = (
  /** @class */
  function(_super) {
    __extends$15(AgRichSelect2, _super);
    function AgRichSelect2(config) {
      var _this = this;
      var _a, _b;
      _this = _super.call(this, __assign$8(__assign$8({ pickerAriaLabelKey: "ariaLabelRichSelectField", pickerAriaLabelValue: "Rich Select Field", pickerType: "ag-list", className: "ag-rich-select", pickerIcon: "smallDown", ariaRole: "combobox", template: (_a = config === null || config === void 0 ? void 0 : config.template) !== null && _a !== void 0 ? _a : TEMPLATE, modalPicker: false }, config), {
        // maxPickerHeight needs to be set after expanding `config`
        maxPickerHeight: (_b = config === null || config === void 0 ? void 0 : config.maxPickerHeight) !== null && _b !== void 0 ? _b : "calc(var(--ag-row-height) * 6.5)"
      })) || this;
      _this.searchString = "";
      _this.highlightedItem = -1;
      _this.lastRowHovered = -1;
      _this.searchStringCreator = null;
      var _c = config || {}, cellRowHeight = _c.cellRowHeight, value = _c.value, valueList = _c.valueList, searchStringCreator = _c.searchStringCreator;
      if (cellRowHeight != null) {
        _this.cellRowHeight = cellRowHeight;
      }
      if (value !== void 0) {
        _this.value = value;
      }
      if (valueList != null) {
        _this.values = valueList;
      }
      if (searchStringCreator) {
        _this.searchStringCreator = searchStringCreator;
      }
      return _this;
    }
    AgRichSelect2.prototype.postConstruct = function() {
      var _this = this;
      _super.prototype.postConstruct.call(this);
      this.createLoadingElement();
      this.createListComponent();
      var _a = this.config, allowTyping = _a.allowTyping, placeholder = _a.placeholder;
      if (allowTyping) {
        this.eInput.setAutoComplete(false).setInputPlaceholder(placeholder);
        this.eDisplayField.classList.add("ag-hidden");
      } else {
        this.eInput.setDisplayed(false);
      }
      this.eWrapper.tabIndex = this.gridOptionsService.get("tabIndex");
      var _b = this.config.searchDebounceDelay, searchDebounceDelay = _b === void 0 ? 300 : _b;
      this.clearSearchString = debounce(this.clearSearchString, searchDebounceDelay);
      this.renderSelectedValue();
      if (allowTyping) {
        this.eInput.onValueChange(function(value) {
          return _this.searchTextFromString(value);
        });
        this.addManagedListener(this.eWrapper, "focus", this.onWrapperFocus.bind(this));
      }
      this.addManagedListener(this.eWrapper, "focusout", this.onWrapperFocusOut.bind(this));
    };
    AgRichSelect2.prototype.createLoadingElement = function() {
      var eDocument = this.gridOptionsService.getDocument();
      var translate = this.localeService.getLocaleTextFunc();
      var el = eDocument.createElement("div");
      el.classList.add("ag-loading-text");
      el.innerText = translate("loadingOoo", "Loading...");
      this.eLoading = el;
    };
    AgRichSelect2.prototype.createListComponent = function() {
      var _this = this;
      this.listComponent = this.createBean(new VirtualList({ cssIdentifier: "rich-select" }));
      this.listComponent.setComponentCreator(this.createRowComponent.bind(this));
      var componentUpdater = function(item, component) {
      };
      this.listComponent.setComponentUpdater(componentUpdater);
      this.listComponent.setParentComponent(this);
      this.addManagedListener(this.listComponent, Events.EVENT_FIELD_PICKER_VALUE_SELECTED, function(e) {
        _this.onListValueSelected(e.value, e.fromEnterKey);
      });
      var cellRowHeight = this.cellRowHeight;
      if (cellRowHeight) {
        this.listComponent.setRowHeight(cellRowHeight);
      }
      var eListGui = this.listComponent.getGui();
      var eListAriaEl = this.listComponent.getAriaElement();
      this.addManagedListener(eListGui, "mousemove", this.onPickerMouseMove.bind(this));
      this.addManagedListener(eListGui, "mousedown", function(e) {
        return e.preventDefault();
      });
      eListGui.classList.add("ag-rich-select-list");
      var listId = "ag-rich-select-list-".concat(this.listComponent.getCompId());
      eListAriaEl.setAttribute("id", listId);
      var translate = this.localeService.getLocaleTextFunc();
      var ariaLabel = translate(this.config.pickerAriaLabelKey, this.config.pickerAriaLabelValue);
      setAriaLabel(eListAriaEl, ariaLabel);
      setAriaControls(this.eWrapper, eListAriaEl);
    };
    AgRichSelect2.prototype.renderSelectedValue = function() {
      var _this = this;
      var _a = this, value = _a.value, eDisplayField = _a.eDisplayField, config = _a.config;
      var _b = this.config, allowTyping = _b.allowTyping, initialInputValue = _b.initialInputValue;
      var valueFormatted = this.config.valueFormatter ? this.config.valueFormatter(value) : value;
      if (allowTyping) {
        this.eInput.setValue(initialInputValue !== null && initialInputValue !== void 0 ? initialInputValue : valueFormatted);
        return;
      }
      var userCompDetails;
      if (config.cellRenderer) {
        userCompDetails = this.userComponentFactory.getCellRendererDetails(this.config, {
          value,
          valueFormatted
        });
      }
      var userCompDetailsPromise;
      if (userCompDetails) {
        userCompDetailsPromise = userCompDetails.newAgStackInstance();
      }
      if (userCompDetailsPromise) {
        clearElement(eDisplayField);
        bindCellRendererToHtmlElement(userCompDetailsPromise, eDisplayField);
        userCompDetailsPromise.then(function(renderer) {
          _this.addDestroyFunc(function() {
            return _this.getContext().destroyBean(renderer);
          });
        });
      } else {
        if (exists(this.value)) {
          eDisplayField.innerText = valueFormatted;
          eDisplayField.classList.remove("ag-display-as-placeholder");
        } else {
          var placeholder = config.placeholder;
          if (exists(placeholder)) {
            eDisplayField.innerHTML = "".concat(escapeString(placeholder));
            eDisplayField.classList.add("ag-display-as-placeholder");
          } else {
            clearElement(eDisplayField);
          }
        }
      }
    };
    AgRichSelect2.prototype.getCurrentValueIndex = function() {
      var _a = this, currentList = _a.currentList, value = _a.value;
      if (value == null || !currentList) {
        return -1;
      }
      for (var i = 0; i < currentList.length; i++) {
        if (currentList[i] === value) {
          return i;
        }
      }
      return -1;
    };
    AgRichSelect2.prototype.highlightFilterMatch = function() {
      var _this = this;
      var _a;
      (_a = this.listComponent) === null || _a === void 0 ? void 0 : _a.forEachRenderedRow(function(cmp, idx) {
        cmp.highlightString(_this.searchString);
      });
    };
    AgRichSelect2.prototype.highlightSelectedValue = function(index) {
      var _this = this;
      var _a;
      if (index == null) {
        index = this.getCurrentValueIndex();
      }
      this.highlightedItem = index;
      (_a = this.listComponent) === null || _a === void 0 ? void 0 : _a.forEachRenderedRow(function(cmp, idx) {
        var highlighted = index === -1 ? false : _this.highlightedItem === idx;
        cmp.updateHighlighted(highlighted);
      });
    };
    AgRichSelect2.prototype.setRowHeight = function(height) {
      if (height !== this.cellRowHeight) {
        this.cellRowHeight = height;
      }
      if (this.listComponent) {
        this.listComponent.setRowHeight(height);
      }
    };
    AgRichSelect2.prototype.createPickerComponent = function() {
      var values2 = this.values;
      if (values2) {
        this.setValueList({ valueList: values2 });
      }
      return this.listComponent;
    };
    AgRichSelect2.prototype.setSearchStringCreator = function(searchStringFn) {
      this.searchStringCreator = searchStringFn;
    };
    AgRichSelect2.prototype.setValueList = function(params) {
      var valueList = params.valueList, refresh = params.refresh;
      if (!this.listComponent) {
        return;
      }
      if (this.currentList === valueList) {
        return;
      }
      this.currentList = valueList;
      this.listComponent.setModel({
        getRowCount: function() {
          return valueList.length;
        },
        getRow: function(index) {
          return valueList[index];
        },
        areRowsEqual: function(oldRow, newRow) {
          return oldRow === newRow;
        }
      });
      if (refresh) {
        if (!this.values) {
          this.values = valueList;
          if (this.isPickerDisplayed) {
            this.showCurrentValueInPicker();
          }
        } else {
          this.listComponent.refresh(true);
        }
      }
    };
    AgRichSelect2.prototype.showPicker = function() {
      _super.prototype.showPicker.call(this);
      this.showCurrentValueInPicker();
      this.displayOrHidePicker();
    };
    AgRichSelect2.prototype.showCurrentValueInPicker = function() {
      var _a, _b;
      if (!this.listComponent) {
        return;
      }
      if (!this.currentList) {
        if (this.isPickerDisplayed && this.eLoading) {
          this.listComponent.appendChild(this.eLoading);
        }
        return;
      }
      if ((_a = this.eLoading) === null || _a === void 0 ? void 0 : _a.offsetParent) {
        (_b = this.eLoading.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(this.eLoading);
      }
      var currentValueIndex = this.getCurrentValueIndex();
      if (currentValueIndex !== -1) {
        this.listComponent.refresh();
        this.listComponent.ensureIndexVisible(currentValueIndex);
        this.listComponent.refresh(true);
        this.highlightSelectedValue(currentValueIndex);
      } else {
        this.listComponent.refresh();
      }
    };
    AgRichSelect2.prototype.beforeHidePicker = function() {
      this.highlightedItem = -1;
      _super.prototype.beforeHidePicker.call(this);
    };
    AgRichSelect2.prototype.onWrapperFocus = function() {
      if (!this.eInput) {
        return;
      }
      var focusableEl = this.eInput.getFocusableElement();
      focusableEl.focus();
      focusableEl.select();
    };
    AgRichSelect2.prototype.onWrapperFocusOut = function(e) {
      if (!this.eWrapper.contains(e.relatedTarget)) {
        this.hidePicker();
      }
    };
    AgRichSelect2.prototype.buildSearchStringFromKeyboardEvent = function(searchKey) {
      var key = searchKey.key;
      if (key === KeyCode.BACKSPACE) {
        this.searchString = this.searchString.slice(0, -1);
        key = "";
      } else if (!isEventFromPrintableCharacter(searchKey)) {
        return;
      }
      searchKey.preventDefault();
      this.searchTextFromCharacter(key);
    };
    AgRichSelect2.prototype.searchTextFromCharacter = function(char) {
      this.searchString += char;
      this.runSearch();
      this.clearSearchString();
    };
    AgRichSelect2.prototype.searchTextFromString = function(str) {
      if (str == null) {
        str = "";
      }
      this.searchString = str;
      this.runSearch();
    };
    AgRichSelect2.prototype.buildSearchStrings = function(values2) {
      var _a = this.config.valueFormatter, valueFormatter = _a === void 0 ? function(value) {
        return value;
      } : _a;
      var searchStrings;
      if (typeof values2[0] === "number" || typeof values2[0] === "string") {
        searchStrings = values2.map(function(v) {
          return valueFormatter(v);
        });
      } else if (typeof values2[0] === "object" && this.searchStringCreator) {
        searchStrings = this.searchStringCreator(values2);
      }
      return searchStrings;
    };
    AgRichSelect2.prototype.getSuggestionsAndFilteredValues = function(searchValue, valueList) {
      var _this = this;
      var suggestions = [];
      var filteredValues = [];
      if (!searchValue.length) {
        return { suggestions, filteredValues };
      }
      var _a = this.config, _b = _a.searchType, searchType = _b === void 0 ? "fuzzy" : _b, filterList = _a.filterList;
      if (searchType === "fuzzy") {
        var fuzzySearchResult = fuzzySuggestions(this.searchString, valueList, true);
        suggestions = fuzzySearchResult.values;
        var indices = fuzzySearchResult.indices;
        if (filterList && indices.length) {
          for (var i = 0; i < indices.length; i++) {
            filteredValues.push(this.values[indices[i]]);
          }
        }
      } else {
        suggestions = valueList.filter(function(val, idx) {
          var currentValue = val.toLocaleLowerCase();
          var valueToMatch = _this.searchString.toLocaleLowerCase();
          var isMatch = searchType === "match" ? currentValue.startsWith(valueToMatch) : currentValue.indexOf(valueToMatch) !== -1;
          if (filterList && isMatch) {
            filteredValues.push(_this.values[idx]);
          }
          return isMatch;
        });
      }
      return { suggestions, filteredValues };
    };
    AgRichSelect2.prototype.filterListModel = function(filteredValues) {
      var filterList = this.config.filterList;
      if (!filterList) {
        return;
      }
      this.setValueList({ valueList: filteredValues, refresh: true });
      this.alignPickerToComponent();
    };
    AgRichSelect2.prototype.runSearch = function() {
      var _a, _b;
      var values2 = this.values;
      var searchStrings = this.buildSearchStrings(values2);
      if (!searchStrings) {
        this.highlightSelectedValue(-1);
        return;
      }
      var _c = this.getSuggestionsAndFilteredValues(this.searchString, searchStrings), suggestions = _c.suggestions, filteredValues = _c.filteredValues;
      var _d = this.config, filterList = _d.filterList, highlightMatch = _d.highlightMatch, _e = _d.searchType, searchType = _e === void 0 ? "fuzzy" : _e;
      var filterValueLen = filteredValues.length;
      var shouldFilter = !!(filterList && this.searchString !== "");
      this.filterListModel(shouldFilter ? filteredValues : values2);
      if (suggestions.length) {
        var topSuggestionIndex = shouldFilter ? 0 : searchStrings.indexOf(suggestions[0]);
        this.selectListItem(topSuggestionIndex);
      } else {
        this.highlightSelectedValue(-1);
        if (!shouldFilter || filterValueLen) {
          (_a = this.listComponent) === null || _a === void 0 ? void 0 : _a.ensureIndexVisible(0);
        } else if (shouldFilter) {
          this.getAriaElement().removeAttribute("data-active-option");
          var eListAriaEl = (_b = this.listComponent) === null || _b === void 0 ? void 0 : _b.getAriaElement();
          if (eListAriaEl) {
            setAriaActiveDescendant(eListAriaEl, null);
          }
        }
      }
      if (highlightMatch && searchType !== "fuzzy") {
        this.highlightFilterMatch();
      }
      this.displayOrHidePicker();
    };
    AgRichSelect2.prototype.displayOrHidePicker = function() {
      var _a;
      var eListGui = (_a = this.listComponent) === null || _a === void 0 ? void 0 : _a.getGui();
      var toggleValue = this.currentList ? this.currentList.length === 0 : false;
      eListGui === null || eListGui === void 0 ? void 0 : eListGui.classList.toggle("ag-hidden", toggleValue);
    };
    AgRichSelect2.prototype.clearSearchString = function() {
      this.searchString = "";
    };
    AgRichSelect2.prototype.selectListItem = function(index, preventUnnecessaryScroll) {
      if (!this.isPickerDisplayed || !this.currentList || !this.listComponent || index < 0 || index >= this.currentList.length) {
        return;
      }
      var wasScrolled = this.listComponent.ensureIndexVisible(index, !preventUnnecessaryScroll);
      if (wasScrolled && !preventUnnecessaryScroll) {
        this.listComponent.refresh(true);
      }
      this.highlightSelectedValue(index);
    };
    AgRichSelect2.prototype.setValue = function(value, silent, fromPicker) {
      var index = this.currentList ? this.currentList.indexOf(value) : -1;
      if (index === -1) {
        return this;
      }
      this.value = value;
      if (!fromPicker) {
        this.selectListItem(index);
      }
      this.renderSelectedValue();
      return _super.prototype.setValue.call(this, value, silent);
    };
    AgRichSelect2.prototype.createRowComponent = function(value) {
      var row = new RichSelectRow(this.config, this.eWrapper);
      row.setParentComponent(this.listComponent);
      this.getContext().createBean(row);
      row.setState(value);
      var _a = this.config, highlightMatch = _a.highlightMatch, _b = _a.searchType, searchType = _b === void 0 ? "fuzzy" : _b;
      if (highlightMatch && searchType !== "fuzzy") {
        row.highlightString(this.searchString);
      }
      return row;
    };
    AgRichSelect2.prototype.getRowForMouseEvent = function(e) {
      var listComponent = this.listComponent;
      if (!listComponent) {
        return -1;
      }
      var eGui = listComponent === null || listComponent === void 0 ? void 0 : listComponent.getGui();
      var rect = eGui.getBoundingClientRect();
      var scrollTop = listComponent.getScrollTop();
      var mouseY = e.clientY - rect.top + scrollTop;
      return Math.floor(mouseY / listComponent.getRowHeight());
    };
    AgRichSelect2.prototype.onPickerMouseMove = function(e) {
      if (!this.listComponent) {
        return;
      }
      var row = this.getRowForMouseEvent(e);
      if (row !== -1 && row != this.lastRowHovered) {
        this.lastRowHovered = row;
        this.selectListItem(row, true);
      }
    };
    AgRichSelect2.prototype.onNavigationKeyDown = function(event, key) {
      event.preventDefault();
      var isDown = key === KeyCode.DOWN;
      if (!this.isPickerDisplayed && isDown) {
        this.showPicker();
        return;
      }
      var oldIndex = this.highlightedItem;
      var diff = isDown ? 1 : -1;
      var newIndex = oldIndex === -1 ? 0 : oldIndex + diff;
      this.selectListItem(newIndex);
    };
    AgRichSelect2.prototype.onEnterKeyDown = function(e) {
      if (!this.isPickerDisplayed) {
        return;
      }
      e.preventDefault();
      if (this.currentList) {
        this.onListValueSelected(this.currentList[this.highlightedItem], true);
      }
    };
    AgRichSelect2.prototype.onTabKeyDown = function() {
      if (!this.isPickerDisplayed || !this.currentList) {
        return;
      }
      this.setValue(this.currentList[this.highlightedItem], false, true);
    };
    AgRichSelect2.prototype.onListValueSelected = function(value, fromEnterKey) {
      this.setValue(value, false, true);
      this.dispatchPickerEvent(value, fromEnterKey);
      this.hidePicker();
    };
    AgRichSelect2.prototype.dispatchPickerEvent = function(value, fromEnterKey) {
      var event = {
        type: Events.EVENT_FIELD_PICKER_VALUE_SELECTED,
        fromEnterKey,
        value
      };
      this.dispatchEvent(event);
    };
    AgRichSelect2.prototype.getFocusableElement = function() {
      var allowTyping = this.config.allowTyping;
      if (allowTyping) {
        return this.eInput.getFocusableElement();
      }
      return _super.prototype.getFocusableElement.call(this);
    };
    AgRichSelect2.prototype.onKeyDown = function(event) {
      var key = event.key;
      var allowTyping = this.config.allowTyping;
      switch (key) {
        case KeyCode.LEFT:
        case KeyCode.RIGHT:
        case KeyCode.PAGE_HOME:
        case KeyCode.PAGE_END:
          if (!allowTyping) {
            event.preventDefault();
          }
          break;
        case KeyCode.PAGE_UP:
        case KeyCode.PAGE_DOWN:
          event.preventDefault();
          break;
        case KeyCode.DOWN:
        case KeyCode.UP:
          this.onNavigationKeyDown(event, key);
          break;
        case KeyCode.ESCAPE:
          if (this.isPickerDisplayed) {
            if (isVisible(this.listComponent.getGui())) {
              event.preventDefault();
              stopPropagationForAgGrid(event);
            }
            this.hidePicker();
          }
          break;
        case KeyCode.ENTER:
          this.onEnterKeyDown(event);
          break;
        case KeyCode.TAB:
          this.onTabKeyDown();
          break;
        default:
          if (!allowTyping) {
            this.buildSearchStringFromKeyboardEvent(event);
          }
      }
    };
    AgRichSelect2.prototype.destroy = function() {
      if (this.listComponent) {
        this.destroyBean(this.listComponent);
        this.listComponent = void 0;
      }
      this.eLoading = void 0;
      _super.prototype.destroy.call(this);
    };
    __decorate$16([
      Autowired("userComponentFactory")
    ], AgRichSelect2.prototype, "userComponentFactory", void 0);
    __decorate$16([
      RefSelector("eInput")
    ], AgRichSelect2.prototype, "eInput", void 0);
    return AgRichSelect2;
  }(AgPickerField)
);
var __extends$14 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$15 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgSlider = (
  /** @class */
  function(_super) {
    __extends$14(AgSlider2, _super);
    function AgSlider2(config) {
      var _this = _super.call(this, config, AgSlider2.TEMPLATE) || this;
      _this.labelAlignment = "top";
      return _this;
    }
    AgSlider2.prototype.init = function() {
      this.eSlider.addCssClass("ag-slider-field");
    };
    AgSlider2.prototype.onValueChange = function(callbackFn) {
      var _this = this;
      var eventChanged = Events.EVENT_FIELD_VALUE_CHANGED;
      this.addManagedListener(this.eText, eventChanged, function() {
        var textValue = parseFloat(_this.eText.getValue());
        _this.eSlider.setValue(textValue.toString(), true);
        callbackFn(textValue || 0);
      });
      this.addManagedListener(this.eSlider, eventChanged, function() {
        var sliderValue = _this.eSlider.getValue();
        _this.eText.setValue(sliderValue, true);
        callbackFn(parseFloat(sliderValue));
      });
      return this;
    };
    AgSlider2.prototype.setSliderWidth = function(width) {
      this.eSlider.setWidth(width);
      return this;
    };
    AgSlider2.prototype.setTextFieldWidth = function(width) {
      this.eText.setWidth(width);
      return this;
    };
    AgSlider2.prototype.setMinValue = function(minValue) {
      this.eSlider.setMinValue(minValue);
      this.eText.setMin(minValue);
      return this;
    };
    AgSlider2.prototype.setMaxValue = function(maxValue) {
      this.eSlider.setMaxValue(maxValue);
      this.eText.setMax(maxValue);
      return this;
    };
    AgSlider2.prototype.getValue = function() {
      return this.eText.getValue();
    };
    AgSlider2.prototype.setValue = function(value) {
      if (this.getValue() === value) {
        return this;
      }
      this.eText.setValue(value, true);
      this.eSlider.setValue(value, true);
      this.dispatchEvent({ type: Events.EVENT_FIELD_VALUE_CHANGED });
      return this;
    };
    AgSlider2.prototype.setStep = function(step) {
      this.eSlider.setStep(step);
      this.eText.setStep(step);
      return this;
    };
    AgSlider2.TEMPLATE = '<div class="ag-slider">\n            <label ref="eLabel"></label>\n            <div class="ag-wrapper ag-slider-wrapper">\n                <ag-input-range ref="eSlider"></ag-input-range>\n                <ag-input-number-field ref="eText"></ag-input-number-field>\n            </div>\n        </div>';
    __decorate$15([
      RefSelector("eLabel")
    ], AgSlider2.prototype, "eLabel", void 0);
    __decorate$15([
      RefSelector("eSlider")
    ], AgSlider2.prototype, "eSlider", void 0);
    __decorate$15([
      RefSelector("eText")
    ], AgSlider2.prototype, "eText", void 0);
    __decorate$15([
      PostConstruct
    ], AgSlider2.prototype, "init", null);
    return AgSlider2;
  }(AgAbstractLabel)
);
var __extends$13 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$14 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgGroupComponent = (
  /** @class */
  function(_super) {
    __extends$13(AgGroupComponent2, _super);
    function AgGroupComponent2(params) {
      if (params === void 0) {
        params = {};
      }
      var _this = _super.call(this, AgGroupComponent2.getTemplate(params)) || this;
      _this.suppressEnabledCheckbox = true;
      _this.suppressOpenCloseIcons = false;
      var title = params.title, enabled = params.enabled, items = params.items, suppressEnabledCheckbox = params.suppressEnabledCheckbox, suppressOpenCloseIcons = params.suppressOpenCloseIcons;
      _this.title = title;
      _this.cssIdentifier = params.cssIdentifier || "default";
      _this.enabled = enabled != null ? enabled : true;
      _this.items = items || [];
      _this.alignItems = params.alignItems || "center";
      if (suppressEnabledCheckbox != null) {
        _this.suppressEnabledCheckbox = suppressEnabledCheckbox;
      }
      if (suppressOpenCloseIcons != null) {
        _this.suppressOpenCloseIcons = suppressOpenCloseIcons;
      }
      return _this;
    }
    AgGroupComponent2.getTemplate = function(params) {
      var cssIdentifier = params.cssIdentifier || "default";
      var direction = params.direction || "vertical";
      return (
        /* html */
        '<div class="ag-group ag-'.concat(cssIdentifier, '-group" role="presentation">\n            <div class="ag-group-title-bar ag-').concat(cssIdentifier, '-group-title-bar ag-unselectable" ref="eTitleBar" role="button">\n                <span class="ag-group-title-bar-icon ag-').concat(cssIdentifier, '-group-title-bar-icon" ref="eGroupOpenedIcon" role="presentation"></span>\n                <span class="ag-group-title-bar-icon ag-').concat(cssIdentifier, '-group-title-bar-icon" ref="eGroupClosedIcon" role="presentation"></span>\n                <span ref="eTitle" class="ag-group-title ag-').concat(cssIdentifier, '-group-title"></span>\n            </div>\n            <div ref="eToolbar" class="ag-group-toolbar ag-').concat(cssIdentifier, '-group-toolbar">\n                <ag-checkbox ref="cbGroupEnabled"></ag-checkbox>\n            </div>\n            <div ref="eContainer" class="ag-group-container ag-group-container-').concat(direction, " ag-").concat(cssIdentifier, '-group-container"></div>\n        </div>')
      );
    };
    AgGroupComponent2.prototype.postConstruct = function() {
      if (this.items.length) {
        var initialItems = this.items;
        this.items = [];
        this.addItems(initialItems);
      }
      var localeTextFunc = this.localeService.getLocaleTextFunc();
      this.cbGroupEnabled.setLabel(localeTextFunc("enabled", "Enabled"));
      if (this.title) {
        this.setTitle(this.title);
      }
      if (this.enabled) {
        this.setEnabled(this.enabled);
      }
      this.setAlignItems(this.alignItems);
      this.hideEnabledCheckbox(this.suppressEnabledCheckbox);
      this.hideOpenCloseIcons(this.suppressOpenCloseIcons);
      this.setupExpandContract();
      this.refreshAriaStatus();
      this.refreshChildDisplay();
    };
    AgGroupComponent2.prototype.setupExpandContract = function() {
      var _this = this;
      this.eGroupClosedIcon.appendChild(createIcon("columnSelectClosed", this.gridOptionsService, null));
      this.eGroupOpenedIcon.appendChild(createIcon("columnSelectOpen", this.gridOptionsService, null));
      this.addManagedListener(this.eTitleBar, "click", function() {
        return _this.toggleGroupExpand();
      });
      this.addManagedListener(this.eTitleBar, "keydown", function(e) {
        switch (e.key) {
          case KeyCode.ENTER:
          case KeyCode.SPACE:
            e.preventDefault();
            _this.toggleGroupExpand();
            break;
          case KeyCode.RIGHT:
          case KeyCode.LEFT:
            e.preventDefault();
            _this.toggleGroupExpand(e.key === KeyCode.RIGHT);
            break;
        }
      });
    };
    AgGroupComponent2.prototype.refreshAriaStatus = function() {
      if (!this.suppressOpenCloseIcons) {
        setAriaExpanded(this.eTitleBar, this.expanded);
      }
    };
    AgGroupComponent2.prototype.refreshChildDisplay = function() {
      var showIcon = !this.suppressOpenCloseIcons;
      setDisplayed(this.eToolbar, this.expanded && !this.suppressEnabledCheckbox);
      setDisplayed(this.eGroupOpenedIcon, showIcon && this.expanded);
      setDisplayed(this.eGroupClosedIcon, showIcon && !this.expanded);
    };
    AgGroupComponent2.prototype.isExpanded = function() {
      return this.expanded;
    };
    AgGroupComponent2.prototype.setAlignItems = function(alignment) {
      if (this.alignItems !== alignment) {
        this.removeCssClass("ag-group-item-alignment-".concat(this.alignItems));
      }
      this.alignItems = alignment;
      var newCls = "ag-group-item-alignment-".concat(this.alignItems);
      this.addCssClass(newCls);
      return this;
    };
    AgGroupComponent2.prototype.toggleGroupExpand = function(expanded) {
      if (this.suppressOpenCloseIcons) {
        this.expanded = true;
        this.refreshChildDisplay();
        setDisplayed(this.eContainer, true);
        return this;
      }
      expanded = expanded != null ? expanded : !this.expanded;
      if (this.expanded === expanded) {
        return this;
      }
      this.expanded = expanded;
      this.refreshAriaStatus();
      this.refreshChildDisplay();
      setDisplayed(this.eContainer, expanded);
      this.dispatchEvent({ type: this.expanded ? AgGroupComponent2.EVENT_EXPANDED : AgGroupComponent2.EVENT_COLLAPSED });
      return this;
    };
    AgGroupComponent2.prototype.addItems = function(items) {
      var _this = this;
      items.forEach(function(item) {
        return _this.addItem(item);
      });
    };
    AgGroupComponent2.prototype.addItem = function(item) {
      var container = this.eContainer;
      var el = item instanceof Component2 ? item.getGui() : item;
      el.classList.add("ag-group-item", "ag-".concat(this.cssIdentifier, "-group-item"));
      container.appendChild(el);
      this.items.push(el);
    };
    AgGroupComponent2.prototype.hideItem = function(hide, index) {
      var itemToHide = this.items[index];
      setDisplayed(itemToHide, !hide);
    };
    AgGroupComponent2.prototype.setTitle = function(title) {
      this.eTitle.innerText = title;
      return this;
    };
    AgGroupComponent2.prototype.addCssClassToTitleBar = function(cssClass) {
      this.eTitleBar.classList.add(cssClass);
    };
    AgGroupComponent2.prototype.setEnabled = function(enabled, skipToggle) {
      this.enabled = enabled;
      this.refreshDisabledStyles();
      this.toggleGroupExpand(enabled);
      if (!skipToggle) {
        this.cbGroupEnabled.setValue(enabled);
      }
      return this;
    };
    AgGroupComponent2.prototype.isEnabled = function() {
      return this.enabled;
    };
    AgGroupComponent2.prototype.onEnableChange = function(callbackFn) {
      var _this = this;
      this.cbGroupEnabled.onValueChange(function(newSelection) {
        _this.setEnabled(newSelection, true);
        callbackFn(newSelection);
      });
      return this;
    };
    AgGroupComponent2.prototype.hideEnabledCheckbox = function(hide) {
      this.suppressEnabledCheckbox = hide;
      this.refreshChildDisplay();
      this.refreshDisabledStyles();
      return this;
    };
    AgGroupComponent2.prototype.hideOpenCloseIcons = function(hide) {
      this.suppressOpenCloseIcons = hide;
      if (hide) {
        this.toggleGroupExpand(true);
      }
      return this;
    };
    AgGroupComponent2.prototype.refreshDisabledStyles = function() {
      this.addOrRemoveCssClass("ag-disabled", !this.enabled);
      if (this.suppressEnabledCheckbox && !this.enabled) {
        this.eTitleBar.classList.add("ag-disabled-group-title-bar");
        this.eTitleBar.removeAttribute("tabindex");
      } else {
        this.eTitleBar.classList.remove("ag-disabled-group-title-bar");
        this.eTitleBar.setAttribute("tabindex", "0");
      }
      this.eContainer.classList.toggle("ag-disabled-group-container", !this.enabled);
    };
    AgGroupComponent2.EVENT_EXPANDED = "expanded";
    AgGroupComponent2.EVENT_COLLAPSED = "collapsed";
    __decorate$14([
      RefSelector("eTitleBar")
    ], AgGroupComponent2.prototype, "eTitleBar", void 0);
    __decorate$14([
      RefSelector("eGroupOpenedIcon")
    ], AgGroupComponent2.prototype, "eGroupOpenedIcon", void 0);
    __decorate$14([
      RefSelector("eGroupClosedIcon")
    ], AgGroupComponent2.prototype, "eGroupClosedIcon", void 0);
    __decorate$14([
      RefSelector("eToolbar")
    ], AgGroupComponent2.prototype, "eToolbar", void 0);
    __decorate$14([
      RefSelector("cbGroupEnabled")
    ], AgGroupComponent2.prototype, "cbGroupEnabled", void 0);
    __decorate$14([
      RefSelector("eTitle")
    ], AgGroupComponent2.prototype, "eTitle", void 0);
    __decorate$14([
      RefSelector("eContainer")
    ], AgGroupComponent2.prototype, "eContainer", void 0);
    __decorate$14([
      PostConstruct
    ], AgGroupComponent2.prototype, "postConstruct", null);
    return AgGroupComponent2;
  }(Component2)
);
var __extends$12 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$7 = function() {
  __assign$7 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$7.apply(this, arguments);
};
var __decorate$13 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgMenuList = (
  /** @class */
  function(_super) {
    __extends$12(AgMenuList2, _super);
    function AgMenuList2(level) {
      if (level === void 0) {
        level = 1;
      }
      var _this = _super.call(
        this,
        /* html */
        '<div class="ag-menu-list" role="tree"></div>'
      ) || this;
      _this.level = level;
      _this.menuItems = [];
      return _this;
    }
    AgMenuList2.prototype.postConstruct = function() {
      var _this = this;
      this.initialiseTabGuard({
        onTabKeyDown: function(e) {
          return _this.onTabKeyDown(e);
        },
        handleKeyDown: function(e) {
          return _this.handleKeyDown(e);
        }
      });
    };
    AgMenuList2.prototype.onTabKeyDown = function(e) {
      var parent = this.getParentComponent();
      var parentGui = parent && parent.getGui();
      var isManaged = parentGui && parentGui.classList.contains("ag-focus-managed");
      if (!isManaged) {
        e.preventDefault();
      }
      if (e.shiftKey) {
        this.closeIfIsChild(e);
      }
    };
    AgMenuList2.prototype.handleKeyDown = function(e) {
      switch (e.key) {
        case KeyCode.UP:
        case KeyCode.RIGHT:
        case KeyCode.DOWN:
        case KeyCode.LEFT:
          e.preventDefault();
          this.handleNavKey(e.key);
          break;
        case KeyCode.ESCAPE:
          var topMenu = this.findTopMenu();
          if (topMenu) {
            this.focusService.focusInto(topMenu.getGui());
          }
          break;
      }
    };
    AgMenuList2.prototype.clearActiveItem = function() {
      if (this.activeMenuItem) {
        this.activeMenuItem.deactivate();
        this.activeMenuItem = null;
      }
    };
    AgMenuList2.prototype.addMenuItems = function(menuItems) {
      var _this = this;
      if (menuItems == null) {
        return;
      }
      menuItems.forEach(function(menuItemOrString) {
        if (menuItemOrString === "separator") {
          _this.addSeparator();
        } else if (typeof menuItemOrString === "string") {
          console.warn("AG Grid: unrecognised menu item ".concat(menuItemOrString));
        } else {
          _this.addItem(menuItemOrString);
        }
      });
    };
    AgMenuList2.prototype.addItem = function(menuItemDef) {
      var _this = this;
      var menuItem = this.createManagedBean(new AgMenuItemComponent(__assign$7(__assign$7({}, menuItemDef), { isAnotherSubMenuOpen: function() {
        return _this.menuItems.some(function(m) {
          return m.isSubMenuOpen();
        });
      } })));
      menuItem.setParentComponent(this);
      setAriaLevel(menuItem.getGui(), this.level);
      this.menuItems.push(menuItem);
      this.appendChild(menuItem.getGui());
      this.addManagedListener(menuItem, AgMenuItemComponent.EVENT_MENU_ITEM_SELECTED, function(event) {
        _this.dispatchEvent(event);
      });
      this.addManagedListener(menuItem, AgMenuItemComponent.EVENT_MENU_ITEM_ACTIVATED, function(event) {
        if (_this.activeMenuItem && _this.activeMenuItem !== event.menuItem) {
          _this.activeMenuItem.deactivate();
        }
        _this.activeMenuItem = event.menuItem;
      });
    };
    AgMenuList2.prototype.activateFirstItem = function() {
      var item = this.menuItems.filter(function(currentItem) {
        return !currentItem.isDisabled();
      })[0];
      if (!item) {
        return;
      }
      item.activate();
    };
    AgMenuList2.prototype.addSeparator = function() {
      var separatorHtml = (
        /* html */
        '\n            <div class="ag-menu-separator" aria-hidden="true">\n                <div class="ag-menu-separator-part"></div>\n                <div class="ag-menu-separator-part"></div>\n                <div class="ag-menu-separator-part"></div>\n                <div class="ag-menu-separator-part"></div>\n            </div>'
      );
      this.appendChild(loadTemplate(separatorHtml));
    };
    AgMenuList2.prototype.findTopMenu = function() {
      var parent = this.getParentComponent();
      if (!parent && this instanceof AgMenuList2) {
        return this;
      }
      while (true) {
        var nextParent = parent && parent.getParentComponent && parent.getParentComponent();
        if (!nextParent || !(nextParent instanceof AgMenuList2 || nextParent instanceof AgMenuItemComponent)) {
          break;
        }
        parent = nextParent;
      }
      return parent instanceof AgMenuList2 ? parent : void 0;
    };
    AgMenuList2.prototype.handleNavKey = function(key) {
      switch (key) {
        case KeyCode.UP:
        case KeyCode.DOWN:
          var nextItem = this.findNextItem(key === KeyCode.UP);
          if (nextItem && nextItem !== this.activeMenuItem) {
            nextItem.activate();
          }
          return;
      }
      var left = this.gridOptionsService.get("enableRtl") ? KeyCode.RIGHT : KeyCode.LEFT;
      if (key === left) {
        this.closeIfIsChild();
      } else {
        this.openChild();
      }
    };
    AgMenuList2.prototype.closeIfIsChild = function(e) {
      var parentItem = this.getParentComponent();
      if (parentItem && parentItem instanceof AgMenuItemComponent) {
        if (e) {
          e.preventDefault();
        }
        parentItem.closeSubMenu();
        parentItem.getGui().focus();
      }
    };
    AgMenuList2.prototype.openChild = function() {
      if (this.activeMenuItem) {
        this.activeMenuItem.openSubMenu(true);
      }
    };
    AgMenuList2.prototype.findNextItem = function(up) {
      var items = this.menuItems.filter(function(item2) {
        return !item2.isDisabled();
      });
      if (!items.length) {
        return;
      }
      if (!this.activeMenuItem) {
        return up ? last(items) : items[0];
      }
      if (up) {
        items.reverse();
      }
      var nextItem;
      var foundCurrent = false;
      for (var i = 0; i < items.length; i++) {
        var item = items[i];
        if (!foundCurrent) {
          if (item === this.activeMenuItem) {
            foundCurrent = true;
          }
          continue;
        }
        nextItem = item;
        break;
      }
      return nextItem || this.activeMenuItem;
    };
    AgMenuList2.prototype.destroy = function() {
      this.clearActiveItem();
      _super.prototype.destroy.call(this);
    };
    __decorate$13([
      Autowired("focusService")
    ], AgMenuList2.prototype, "focusService", void 0);
    __decorate$13([
      PostConstruct
    ], AgMenuList2.prototype, "postConstruct", null);
    return AgMenuList2;
  }(TabGuardComp)
);
var __extends$11 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$12 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgMenuPanel = (
  /** @class */
  function(_super) {
    __extends$11(AgMenuPanel2, _super);
    function AgMenuPanel2(wrappedComponent) {
      var _this = _super.call(this) || this;
      _this.wrappedComponent = wrappedComponent;
      _this.setTemplateFromElement(wrappedComponent.getGui());
      return _this;
    }
    AgMenuPanel2.prototype.postConstruct = function() {
      var _this = this;
      this.initialiseTabGuard({
        onTabKeyDown: function(e) {
          return _this.onTabKeyDown(e);
        },
        handleKeyDown: function(e) {
          return _this.handleKeyDown(e);
        }
      });
    };
    AgMenuPanel2.prototype.handleKeyDown = function(e) {
      if (e.key === KeyCode.ESCAPE) {
        this.closePanel();
      }
    };
    AgMenuPanel2.prototype.onTabKeyDown = function(e) {
      if (e.defaultPrevented) {
        return;
      }
      this.closePanel();
      e.preventDefault();
    };
    AgMenuPanel2.prototype.closePanel = function() {
      var menuItem = this.parentComponent;
      menuItem.closeSubMenu();
      setTimeout(function() {
        return menuItem.getGui().focus();
      }, 0);
    };
    __decorate$12([
      PostConstruct
    ], AgMenuPanel2.prototype, "postConstruct", null);
    return AgMenuPanel2;
  }(TabGuardComp)
);
var __extends$10 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$11 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgMenuItemComponent = (
  /** @class */
  function(_super) {
    __extends$10(AgMenuItemComponent2, _super);
    function AgMenuItemComponent2(params) {
      var _this = _super.call(this) || this;
      _this.params = params;
      _this.isActive = false;
      _this.subMenuIsOpen = false;
      _this.setTemplate(
        /* html */
        '<div class="'.concat(_this.getClassName(), '" tabindex="-1" role="treeitem"></div>')
      );
      return _this;
    }
    AgMenuItemComponent2.prototype.init = function() {
      var _this = this;
      this.addIcon();
      this.addName();
      this.addShortcut();
      this.addSubMenu();
      this.addTooltip();
      var eGui = this.getGui();
      if (this.params.disabled) {
        this.addCssClass(this.getClassName("disabled"));
        setAriaDisabled(eGui, true);
      } else {
        this.addGuiEventListener("click", function(e) {
          return _this.onItemSelected(e);
        });
        this.addGuiEventListener("keydown", function(e) {
          if (e.key === KeyCode.ENTER || e.key === KeyCode.SPACE) {
            e.preventDefault();
            _this.onItemSelected(e);
          }
        });
        this.addGuiEventListener("mousedown", function(e) {
          e.stopPropagation();
          e.preventDefault();
        });
        this.addGuiEventListener("mouseenter", function() {
          return _this.onMouseEnter();
        });
        this.addGuiEventListener("mouseleave", function() {
          return _this.onMouseLeave();
        });
      }
      if (this.params.cssClasses) {
        this.params.cssClasses.forEach(function(it) {
          return _this.addCssClass(it);
        });
      }
    };
    AgMenuItemComponent2.prototype.isDisabled = function() {
      return !!this.params.disabled;
    };
    AgMenuItemComponent2.prototype.openSubMenu = function(activateFirstItem) {
      var _this = this;
      if (activateFirstItem === void 0) {
        activateFirstItem = false;
      }
      this.closeSubMenu();
      if (!this.params.subMenu) {
        return;
      }
      var ePopup = loadTemplate(
        /* html */
        '<div class="ag-menu" role="presentation"></div>'
      );
      var destroySubMenu;
      if (this.params.subMenu instanceof Array) {
        var currentLevel = getAriaLevel(this.getGui());
        var nextLevel = isNaN(currentLevel) ? 1 : currentLevel + 1;
        var childMenu_1 = this.createBean(new AgMenuList(nextLevel));
        childMenu_1.setParentComponent(this);
        childMenu_1.addMenuItems(this.params.subMenu);
        ePopup.appendChild(childMenu_1.getGui());
        this.addManagedListener(childMenu_1, AgMenuItemComponent2.EVENT_MENU_ITEM_SELECTED, function(e) {
          return _this.dispatchEvent(e);
        });
        childMenu_1.addGuiEventListener("mouseenter", function() {
          return _this.cancelDeactivate();
        });
        destroySubMenu = function() {
          return _this.destroyBean(childMenu_1);
        };
        if (activateFirstItem) {
          setTimeout(function() {
            return childMenu_1.activateFirstItem();
          }, 0);
        }
      } else {
        var subMenu_1 = this.params.subMenu;
        var menuPanel = this.createBean(new AgMenuPanel(subMenu_1));
        menuPanel.setParentComponent(this);
        var subMenuGui_1 = menuPanel.getGui();
        var mouseEvent_1 = "mouseenter";
        var mouseEnterListener_1 = function() {
          return _this.cancelDeactivate();
        };
        subMenuGui_1.addEventListener(mouseEvent_1, mouseEnterListener_1);
        destroySubMenu = function() {
          return subMenuGui_1.removeEventListener(mouseEvent_1, mouseEnterListener_1);
        };
        ePopup.appendChild(subMenuGui_1);
        if (subMenu_1.afterGuiAttached) {
          setTimeout(function() {
            return subMenu_1.afterGuiAttached();
          }, 0);
        }
      }
      var eGui = this.getGui();
      var positionCallback = this.popupService.positionPopupForMenu.bind(this.popupService, { eventSource: eGui, ePopup });
      var translate = this.localeService.getLocaleTextFunc();
      var addPopupRes = this.popupService.addPopup({
        modal: true,
        eChild: ePopup,
        positionCallback,
        anchorToElement: eGui,
        ariaLabel: translate("ariaLabelSubMenu", "SubMenu")
      });
      this.subMenuIsOpen = true;
      setAriaExpanded(eGui, true);
      this.hideSubMenu = function() {
        if (addPopupRes) {
          addPopupRes.hideFunc();
        }
        _this.subMenuIsOpen = false;
        setAriaExpanded(eGui, false);
        destroySubMenu();
      };
    };
    AgMenuItemComponent2.prototype.closeSubMenu = function() {
      if (!this.hideSubMenu) {
        return;
      }
      this.hideSubMenu();
      this.hideSubMenu = null;
      setAriaExpanded(this.getGui(), false);
    };
    AgMenuItemComponent2.prototype.isSubMenuOpen = function() {
      return this.subMenuIsOpen;
    };
    AgMenuItemComponent2.prototype.activate = function(openSubMenu) {
      var _this = this;
      this.cancelActivate();
      if (this.params.disabled) {
        return;
      }
      this.isActive = true;
      this.addCssClass(this.getClassName("active"));
      this.getGui().focus();
      if (openSubMenu && this.params.subMenu) {
        window.setTimeout(function() {
          if (_this.isAlive() && _this.isActive) {
            _this.openSubMenu();
          }
        }, 300);
      }
      this.onItemActivated();
    };
    AgMenuItemComponent2.prototype.deactivate = function() {
      this.cancelDeactivate();
      this.removeCssClass(this.getClassName("active"));
      this.isActive = false;
      if (this.subMenuIsOpen) {
        this.hideSubMenu();
      }
    };
    AgMenuItemComponent2.prototype.addIcon = function() {
      if (!this.params.checked && !this.params.icon && this.params.isCompact) {
        return;
      }
      var icon = loadTemplate(
        /* html */
        '<span ref="eIcon" class="'.concat(this.getClassName("part"), " ").concat(this.getClassName("icon"), '" role="presentation"></span>')
      );
      if (this.params.checked) {
        icon.appendChild(createIconNoSpan("check", this.gridOptionsService));
      } else if (this.params.icon) {
        if (isNodeOrElement(this.params.icon)) {
          icon.appendChild(this.params.icon);
        } else if (typeof this.params.icon === "string") {
          icon.innerHTML = this.params.icon;
        } else {
          console.warn("AG Grid: menu item icon must be DOM node or string");
        }
      }
      this.getGui().appendChild(icon);
    };
    AgMenuItemComponent2.prototype.addName = function() {
      if (!this.params.name && this.params.isCompact) {
        return;
      }
      var name = loadTemplate(
        /* html */
        '<span ref="eName" class="'.concat(this.getClassName("part"), " ").concat(this.getClassName("text"), '">').concat(this.params.name || "", "</span>")
      );
      this.getGui().appendChild(name);
    };
    AgMenuItemComponent2.prototype.addTooltip = function() {
      if (!this.params.tooltip) {
        return;
      }
      this.tooltip = this.params.tooltip;
      if (this.gridOptionsService.get("enableBrowserTooltips")) {
        this.getGui().setAttribute("title", this.tooltip);
      } else {
        this.createManagedBean(new CustomTooltipFeature(this));
      }
    };
    AgMenuItemComponent2.prototype.getTooltipParams = function() {
      return {
        location: "menu",
        value: this.tooltip
      };
    };
    AgMenuItemComponent2.prototype.addShortcut = function() {
      if (!this.params.shortcut && this.params.isCompact) {
        return;
      }
      var shortcut = loadTemplate(
        /* html */
        '<span ref="eShortcut" class="'.concat(this.getClassName("part"), " ").concat(this.getClassName("shortcut"), '">').concat(this.params.shortcut || "", "</span>")
      );
      this.getGui().appendChild(shortcut);
    };
    AgMenuItemComponent2.prototype.addSubMenu = function() {
      if (!this.params.subMenu && this.params.isCompact) {
        return;
      }
      var pointer = loadTemplate(
        /* html */
        '<span ref="ePopupPointer" class="'.concat(this.getClassName("part"), " ").concat(this.getClassName("popup-pointer"), '"></span>')
      );
      var eGui = this.getGui();
      if (this.params.subMenu) {
        var iconName = this.gridOptionsService.get("enableRtl") ? "smallLeft" : "smallRight";
        setAriaExpanded(eGui, false);
        pointer.appendChild(createIconNoSpan(iconName, this.gridOptionsService));
      }
      eGui.appendChild(pointer);
    };
    AgMenuItemComponent2.prototype.onItemSelected = function(event) {
      if (this.params.action) {
        this.params.action();
      } else {
        this.openSubMenu(event && event.type === "keydown");
      }
      if (this.params.subMenu && !this.params.action) {
        return;
      }
      var e = {
        type: AgMenuItemComponent2.EVENT_MENU_ITEM_SELECTED,
        action: this.params.action,
        checked: this.params.checked,
        cssClasses: this.params.cssClasses,
        disabled: this.params.disabled,
        icon: this.params.icon,
        name: this.params.name,
        shortcut: this.params.shortcut,
        subMenu: this.params.subMenu,
        tooltip: this.params.tooltip,
        event
      };
      this.dispatchEvent(e);
    };
    AgMenuItemComponent2.prototype.onItemActivated = function() {
      var event = {
        type: AgMenuItemComponent2.EVENT_MENU_ITEM_ACTIVATED,
        menuItem: this
      };
      this.dispatchEvent(event);
    };
    AgMenuItemComponent2.prototype.cancelActivate = function() {
      if (this.activateTimeoutId) {
        window.clearTimeout(this.activateTimeoutId);
        this.activateTimeoutId = 0;
      }
    };
    AgMenuItemComponent2.prototype.cancelDeactivate = function() {
      if (this.deactivateTimeoutId) {
        window.clearTimeout(this.deactivateTimeoutId);
        this.deactivateTimeoutId = 0;
      }
    };
    AgMenuItemComponent2.prototype.onMouseEnter = function() {
      var _this = this;
      this.cancelDeactivate();
      if (this.params.isAnotherSubMenuOpen()) {
        this.activateTimeoutId = window.setTimeout(function() {
          return _this.activate(true);
        }, AgMenuItemComponent2.ACTIVATION_DELAY);
      } else {
        this.activate(true);
      }
    };
    AgMenuItemComponent2.prototype.onMouseLeave = function() {
      var _this = this;
      this.cancelActivate();
      if (this.isSubMenuOpen()) {
        this.deactivateTimeoutId = window.setTimeout(function() {
          return _this.deactivate();
        }, AgMenuItemComponent2.ACTIVATION_DELAY);
      } else {
        this.deactivate();
      }
    };
    AgMenuItemComponent2.prototype.getClassName = function(suffix) {
      var prefix = this.params.isCompact ? "ag-compact-menu-option" : "ag-menu-option";
      return suffix ? "".concat(prefix, "-").concat(suffix) : prefix;
    };
    AgMenuItemComponent2.EVENT_MENU_ITEM_SELECTED = "menuItemSelected";
    AgMenuItemComponent2.EVENT_MENU_ITEM_ACTIVATED = "menuItemActivated";
    AgMenuItemComponent2.ACTIVATION_DELAY = 80;
    __decorate$11([
      Autowired("popupService")
    ], AgMenuItemComponent2.prototype, "popupService", void 0);
    __decorate$11([
      PostConstruct
    ], AgMenuItemComponent2.prototype, "init", null);
    return AgMenuItemComponent2;
  }(Component2)
);
var __extends$$ = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$10 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgPanel = (
  /** @class */
  function(_super) {
    __extends$$(AgPanel2, _super);
    function AgPanel2(config) {
      var _this = _super.call(this, AgPanel2.getTemplate(config)) || this;
      _this.closable = true;
      _this.config = config;
      return _this;
    }
    AgPanel2.getTemplate = function(config) {
      var cssIdentifier = config && config.cssIdentifier || "default";
      return (
        /* html */
        '<div class="ag-panel ag-'.concat(cssIdentifier, '-panel" tabindex="-1">\n            <div ref="eTitleBar" class="ag-panel-title-bar ag-').concat(cssIdentifier, '-panel-title-bar ag-unselectable">\n                <span ref="eTitle" class="ag-panel-title-bar-title ag-').concat(cssIdentifier, '-panel-title-bar-title"></span>\n                <div ref="eTitleBarButtons" class="ag-panel-title-bar-buttons ag-').concat(cssIdentifier, '-panel-title-bar-buttons"></div>\n            </div>\n            <div ref="eContentWrapper" class="ag-panel-content-wrapper ag-').concat(cssIdentifier, '-panel-content-wrapper"></div>\n        </div>')
      );
    };
    AgPanel2.prototype.postConstruct = function() {
      var _this = this;
      var _a = this.config, component = _a.component, closable = _a.closable, hideTitleBar = _a.hideTitleBar, title = _a.title, _b = _a.minWidth, minWidth = _b === void 0 ? 250 : _b, width = _a.width, _c = _a.minHeight, minHeight = _c === void 0 ? 250 : _c, height = _a.height, centered = _a.centered, popup = _a.popup, x = _a.x, y = _a.y;
      this.positionableFeature = new PositionableFeature(this.getGui(), {
        minWidth,
        width,
        minHeight,
        height,
        centered,
        x,
        y,
        popup,
        calculateTopBuffer: function() {
          return _this.positionableFeature.getHeight() - _this.getBodyHeight();
        }
      });
      this.createManagedBean(this.positionableFeature);
      var eGui = this.getGui();
      if (component) {
        this.setBodyComponent(component);
      }
      if (!hideTitleBar) {
        if (title) {
          this.setTitle(title);
        }
        this.setClosable(closable != null ? closable : this.closable);
      } else {
        setDisplayed(this.eTitleBar, false);
      }
      this.addManagedListener(this.eTitleBar, "mousedown", function(e) {
        var eDocument = _this.gridOptionsService.getDocument();
        if (eGui.contains(e.relatedTarget) || eGui.contains(eDocument.activeElement) || _this.eTitleBarButtons.contains(e.target)) {
          e.preventDefault();
          return;
        }
        var focusEl = _this.eContentWrapper.querySelector("button, [href], input, select, textarea, [tabindex]");
        if (focusEl) {
          focusEl.focus();
        }
      });
      if (popup && this.positionableFeature.isPositioned()) {
        return;
      }
      if (this.renderComponent) {
        this.renderComponent();
      }
      this.positionableFeature.initialisePosition();
      this.eContentWrapper.style.height = "0";
    };
    AgPanel2.prototype.renderComponent = function() {
      var _this = this;
      var eGui = this.getGui();
      eGui.focus();
      this.close = function() {
        eGui.parentElement.removeChild(eGui);
        _this.destroy();
      };
    };
    AgPanel2.prototype.getHeight = function() {
      return this.positionableFeature.getHeight();
    };
    AgPanel2.prototype.setHeight = function(height) {
      this.positionableFeature.setHeight(height);
    };
    AgPanel2.prototype.getWidth = function() {
      return this.positionableFeature.getWidth();
    };
    AgPanel2.prototype.setWidth = function(width) {
      this.positionableFeature.setWidth(width);
    };
    AgPanel2.prototype.setClosable = function(closable) {
      if (closable !== this.closable) {
        this.closable = closable;
      }
      if (closable) {
        var closeButtonComp = this.closeButtonComp = new Component2(AgPanel2.CLOSE_BTN_TEMPLATE);
        this.getContext().createBean(closeButtonComp);
        var eGui = closeButtonComp.getGui();
        var child = createIconNoSpan("close", this.gridOptionsService);
        child.classList.add("ag-panel-title-bar-button-icon");
        eGui.appendChild(child);
        this.addTitleBarButton(closeButtonComp);
        closeButtonComp.addManagedListener(eGui, "click", this.onBtClose.bind(this));
      } else if (this.closeButtonComp) {
        var eGui = this.closeButtonComp.getGui();
        eGui.parentElement.removeChild(eGui);
        this.closeButtonComp = this.destroyBean(this.closeButtonComp);
      }
    };
    AgPanel2.prototype.setBodyComponent = function(bodyComponent) {
      bodyComponent.setParentComponent(this);
      this.eContentWrapper.appendChild(bodyComponent.getGui());
    };
    AgPanel2.prototype.addTitleBarButton = function(button, position) {
      var eTitleBarButtons = this.eTitleBarButtons;
      var buttons = eTitleBarButtons.children;
      var len = buttons.length;
      if (position == null) {
        position = len;
      }
      position = Math.max(0, Math.min(position, len));
      button.addCssClass("ag-panel-title-bar-button");
      var eGui = button.getGui();
      if (position === 0) {
        eTitleBarButtons.insertAdjacentElement("afterbegin", eGui);
      } else if (position === len) {
        eTitleBarButtons.insertAdjacentElement("beforeend", eGui);
      } else {
        buttons[position - 1].insertAdjacentElement("afterend", eGui);
      }
      button.setParentComponent(this);
    };
    AgPanel2.prototype.getBodyHeight = function() {
      return getInnerHeight(this.eContentWrapper);
    };
    AgPanel2.prototype.getBodyWidth = function() {
      return getInnerWidth(this.eContentWrapper);
    };
    AgPanel2.prototype.setTitle = function(title) {
      this.eTitle.innerText = title;
    };
    AgPanel2.prototype.onBtClose = function() {
      this.close();
    };
    AgPanel2.prototype.destroy = function() {
      if (this.closeButtonComp) {
        this.closeButtonComp = this.destroyBean(this.closeButtonComp);
      }
      var eGui = this.getGui();
      if (eGui && isVisible(eGui)) {
        this.close();
      }
      _super.prototype.destroy.call(this);
    };
    AgPanel2.CLOSE_BTN_TEMPLATE = '<div class="ag-button"></div>';
    __decorate$10([
      RefSelector("eContentWrapper")
    ], AgPanel2.prototype, "eContentWrapper", void 0);
    __decorate$10([
      RefSelector("eTitleBar")
    ], AgPanel2.prototype, "eTitleBar", void 0);
    __decorate$10([
      RefSelector("eTitleBarButtons")
    ], AgPanel2.prototype, "eTitleBarButtons", void 0);
    __decorate$10([
      RefSelector("eTitle")
    ], AgPanel2.prototype, "eTitle", void 0);
    __decorate$10([
      PostConstruct
    ], AgPanel2.prototype, "postConstruct", null);
    return AgPanel2;
  }(Component2)
);
var __extends$_ = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$6 = function() {
  __assign$6 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$6.apply(this, arguments);
};
var __decorate$$ = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgDialog = (
  /** @class */
  function(_super) {
    __extends$_(AgDialog2, _super);
    function AgDialog2(config) {
      var _this = _super.call(this, __assign$6(__assign$6({}, config), { popup: true })) || this;
      _this.isMaximizable = false;
      _this.isMaximized = false;
      _this.maximizeListeners = [];
      _this.resizeListenerDestroy = null;
      _this.lastPosition = {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      };
      return _this;
    }
    AgDialog2.prototype.postConstruct = function() {
      var _this = this;
      var eGui = this.getGui();
      var _a = this.config, movable = _a.movable, resizable = _a.resizable, maximizable = _a.maximizable;
      this.addCssClass("ag-dialog");
      _super.prototype.postConstruct.call(this);
      this.addManagedListener(eGui, "focusin", function(e) {
        if (eGui.contains(e.relatedTarget)) {
          return;
        }
        _this.popupService.bringPopupToFront(eGui);
      });
      if (movable) {
        this.setMovable(movable);
      }
      if (maximizable) {
        this.setMaximizable(maximizable);
      }
      if (resizable) {
        this.setResizable(resizable);
      }
    };
    AgDialog2.prototype.renderComponent = function() {
      var eGui = this.getGui();
      var _a = this.config, alwaysOnTop = _a.alwaysOnTop, modal = _a.modal, title = _a.title, afterGuiAttached = _a.afterGuiAttached;
      var translate = this.localeService.getLocaleTextFunc();
      var addPopupRes = this.popupService.addPopup({
        modal,
        eChild: eGui,
        closeOnEsc: true,
        closedCallback: this.destroy.bind(this),
        alwaysOnTop,
        ariaLabel: title || translate("ariaLabelDialog", "Dialog"),
        afterGuiAttached
      });
      if (addPopupRes) {
        this.close = addPopupRes.hideFunc;
      }
    };
    AgDialog2.prototype.toggleMaximize = function() {
      var position = this.positionableFeature.getPosition();
      if (this.isMaximized) {
        var _a = this.lastPosition, x = _a.x, y = _a.y, width = _a.width, height = _a.height;
        this.setWidth(width);
        this.setHeight(height);
        this.positionableFeature.offsetElement(x, y);
      } else {
        this.lastPosition.width = this.getWidth();
        this.lastPosition.height = this.getHeight();
        this.lastPosition.x = position.x;
        this.lastPosition.y = position.y;
        this.positionableFeature.offsetElement(0, 0);
        this.setHeight("100%");
        this.setWidth("100%");
      }
      this.isMaximized = !this.isMaximized;
      this.refreshMaximizeIcon();
    };
    AgDialog2.prototype.refreshMaximizeIcon = function() {
      setDisplayed(this.maximizeIcon, !this.isMaximized);
      setDisplayed(this.minimizeIcon, this.isMaximized);
    };
    AgDialog2.prototype.clearMaximizebleListeners = function() {
      if (this.maximizeListeners.length) {
        this.maximizeListeners.forEach(function(destroyListener) {
          return destroyListener();
        });
        this.maximizeListeners.length = 0;
      }
      if (this.resizeListenerDestroy) {
        this.resizeListenerDestroy();
        this.resizeListenerDestroy = null;
      }
    };
    AgDialog2.prototype.destroy = function() {
      this.maximizeButtonComp = this.destroyBean(this.maximizeButtonComp);
      this.clearMaximizebleListeners();
      _super.prototype.destroy.call(this);
    };
    AgDialog2.prototype.setResizable = function(resizable) {
      this.positionableFeature.setResizable(resizable);
    };
    AgDialog2.prototype.setMovable = function(movable) {
      this.positionableFeature.setMovable(movable, this.eTitleBar);
    };
    AgDialog2.prototype.setMaximizable = function(maximizable) {
      var _this = this;
      if (!maximizable) {
        this.clearMaximizebleListeners();
        if (this.maximizeButtonComp) {
          this.destroyBean(this.maximizeButtonComp);
          this.maximizeButtonComp = this.maximizeIcon = this.minimizeIcon = void 0;
        }
        return;
      }
      var eTitleBar = this.eTitleBar;
      if (!eTitleBar || maximizable === this.isMaximizable) {
        return;
      }
      var maximizeButtonComp = this.buildMaximizeAndMinimizeElements();
      this.refreshMaximizeIcon();
      maximizeButtonComp.addManagedListener(maximizeButtonComp.getGui(), "click", this.toggleMaximize.bind(this));
      this.addTitleBarButton(maximizeButtonComp, 0);
      this.maximizeListeners.push(this.addManagedListener(eTitleBar, "dblclick", this.toggleMaximize.bind(this)));
      this.resizeListenerDestroy = this.addManagedListener(this, "resize", function() {
        _this.isMaximized = false;
        _this.refreshMaximizeIcon();
      });
    };
    AgDialog2.prototype.buildMaximizeAndMinimizeElements = function() {
      var maximizeButtonComp = this.maximizeButtonComp = this.createBean(new Component2(
        /* html */
        '<div class="ag-dialog-button"></span>'
      ));
      var eGui = maximizeButtonComp.getGui();
      this.maximizeIcon = createIconNoSpan("maximize", this.gridOptionsService);
      eGui.appendChild(this.maximizeIcon);
      this.maximizeIcon.classList.add("ag-panel-title-bar-button-icon");
      this.minimizeIcon = createIconNoSpan("minimize", this.gridOptionsService);
      eGui.appendChild(this.minimizeIcon);
      this.minimizeIcon.classList.add("ag-panel-title-bar-button-icon");
      return maximizeButtonComp;
    };
    __decorate$$([
      Autowired("popupService")
    ], AgDialog2.prototype, "popupService", void 0);
    return AgDialog2;
  }(AgPanel)
);
var __extends$Z = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$5 = function() {
  __assign$5 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$5.apply(this, arguments);
};
var __decorate$_ = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __read$f = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$d = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var __values$2 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var DIRECTION;
(function(DIRECTION2) {
  DIRECTION2[DIRECTION2["vertical"] = 0] = "vertical";
  DIRECTION2[DIRECTION2["horizontal"] = 1] = "horizontal";
})(DIRECTION || (DIRECTION = {}));
var instanceIdSeq = 0;
var PopupService = (
  /** @class */
  function(_super) {
    __extends$Z(PopupService2, _super);
    function PopupService2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.popupList = [];
      return _this;
    }
    PopupService_1 = PopupService2;
    PopupService2.prototype.postConstruct = function() {
      var _this = this;
      this.ctrlsService.whenReady(function(p) {
        _this.gridCtrl = p.gridCtrl;
      });
      this.addManagedListener(this.eventService, Events.EVENT_GRID_STYLES_CHANGED, this.handleThemeChange.bind(this));
    };
    PopupService2.prototype.getPopupParent = function() {
      var ePopupParent = this.gridOptionsService.get("popupParent");
      if (ePopupParent) {
        return ePopupParent;
      }
      return this.gridCtrl.getGui();
    };
    PopupService2.prototype.positionPopupForMenu = function(params) {
      var eventSource = params.eventSource, ePopup = params.ePopup;
      var popupIdx = this.getPopupIndex(ePopup);
      if (popupIdx !== -1) {
        var popup = this.popupList[popupIdx];
        popup.alignedToElement = eventSource;
      }
      var sourceRect = eventSource.getBoundingClientRect();
      var parentRect = this.getParentRect();
      var y = this.keepXYWithinBounds(ePopup, sourceRect.top - parentRect.top, DIRECTION.vertical);
      var minWidth = ePopup.clientWidth > 0 ? ePopup.clientWidth : 200;
      ePopup.style.minWidth = "".concat(minWidth, "px");
      var widthOfParent = parentRect.right - parentRect.left;
      var maxX = widthOfParent - minWidth;
      var x;
      if (this.gridOptionsService.get("enableRtl")) {
        x = xLeftPosition();
        if (x < 0) {
          x = xRightPosition();
          this.setAlignedStyles(ePopup, "left");
        }
        if (x > maxX) {
          x = 0;
          this.setAlignedStyles(ePopup, "right");
        }
      } else {
        x = xRightPosition();
        if (x > maxX) {
          x = xLeftPosition();
          this.setAlignedStyles(ePopup, "right");
        }
        if (x < 0) {
          x = 0;
          this.setAlignedStyles(ePopup, "left");
        }
      }
      ePopup.style.left = "".concat(x, "px");
      ePopup.style.top = "".concat(y, "px");
      function xRightPosition() {
        return sourceRect.right - parentRect.left - 2;
      }
      function xLeftPosition() {
        return sourceRect.left - parentRect.left - minWidth;
      }
    };
    PopupService2.prototype.positionPopupUnderMouseEvent = function(params) {
      var _this = this;
      var ePopup = params.ePopup, nudgeX = params.nudgeX, nudgeY = params.nudgeY, skipObserver = params.skipObserver;
      this.positionPopup({
        ePopup,
        nudgeX,
        nudgeY,
        keepWithinBounds: true,
        skipObserver,
        updatePosition: function() {
          return _this.calculatePointerAlign(params.mouseEvent);
        },
        postProcessCallback: function() {
          return _this.callPostProcessPopup(params.type, params.ePopup, null, params.mouseEvent, params.column, params.rowNode);
        }
      });
    };
    PopupService2.prototype.calculatePointerAlign = function(e) {
      var parentRect = this.getParentRect();
      return {
        x: e.clientX - parentRect.left,
        y: e.clientY - parentRect.top
      };
    };
    PopupService2.prototype.positionPopupByComponent = function(params) {
      var _this = this;
      var ePopup = params.ePopup, nudgeX = params.nudgeX, nudgeY = params.nudgeY, keepWithinBounds = params.keepWithinBounds, eventSource = params.eventSource, _a = params.alignSide, alignSide = _a === void 0 ? "left" : _a, _b = params.position, position = _b === void 0 ? "over" : _b, column = params.column, rowNode = params.rowNode, type = params.type;
      var sourceRect = eventSource.getBoundingClientRect();
      var parentRect = this.getParentRect();
      var popupIdx = this.getPopupIndex(ePopup);
      if (popupIdx !== -1) {
        var popup = this.popupList[popupIdx];
        popup.alignedToElement = eventSource;
      }
      var updatePosition = function() {
        var x = sourceRect.left - parentRect.left;
        if (alignSide === "right") {
          x -= ePopup.offsetWidth - sourceRect.width;
        }
        var y;
        if (position === "over") {
          y = sourceRect.top - parentRect.top;
          _this.setAlignedStyles(ePopup, "over");
        } else {
          _this.setAlignedStyles(ePopup, "under");
          var alignSide_1 = _this.shouldRenderUnderOrAbove(ePopup, sourceRect, parentRect, params.nudgeY || 0);
          if (alignSide_1 === "under") {
            y = sourceRect.top - parentRect.top + sourceRect.height;
          } else {
            y = sourceRect.top - ePopup.offsetHeight - (nudgeY || 0) * 2 - parentRect.top;
          }
        }
        return { x, y };
      };
      this.positionPopup({
        ePopup,
        nudgeX,
        nudgeY,
        keepWithinBounds,
        updatePosition,
        postProcessCallback: function() {
          return _this.callPostProcessPopup(type, ePopup, eventSource, null, column, rowNode);
        }
      });
    };
    PopupService2.prototype.shouldRenderUnderOrAbove = function(ePopup, targetCompRect, parentRect, nudgeY) {
      var spaceAvailableUnder = parentRect.bottom - targetCompRect.bottom;
      var spaceAvailableAbove = targetCompRect.top - parentRect.top;
      var spaceRequired = ePopup.offsetHeight + nudgeY;
      if (spaceAvailableUnder > spaceRequired) {
        return "under";
      }
      if (spaceAvailableAbove > spaceRequired || spaceAvailableAbove > spaceAvailableUnder) {
        return "above";
      }
      return "under";
    };
    PopupService2.prototype.setAlignedStyles = function(ePopup, positioned) {
      var popupIdx = this.getPopupIndex(ePopup);
      if (popupIdx === -1) {
        return;
      }
      var popup = this.popupList[popupIdx];
      var alignedToElement = popup.alignedToElement;
      if (!alignedToElement) {
        return;
      }
      var positions = ["right", "left", "over", "above", "under"];
      positions.forEach(function(position) {
        alignedToElement.classList.remove("ag-has-popup-positioned-".concat(position));
        ePopup.classList.remove("ag-popup-positioned-".concat(position));
      });
      if (!positioned) {
        return;
      }
      alignedToElement.classList.add("ag-has-popup-positioned-".concat(positioned));
      ePopup.classList.add("ag-popup-positioned-".concat(positioned));
    };
    PopupService2.prototype.callPostProcessPopup = function(type, ePopup, eventSource, mouseEvent, column, rowNode) {
      var callback = this.gridOptionsService.getCallback("postProcessPopup");
      if (callback) {
        var params = {
          column,
          rowNode,
          ePopup,
          type,
          eventSource,
          mouseEvent
        };
        callback(params);
      }
    };
    PopupService2.prototype.positionPopup = function(params) {
      var _this = this;
      var ePopup = params.ePopup, keepWithinBounds = params.keepWithinBounds, nudgeX = params.nudgeX, nudgeY = params.nudgeY, skipObserver = params.skipObserver, updatePosition = params.updatePosition;
      var lastSize = { width: 0, height: 0 };
      var updatePopupPosition = function(fromResizeObserver) {
        if (fromResizeObserver === void 0) {
          fromResizeObserver = false;
        }
        var _a = updatePosition(), x = _a.x, y = _a.y;
        if (fromResizeObserver && ePopup.clientWidth === lastSize.width && ePopup.clientHeight === lastSize.height) {
          return;
        }
        lastSize.width = ePopup.clientWidth;
        lastSize.height = ePopup.clientHeight;
        if (nudgeX) {
          x += nudgeX;
        }
        if (nudgeY) {
          y += nudgeY;
        }
        if (keepWithinBounds) {
          x = _this.keepXYWithinBounds(ePopup, x, DIRECTION.horizontal);
          y = _this.keepXYWithinBounds(ePopup, y, DIRECTION.vertical);
        }
        ePopup.style.left = "".concat(x, "px");
        ePopup.style.top = "".concat(y, "px");
        if (params.postProcessCallback) {
          params.postProcessCallback();
        }
      };
      updatePopupPosition();
      if (!skipObserver) {
        var resizeObserverDestroyFunc_1 = this.resizeObserverService.observeResize(ePopup, function() {
          return updatePopupPosition(true);
        });
        setTimeout(function() {
          return resizeObserverDestroyFunc_1();
        }, PopupService_1.WAIT_FOR_POPUP_CONTENT_RESIZE);
      }
    };
    PopupService2.prototype.getActivePopups = function() {
      return this.popupList.map(function(popup) {
        return popup.element;
      });
    };
    PopupService2.prototype.getPopupList = function() {
      return this.popupList;
    };
    PopupService2.prototype.getParentRect = function() {
      var eDocument = this.gridOptionsService.getDocument();
      var popupParent = this.getPopupParent();
      if (popupParent === eDocument.body) {
        popupParent = eDocument.documentElement;
      } else if (getComputedStyle(popupParent).position === "static") {
        popupParent = popupParent.offsetParent;
      }
      return getElementRectWithOffset(popupParent);
    };
    PopupService2.prototype.keepXYWithinBounds = function(ePopup, position, direction) {
      var isVertical = direction === DIRECTION.vertical;
      var sizeProperty = isVertical ? "clientHeight" : "clientWidth";
      var anchorProperty = isVertical ? "top" : "left";
      var offsetProperty = isVertical ? "offsetHeight" : "offsetWidth";
      var scrollPositionProperty = isVertical ? "scrollTop" : "scrollLeft";
      var eDocument = this.gridOptionsService.getDocument();
      var docElement = eDocument.documentElement;
      var popupParent = this.getPopupParent();
      var parentRect = popupParent.getBoundingClientRect();
      var documentRect = eDocument.documentElement.getBoundingClientRect();
      var isBody = popupParent === eDocument.body;
      var offsetSize = ePopup[offsetProperty];
      var getSize = isVertical ? getAbsoluteHeight : getAbsoluteWidth;
      var sizeOfParent = isBody ? getSize(docElement) + docElement[scrollPositionProperty] : popupParent[sizeProperty];
      if (isBody) {
        sizeOfParent -= Math.abs(documentRect[anchorProperty] - parentRect[anchorProperty]);
      }
      var max = sizeOfParent - offsetSize;
      return Math.min(Math.max(position, 0), Math.abs(max));
    };
    PopupService2.prototype.addPopup = function(params) {
      var eDocument = this.gridOptionsService.getDocument();
      var eChild = params.eChild, ariaLabel = params.ariaLabel, alwaysOnTop = params.alwaysOnTop, positionCallback = params.positionCallback, anchorToElement = params.anchorToElement;
      if (!eDocument) {
        console.warn("AG Grid: could not find the document, document is empty");
        return { hideFunc: function() {
        } };
      }
      var pos = this.getPopupIndex(eChild);
      if (pos !== -1) {
        var popup = this.popupList[pos];
        return { hideFunc: popup.hideFunc };
      }
      this.initialisePopupPosition(eChild);
      var wrapperEl = this.createPopupWrapper(eChild, ariaLabel, !!alwaysOnTop);
      var removeListeners = this.addEventListenersToPopup(__assign$5(__assign$5({}, params), { wrapperEl }));
      if (positionCallback) {
        positionCallback();
      }
      this.addPopupToPopupList(eChild, wrapperEl, removeListeners, anchorToElement);
      return {
        hideFunc: removeListeners
      };
    };
    PopupService2.prototype.initialisePopupPosition = function(element) {
      var ePopupParent = this.getPopupParent();
      var ePopupParentRect = ePopupParent.getBoundingClientRect();
      if (!exists(element.style.top)) {
        element.style.top = "".concat(ePopupParentRect.top * -1, "px");
      }
      if (!exists(element.style.left)) {
        element.style.left = "".concat(ePopupParentRect.left * -1, "px");
      }
    };
    PopupService2.prototype.createPopupWrapper = function(element, ariaLabel, alwaysOnTop) {
      var _a;
      var ePopupParent = this.getPopupParent();
      var eWrapper = document.createElement("div");
      var allThemes = this.environment.getTheme().allThemes;
      if (allThemes.length) {
        (_a = eWrapper.classList).add.apply(_a, __spreadArray$d([], __read$f(allThemes), false));
      }
      eWrapper.classList.add("ag-popup");
      element.classList.add(this.gridOptionsService.get("enableRtl") ? "ag-rtl" : "ag-ltr", "ag-popup-child");
      if (!element.hasAttribute("role")) {
        setAriaRole(element, "dialog");
      }
      setAriaLabel(element, ariaLabel);
      eWrapper.appendChild(element);
      ePopupParent.appendChild(eWrapper);
      if (alwaysOnTop) {
        this.setAlwaysOnTop(element, true);
      } else {
        this.bringPopupToFront(element);
      }
      return eWrapper;
    };
    PopupService2.prototype.handleThemeChange = function() {
      var e_1, _a, e_2, _b, _c;
      var allThemes = this.environment.getTheme().allThemes;
      try {
        for (var _d = __values$2(this.popupList), _e = _d.next(); !_e.done; _e = _d.next()) {
          var popup = _e.value;
          try {
            for (var _f = (e_2 = void 0, __values$2(Array.from(popup.wrapper.classList))), _g = _f.next(); !_g.done; _g = _f.next()) {
              var className = _g.value;
              if (className.startsWith("ag-theme-")) {
                popup.wrapper.classList.remove(className);
              }
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (_g && !_g.done && (_b = _f.return))
                _b.call(_f);
            } finally {
              if (e_2)
                throw e_2.error;
            }
          }
          if (allThemes.length) {
            (_c = popup.wrapper.classList).add.apply(_c, __spreadArray$d([], __read$f(allThemes), false));
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_e && !_e.done && (_a = _d.return))
            _a.call(_d);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    };
    PopupService2.prototype.addEventListenersToPopup = function(params) {
      var _this = this;
      var eDocument = this.gridOptionsService.getDocument();
      var ePopupParent = this.getPopupParent();
      var wrapperEl = params.wrapperEl, popupEl = params.eChild;
      params.click;
      var closedCallback = params.closedCallback, afterGuiAttached = params.afterGuiAttached, closeOnEsc = params.closeOnEsc, modal = params.modal;
      var popupHidden = false;
      var hidePopupOnKeyboardEvent = function(event) {
        if (!wrapperEl.contains(eDocument.activeElement)) {
          return;
        }
        var key = event.key;
        if (key === KeyCode.ESCAPE && !isStopPropagationForAgGrid(event)) {
          removeListeners({ keyboardEvent: event });
        }
      };
      var hidePopupOnMouseEvent = function(event) {
        return removeListeners({ mouseEvent: event });
      };
      var hidePopupOnTouchEvent = function(event) {
        return removeListeners({ touchEvent: event });
      };
      var removeListeners = function(popupParams) {
        if (popupParams === void 0) {
          popupParams = {};
        }
        var mouseEvent = popupParams.mouseEvent, touchEvent = popupParams.touchEvent, keyboardEvent = popupParams.keyboardEvent;
        if (
          // we don't hide popup if the event was on the child, or any
          // children of this child
          _this.isEventFromCurrentPopup({ mouseEvent, touchEvent }, popupEl) || // this method should only be called once. the client can have different
          // paths, each one wanting to close, so this method may be called multiple times.
          popupHidden
        ) {
          return;
        }
        popupHidden = true;
        ePopupParent.removeChild(wrapperEl);
        eDocument.removeEventListener("keydown", hidePopupOnKeyboardEvent);
        eDocument.removeEventListener("mousedown", hidePopupOnMouseEvent);
        eDocument.removeEventListener("touchstart", hidePopupOnTouchEvent);
        eDocument.removeEventListener("contextmenu", hidePopupOnMouseEvent);
        _this.eventService.removeEventListener(Events.EVENT_DRAG_STARTED, hidePopupOnMouseEvent);
        if (closedCallback) {
          closedCallback(mouseEvent || touchEvent || keyboardEvent);
        }
        _this.removePopupFromPopupList(popupEl);
      };
      if (afterGuiAttached) {
        afterGuiAttached({ hidePopup: removeListeners });
      }
      window.setTimeout(function() {
        if (closeOnEsc) {
          eDocument.addEventListener("keydown", hidePopupOnKeyboardEvent);
        }
        if (modal) {
          eDocument.addEventListener("mousedown", hidePopupOnMouseEvent);
          _this.eventService.addEventListener(Events.EVENT_DRAG_STARTED, hidePopupOnMouseEvent);
          eDocument.addEventListener("touchstart", hidePopupOnTouchEvent);
          eDocument.addEventListener("contextmenu", hidePopupOnMouseEvent);
        }
      }, 0);
      return removeListeners;
    };
    PopupService2.prototype.addPopupToPopupList = function(element, wrapperEl, removeListeners, anchorToElement) {
      this.popupList.push({
        element,
        wrapper: wrapperEl,
        hideFunc: removeListeners,
        instanceId: instanceIdSeq++,
        isAnchored: !!anchorToElement
      });
      if (anchorToElement) {
        this.setPopupPositionRelatedToElement(element, anchorToElement);
      }
    };
    PopupService2.prototype.getPopupIndex = function(el) {
      return this.popupList.findIndex(function(p) {
        return p.element === el;
      });
    };
    PopupService2.prototype.setPopupPositionRelatedToElement = function(popupEl, relativeElement) {
      var popupIndex = this.getPopupIndex(popupEl);
      if (popupIndex === -1) {
        return;
      }
      var popup = this.popupList[popupIndex];
      if (popup.stopAnchoringPromise) {
        popup.stopAnchoringPromise.then(function(destroyFunc) {
          return destroyFunc && destroyFunc();
        });
      }
      popup.stopAnchoringPromise = void 0;
      popup.isAnchored = false;
      if (!relativeElement) {
        return;
      }
      var destroyPositionTracker = this.keepPopupPositionedRelativeTo({
        element: relativeElement,
        ePopup: popupEl,
        hidePopup: popup.hideFunc
      });
      popup.stopAnchoringPromise = destroyPositionTracker;
      popup.isAnchored = true;
      return destroyPositionTracker;
    };
    PopupService2.prototype.removePopupFromPopupList = function(element) {
      this.setAlignedStyles(element, null);
      this.setPopupPositionRelatedToElement(element, null);
      this.popupList = this.popupList.filter(function(p) {
        return p.element !== element;
      });
    };
    PopupService2.prototype.keepPopupPositionedRelativeTo = function(params) {
      var _this = this;
      var eParent = this.getPopupParent();
      var parentRect = eParent.getBoundingClientRect();
      var element = params.element, ePopup = params.ePopup;
      var sourceRect = element.getBoundingClientRect();
      var initialDiffTop = parentRect.top - sourceRect.top;
      var initialDiffLeft = parentRect.left - sourceRect.left;
      var lastDiffTop = initialDiffTop;
      var lastDiffLeft = initialDiffLeft;
      var topPx = ePopup.style.top;
      var top = parseInt(topPx.substring(0, topPx.length - 1), 10);
      var leftPx = ePopup.style.left;
      var left = parseInt(leftPx.substring(0, leftPx.length - 1), 10);
      return new AgPromise(function(resolve) {
        _this.getFrameworkOverrides().setInterval(function() {
          var pRect = eParent.getBoundingClientRect();
          var sRect = element.getBoundingClientRect();
          var elementNotInDom = sRect.top == 0 && sRect.left == 0 && sRect.height == 0 && sRect.width == 0;
          if (elementNotInDom) {
            params.hidePopup();
            return;
          }
          var currentDiffTop = pRect.top - sRect.top;
          if (currentDiffTop != lastDiffTop) {
            var newTop = _this.keepXYWithinBounds(ePopup, top + initialDiffTop - currentDiffTop, DIRECTION.vertical);
            ePopup.style.top = "".concat(newTop, "px");
          }
          lastDiffTop = currentDiffTop;
          var currentDiffLeft = pRect.left - sRect.left;
          if (currentDiffLeft != lastDiffLeft) {
            var newLeft = _this.keepXYWithinBounds(ePopup, left + initialDiffLeft - currentDiffLeft, DIRECTION.horizontal);
            ePopup.style.left = "".concat(newLeft, "px");
          }
          lastDiffLeft = currentDiffLeft;
        }, 200).then(function(intervalId) {
          var result = function() {
            if (intervalId != null) {
              window.clearInterval(intervalId);
            }
          };
          resolve(result);
        });
      });
    };
    PopupService2.prototype.hasAnchoredPopup = function() {
      return this.popupList.some(function(popup) {
        return popup.isAnchored;
      });
    };
    PopupService2.prototype.isEventFromCurrentPopup = function(params, target) {
      var mouseEvent = params.mouseEvent, touchEvent = params.touchEvent;
      var event = mouseEvent ? mouseEvent : touchEvent;
      if (!event) {
        return false;
      }
      var indexOfThisChild = this.getPopupIndex(target);
      if (indexOfThisChild === -1) {
        return false;
      }
      for (var i = indexOfThisChild; i < this.popupList.length; i++) {
        var popup = this.popupList[i];
        if (isElementInEventPath(popup.element, event)) {
          return true;
        }
      }
      return this.isElementWithinCustomPopup(event.target);
    };
    PopupService2.prototype.isElementWithinCustomPopup = function(el) {
      var eDocument = this.gridOptionsService.getDocument();
      while (el && el !== eDocument.body) {
        if (el.classList.contains("ag-custom-component-popup") || el.parentElement === null) {
          return true;
        }
        el = el.parentElement;
      }
      return false;
    };
    PopupService2.prototype.getWrapper = function(ePopup) {
      while (!ePopup.classList.contains("ag-popup") && ePopup.parentElement) {
        ePopup = ePopup.parentElement;
      }
      return ePopup.classList.contains("ag-popup") ? ePopup : null;
    };
    PopupService2.prototype.setAlwaysOnTop = function(ePopup, alwaysOnTop) {
      var eWrapper = this.getWrapper(ePopup);
      if (!eWrapper) {
        return;
      }
      eWrapper.classList.toggle("ag-always-on-top", !!alwaysOnTop);
      if (alwaysOnTop) {
        this.bringPopupToFront(eWrapper);
      }
    };
    PopupService2.prototype.bringPopupToFront = function(ePopup) {
      var parent = this.getPopupParent();
      var popupList = Array.prototype.slice.call(parent.querySelectorAll(".ag-popup"));
      var popupLen = popupList.length;
      var alwaysOnTopList = Array.prototype.slice.call(parent.querySelectorAll(".ag-popup.ag-always-on-top"));
      var onTopLength = alwaysOnTopList.length;
      var eWrapper = this.getWrapper(ePopup);
      if (!eWrapper || popupLen <= 1 || !parent.contains(ePopup)) {
        return;
      }
      var pos = popupList.indexOf(eWrapper);
      var innerEls = eWrapper.querySelectorAll("div");
      var innerElsScrollMap = [];
      innerEls.forEach(function(el) {
        if (el.scrollTop !== 0) {
          innerElsScrollMap.push([el, el.scrollTop]);
        }
      });
      if (onTopLength) {
        var isPopupAlwaysOnTop = eWrapper.classList.contains("ag-always-on-top");
        if (isPopupAlwaysOnTop) {
          if (pos !== popupLen - 1) {
            last(alwaysOnTopList).insertAdjacentElement("afterend", eWrapper);
          }
        } else if (pos !== popupLen - onTopLength - 1) {
          alwaysOnTopList[0].insertAdjacentElement("beforebegin", eWrapper);
        }
      } else if (pos !== popupLen - 1) {
        last(popupList).insertAdjacentElement("afterend", eWrapper);
      }
      while (innerElsScrollMap.length) {
        var currentEl = innerElsScrollMap.pop();
        currentEl[0].scrollTop = currentEl[1];
      }
      var params = {
        type: "popupToFront",
        eWrapper
      };
      this.eventService.dispatchEvent(params);
    };
    var PopupService_1;
    PopupService2.WAIT_FOR_POPUP_CONTENT_RESIZE = 200;
    __decorate$_([
      Autowired("focusService")
    ], PopupService2.prototype, "focusService", void 0);
    __decorate$_([
      Autowired("ctrlsService")
    ], PopupService2.prototype, "ctrlsService", void 0);
    __decorate$_([
      Autowired("resizeObserverService")
    ], PopupService2.prototype, "resizeObserverService", void 0);
    __decorate$_([
      PostConstruct
    ], PopupService2.prototype, "postConstruct", null);
    PopupService2 = PopupService_1 = __decorate$_([
      Bean("popupService")
    ], PopupService2);
    return PopupService2;
  }(BeanStub)
);
var __extends$Y = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var AgAutocompleteRow = (
  /** @class */
  function(_super) {
    __extends$Y(AgAutocompleteRow2, _super);
    function AgAutocompleteRow2() {
      var _this = _super.call(
        this,
        /* html */
        '\n        <div class="ag-autocomplete-row" role="presentation">\n            <div class="ag-autocomplete-row-label"></div>\n        </div>'
      ) || this;
      _this.hasHighlighting = false;
      return _this;
    }
    AgAutocompleteRow2.prototype.setState = function(value, selected) {
      this.value = value;
      this.render();
      this.updateSelected(selected);
    };
    AgAutocompleteRow2.prototype.updateSelected = function(selected) {
      this.addOrRemoveCssClass("ag-autocomplete-row-selected", selected);
    };
    AgAutocompleteRow2.prototype.setSearchString = function(searchString) {
      var _a;
      var keepHighlighting = false;
      if (exists(searchString)) {
        var index = (_a = this.value) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase().indexOf(searchString.toLocaleLowerCase());
        if (index >= 0) {
          keepHighlighting = true;
          this.hasHighlighting = true;
          var highlightEndIndex = index + searchString.length;
          var startPart = escapeString(this.value.slice(0, index));
          var highlightedPart = escapeString(this.value.slice(index, highlightEndIndex));
          var endPart = escapeString(this.value.slice(highlightEndIndex));
          this.getGui().lastElementChild.innerHTML = "".concat(startPart, "<b>").concat(highlightedPart, "</b>").concat(endPart);
        }
      }
      if (!keepHighlighting && this.hasHighlighting) {
        this.hasHighlighting = false;
        this.render();
      }
    };
    AgAutocompleteRow2.prototype.render = function() {
      var _a;
      this.getGui().lastElementChild.innerHTML = (_a = escapeString(this.value)) !== null && _a !== void 0 ? _a : "&nbsp;";
    };
    return AgAutocompleteRow2;
  }(Component2)
);
var __extends$X = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$Z = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgAutocompleteList = (
  /** @class */
  function(_super) {
    __extends$X(AgAutocompleteList2, _super);
    function AgAutocompleteList2(params) {
      var _this = _super.call(this, AgAutocompleteList2.TEMPLATE) || this;
      _this.params = params;
      _this.searchString = "";
      return _this;
    }
    AgAutocompleteList2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
    };
    AgAutocompleteList2.prototype.init = function() {
      var _this = this;
      this.autocompleteEntries = this.params.autocompleteEntries;
      this.virtualList = this.createManagedBean(new VirtualList({ cssIdentifier: "autocomplete" }));
      this.virtualList.setComponentCreator(this.createRowComponent.bind(this));
      this.eList.appendChild(this.virtualList.getGui());
      this.virtualList.setModel({
        getRowCount: function() {
          return _this.autocompleteEntries.length;
        },
        getRow: function(index) {
          return _this.autocompleteEntries[index];
        }
      });
      var virtualListGui = this.virtualList.getGui();
      this.addManagedListener(virtualListGui, "click", function() {
        return _this.params.onConfirmed();
      });
      this.addManagedListener(virtualListGui, "mousemove", this.onMouseMove.bind(this));
      this.addManagedListener(virtualListGui, "mousedown", function(e) {
        return e.preventDefault();
      });
      this.setSelectedValue(0);
    };
    AgAutocompleteList2.prototype.onNavigationKeyDown = function(event, key) {
      event.preventDefault();
      var oldIndex = this.autocompleteEntries.indexOf(this.selectedValue);
      var newIndex = key === KeyCode.UP ? oldIndex - 1 : oldIndex + 1;
      this.checkSetSelectedValue(newIndex);
    };
    AgAutocompleteList2.prototype.setSearch = function(searchString) {
      this.searchString = searchString;
      if (exists(searchString)) {
        this.runSearch();
      } else {
        this.autocompleteEntries = this.params.autocompleteEntries;
        this.virtualList.refresh();
        this.checkSetSelectedValue(0);
      }
      this.updateSearchInList();
    };
    AgAutocompleteList2.prototype.runContainsSearch = function(searchString, searchStrings) {
      var topMatch;
      var topMatchStartsWithSearchString = false;
      var lowerCaseSearchString = searchString.toLocaleLowerCase();
      var allMatches = searchStrings.filter(function(string) {
        var lowerCaseString = string.toLocaleLowerCase();
        var index = lowerCaseString.indexOf(lowerCaseSearchString);
        var startsWithSearchString = index === 0;
        var isMatch = index >= 0;
        if (isMatch && (!topMatch || !topMatchStartsWithSearchString && startsWithSearchString || topMatchStartsWithSearchString === startsWithSearchString && string.length < topMatch.length)) {
          topMatch = string;
          topMatchStartsWithSearchString = startsWithSearchString;
        }
        return isMatch;
      });
      if (!topMatch && allMatches.length) {
        topMatch = allMatches[0];
      }
      return { topMatch, allMatches };
    };
    AgAutocompleteList2.prototype.runSearch = function() {
      var _a, _b;
      var autocompleteEntries = this.params.autocompleteEntries;
      var searchStrings = autocompleteEntries.map(function(v) {
        var _a2;
        return (_a2 = v.displayValue) !== null && _a2 !== void 0 ? _a2 : v.key;
      });
      var matchingStrings;
      var topSuggestion;
      if (this.params.useFuzzySearch) {
        matchingStrings = fuzzySuggestions(this.searchString, searchStrings, true).values;
        topSuggestion = matchingStrings.length ? matchingStrings[0] : void 0;
      } else {
        var containsMatches = this.runContainsSearch(this.searchString, searchStrings);
        matchingStrings = containsMatches.allMatches;
        topSuggestion = containsMatches.topMatch;
      }
      var filteredEntries = autocompleteEntries.filter(function(_a2) {
        var key = _a2.key, displayValue = _a2.displayValue;
        return matchingStrings.includes(displayValue !== null && displayValue !== void 0 ? displayValue : key);
      });
      if (!filteredEntries.length && this.selectedValue && ((_b = (_a = this.params) === null || _a === void 0 ? void 0 : _a.forceLastSelection) === null || _b === void 0 ? void 0 : _b.call(_a, this.selectedValue, this.searchString))) {
        filteredEntries = [this.selectedValue];
      }
      this.autocompleteEntries = filteredEntries;
      this.virtualList.refresh();
      if (!topSuggestion) {
        return;
      }
      var topSuggestionIndex = matchingStrings.indexOf(topSuggestion);
      this.checkSetSelectedValue(topSuggestionIndex);
    };
    AgAutocompleteList2.prototype.updateSearchInList = function() {
      var _this = this;
      this.virtualList.forEachRenderedRow(function(row) {
        return row.setSearchString(_this.searchString);
      });
    };
    AgAutocompleteList2.prototype.checkSetSelectedValue = function(index) {
      if (index >= 0 && index < this.autocompleteEntries.length) {
        this.setSelectedValue(index);
      }
    };
    AgAutocompleteList2.prototype.setSelectedValue = function(index) {
      var value = this.autocompleteEntries[index];
      if (this.selectedValue === value) {
        return;
      }
      this.selectedValue = value;
      this.virtualList.ensureIndexVisible(index);
      this.virtualList.forEachRenderedRow(function(cmp, idx) {
        cmp.updateSelected(index === idx);
      });
    };
    AgAutocompleteList2.prototype.createRowComponent = function(value) {
      var _a;
      var row = new AgAutocompleteRow();
      this.getContext().createBean(row);
      row.setState((_a = value.displayValue) !== null && _a !== void 0 ? _a : value.key, value === this.selectedValue);
      return row;
    };
    AgAutocompleteList2.prototype.onMouseMove = function(mouseEvent) {
      var rect = this.virtualList.getGui().getBoundingClientRect();
      var scrollTop = this.virtualList.getScrollTop();
      var mouseY = mouseEvent.clientY - rect.top + scrollTop;
      var row = Math.floor(mouseY / this.virtualList.getRowHeight());
      this.checkSetSelectedValue(row);
    };
    AgAutocompleteList2.prototype.afterGuiAttached = function() {
      this.virtualList.refresh();
    };
    AgAutocompleteList2.prototype.getSelectedValue = function() {
      var _a;
      if (!this.autocompleteEntries.length) {
        return null;
      }
      return (_a = this.selectedValue) !== null && _a !== void 0 ? _a : null;
    };
    AgAutocompleteList2.TEMPLATE = '<div class="ag-autocomplete-list-popup">\n            <div ref="eList" class="ag-autocomplete-list"></div>\n        <div>';
    __decorate$Z([
      RefSelector("eList")
    ], AgAutocompleteList2.prototype, "eList", void 0);
    __decorate$Z([
      PostConstruct
    ], AgAutocompleteList2.prototype, "init", null);
    return AgAutocompleteList2;
  }(PopupComponent)
);
var __extends$W = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$Y = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgAutocomplete = (
  /** @class */
  function(_super) {
    __extends$W(AgAutocomplete2, _super);
    function AgAutocomplete2() {
      var _this = _super.call(
        this,
        /* html */
        '\n            <div class="ag-autocomplete" role="presentation">\n                <ag-input-text-field ref="eAutocompleteInput"></ag-input-text-field>\n            </div>'
      ) || this;
      _this.isListOpen = false;
      _this.lastPosition = 0;
      _this.valid = true;
      return _this;
    }
    AgAutocomplete2.prototype.postConstruct = function() {
      var _this = this;
      this.eAutocompleteInput.onValueChange(function(value) {
        return _this.onValueChanged(value);
      });
      this.eAutocompleteInput.getInputElement().setAttribute("autocomplete", "off");
      this.addGuiEventListener("keydown", this.onKeyDown.bind(this));
      this.addGuiEventListener("click", this.updatePositionAndList.bind(this));
      this.addDestroyFunc(function() {
        _this.destroyBean(_this.autocompleteList);
      });
      this.addGuiEventListener("focusout", function() {
        return _this.onFocusOut();
      });
    };
    AgAutocomplete2.prototype.onValueChanged = function(value) {
      var parsedValue = makeNull(value);
      this.updateValue(parsedValue);
      this.updateAutocompleteList(parsedValue);
    };
    AgAutocomplete2.prototype.updateValue = function(value) {
      this.updateLastPosition();
      this.dispatchEvent({
        type: AgAutocomplete2.EVENT_VALUE_CHANGED,
        value
      });
      this.validate(value);
    };
    AgAutocomplete2.prototype.updateAutocompleteList = function(value) {
      var _a, _b, _c, _d;
      var autocompleteListParams = (_b = (_a = this.listGenerator) === null || _a === void 0 ? void 0 : _a.call(this, value, this.lastPosition)) !== null && _b !== void 0 ? _b : { enabled: false };
      if (!autocompleteListParams.type || autocompleteListParams.type !== ((_c = this.autocompleteListParams) === null || _c === void 0 ? void 0 : _c.type)) {
        if (this.isListOpen) {
          this.closeList();
        }
      }
      this.autocompleteListParams = autocompleteListParams;
      if ((_d = this.autocompleteListParams) === null || _d === void 0 ? void 0 : _d.enabled) {
        if (!this.isListOpen) {
          this.openList();
        }
        var searchString = this.autocompleteListParams.searchString;
        this.autocompleteList.setSearch(searchString !== null && searchString !== void 0 ? searchString : "");
      } else {
        if (this.isListOpen) {
          this.closeList();
        }
      }
    };
    AgAutocomplete2.prototype.onKeyDown = function(event) {
      var _this = this;
      var key = event.key;
      this.updateLastPosition();
      switch (key) {
        case KeyCode.ENTER:
          this.onEnterKeyDown(event);
          break;
        case KeyCode.TAB:
          this.onTabKeyDown(event);
          break;
        case KeyCode.DOWN:
        case KeyCode.UP:
          this.onUpDownKeyDown(event, key);
          break;
        case KeyCode.LEFT:
        case KeyCode.RIGHT:
        case KeyCode.PAGE_HOME:
        case KeyCode.PAGE_END:
          setTimeout(function() {
            _this.updatePositionAndList();
          });
          break;
        case KeyCode.ESCAPE:
          this.onEscapeKeyDown(event);
          break;
        case KeyCode.SPACE:
          if (event.ctrlKey && !this.isListOpen) {
            event.preventDefault();
            this.forceOpenList();
          }
          break;
      }
    };
    AgAutocomplete2.prototype.confirmSelection = function() {
      var _a;
      var selectedValue = (_a = this.autocompleteList) === null || _a === void 0 ? void 0 : _a.getSelectedValue();
      if (selectedValue) {
        this.closeList();
        this.dispatchEvent({
          type: AgAutocomplete2.EVENT_OPTION_SELECTED,
          value: this.getValue(),
          position: this.lastPosition,
          updateEntry: selectedValue,
          autocompleteType: this.autocompleteListParams.type
        });
      }
    };
    AgAutocomplete2.prototype.onTabKeyDown = function(event) {
      if (this.isListOpen) {
        event.preventDefault();
        event.stopPropagation();
        this.confirmSelection();
      }
    };
    AgAutocomplete2.prototype.onEnterKeyDown = function(event) {
      event.preventDefault();
      if (this.isListOpen) {
        this.confirmSelection();
      } else {
        this.onCompleted();
      }
    };
    AgAutocomplete2.prototype.onUpDownKeyDown = function(event, key) {
      var _a;
      event.preventDefault();
      if (!this.isListOpen) {
        this.forceOpenList();
      } else {
        (_a = this.autocompleteList) === null || _a === void 0 ? void 0 : _a.onNavigationKeyDown(event, key);
      }
    };
    AgAutocomplete2.prototype.onEscapeKeyDown = function(event) {
      if (this.isListOpen) {
        event.preventDefault();
        event.stopPropagation();
        this.closeList();
        this.setCaret(this.lastPosition, true);
      }
    };
    AgAutocomplete2.prototype.onFocusOut = function() {
      if (this.isListOpen) {
        this.closeList();
      }
    };
    AgAutocomplete2.prototype.updatePositionAndList = function() {
      var _a;
      this.updateLastPosition();
      this.updateAutocompleteList((_a = this.eAutocompleteInput.getValue()) !== null && _a !== void 0 ? _a : null);
    };
    AgAutocomplete2.prototype.setCaret = function(position, setFocus) {
      var eDocument = this.gridOptionsService.getDocument();
      if (setFocus && eDocument.activeElement === eDocument.body) {
        this.eAutocompleteInput.getFocusableElement().focus();
      }
      var eInput = this.eAutocompleteInput.getInputElement();
      eInput.setSelectionRange(position, position);
      if (position === eInput.value.length) {
        eInput.scrollLeft = eInput.scrollWidth;
      }
    };
    AgAutocomplete2.prototype.forceOpenList = function() {
      this.onValueChanged(this.eAutocompleteInput.getValue());
    };
    AgAutocomplete2.prototype.updateLastPosition = function() {
      var _a;
      this.lastPosition = (_a = this.eAutocompleteInput.getInputElement().selectionStart) !== null && _a !== void 0 ? _a : 0;
    };
    AgAutocomplete2.prototype.validate = function(value) {
      var _a;
      if (!this.validator) {
        return;
      }
      this.validationMessage = this.validator(value);
      this.eAutocompleteInput.getInputElement().setCustomValidity((_a = this.validationMessage) !== null && _a !== void 0 ? _a : "");
      this.valid = !this.validationMessage;
      this.dispatchEvent({
        type: AgAutocomplete2.EVENT_VALID_CHANGED,
        isValid: this.valid,
        validationMessage: this.validationMessage
      });
    };
    AgAutocomplete2.prototype.openList = function() {
      var _this = this;
      this.isListOpen = true;
      this.autocompleteList = this.createBean(new AgAutocompleteList({
        autocompleteEntries: this.autocompleteListParams.entries,
        onConfirmed: function() {
          return _this.confirmSelection();
        },
        forceLastSelection: this.forceLastSelection
      }));
      var ePopupGui = this.autocompleteList.getGui();
      var positionParams = {
        ePopup: ePopupGui,
        type: "autocomplete",
        eventSource: this.getGui(),
        position: "under",
        alignSide: this.gridOptionsService.get("enableRtl") ? "right" : "left",
        keepWithinBounds: true
      };
      var addPopupRes = this.popupService.addPopup({
        eChild: ePopupGui,
        anchorToElement: this.getGui(),
        positionCallback: function() {
          return _this.popupService.positionPopupByComponent(positionParams);
        },
        ariaLabel: this.listAriaLabel
      });
      this.hidePopup = addPopupRes.hideFunc;
      this.autocompleteList.afterGuiAttached();
    };
    AgAutocomplete2.prototype.closeList = function() {
      this.isListOpen = false;
      this.hidePopup();
      this.destroyBean(this.autocompleteList);
      this.autocompleteList = null;
    };
    AgAutocomplete2.prototype.onCompleted = function() {
      if (this.isListOpen) {
        this.closeList();
      }
      this.dispatchEvent({
        type: AgAutocomplete2.EVENT_VALUE_CONFIRMED,
        value: this.getValue(),
        isValid: this.isValid()
      });
    };
    AgAutocomplete2.prototype.getValue = function() {
      return makeNull(this.eAutocompleteInput.getValue());
    };
    AgAutocomplete2.prototype.setInputPlaceholder = function(placeholder) {
      this.eAutocompleteInput.setInputPlaceholder(placeholder);
      return this;
    };
    AgAutocomplete2.prototype.setInputAriaLabel = function(label) {
      this.eAutocompleteInput.setInputAriaLabel(label);
      return this;
    };
    AgAutocomplete2.prototype.setListAriaLabel = function(label) {
      this.listAriaLabel = label;
      return this;
    };
    AgAutocomplete2.prototype.setListGenerator = function(listGenerator) {
      this.listGenerator = listGenerator;
      return this;
    };
    AgAutocomplete2.prototype.setValidator = function(validator) {
      this.validator = validator;
      return this;
    };
    AgAutocomplete2.prototype.isValid = function() {
      return this.valid;
    };
    AgAutocomplete2.prototype.setValue = function(params) {
      var value = params.value, position = params.position, silent = params.silent, updateListOnlyIfOpen = params.updateListOnlyIfOpen, restoreFocus = params.restoreFocus;
      this.eAutocompleteInput.setValue(value, true);
      this.setCaret(position !== null && position !== void 0 ? position : this.lastPosition, restoreFocus);
      if (!silent) {
        this.updateValue(value);
      }
      if (!updateListOnlyIfOpen || this.isListOpen) {
        this.updateAutocompleteList(value);
      }
    };
    AgAutocomplete2.prototype.setForceLastSelection = function(forceLastSelection) {
      this.forceLastSelection = forceLastSelection;
      return this;
    };
    AgAutocomplete2.prototype.setInputDisabled = function(disabled) {
      this.eAutocompleteInput.setDisabled(disabled);
      return this;
    };
    AgAutocomplete2.EVENT_VALUE_CHANGED = "eventValueChanged";
    AgAutocomplete2.EVENT_VALUE_CONFIRMED = "eventValueConfirmed";
    AgAutocomplete2.EVENT_OPTION_SELECTED = "eventOptionSelected";
    AgAutocomplete2.EVENT_VALID_CHANGED = "eventValidChanged";
    __decorate$Y([
      Autowired("popupService")
    ], AgAutocomplete2.prototype, "popupService", void 0);
    __decorate$Y([
      RefSelector("eAutocompleteInput")
    ], AgAutocomplete2.prototype, "eAutocompleteInput", void 0);
    __decorate$Y([
      PostConstruct
    ], AgAutocomplete2.prototype, "postConstruct", null);
    return AgAutocomplete2;
  }(Component2)
);
var PASSIVE_EVENTS = ["touchstart", "touchend", "touchmove", "touchcancel"];
var VanillaFrameworkOverrides = (
  /** @class */
  function() {
    function VanillaFrameworkOverrides2(frameworkName) {
      if (frameworkName === void 0) {
        frameworkName = "javascript";
      }
      this.frameworkName = frameworkName;
      this.renderingEngine = "vanilla";
      this.wrapIncoming = function(callback) {
        return callback();
      };
      this.wrapOutgoing = function(callback) {
        return callback();
      };
    }
    VanillaFrameworkOverrides2.prototype.setInterval = function(action, timeout) {
      return new AgPromise(function(resolve) {
        resolve(window.setInterval(action, timeout));
      });
    };
    VanillaFrameworkOverrides2.prototype.addEventListener = function(element, type, listener, useCapture) {
      var isPassive = includes(PASSIVE_EVENTS, type);
      element.addEventListener(type, listener, { capture: !!useCapture, passive: isPassive });
    };
    Object.defineProperty(VanillaFrameworkOverrides2.prototype, "shouldWrapOutgoing", {
      get: function() {
        return false;
      },
      enumerable: false,
      configurable: true
    });
    VanillaFrameworkOverrides2.prototype.frameworkComponent = function(name) {
      return null;
    };
    VanillaFrameworkOverrides2.prototype.isFrameworkComponent = function(comp) {
      return false;
    };
    VanillaFrameworkOverrides2.prototype.getDocLink = function(path) {
      var framework = this.frameworkName === "solid" ? "react" : this.frameworkName;
      return "https://www.ag-grid.com/".concat(framework, "-data-grid").concat(path ? "/".concat(path) : "");
    };
    return VanillaFrameworkOverrides2;
  }()
);
var __extends$V = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$X = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __read$e = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$c = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var CellNavigationService = (
  /** @class */
  function(_super) {
    __extends$V(CellNavigationService2, _super);
    function CellNavigationService2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    CellNavigationService2.prototype.getNextCellToFocus = function(key, focusedCell, ctrlPressed) {
      if (ctrlPressed === void 0) {
        ctrlPressed = false;
      }
      if (ctrlPressed) {
        return this.getNextCellToFocusWithCtrlPressed(key, focusedCell);
      }
      return this.getNextCellToFocusWithoutCtrlPressed(key, focusedCell);
    };
    CellNavigationService2.prototype.getNextCellToFocusWithCtrlPressed = function(key, focusedCell) {
      var upKey = key === KeyCode.UP;
      var downKey = key === KeyCode.DOWN;
      var leftKey = key === KeyCode.LEFT;
      var column;
      var rowIndex;
      if (upKey || downKey) {
        rowIndex = upKey ? this.paginationProxy.getPageFirstRow() : this.paginationProxy.getPageLastRow();
        column = focusedCell.column;
      } else {
        var allColumns = this.columnModel.getAllDisplayedColumns();
        var isRtl = this.gridOptionsService.get("enableRtl");
        rowIndex = focusedCell.rowIndex;
        column = leftKey !== isRtl ? allColumns[0] : last(allColumns);
      }
      return {
        rowIndex,
        rowPinned: null,
        column
      };
    };
    CellNavigationService2.prototype.getNextCellToFocusWithoutCtrlPressed = function(key, focusedCell) {
      var pointer = focusedCell;
      var finished = false;
      while (!finished) {
        switch (key) {
          case KeyCode.UP:
            pointer = this.getCellAbove(pointer);
            break;
          case KeyCode.DOWN:
            pointer = this.getCellBelow(pointer);
            break;
          case KeyCode.RIGHT:
            if (this.gridOptionsService.get("enableRtl")) {
              pointer = this.getCellToLeft(pointer);
            } else {
              pointer = this.getCellToRight(pointer);
            }
            break;
          case KeyCode.LEFT:
            if (this.gridOptionsService.get("enableRtl")) {
              pointer = this.getCellToRight(pointer);
            } else {
              pointer = this.getCellToLeft(pointer);
            }
            break;
          default:
            pointer = null;
            console.warn("AG Grid: unknown key for navigation " + key);
            break;
        }
        if (pointer) {
          finished = this.isCellGoodToFocusOn(pointer);
        } else {
          finished = true;
        }
      }
      return pointer;
    };
    CellNavigationService2.prototype.isCellGoodToFocusOn = function(gridCell) {
      var column = gridCell.column;
      var rowNode;
      switch (gridCell.rowPinned) {
        case "top":
          rowNode = this.pinnedRowModel.getPinnedTopRow(gridCell.rowIndex);
          break;
        case "bottom":
          rowNode = this.pinnedRowModel.getPinnedBottomRow(gridCell.rowIndex);
          break;
        default:
          rowNode = this.rowModel.getRow(gridCell.rowIndex);
          break;
      }
      if (!rowNode) {
        return false;
      }
      var suppressNavigable = column.isSuppressNavigable(rowNode);
      return !suppressNavigable;
    };
    CellNavigationService2.prototype.getCellToLeft = function(lastCell) {
      if (!lastCell) {
        return null;
      }
      var colToLeft = this.columnModel.getDisplayedColBefore(lastCell.column);
      if (!colToLeft) {
        return null;
      }
      return {
        rowIndex: lastCell.rowIndex,
        column: colToLeft,
        rowPinned: lastCell.rowPinned
      };
    };
    CellNavigationService2.prototype.getCellToRight = function(lastCell) {
      if (!lastCell) {
        return null;
      }
      var colToRight = this.columnModel.getDisplayedColAfter(lastCell.column);
      if (!colToRight) {
        return null;
      }
      return {
        rowIndex: lastCell.rowIndex,
        column: colToRight,
        rowPinned: lastCell.rowPinned
      };
    };
    CellNavigationService2.prototype.getRowBelow = function(rowPosition) {
      var index = rowPosition.rowIndex;
      var pinned = rowPosition.rowPinned;
      if (this.isLastRowInContainer(rowPosition)) {
        switch (pinned) {
          case "bottom":
            return null;
          case "top":
            if (this.rowModel.isRowsToRender()) {
              return { rowIndex: this.paginationProxy.getPageFirstRow(), rowPinned: null };
            }
            if (this.pinnedRowModel.isRowsToRender("bottom")) {
              return { rowIndex: 0, rowPinned: "bottom" };
            }
            return null;
          default:
            if (this.pinnedRowModel.isRowsToRender("bottom")) {
              return { rowIndex: 0, rowPinned: "bottom" };
            }
            return null;
        }
      }
      var rowNode = this.rowModel.getRow(rowPosition.rowIndex);
      var nextStickyPosition = this.getNextStickyPosition(rowNode);
      if (nextStickyPosition) {
        return nextStickyPosition;
      }
      return { rowIndex: index + 1, rowPinned: pinned };
    };
    CellNavigationService2.prototype.getNextStickyPosition = function(rowNode, up) {
      if (!this.gridOptionsService.isGroupRowsSticky() || !rowNode || !rowNode.sticky) {
        return;
      }
      var stickyRowCtrls = __spreadArray$c([], __read$e(this.rowRenderer.getStickyTopRowCtrls()), false).sort(function(a, b) {
        return a.getRowNode().rowIndex - b.getRowNode().rowIndex;
      });
      var diff = up ? -1 : 1;
      var idx = stickyRowCtrls.findIndex(function(ctrl) {
        return ctrl.getRowNode().rowIndex === rowNode.rowIndex;
      });
      var nextCtrl = stickyRowCtrls[idx + diff];
      if (nextCtrl) {
        return { rowIndex: nextCtrl.getRowNode().rowIndex, rowPinned: null };
      }
    };
    CellNavigationService2.prototype.getCellBelow = function(lastCell) {
      if (!lastCell) {
        return null;
      }
      var rowBelow = this.getRowBelow(lastCell);
      if (rowBelow) {
        return {
          rowIndex: rowBelow.rowIndex,
          column: lastCell.column,
          rowPinned: rowBelow.rowPinned
        };
      }
      return null;
    };
    CellNavigationService2.prototype.isLastRowInContainer = function(rowPosition) {
      var pinned = rowPosition.rowPinned;
      var index = rowPosition.rowIndex;
      if (pinned === "top") {
        var lastTopIndex = this.pinnedRowModel.getPinnedTopRowData().length - 1;
        return lastTopIndex <= index;
      }
      if (pinned === "bottom") {
        var lastBottomIndex = this.pinnedRowModel.getPinnedBottomRowData().length - 1;
        return lastBottomIndex <= index;
      }
      var lastBodyIndex = this.paginationProxy.getPageLastRow();
      return lastBodyIndex <= index;
    };
    CellNavigationService2.prototype.getRowAbove = function(rowPosition) {
      var index = rowPosition.rowIndex;
      var pinned = rowPosition.rowPinned;
      var isFirstRow = pinned ? index === 0 : index === this.paginationProxy.getPageFirstRow();
      if (isFirstRow) {
        if (pinned === "top") {
          return null;
        }
        if (!pinned) {
          if (this.pinnedRowModel.isRowsToRender("top")) {
            return this.getLastFloatingTopRow();
          }
          return null;
        }
        if (this.rowModel.isRowsToRender()) {
          return this.getLastBodyCell();
        }
        if (this.pinnedRowModel.isRowsToRender("top")) {
          return this.getLastFloatingTopRow();
        }
        return null;
      }
      var rowNode = this.rowModel.getRow(rowPosition.rowIndex);
      var nextStickyPosition = this.getNextStickyPosition(rowNode, true);
      if (nextStickyPosition) {
        return nextStickyPosition;
      }
      return { rowIndex: index - 1, rowPinned: pinned };
    };
    CellNavigationService2.prototype.getCellAbove = function(lastCell) {
      if (!lastCell) {
        return null;
      }
      var rowAbove = this.getRowAbove({ rowIndex: lastCell.rowIndex, rowPinned: lastCell.rowPinned });
      if (rowAbove) {
        return {
          rowIndex: rowAbove.rowIndex,
          column: lastCell.column,
          rowPinned: rowAbove.rowPinned
        };
      }
      return null;
    };
    CellNavigationService2.prototype.getLastBodyCell = function() {
      var lastBodyRow = this.paginationProxy.getPageLastRow();
      return { rowIndex: lastBodyRow, rowPinned: null };
    };
    CellNavigationService2.prototype.getLastFloatingTopRow = function() {
      var lastFloatingRow = this.pinnedRowModel.getPinnedTopRowData().length - 1;
      return { rowIndex: lastFloatingRow, rowPinned: "top" };
    };
    CellNavigationService2.prototype.getNextTabbedCell = function(gridCell, backwards) {
      if (backwards) {
        return this.getNextTabbedCellBackwards(gridCell);
      }
      return this.getNextTabbedCellForwards(gridCell);
    };
    CellNavigationService2.prototype.getNextTabbedCellForwards = function(gridCell) {
      var displayedColumns = this.columnModel.getAllDisplayedColumns();
      var newRowIndex = gridCell.rowIndex;
      var newFloating = gridCell.rowPinned;
      var newColumn = this.columnModel.getDisplayedColAfter(gridCell.column);
      if (!newColumn) {
        newColumn = displayedColumns[0];
        var rowBelow = this.getRowBelow(gridCell);
        if (missing(rowBelow)) {
          return null;
        }
        if (!rowBelow.rowPinned && !this.paginationProxy.isRowInPage(rowBelow)) {
          return null;
        }
        newRowIndex = rowBelow ? rowBelow.rowIndex : null;
        newFloating = rowBelow ? rowBelow.rowPinned : null;
      }
      return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating };
    };
    CellNavigationService2.prototype.getNextTabbedCellBackwards = function(gridCell) {
      var displayedColumns = this.columnModel.getAllDisplayedColumns();
      var newRowIndex = gridCell.rowIndex;
      var newFloating = gridCell.rowPinned;
      var newColumn = this.columnModel.getDisplayedColBefore(gridCell.column);
      if (!newColumn) {
        newColumn = last(displayedColumns);
        var rowAbove = this.getRowAbove({ rowIndex: gridCell.rowIndex, rowPinned: gridCell.rowPinned });
        if (missing(rowAbove)) {
          return null;
        }
        if (!rowAbove.rowPinned && !this.paginationProxy.isRowInPage(rowAbove)) {
          return null;
        }
        newRowIndex = rowAbove ? rowAbove.rowIndex : null;
        newFloating = rowAbove ? rowAbove.rowPinned : null;
      }
      return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating };
    };
    __decorate$X([
      Autowired("columnModel")
    ], CellNavigationService2.prototype, "columnModel", void 0);
    __decorate$X([
      Autowired("rowModel")
    ], CellNavigationService2.prototype, "rowModel", void 0);
    __decorate$X([
      Autowired("rowRenderer")
    ], CellNavigationService2.prototype, "rowRenderer", void 0);
    __decorate$X([
      Autowired("pinnedRowModel")
    ], CellNavigationService2.prototype, "pinnedRowModel", void 0);
    __decorate$X([
      Autowired("paginationProxy")
    ], CellNavigationService2.prototype, "paginationProxy", void 0);
    CellNavigationService2 = __decorate$X([
      Bean("cellNavigationService")
    ], CellNavigationService2);
    return CellNavigationService2;
  }(BeanStub)
);
var __extends$U = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$W = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param$4 = function(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
};
var AlignedGridsService = (
  /** @class */
  function(_super) {
    __extends$U(AlignedGridsService2, _super);
    function AlignedGridsService2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.consuming = false;
      return _this;
    }
    AlignedGridsService2.prototype.setBeans = function(loggerFactory) {
      this.logger = loggerFactory.create("AlignedGridsService");
    };
    AlignedGridsService2.prototype.getAlignedGridApis = function() {
      var _this = this;
      var _a;
      var alignedGrids = (_a = this.gridOptionsService.get("alignedGrids")) !== null && _a !== void 0 ? _a : [];
      var isCallbackConfig = typeof alignedGrids === "function";
      if (typeof alignedGrids === "function") {
        alignedGrids = alignedGrids();
      }
      var seeUrl = function() {
        return "See ".concat(_this.getFrameworkOverrides().getDocLink("aligned-grids"));
      };
      var apis = alignedGrids.map(function(alignedGrid) {
        var _a2;
        if (!alignedGrid) {
          errorOnce("alignedGrids contains an undefined option.");
          if (!isCallbackConfig) {
            errorOnce('You may want to configure via a callback to avoid setup race conditions:\n                     "alignedGrids: () => [linkedGrid]"');
          }
          errorOnce(seeUrl());
          return;
        }
        if (alignedGrid instanceof GridApi) {
          return alignedGrid;
        }
        var refOrComp = alignedGrid;
        if ("current" in refOrComp) {
          return (_a2 = refOrComp.current) === null || _a2 === void 0 ? void 0 : _a2.api;
        } else {
          if (!refOrComp.api) {
            errorOnce("alignedGrids - No api found on the linked grid. If you are passing gridOptions to alignedGrids since v31 this is no longer valid. ".concat(seeUrl()));
          }
          return refOrComp.api;
        }
      }).filter(function(api) {
        return !!api && !api.isDestroyed();
      });
      return apis;
    };
    AlignedGridsService2.prototype.init = function() {
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.fireColumnEvent.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.fireColumnEvent.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.fireColumnEvent.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, this.fireColumnEvent.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, this.fireColumnEvent.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, this.fireScrollEvent.bind(this));
    };
    AlignedGridsService2.prototype.fireEvent = function(callback) {
      if (this.consuming) {
        return;
      }
      this.getAlignedGridApis().forEach(function(api) {
        var alignedGridService = api.__getAlignedGridService();
        callback(alignedGridService);
      });
    };
    AlignedGridsService2.prototype.onEvent = function(callback) {
      this.consuming = true;
      callback();
      this.consuming = false;
    };
    AlignedGridsService2.prototype.fireColumnEvent = function(event) {
      this.fireEvent(function(alignedGridsService) {
        alignedGridsService.onColumnEvent(event);
      });
    };
    AlignedGridsService2.prototype.fireScrollEvent = function(event) {
      if (event.direction !== "horizontal") {
        return;
      }
      this.fireEvent(function(alignedGridsService) {
        alignedGridsService.onScrollEvent(event);
      });
    };
    AlignedGridsService2.prototype.onScrollEvent = function(event) {
      var _this = this;
      this.onEvent(function() {
        var gridBodyCon = _this.ctrlsService.getGridBodyCtrl();
        gridBodyCon.getScrollFeature().setHorizontalScrollPosition(event.left, true);
      });
    };
    AlignedGridsService2.prototype.getMasterColumns = function(event) {
      var result = [];
      if (event.columns) {
        event.columns.forEach(function(column) {
          result.push(column);
        });
      } else if (event.column) {
        result.push(event.column);
      }
      return result;
    };
    AlignedGridsService2.prototype.getColumnIds = function(event) {
      var result = [];
      if (event.columns) {
        event.columns.forEach(function(column) {
          result.push(column.getColId());
        });
      } else if (event.column) {
        result.push(event.column.getColId());
      }
      return result;
    };
    AlignedGridsService2.prototype.onColumnEvent = function(event) {
      var _this = this;
      this.onEvent(function() {
        switch (event.type) {
          case Events.EVENT_COLUMN_MOVED:
          case Events.EVENT_COLUMN_VISIBLE:
          case Events.EVENT_COLUMN_PINNED:
          case Events.EVENT_COLUMN_RESIZED:
            var colEvent = event;
            _this.processColumnEvent(colEvent);
            break;
          case Events.EVENT_COLUMN_GROUP_OPENED:
            var groupOpenedEvent = event;
            _this.processGroupOpenedEvent(groupOpenedEvent);
            break;
          case Events.EVENT_COLUMN_PIVOT_CHANGED:
            console.warn("AG Grid: pivoting is not supported with aligned grids. You can only use one of these features at a time in a grid.");
            break;
        }
      });
    };
    AlignedGridsService2.prototype.processGroupOpenedEvent = function(groupOpenedEvent) {
      var _this = this;
      groupOpenedEvent.columnGroups.forEach(function(masterGroup) {
        var otherColumnGroup = null;
        if (masterGroup) {
          var groupId = masterGroup.getGroupId();
          otherColumnGroup = _this.columnModel.getProvidedColumnGroup(groupId);
        }
        if (masterGroup && !otherColumnGroup) {
          return;
        }
        _this.logger.log("onColumnEvent-> processing " + groupOpenedEvent + " expanded = " + masterGroup.isExpanded());
        _this.columnModel.setColumnGroupOpened(otherColumnGroup, masterGroup.isExpanded(), "alignedGridChanged");
      });
    };
    AlignedGridsService2.prototype.processColumnEvent = function(colEvent) {
      var _this = this;
      var _a;
      var masterColumn = colEvent.column;
      var otherColumn = null;
      if (masterColumn) {
        otherColumn = this.columnModel.getPrimaryColumn(masterColumn.getColId());
      }
      if (masterColumn && !otherColumn) {
        return;
      }
      var masterColumns = this.getMasterColumns(colEvent);
      switch (colEvent.type) {
        case Events.EVENT_COLUMN_MOVED:
          {
            var movedEvent = colEvent;
            var srcColState = colEvent.api.getColumnState();
            var destColState = srcColState.map(function(s) {
              return { colId: s.colId };
            });
            this.columnModel.applyColumnState({ state: destColState, applyOrder: true }, "alignedGridChanged");
            this.logger.log("onColumnEvent-> processing ".concat(colEvent.type, " toIndex = ").concat(movedEvent.toIndex));
          }
          break;
        case Events.EVENT_COLUMN_VISIBLE:
          {
            var visibleEvent = colEvent;
            var srcColState = colEvent.api.getColumnState();
            var destColState = srcColState.map(function(s) {
              return { colId: s.colId, hide: s.hide };
            });
            this.columnModel.applyColumnState({ state: destColState }, "alignedGridChanged");
            this.logger.log("onColumnEvent-> processing ".concat(colEvent.type, " visible = ").concat(visibleEvent.visible));
          }
          break;
        case Events.EVENT_COLUMN_PINNED:
          {
            var pinnedEvent = colEvent;
            var srcColState = colEvent.api.getColumnState();
            var destColState = srcColState.map(function(s) {
              return { colId: s.colId, pinned: s.pinned };
            });
            this.columnModel.applyColumnState({ state: destColState }, "alignedGridChanged");
            this.logger.log("onColumnEvent-> processing ".concat(colEvent.type, " pinned = ").concat(pinnedEvent.pinned));
          }
          break;
        case Events.EVENT_COLUMN_RESIZED:
          var resizedEvent = colEvent;
          var columnWidths_1 = {};
          masterColumns.forEach(function(column) {
            _this.logger.log("onColumnEvent-> processing ".concat(colEvent.type, " actualWidth = ").concat(column.getActualWidth()));
            columnWidths_1[column.getId()] = { key: column.getColId(), newWidth: column.getActualWidth() };
          });
          (_a = resizedEvent.flexColumns) === null || _a === void 0 ? void 0 : _a.forEach(function(col) {
            if (columnWidths_1[col.getId()]) {
              delete columnWidths_1[col.getId()];
            }
          });
          this.columnModel.setColumnWidths(Object.values(columnWidths_1), false, resizedEvent.finished, "alignedGridChanged");
          break;
      }
      var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
      var isVerticalScrollShowing2 = gridBodyCon.isVerticalScrollShowing();
      this.getAlignedGridApis().forEach(function(api) {
        api.setGridOption("alwaysShowVerticalScroll", isVerticalScrollShowing2);
      });
    };
    __decorate$W([
      Autowired("columnModel")
    ], AlignedGridsService2.prototype, "columnModel", void 0);
    __decorate$W([
      Autowired("ctrlsService")
    ], AlignedGridsService2.prototype, "ctrlsService", void 0);
    __decorate$W([
      __param$4(0, Qualifier("loggerFactory"))
    ], AlignedGridsService2.prototype, "setBeans", null);
    __decorate$W([
      PostConstruct
    ], AlignedGridsService2.prototype, "init", null);
    AlignedGridsService2 = __decorate$W([
      Bean("alignedGridsService")
    ], AlignedGridsService2);
    return AlignedGridsService2;
  }(BeanStub)
);
var __extends$T = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$V = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SelectionService = (
  /** @class */
  function(_super) {
    __extends$T(SelectionService2, _super);
    function SelectionService2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.selectedNodes = /* @__PURE__ */ new Map();
      _this.lastRowNode = null;
      return _this;
    }
    SelectionService2.prototype.init = function() {
      var _this = this;
      this.rowSelection = this.gridOptionsService.get("rowSelection");
      this.groupSelectsChildren = this.gridOptionsService.get("groupSelectsChildren");
      this.addManagedPropertyListeners(["groupSelectsChildren", "rowSelection"], function() {
        _this.groupSelectsChildren = _this.gridOptionsService.get("groupSelectsChildren");
        _this.rowSelection = _this.gridOptionsService.get("rowSelection");
        _this.deselectAllRowNodes({ source: "api" });
      });
      this.addManagedListener(this.eventService, Events.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));
    };
    SelectionService2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.resetNodes();
      this.lastRowNode = null;
    };
    SelectionService2.prototype.isMultiselect = function() {
      return this.rowSelection === "multiple";
    };
    SelectionService2.prototype.setNodesSelected = function(params) {
      var _a;
      var newValue = params.newValue, clearSelection = params.clearSelection, suppressFinishActions = params.suppressFinishActions, rangeSelect = params.rangeSelect, nodes = params.nodes, event = params.event, _b = params.source, source = _b === void 0 ? "api" : _b;
      if (nodes.length === 0)
        return 0;
      if (nodes.length > 1 && !this.isMultiselect()) {
        console.warn("AG Grid: cannot multi select while rowSelection='single'");
        return 0;
      }
      var groupSelectsFiltered = this.groupSelectsChildren && params.groupSelectsFiltered === true;
      var filteredNodes = nodes.map(function(node2) {
        return node2.footer ? node2.sibling : node2;
      });
      if (rangeSelect) {
        if (nodes.length > 1) {
          console.warn("AG Grid: cannot range select while selecting multiple rows");
          return 0;
        }
        var toNode = null;
        if (source === "checkboxSelected" && newValue === false && this.lastRowNode) {
          if (this.lastRowNode.id) {
            toNode = this.lastRowNode;
          } else {
            this.lastRowNode = null;
          }
        }
        if (toNode == null) {
          toNode = this.getLastSelectedNode();
        }
        if (toNode) {
          var fromNode = filteredNodes[0];
          var newRowClicked = fromNode !== toNode;
          if (newRowClicked && this.isMultiselect()) {
            return this.selectRange(fromNode, toNode, newValue, source);
          }
        }
      }
      this.lastRowNode = newValue ? null : filteredNodes[0];
      var updatedCount = 0;
      for (var i = 0; i < filteredNodes.length; i++) {
        var node = filteredNodes[i];
        var skipThisNode = groupSelectsFiltered && node.group;
        if (!skipThisNode) {
          var thisNodeWasSelected = node.selectThisNode(newValue, event, source);
          if (thisNodeWasSelected) {
            updatedCount++;
          }
        }
        if (this.groupSelectsChildren && ((_a = node.childrenAfterGroup) === null || _a === void 0 ? void 0 : _a.length)) {
          updatedCount += this.selectChildren(node, newValue, groupSelectsFiltered, source);
        }
      }
      if (!suppressFinishActions) {
        var clearOtherNodes = newValue && (clearSelection || !this.isMultiselect());
        if (clearOtherNodes) {
          updatedCount += this.clearOtherNodes(filteredNodes[0], source);
        }
        if (updatedCount > 0) {
          this.updateGroupsFromChildrenSelections(source);
          var event_1 = {
            type: Events.EVENT_SELECTION_CHANGED,
            source
          };
          this.eventService.dispatchEvent(event_1);
        }
      }
      return updatedCount;
    };
    SelectionService2.prototype.selectRange = function(fromNode, toNode, value, source) {
      var _this = this;
      if (value === void 0) {
        value = true;
      }
      var nodesToSelect = this.rowModel.getNodesInRangeForSelection(fromNode, toNode);
      var updatedCount = 0;
      nodesToSelect.forEach(function(rowNode) {
        if (rowNode.group && _this.groupSelectsChildren) {
          return;
        }
        var nodeWasSelected = rowNode.selectThisNode(value, void 0, source);
        if (nodeWasSelected) {
          updatedCount++;
        }
      });
      this.updateGroupsFromChildrenSelections(source);
      var event = {
        type: Events.EVENT_SELECTION_CHANGED,
        source
      };
      this.eventService.dispatchEvent(event);
      return updatedCount;
    };
    SelectionService2.prototype.selectChildren = function(node, newValue, groupSelectsFiltered, source) {
      var children = groupSelectsFiltered ? node.childrenAfterAggFilter : node.childrenAfterGroup;
      if (missing(children)) {
        return 0;
      }
      return this.setNodesSelected({
        newValue,
        clearSelection: false,
        suppressFinishActions: true,
        groupSelectsFiltered,
        source,
        nodes: children
      });
    };
    SelectionService2.prototype.getLastSelectedNode = function() {
      var selectedKeys = Array.from(this.selectedNodes.keys());
      if (selectedKeys.length == 0) {
        return null;
      }
      var node = this.selectedNodes.get(last(selectedKeys));
      if (node) {
        return node;
      }
      return null;
    };
    SelectionService2.prototype.getSelectedNodes = function() {
      var selectedNodes = [];
      this.selectedNodes.forEach(function(rowNode) {
        if (rowNode) {
          selectedNodes.push(rowNode);
        }
      });
      return selectedNodes;
    };
    SelectionService2.prototype.getSelectedRows = function() {
      var selectedRows = [];
      this.selectedNodes.forEach(function(rowNode) {
        if (rowNode && rowNode.data) {
          selectedRows.push(rowNode.data);
        }
      });
      return selectedRows;
    };
    SelectionService2.prototype.getSelectionCount = function() {
      return this.selectedNodes.size;
    };
    SelectionService2.prototype.filterFromSelection = function(predicate) {
      var newSelectedNodes = /* @__PURE__ */ new Map();
      this.selectedNodes.forEach(function(rowNode, key) {
        var passesPredicate = rowNode && predicate(rowNode);
        if (passesPredicate) {
          newSelectedNodes.set(key, rowNode);
        }
      });
      this.selectedNodes = newSelectedNodes;
    };
    SelectionService2.prototype.updateGroupsFromChildrenSelections = function(source, changedPath) {
      if (!this.groupSelectsChildren) {
        return false;
      }
      if (this.rowModel.getType() !== "clientSide") {
        return false;
      }
      var clientSideRowModel = this.rowModel;
      var rootNode = clientSideRowModel.getRootNode();
      if (!changedPath) {
        changedPath = new ChangedPath(true, rootNode);
        changedPath.setInactive();
      }
      var selectionChanged = false;
      changedPath.forEachChangedNodeDepthFirst(function(rowNode) {
        if (rowNode !== rootNode) {
          var selected = rowNode.calculateSelectedFromChildren();
          selectionChanged = rowNode.selectThisNode(selected === null ? false : selected, void 0, source) || selectionChanged;
        }
      });
      return selectionChanged;
    };
    SelectionService2.prototype.clearOtherNodes = function(rowNodeToKeepSelected, source) {
      var _this = this;
      var groupsToRefresh = /* @__PURE__ */ new Map();
      var updatedCount = 0;
      this.selectedNodes.forEach(function(otherRowNode) {
        if (otherRowNode && otherRowNode.id !== rowNodeToKeepSelected.id) {
          var rowNode = _this.selectedNodes.get(otherRowNode.id);
          updatedCount += rowNode.setSelectedParams({
            newValue: false,
            clearSelection: false,
            suppressFinishActions: true,
            source
          });
          if (_this.groupSelectsChildren && otherRowNode.parent) {
            groupsToRefresh.set(otherRowNode.parent.id, otherRowNode.parent);
          }
        }
      });
      groupsToRefresh.forEach(function(group) {
        var selected = group.calculateSelectedFromChildren();
        group.selectThisNode(selected === null ? false : selected, void 0, source);
      });
      return updatedCount;
    };
    SelectionService2.prototype.onRowSelected = function(event) {
      var rowNode = event.node;
      if (this.groupSelectsChildren && rowNode.group) {
        return;
      }
      if (rowNode.isSelected()) {
        this.selectedNodes.set(rowNode.id, rowNode);
      } else {
        this.selectedNodes.delete(rowNode.id);
      }
    };
    SelectionService2.prototype.syncInRowNode = function(rowNode, oldNode) {
      this.syncInOldRowNode(rowNode, oldNode);
      this.syncInNewRowNode(rowNode);
    };
    SelectionService2.prototype.syncInOldRowNode = function(rowNode, oldNode) {
      var oldNodeHasDifferentId = exists(oldNode) && rowNode.id !== oldNode.id;
      if (oldNodeHasDifferentId && oldNode) {
        var id = oldNode.id;
        var oldNodeSelected = this.selectedNodes.get(id) == rowNode;
        if (oldNodeSelected) {
          this.selectedNodes.set(oldNode.id, oldNode);
        }
      }
    };
    SelectionService2.prototype.syncInNewRowNode = function(rowNode) {
      if (this.selectedNodes.has(rowNode.id)) {
        rowNode.setSelectedInitialValue(true);
        this.selectedNodes.set(rowNode.id, rowNode);
      } else {
        rowNode.setSelectedInitialValue(false);
      }
    };
    SelectionService2.prototype.reset = function(source) {
      var selectionCount = this.getSelectionCount();
      this.resetNodes();
      if (selectionCount) {
        var event_2 = {
          type: Events.EVENT_SELECTION_CHANGED,
          source
        };
        this.eventService.dispatchEvent(event_2);
      }
    };
    SelectionService2.prototype.resetNodes = function() {
      var _a;
      (_a = this.selectedNodes) === null || _a === void 0 ? void 0 : _a.clear();
    };
    SelectionService2.prototype.getBestCostNodeSelection = function() {
      if (this.rowModel.getType() !== "clientSide") {
        return;
      }
      var clientSideRowModel = this.rowModel;
      var topLevelNodes = clientSideRowModel.getTopLevelNodes();
      if (topLevelNodes === null) {
        return;
      }
      var result = [];
      function traverse(nodes) {
        for (var i = 0, l = nodes.length; i < l; i++) {
          var node = nodes[i];
          if (node.isSelected()) {
            result.push(node);
          } else {
            var maybeGroup = node;
            if (maybeGroup.group && maybeGroup.children) {
              traverse(maybeGroup.children);
            }
          }
        }
      }
      traverse(topLevelNodes);
      return result;
    };
    SelectionService2.prototype.isEmpty = function() {
      var count = 0;
      this.selectedNodes.forEach(function(rowNode) {
        if (rowNode) {
          count++;
        }
      });
      return count === 0;
    };
    SelectionService2.prototype.deselectAllRowNodes = function(params) {
      var callback = function(rowNode) {
        return rowNode.selectThisNode(false, void 0, source);
      };
      var rowModelClientSide = this.rowModel.getType() === "clientSide";
      var source = params.source, justFiltered = params.justFiltered, justCurrentPage = params.justCurrentPage;
      if (justCurrentPage || justFiltered) {
        if (!rowModelClientSide) {
          console.error("AG Grid: selecting just filtered only works when gridOptions.rowModelType='clientSide'");
          return;
        }
        this.getNodesToSelect(justFiltered, justCurrentPage).forEach(callback);
      } else {
        this.selectedNodes.forEach(function(rowNode) {
          if (rowNode) {
            callback(rowNode);
          }
        });
        this.reset(source);
      }
      if (rowModelClientSide && this.groupSelectsChildren) {
        this.updateGroupsFromChildrenSelections(source);
      }
      var event = {
        type: Events.EVENT_SELECTION_CHANGED,
        source
      };
      this.eventService.dispatchEvent(event);
    };
    SelectionService2.prototype.getSelectedCounts = function(justFiltered, justCurrentPage) {
      var _this = this;
      var selectedCount = 0;
      var notSelectedCount = 0;
      var callback = function(node) {
        if (_this.groupSelectsChildren && node.group) {
          return;
        }
        if (node.isSelected()) {
          selectedCount++;
        } else if (!node.selectable)
          ;
        else {
          notSelectedCount++;
        }
      };
      this.getNodesToSelect(justFiltered, justCurrentPage).forEach(callback);
      return { selectedCount, notSelectedCount };
    };
    SelectionService2.prototype.getSelectAllState = function(justFiltered, justCurrentPage) {
      var _a = this.getSelectedCounts(justFiltered, justCurrentPage), selectedCount = _a.selectedCount, notSelectedCount = _a.notSelectedCount;
      if (selectedCount === 0 && notSelectedCount === 0) {
        return false;
      }
      if (selectedCount > 0 && notSelectedCount > 0) {
        return null;
      }
      return selectedCount > 0;
    };
    SelectionService2.prototype.hasNodesToSelect = function(justFiltered, justCurrentPage) {
      if (justFiltered === void 0) {
        justFiltered = false;
      }
      if (justCurrentPage === void 0) {
        justCurrentPage = false;
      }
      return this.getNodesToSelect(justFiltered, justCurrentPage).filter(function(node) {
        return node.selectable;
      }).length > 0;
    };
    SelectionService2.prototype.getNodesToSelect = function(justFiltered, justCurrentPage) {
      var _this = this;
      if (justFiltered === void 0) {
        justFiltered = false;
      }
      if (justCurrentPage === void 0) {
        justCurrentPage = false;
      }
      if (this.rowModel.getType() !== "clientSide") {
        throw new Error("selectAll only available when rowModelType='clientSide', ie not ".concat(this.rowModel.getType()));
      }
      var nodes = [];
      if (justCurrentPage) {
        this.paginationProxy.forEachNodeOnPage(function(node) {
          if (!node.group) {
            nodes.push(node);
            return;
          }
          if (!node.expanded) {
            var recursivelyAddChildren_1 = function(child) {
              var _a;
              nodes.push(child);
              if ((_a = child.childrenAfterFilter) === null || _a === void 0 ? void 0 : _a.length) {
                child.childrenAfterFilter.forEach(recursivelyAddChildren_1);
              }
            };
            recursivelyAddChildren_1(node);
            return;
          }
          if (!_this.groupSelectsChildren) {
            nodes.push(node);
          }
        });
        return nodes;
      }
      var clientSideRowModel = this.rowModel;
      if (justFiltered) {
        clientSideRowModel.forEachNodeAfterFilter(function(node) {
          nodes.push(node);
        });
        return nodes;
      }
      clientSideRowModel.forEachNode(function(node) {
        nodes.push(node);
      });
      return nodes;
    };
    SelectionService2.prototype.selectAllRowNodes = function(params) {
      if (this.rowModel.getType() !== "clientSide") {
        throw new Error("selectAll only available when rowModelType='clientSide', ie not ".concat(this.rowModel.getType()));
      }
      var source = params.source, justFiltered = params.justFiltered, justCurrentPage = params.justCurrentPage;
      var callback = function(rowNode) {
        return rowNode.selectThisNode(true, void 0, source);
      };
      this.getNodesToSelect(justFiltered, justCurrentPage).forEach(callback);
      if (this.rowModel.getType() === "clientSide" && this.groupSelectsChildren) {
        this.updateGroupsFromChildrenSelections(source);
      }
      var event = {
        type: Events.EVENT_SELECTION_CHANGED,
        source
      };
      this.eventService.dispatchEvent(event);
    };
    SelectionService2.prototype.getSelectionState = function() {
      var selectedIds = [];
      this.selectedNodes.forEach(function(node) {
        if (node === null || node === void 0 ? void 0 : node.id) {
          selectedIds.push(node.id);
        }
      });
      return selectedIds.length ? selectedIds : null;
    };
    SelectionService2.prototype.setSelectionState = function(state, source) {
      if (!Array.isArray(state)) {
        return;
      }
      var rowIds = new Set(state);
      var nodes = [];
      this.rowModel.forEachNode(function(node) {
        if (rowIds.has(node.id)) {
          nodes.push(node);
        }
      });
      this.setNodesSelected({
        newValue: true,
        nodes,
        source
      });
    };
    __decorate$V([
      Autowired("rowModel")
    ], SelectionService2.prototype, "rowModel", void 0);
    __decorate$V([
      Autowired("paginationProxy")
    ], SelectionService2.prototype, "paginationProxy", void 0);
    __decorate$V([
      PostConstruct
    ], SelectionService2.prototype, "init", null);
    SelectionService2 = __decorate$V([
      Bean("selectionService")
    ], SelectionService2);
    return SelectionService2;
  }(BeanStub)
);
var __decorate$U = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __read$d = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$b = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var ColumnApi = (
  /** @class */
  function() {
    function ColumnApi2(gridAp) {
      var _this = this;
      this.viaApi = function(funcName) {
        var _a;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
        }
        warnOnce("Since v31, 'columnApi.".concat(funcName, "' is deprecated and moved to 'api.").concat(funcName, "'."));
        return (_a = _this.api)[funcName].apply(_a, __spreadArray$b([], __read$d(args), false));
      };
      this.api = gridAp;
    }
    ColumnApi2.prototype.sizeColumnsToFit = function(gridWidth) {
      this.viaApi("sizeColumnsToFit", gridWidth);
    };
    ColumnApi2.prototype.setColumnGroupOpened = function(group, newValue) {
      this.viaApi("setColumnGroupOpened", group, newValue);
    };
    ColumnApi2.prototype.getColumnGroup = function(name, instanceId) {
      return this.viaApi("getColumnGroup", name, instanceId);
    };
    ColumnApi2.prototype.getProvidedColumnGroup = function(name) {
      return this.viaApi("getProvidedColumnGroup", name);
    };
    ColumnApi2.prototype.getDisplayNameForColumn = function(column, location) {
      return this.viaApi("getDisplayNameForColumn", column, location);
    };
    ColumnApi2.prototype.getDisplayNameForColumnGroup = function(columnGroup, location) {
      return this.viaApi("getDisplayNameForColumnGroup", columnGroup, location);
    };
    ColumnApi2.prototype.getColumn = function(key) {
      return this.viaApi("getColumn", key);
    };
    ColumnApi2.prototype.getColumns = function() {
      return this.viaApi("getColumns");
    };
    ColumnApi2.prototype.applyColumnState = function(params) {
      return this.viaApi("applyColumnState", params);
    };
    ColumnApi2.prototype.getColumnState = function() {
      return this.viaApi("getColumnState");
    };
    ColumnApi2.prototype.resetColumnState = function() {
      this.viaApi("resetColumnState");
    };
    ColumnApi2.prototype.getColumnGroupState = function() {
      return this.viaApi("getColumnGroupState");
    };
    ColumnApi2.prototype.setColumnGroupState = function(stateItems) {
      this.viaApi("setColumnGroupState", stateItems);
    };
    ColumnApi2.prototype.resetColumnGroupState = function() {
      this.viaApi("resetColumnGroupState");
    };
    ColumnApi2.prototype.isPinning = function() {
      return this.viaApi("isPinning");
    };
    ColumnApi2.prototype.isPinningLeft = function() {
      return this.viaApi("isPinningLeft");
    };
    ColumnApi2.prototype.isPinningRight = function() {
      return this.viaApi("isPinningRight");
    };
    ColumnApi2.prototype.getDisplayedColAfter = function(col) {
      return this.viaApi("getDisplayedColAfter", col);
    };
    ColumnApi2.prototype.getDisplayedColBefore = function(col) {
      return this.viaApi("getDisplayedColBefore", col);
    };
    ColumnApi2.prototype.setColumnVisible = function(key, visible) {
      this.viaApi("setColumnVisible", key, visible);
    };
    ColumnApi2.prototype.setColumnsVisible = function(keys2, visible) {
      this.viaApi("setColumnsVisible", keys2, visible);
    };
    ColumnApi2.prototype.setColumnPinned = function(key, pinned) {
      this.viaApi("setColumnPinned", key, pinned);
    };
    ColumnApi2.prototype.setColumnsPinned = function(keys2, pinned) {
      this.viaApi("setColumnsPinned", keys2, pinned);
    };
    ColumnApi2.prototype.getAllGridColumns = function() {
      return this.viaApi("getAllGridColumns");
    };
    ColumnApi2.prototype.getDisplayedLeftColumns = function() {
      return this.viaApi("getDisplayedLeftColumns");
    };
    ColumnApi2.prototype.getDisplayedCenterColumns = function() {
      return this.viaApi("getDisplayedCenterColumns");
    };
    ColumnApi2.prototype.getDisplayedRightColumns = function() {
      return this.viaApi("getDisplayedRightColumns");
    };
    ColumnApi2.prototype.getAllDisplayedColumns = function() {
      return this.viaApi("getAllDisplayedColumns");
    };
    ColumnApi2.prototype.getAllDisplayedVirtualColumns = function() {
      return this.viaApi("getAllDisplayedVirtualColumns");
    };
    ColumnApi2.prototype.moveColumn = function(key, toIndex) {
      this.viaApi("moveColumn", key, toIndex);
    };
    ColumnApi2.prototype.moveColumnByIndex = function(fromIndex, toIndex) {
      this.viaApi("moveColumnByIndex", fromIndex, toIndex);
    };
    ColumnApi2.prototype.moveColumns = function(columnsToMoveKeys, toIndex) {
      this.viaApi("moveColumns", columnsToMoveKeys, toIndex);
    };
    ColumnApi2.prototype.moveRowGroupColumn = function(fromIndex, toIndex) {
      this.viaApi("moveRowGroupColumn", fromIndex, toIndex);
    };
    ColumnApi2.prototype.setColumnAggFunc = function(key, aggFunc) {
      this.viaApi("setColumnAggFunc", key, aggFunc);
    };
    ColumnApi2.prototype.setColumnWidth = function(key, newWidth, finished, source) {
      if (finished === void 0) {
        finished = true;
      }
      this.viaApi("setColumnWidth", key, newWidth, finished, source);
    };
    ColumnApi2.prototype.setColumnWidths = function(columnWidths, finished, source) {
      if (finished === void 0) {
        finished = true;
      }
      this.viaApi("setColumnWidths", columnWidths, finished, source);
    };
    ColumnApi2.prototype.setPivotMode = function(pivotMode) {
      this.viaApi("setPivotMode", pivotMode);
    };
    ColumnApi2.prototype.isPivotMode = function() {
      return this.viaApi("isPivotMode");
    };
    ColumnApi2.prototype.getPivotResultColumn = function(pivotKeys, valueColKey) {
      return this.viaApi("getPivotResultColumn", pivotKeys, valueColKey);
    };
    ColumnApi2.prototype.setValueColumns = function(colKeys) {
      this.viaApi("setValueColumns", colKeys);
    };
    ColumnApi2.prototype.getValueColumns = function() {
      return this.viaApi("getValueColumns");
    };
    ColumnApi2.prototype.removeValueColumn = function(colKey) {
      this.viaApi("removeValueColumn", colKey);
    };
    ColumnApi2.prototype.removeValueColumns = function(colKeys) {
      this.viaApi("removeValueColumns", colKeys);
    };
    ColumnApi2.prototype.addValueColumn = function(colKey) {
      this.viaApi("addValueColumn", colKey);
    };
    ColumnApi2.prototype.addValueColumns = function(colKeys) {
      this.viaApi("addValueColumns", colKeys);
    };
    ColumnApi2.prototype.setRowGroupColumns = function(colKeys) {
      this.viaApi("setRowGroupColumns", colKeys);
    };
    ColumnApi2.prototype.removeRowGroupColumn = function(colKey) {
      this.viaApi("removeRowGroupColumn", colKey);
    };
    ColumnApi2.prototype.removeRowGroupColumns = function(colKeys) {
      this.viaApi("removeRowGroupColumns", colKeys);
    };
    ColumnApi2.prototype.addRowGroupColumn = function(colKey) {
      this.viaApi("addRowGroupColumn", colKey);
    };
    ColumnApi2.prototype.addRowGroupColumns = function(colKeys) {
      this.viaApi("addRowGroupColumns", colKeys);
    };
    ColumnApi2.prototype.getRowGroupColumns = function() {
      return this.viaApi("getRowGroupColumns");
    };
    ColumnApi2.prototype.setPivotColumns = function(colKeys) {
      this.viaApi("setPivotColumns", colKeys);
    };
    ColumnApi2.prototype.removePivotColumn = function(colKey) {
      this.viaApi("removePivotColumn", colKey);
    };
    ColumnApi2.prototype.removePivotColumns = function(colKeys) {
      this.viaApi("removePivotColumns", colKeys);
    };
    ColumnApi2.prototype.addPivotColumn = function(colKey) {
      this.viaApi("addPivotColumn", colKey);
    };
    ColumnApi2.prototype.addPivotColumns = function(colKeys) {
      this.viaApi("addPivotColumns", colKeys);
    };
    ColumnApi2.prototype.getPivotColumns = function() {
      return this.viaApi("getPivotColumns");
    };
    ColumnApi2.prototype.getLeftDisplayedColumnGroups = function() {
      return this.viaApi("getLeftDisplayedColumnGroups");
    };
    ColumnApi2.prototype.getCenterDisplayedColumnGroups = function() {
      return this.viaApi("getCenterDisplayedColumnGroups");
    };
    ColumnApi2.prototype.getRightDisplayedColumnGroups = function() {
      return this.viaApi("getRightDisplayedColumnGroups");
    };
    ColumnApi2.prototype.getAllDisplayedColumnGroups = function() {
      return this.viaApi("getAllDisplayedColumnGroups");
    };
    ColumnApi2.prototype.autoSizeColumn = function(key, skipHeader) {
      return this.viaApi("autoSizeColumn", key, skipHeader);
    };
    ColumnApi2.prototype.autoSizeColumns = function(keys2, skipHeader) {
      this.viaApi("autoSizeColumns", keys2, skipHeader);
    };
    ColumnApi2.prototype.autoSizeAllColumns = function(skipHeader) {
      this.viaApi("autoSizeAllColumns", skipHeader);
    };
    ColumnApi2.prototype.setPivotResultColumns = function(colDefs) {
      this.viaApi("setPivotResultColumns", colDefs);
    };
    ColumnApi2.prototype.getPivotResultColumns = function() {
      return this.viaApi("getPivotResultColumns");
    };
    __decorate$U([
      Autowired("gridApi")
    ], ColumnApi2.prototype, "api", void 0);
    ColumnApi2 = __decorate$U([
      Bean("columnApi")
    ], ColumnApi2);
    return ColumnApi2;
  }()
);
var __extends$S = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$T = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ValueService = (
  /** @class */
  function(_super) {
    __extends$S(ValueService2, _super);
    function ValueService2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.initialised = false;
      _this.isSsrm = false;
      return _this;
    }
    ValueService2.prototype.init = function() {
      var _this = this;
      this.isSsrm = this.gridOptionsService.isRowModelType("serverSide");
      this.cellExpressions = this.gridOptionsService.get("enableCellExpressions");
      this.isTreeData = this.gridOptionsService.get("treeData");
      this.initialised = true;
      var listener = function(event) {
        return _this.callColumnCellValueChangedHandler(event);
      };
      var async = this.gridOptionsService.useAsyncEvents();
      this.eventService.addEventListener(Events.EVENT_CELL_VALUE_CHANGED, listener, async);
      this.addDestroyFunc(function() {
        return _this.eventService.removeEventListener(Events.EVENT_CELL_VALUE_CHANGED, listener, async);
      });
      this.addManagedPropertyListener("treeData", function(propChange) {
        return _this.isTreeData = propChange.currentValue;
      });
    };
    ValueService2.prototype.getValue = function(column, rowNode, forFilter, ignoreAggData) {
      if (forFilter === void 0) {
        forFilter = false;
      }
      if (ignoreAggData === void 0) {
        ignoreAggData = false;
      }
      if (!this.initialised) {
        this.init();
      }
      if (!rowNode) {
        return;
      }
      var colDef = column.getColDef();
      var field = colDef.field;
      var colId = column.getColId();
      var data = rowNode.data;
      var result;
      var groupDataExists = rowNode.groupData && rowNode.groupData[colId] !== void 0;
      var aggDataExists = !ignoreAggData && rowNode.aggData && rowNode.aggData[colId] !== void 0;
      var ignoreSsrmAggData = this.isSsrm && ignoreAggData && !!column.getColDef().aggFunc;
      var ssrmFooterGroupCol = this.isSsrm && rowNode.footer && rowNode.field && (column.getColDef().showRowGroup === true || column.getColDef().showRowGroup === rowNode.field);
      if (forFilter && colDef.filterValueGetter) {
        result = this.executeFilterValueGetter(colDef.filterValueGetter, data, column, rowNode);
      } else if (this.isTreeData && aggDataExists) {
        result = rowNode.aggData[colId];
      } else if (this.isTreeData && colDef.valueGetter) {
        result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);
      } else if (this.isTreeData && (field && data)) {
        result = getValueUsingField(data, field, column.isFieldContainsDots());
      } else if (groupDataExists) {
        result = rowNode.groupData[colId];
      } else if (aggDataExists) {
        result = rowNode.aggData[colId];
      } else if (colDef.valueGetter) {
        result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);
      } else if (ssrmFooterGroupCol) {
        result = getValueUsingField(data, rowNode.field, column.isFieldContainsDots());
      } else if (field && data && !ignoreSsrmAggData) {
        result = getValueUsingField(data, field, column.isFieldContainsDots());
      }
      if (this.cellExpressions && typeof result === "string" && result.indexOf("=") === 0) {
        var cellValueGetter = result.substring(1);
        result = this.executeValueGetter(cellValueGetter, data, column, rowNode);
      }
      if (result == null) {
        var openedGroup = this.getOpenedGroup(rowNode, column);
        if (openedGroup != null) {
          return openedGroup;
        }
      }
      return result;
    };
    ValueService2.prototype.getOpenedGroup = function(rowNode, column) {
      if (!this.gridOptionsService.get("showOpenedGroup")) {
        return;
      }
      var colDef = column.getColDef();
      if (!colDef.showRowGroup) {
        return;
      }
      var showRowGroup = column.getColDef().showRowGroup;
      var pointer = rowNode.parent;
      while (pointer != null) {
        if (pointer.rowGroupColumn && (showRowGroup === true || showRowGroup === pointer.rowGroupColumn.getColId())) {
          return pointer.key;
        }
        pointer = pointer.parent;
      }
      return void 0;
    };
    ValueService2.prototype.setValue = function(rowNode, colKey, newValue, eventSource) {
      var column = this.columnModel.getPrimaryColumn(colKey);
      if (!rowNode || !column) {
        return false;
      }
      if (missing(rowNode.data)) {
        rowNode.data = {};
      }
      var _a = column.getColDef(), field = _a.field, valueSetter = _a.valueSetter;
      if (missing(field) && missing(valueSetter)) {
        console.warn("AG Grid: you need either field or valueSetter set on colDef for editing to work");
        return false;
      }
      if (!this.dataTypeService.checkType(column, newValue)) {
        console.warn("AG Grid: Data type of the new value does not match the cell data type of the column");
        return false;
      }
      var params = this.gridOptionsService.addGridCommonParams({
        node: rowNode,
        data: rowNode.data,
        oldValue: this.getValue(column, rowNode),
        newValue,
        colDef: column.getColDef(),
        column
      });
      params.newValue = newValue;
      var valueWasDifferent;
      if (exists(valueSetter)) {
        if (typeof valueSetter === "function") {
          valueWasDifferent = valueSetter(params);
        } else {
          valueWasDifferent = this.expressionService.evaluate(valueSetter, params);
        }
      } else {
        valueWasDifferent = this.setValueUsingField(rowNode.data, field, newValue, column.isFieldContainsDots());
      }
      if (valueWasDifferent === void 0) {
        valueWasDifferent = true;
      }
      if (!valueWasDifferent) {
        return false;
      }
      rowNode.resetQuickFilterAggregateText();
      this.valueCache.onDataChanged();
      params.newValue = this.getValue(column, rowNode);
      var event = {
        type: Events.EVENT_CELL_VALUE_CHANGED,
        event: null,
        rowIndex: rowNode.rowIndex,
        rowPinned: rowNode.rowPinned,
        column: params.column,
        api: params.api,
        columnApi: params.columnApi,
        colDef: params.colDef,
        context: params.context,
        data: rowNode.data,
        node: rowNode,
        oldValue: params.oldValue,
        newValue: params.newValue,
        value: params.newValue,
        source: eventSource
      };
      this.eventService.dispatchEvent(event);
      return true;
    };
    ValueService2.prototype.callColumnCellValueChangedHandler = function(event) {
      var onCellValueChanged = event.colDef.onCellValueChanged;
      if (typeof onCellValueChanged === "function") {
        onCellValueChanged({
          node: event.node,
          data: event.data,
          oldValue: event.oldValue,
          newValue: event.newValue,
          colDef: event.colDef,
          column: event.column,
          api: event.api,
          columnApi: event.columnApi,
          context: event.context
        });
      }
    };
    ValueService2.prototype.setValueUsingField = function(data, field, newValue, isFieldContainsDots) {
      if (!field) {
        return false;
      }
      var valuesAreSame = false;
      if (!isFieldContainsDots) {
        valuesAreSame = data[field] === newValue;
        if (!valuesAreSame) {
          data[field] = newValue;
        }
      } else {
        var fieldPieces = field.split(".");
        var currentObject = data;
        while (fieldPieces.length > 0 && currentObject) {
          var fieldPiece = fieldPieces.shift();
          if (fieldPieces.length === 0) {
            valuesAreSame = currentObject[fieldPiece] === newValue;
            if (!valuesAreSame) {
              currentObject[fieldPiece] = newValue;
            }
          } else {
            currentObject = currentObject[fieldPiece];
          }
        }
      }
      return !valuesAreSame;
    };
    ValueService2.prototype.executeFilterValueGetter = function(valueGetter, data, column, rowNode) {
      var params = this.gridOptionsService.addGridCommonParams({
        data,
        node: rowNode,
        column,
        colDef: column.getColDef(),
        getValue: this.getValueCallback.bind(this, rowNode)
      });
      if (typeof valueGetter === "function") {
        return valueGetter(params);
      }
      return this.expressionService.evaluate(valueGetter, params);
    };
    ValueService2.prototype.executeValueGetter = function(valueGetter, data, column, rowNode) {
      var colId = column.getColId();
      var valueFromCache = this.valueCache.getValue(rowNode, colId);
      if (valueFromCache !== void 0) {
        return valueFromCache;
      }
      var params = this.gridOptionsService.addGridCommonParams({
        data,
        node: rowNode,
        column,
        colDef: column.getColDef(),
        getValue: this.getValueCallback.bind(this, rowNode)
      });
      var result;
      if (typeof valueGetter === "function") {
        result = valueGetter(params);
      } else {
        result = this.expressionService.evaluate(valueGetter, params);
      }
      this.valueCache.setValue(rowNode, colId, result);
      return result;
    };
    ValueService2.prototype.getValueCallback = function(node, field) {
      var otherColumn = this.columnModel.getPrimaryColumn(field);
      if (otherColumn) {
        return this.getValue(otherColumn, node);
      }
      return null;
    };
    ValueService2.prototype.getKeyForNode = function(col, rowNode) {
      var value = this.getValue(col, rowNode);
      var keyCreator = col.getColDef().keyCreator;
      var result = value;
      if (keyCreator) {
        var keyParams = this.gridOptionsService.addGridCommonParams({
          value,
          colDef: col.getColDef(),
          column: col,
          node: rowNode,
          data: rowNode.data
        });
        result = keyCreator(keyParams);
      }
      if (typeof result === "string" || result == null) {
        return result;
      }
      result = String(result);
      if (result === "[object Object]") {
        warnOnce("a column you are grouping or pivoting by has objects as values. If you want to group by complex objects then either a) use a colDef.keyCreator (se AG Grid docs) or b) to toString() on the object to return a key");
      }
      return result;
    };
    __decorate$T([
      Autowired("expressionService")
    ], ValueService2.prototype, "expressionService", void 0);
    __decorate$T([
      Autowired("columnModel")
    ], ValueService2.prototype, "columnModel", void 0);
    __decorate$T([
      Autowired("valueCache")
    ], ValueService2.prototype, "valueCache", void 0);
    __decorate$T([
      Autowired("dataTypeService")
    ], ValueService2.prototype, "dataTypeService", void 0);
    __decorate$T([
      PostConstruct
    ], ValueService2.prototype, "init", null);
    ValueService2 = __decorate$T([
      Bean("valueService")
    ], ValueService2);
    return ValueService2;
  }(BeanStub)
);
var __extends$R = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$S = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param$3 = function(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
};
var ExpressionService = (
  /** @class */
  function(_super) {
    __extends$R(ExpressionService2, _super);
    function ExpressionService2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.expressionToFunctionCache = {};
      return _this;
    }
    ExpressionService2.prototype.setBeans = function(loggerFactory) {
      this.logger = loggerFactory.create("ExpressionService");
    };
    ExpressionService2.prototype.evaluate = function(expression, params) {
      if (typeof expression === "string") {
        return this.evaluateExpression(expression, params);
      } else {
        console.error("AG Grid: value should be either a string or a function", expression);
      }
    };
    ExpressionService2.prototype.evaluateExpression = function(expression, params) {
      try {
        var javaScriptFunction = this.createExpressionFunction(expression);
        var result = javaScriptFunction(params.value, params.context, params.oldValue, params.newValue, params.value, params.node, params.data, params.colDef, params.rowIndex, params.api, params.columnApi, params.getValue, params.column, params.columnGroup);
        return result;
      } catch (e) {
        console.log("Processing of the expression failed");
        console.log("Expression = " + expression);
        console.log("Params =", params);
        console.log("Exception = " + e);
        return null;
      }
    };
    ExpressionService2.prototype.createExpressionFunction = function(expression) {
      if (this.expressionToFunctionCache[expression]) {
        return this.expressionToFunctionCache[expression];
      }
      var functionBody = this.createFunctionBody(expression);
      var theFunction = new Function("x, ctx, oldValue, newValue, value, node, data, colDef, rowIndex, api, columnApi, getValue, column, columnGroup", functionBody);
      this.expressionToFunctionCache[expression] = theFunction;
      return theFunction;
    };
    ExpressionService2.prototype.createFunctionBody = function(expression) {
      if (expression.indexOf("return") >= 0) {
        return expression;
      } else {
        return "return " + expression + ";";
      }
    };
    __decorate$S([
      __param$3(0, Qualifier("loggerFactory"))
    ], ExpressionService2.prototype, "setBeans", null);
    ExpressionService2 = __decorate$S([
      Bean("expressionService")
    ], ExpressionService2);
    return ExpressionService2;
  }(BeanStub)
);
var __extends$Q = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$R = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TemplateService = (
  /** @class */
  function(_super) {
    __extends$Q(TemplateService2, _super);
    function TemplateService2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.templateCache = {};
      _this.waitingCallbacks = {};
      return _this;
    }
    TemplateService2.prototype.getTemplate = function(url, callback) {
      var templateFromCache = this.templateCache[url];
      if (templateFromCache) {
        return templateFromCache;
      }
      var callbackList = this.waitingCallbacks[url];
      var that = this;
      if (!callbackList) {
        callbackList = [];
        this.waitingCallbacks[url] = callbackList;
        var client = new XMLHttpRequest();
        client.onload = function() {
          that.handleHttpResult(this, url);
        };
        client.open("GET", url);
        client.send();
      }
      if (callback) {
        callbackList.push(callback);
      }
      return null;
    };
    TemplateService2.prototype.handleHttpResult = function(httpResult, url) {
      if (httpResult.status !== 200 || httpResult.response === null) {
        console.warn("AG Grid: Unable to get template error ".concat(httpResult.status, " - ").concat(url));
        return;
      }
      this.templateCache[url] = httpResult.response || httpResult.responseText;
      var callbacks = this.waitingCallbacks[url];
      for (var i = 0; i < callbacks.length; i++) {
        var callback = callbacks[i];
        callback();
      }
    };
    TemplateService2 = __decorate$R([
      Bean("templateService")
    ], TemplateService2);
    return TemplateService2;
  }(BeanStub)
);
var __extends$P = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$Q = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param$2 = function(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
};
var LoggerFactory = (
  /** @class */
  function(_super) {
    __extends$P(LoggerFactory2, _super);
    function LoggerFactory2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    LoggerFactory2.prototype.setBeans = function(gridOptionsService) {
      this.logging = gridOptionsService.get("debug");
    };
    LoggerFactory2.prototype.create = function(name) {
      return new Logger(name, this.isLogging.bind(this));
    };
    LoggerFactory2.prototype.isLogging = function() {
      return this.logging;
    };
    __decorate$Q([
      __param$2(0, Qualifier("gridOptionsService"))
    ], LoggerFactory2.prototype, "setBeans", null);
    LoggerFactory2 = __decorate$Q([
      Bean("loggerFactory")
    ], LoggerFactory2);
    return LoggerFactory2;
  }(BeanStub)
);
var Logger = (
  /** @class */
  function() {
    function Logger2(name, isLoggingFunc) {
      this.name = name;
      this.isLoggingFunc = isLoggingFunc;
    }
    Logger2.prototype.isLogging = function() {
      return this.isLoggingFunc();
    };
    Logger2.prototype.log = function(message) {
      if (this.isLoggingFunc()) {
        console.log("AG Grid." + this.name + ": " + message);
      }
    };
    return Logger2;
  }()
);
var __extends$O = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$P = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var GridCtrl = (
  /** @class */
  function(_super) {
    __extends$O(GridCtrl2, _super);
    function GridCtrl2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    GridCtrl2.prototype.setComp = function(view, eGridDiv, eGui) {
      var _this = this;
      this.view = view;
      this.eGridHostDiv = eGridDiv;
      this.eGui = eGui;
      this.eGui.setAttribute("grid-id", this.context.getGridId());
      this.dragAndDropService.addDropTarget({
        getContainer: function() {
          return _this.eGui;
        },
        isInterestedIn: function(type) {
          return type === DragSourceType.HeaderCell || type === DragSourceType.ToolPanel;
        },
        getIconName: function() {
          return DragAndDropService.ICON_NOT_ALLOWED;
        }
      });
      this.mouseEventService.stampTopLevelGridCompWithGridInstance(eGridDiv);
      this.createManagedBean(new LayoutFeature(this.view));
      this.addRtlSupport();
      var unsubscribeFromResize = this.resizeObserverService.observeResize(this.eGridHostDiv, this.onGridSizeChanged.bind(this));
      this.addDestroyFunc(function() {
        return unsubscribeFromResize();
      });
      this.ctrlsService.registerGridCtrl(this);
    };
    GridCtrl2.prototype.isDetailGrid = function() {
      var _a;
      var el = this.focusService.findTabbableParent(this.getGui());
      return ((_a = el === null || el === void 0 ? void 0 : el.getAttribute("row-id")) === null || _a === void 0 ? void 0 : _a.startsWith("detail")) || false;
    };
    GridCtrl2.prototype.showDropZones = function() {
      return ModuleRegistry.__isRegistered(ModuleNames.RowGroupingModule, this.context.getGridId());
    };
    GridCtrl2.prototype.showSideBar = function() {
      return ModuleRegistry.__isRegistered(ModuleNames.SideBarModule, this.context.getGridId());
    };
    GridCtrl2.prototype.showStatusBar = function() {
      return ModuleRegistry.__isRegistered(ModuleNames.StatusBarModule, this.context.getGridId());
    };
    GridCtrl2.prototype.showWatermark = function() {
      return ModuleRegistry.__isRegistered(ModuleNames.EnterpriseCoreModule, this.context.getGridId());
    };
    GridCtrl2.prototype.onGridSizeChanged = function() {
      var event = {
        type: Events.EVENT_GRID_SIZE_CHANGED,
        clientWidth: this.eGridHostDiv.clientWidth,
        clientHeight: this.eGridHostDiv.clientHeight
      };
      this.eventService.dispatchEvent(event);
    };
    GridCtrl2.prototype.addRtlSupport = function() {
      var cssClass = this.gridOptionsService.get("enableRtl") ? "ag-rtl" : "ag-ltr";
      this.view.setRtlClass(cssClass);
    };
    GridCtrl2.prototype.destroyGridUi = function() {
      this.view.destroyGridUi();
    };
    GridCtrl2.prototype.getGui = function() {
      return this.eGui;
    };
    GridCtrl2.prototype.setResizeCursor = function(on) {
      this.view.setCursor(on ? "ew-resize" : null);
    };
    GridCtrl2.prototype.disableUserSelect = function(on) {
      this.view.setUserSelect(on ? "none" : null);
    };
    GridCtrl2.prototype.focusNextInnerContainer = function(backwards) {
      var eDocument = this.gridOptionsService.getDocument();
      var focusableContainers = this.view.getFocusableContainers();
      var idxWithFocus = focusableContainers.findIndex(function(container) {
        return container.contains(eDocument.activeElement);
      });
      var nextIdx = idxWithFocus + (backwards ? -1 : 1);
      if (nextIdx <= 0 || nextIdx >= focusableContainers.length) {
        return false;
      }
      return this.focusService.focusInto(focusableContainers[nextIdx]);
    };
    GridCtrl2.prototype.focusInnerElement = function(fromBottom) {
      var focusableContainers = this.view.getFocusableContainers();
      var allColumns = this.columnModel.getAllDisplayedColumns();
      if (fromBottom) {
        if (focusableContainers.length > 1) {
          return this.focusService.focusInto(last(focusableContainers), true);
        }
        var lastColumn = last(allColumns);
        if (this.focusService.focusGridView(lastColumn, true)) {
          return true;
        }
      }
      if (this.gridOptionsService.get("headerHeight") === 0) {
        return this.focusService.focusGridView(allColumns[0]);
      }
      return this.focusService.focusFirstHeader();
    };
    GridCtrl2.prototype.forceFocusOutOfContainer = function(up) {
      if (up === void 0) {
        up = false;
      }
      this.view.forceFocusOutOfContainer(up);
    };
    __decorate$P([
      Autowired("focusService")
    ], GridCtrl2.prototype, "focusService", void 0);
    __decorate$P([
      Autowired("resizeObserverService")
    ], GridCtrl2.prototype, "resizeObserverService", void 0);
    __decorate$P([
      Autowired("columnModel")
    ], GridCtrl2.prototype, "columnModel", void 0);
    __decorate$P([
      Autowired("ctrlsService")
    ], GridCtrl2.prototype, "ctrlsService", void 0);
    __decorate$P([
      Autowired("mouseEventService")
    ], GridCtrl2.prototype, "mouseEventService", void 0);
    __decorate$P([
      Autowired("dragAndDropService")
    ], GridCtrl2.prototype, "dragAndDropService", void 0);
    return GridCtrl2;
  }(BeanStub)
);
var __extends$N = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$O = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var GridComp = (
  /** @class */
  function(_super) {
    __extends$N(GridComp2, _super);
    function GridComp2(eGridDiv) {
      var _this = _super.call(this) || this;
      _this.eGridDiv = eGridDiv;
      return _this;
    }
    GridComp2.prototype.postConstruct = function() {
      var _this = this;
      this.logger = this.loggerFactory.create("GridComp");
      var compProxy = {
        destroyGridUi: function() {
          return _this.destroyBean(_this);
        },
        setRtlClass: function(cssClass) {
          return _this.addCssClass(cssClass);
        },
        forceFocusOutOfContainer: this.forceFocusOutOfContainer.bind(this),
        updateLayoutClasses: this.updateLayoutClasses.bind(this),
        getFocusableContainers: this.getFocusableContainers.bind(this),
        setUserSelect: function(value) {
          _this.getGui().style.userSelect = value != null ? value : "";
          _this.getGui().style.webkitUserSelect = value != null ? value : "";
        },
        setCursor: function(value) {
          _this.getGui().style.cursor = value != null ? value : "";
        }
      };
      this.ctrl = this.createManagedBean(new GridCtrl());
      var template = this.createTemplate();
      this.setTemplate(template);
      this.ctrl.setComp(compProxy, this.eGridDiv, this.getGui());
      this.insertGridIntoDom();
      this.initialiseTabGuard({
        // we want to override the default behaviour to do nothing for onTabKeyDown
        onTabKeyDown: function() {
          return void 0;
        },
        focusInnerElement: function(fromBottom) {
          return _this.ctrl.focusInnerElement(fromBottom);
        }
      });
    };
    GridComp2.prototype.insertGridIntoDom = function() {
      var _this = this;
      var eGui = this.getGui();
      this.eGridDiv.appendChild(eGui);
      this.addDestroyFunc(function() {
        _this.eGridDiv.removeChild(eGui);
        _this.logger.log("Grid removed from DOM");
      });
    };
    GridComp2.prototype.updateLayoutClasses = function(cssClass, params) {
      var eRootWrapperBodyClassList = this.eRootWrapperBody.classList;
      eRootWrapperBodyClassList.toggle(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);
      eRootWrapperBodyClassList.toggle(LayoutCssClasses.NORMAL, params.normal);
      eRootWrapperBodyClassList.toggle(LayoutCssClasses.PRINT, params.print);
      this.addOrRemoveCssClass(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);
      this.addOrRemoveCssClass(LayoutCssClasses.NORMAL, params.normal);
      this.addOrRemoveCssClass(LayoutCssClasses.PRINT, params.print);
    };
    GridComp2.prototype.createTemplate = function() {
      var dropZones = this.ctrl.showDropZones() ? "<ag-grid-header-drop-zones></ag-grid-header-drop-zones>" : "";
      var sideBar = this.ctrl.showSideBar() ? '<ag-side-bar ref="sideBar"></ag-side-bar>' : "";
      var statusBar = this.ctrl.showStatusBar() ? '<ag-status-bar ref="statusBar"></ag-status-bar>' : "";
      var watermark = this.ctrl.showWatermark() ? "<ag-watermark></ag-watermark>" : "";
      var template = (
        /* html */
        '<div class="ag-root-wrapper" role="presentation">\n                '.concat(dropZones, '\n                <div class="ag-root-wrapper-body" ref="rootWrapperBody" role="presentation">\n                    <ag-grid-body ref="gridBody"></ag-grid-body>\n                    ').concat(sideBar, "\n                </div>\n                ").concat(statusBar, "\n                <ag-pagination></ag-pagination>\n                ").concat(watermark, "\n            </div>")
      );
      return template;
    };
    GridComp2.prototype.getFocusableElement = function() {
      return this.eRootWrapperBody;
    };
    GridComp2.prototype.getFocusableContainers = function() {
      var focusableContainers = [
        this.gridBodyComp.getGui()
      ];
      if (this.sideBarComp) {
        focusableContainers.push(this.sideBarComp.getGui());
      }
      return focusableContainers.filter(function(el) {
        return isVisible(el);
      });
    };
    __decorate$O([
      Autowired("loggerFactory")
    ], GridComp2.prototype, "loggerFactory", void 0);
    __decorate$O([
      RefSelector("gridBody")
    ], GridComp2.prototype, "gridBodyComp", void 0);
    __decorate$O([
      RefSelector("sideBar")
    ], GridComp2.prototype, "sideBarComp", void 0);
    __decorate$O([
      RefSelector("rootWrapperBody")
    ], GridComp2.prototype, "eRootWrapperBody", void 0);
    __decorate$O([
      PostConstruct
    ], GridComp2.prototype, "postConstruct", null);
    return GridComp2;
  }(TabGuardComp)
);
var __extends$M = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$N = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __read$c = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$a = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var SortController = (
  /** @class */
  function(_super) {
    __extends$M(SortController2, _super);
    function SortController2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    SortController_1 = SortController2;
    SortController2.prototype.progressSort = function(column, multiSort, source) {
      var nextDirection = this.getNextSortDirection(column);
      this.setSortForColumn(column, nextDirection, multiSort, source);
    };
    SortController2.prototype.setSortForColumn = function(column, sort, multiSort, source) {
      if (sort !== "asc" && sort !== "desc") {
        sort = null;
      }
      var isColumnsSortingCoupledToGroup = this.gridOptionsService.isColumnsSortingCoupledToGroup();
      var columnsToUpdate = [column];
      if (isColumnsSortingCoupledToGroup) {
        if (column.getColDef().showRowGroup) {
          var rowGroupColumns = this.columnModel.getSourceColumnsForGroupColumn(column);
          var sortableRowGroupColumns = rowGroupColumns === null || rowGroupColumns === void 0 ? void 0 : rowGroupColumns.filter(function(col) {
            return col.isSortable();
          });
          if (sortableRowGroupColumns) {
            columnsToUpdate = __spreadArray$a([column], __read$c(sortableRowGroupColumns), false);
          }
        }
      }
      columnsToUpdate.forEach(function(col) {
        return col.setSort(sort, source);
      });
      var doingMultiSort = (multiSort || this.gridOptionsService.get("alwaysMultiSort")) && !this.gridOptionsService.get("suppressMultiSort");
      var updatedColumns = [];
      if (!doingMultiSort) {
        var clearedColumns = this.clearSortBarTheseColumns(columnsToUpdate, source);
        updatedColumns.push.apply(updatedColumns, __spreadArray$a([], __read$c(clearedColumns), false));
      }
      this.updateSortIndex(column);
      updatedColumns.push.apply(updatedColumns, __spreadArray$a([], __read$c(columnsToUpdate), false));
      this.dispatchSortChangedEvents(source, updatedColumns);
    };
    SortController2.prototype.updateSortIndex = function(lastColToChange) {
      var isCoupled = this.gridOptionsService.isColumnsSortingCoupledToGroup();
      var groupParent = this.columnModel.getGroupDisplayColumnForGroup(lastColToChange.getId());
      var lastSortIndexCol = isCoupled ? groupParent || lastColToChange : lastColToChange;
      var allSortedCols = this.getColumnsWithSortingOrdered();
      this.columnModel.getPrimaryAndSecondaryAndAutoColumns().forEach(function(col) {
        return col.setSortIndex(null);
      });
      var allSortedColsWithoutChanges = allSortedCols.filter(function(col) {
        return col !== lastSortIndexCol;
      });
      var sortedColsWithIndices = !!lastSortIndexCol.getSort() ? __spreadArray$a(__spreadArray$a([], __read$c(allSortedColsWithoutChanges), false), [lastSortIndexCol], false) : allSortedColsWithoutChanges;
      sortedColsWithIndices.forEach(function(col, idx) {
        return col.setSortIndex(idx);
      });
    };
    SortController2.prototype.onSortChanged = function(source, columns) {
      this.dispatchSortChangedEvents(source, columns);
    };
    SortController2.prototype.isSortActive = function() {
      var allCols = this.columnModel.getPrimaryAndSecondaryAndAutoColumns();
      var sortedCols = allCols.filter(function(column) {
        return !!column.getSort();
      });
      return sortedCols && sortedCols.length > 0;
    };
    SortController2.prototype.dispatchSortChangedEvents = function(source, columns) {
      var event = {
        type: Events.EVENT_SORT_CHANGED,
        source
      };
      if (columns) {
        event.columns = columns;
      }
      this.eventService.dispatchEvent(event);
    };
    SortController2.prototype.clearSortBarTheseColumns = function(columnsToSkip, source) {
      var clearedColumns = [];
      this.columnModel.getPrimaryAndSecondaryAndAutoColumns().forEach(function(columnToClear) {
        if (!columnsToSkip.includes(columnToClear)) {
          if (!!columnToClear.getSort()) {
            clearedColumns.push(columnToClear);
          }
          columnToClear.setSort(void 0, source);
        }
      });
      return clearedColumns;
    };
    SortController2.prototype.getNextSortDirection = function(column) {
      var sortingOrder;
      if (column.getColDef().sortingOrder) {
        sortingOrder = column.getColDef().sortingOrder;
      } else if (this.gridOptionsService.get("sortingOrder")) {
        sortingOrder = this.gridOptionsService.get("sortingOrder");
      } else {
        sortingOrder = SortController_1.DEFAULT_SORTING_ORDER;
      }
      if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {
        console.warn("AG Grid: sortingOrder must be an array with at least one element, currently it's ".concat(sortingOrder));
        return null;
      }
      var currentIndex = sortingOrder.indexOf(column.getSort());
      var notInArray = currentIndex < 0;
      var lastItemInArray = currentIndex == sortingOrder.length - 1;
      var result;
      if (notInArray || lastItemInArray) {
        result = sortingOrder[0];
      } else {
        result = sortingOrder[currentIndex + 1];
      }
      if (SortController_1.DEFAULT_SORTING_ORDER.indexOf(result) < 0) {
        console.warn("AG Grid: invalid sort type " + result);
        return null;
      }
      return result;
    };
    SortController2.prototype.getIndexedSortMap = function() {
      var _this = this;
      var allSortedCols = this.columnModel.getPrimaryAndSecondaryAndAutoColumns().filter(function(col) {
        return !!col.getSort();
      });
      if (this.columnModel.isPivotMode()) {
        var isSortingLinked_1 = this.gridOptionsService.isColumnsSortingCoupledToGroup();
        allSortedCols = allSortedCols.filter(function(col) {
          var isAggregated = !!col.getAggFunc();
          var isSecondary = !col.isPrimary();
          var isGroup = isSortingLinked_1 ? _this.columnModel.getGroupDisplayColumnForGroup(col.getId()) : col.getColDef().showRowGroup;
          return isAggregated || isSecondary || isGroup;
        });
      }
      var sortedRowGroupCols = this.columnModel.getRowGroupColumns().filter(function(col) {
        return !!col.getSort();
      });
      var isSortLinked = this.gridOptionsService.isColumnsSortingCoupledToGroup() && !!sortedRowGroupCols.length;
      if (isSortLinked) {
        allSortedCols = __spreadArray$a([], __read$c(new Set(
          // if linked sorting, replace all columns with the display group column for index purposes, and ensure uniqueness
          allSortedCols.map(function(col) {
            var _a;
            return (_a = _this.columnModel.getGroupDisplayColumnForGroup(col.getId())) !== null && _a !== void 0 ? _a : col;
          })
        )), false);
      }
      var allColsIndexes = {};
      allSortedCols.forEach(function(col, index) {
        return allColsIndexes[col.getId()] = index;
      });
      allSortedCols.sort(function(a, b) {
        var iA = a.getSortIndex();
        var iB = b.getSortIndex();
        if (iA != null && iB != null) {
          return iA - iB;
        } else if (iA == null && iB == null) {
          var posA = allColsIndexes[a.getId()];
          var posB = allColsIndexes[b.getId()];
          return posA > posB ? 1 : -1;
        } else if (iB == null) {
          return -1;
        } else {
          return 1;
        }
      });
      var indexMap = /* @__PURE__ */ new Map();
      allSortedCols.forEach(function(col, idx) {
        return indexMap.set(col, idx);
      });
      if (isSortLinked) {
        sortedRowGroupCols.forEach(function(col) {
          var groupDisplayCol = _this.columnModel.getGroupDisplayColumnForGroup(col.getId());
          indexMap.set(col, indexMap.get(groupDisplayCol));
        });
      }
      return indexMap;
    };
    SortController2.prototype.getColumnsWithSortingOrdered = function() {
      return __spreadArray$a([], __read$c(this.getIndexedSortMap().entries()), false).sort(function(_a, _b) {
        var _c = __read$c(_a, 2);
        _c[0];
        var idx1 = _c[1];
        var _d = __read$c(_b, 2);
        _d[0];
        var idx2 = _d[1];
        return idx1 - idx2;
      }).map(function(_a) {
        var _b = __read$c(_a, 1), col = _b[0];
        return col;
      });
    };
    SortController2.prototype.getSortModel = function() {
      return this.getColumnsWithSortingOrdered().filter(function(column) {
        return column.getSort();
      }).map(function(column) {
        return {
          sort: column.getSort(),
          colId: column.getId()
        };
      });
    };
    SortController2.prototype.getSortOptions = function() {
      return this.getColumnsWithSortingOrdered().filter(function(column) {
        return column.getSort();
      }).map(function(column) {
        return {
          sort: column.getSort(),
          column
        };
      });
    };
    SortController2.prototype.canColumnDisplayMixedSort = function(column) {
      var isColumnSortCouplingActive = this.gridOptionsService.isColumnsSortingCoupledToGroup();
      var isGroupDisplayColumn = !!column.getColDef().showRowGroup;
      return isColumnSortCouplingActive && isGroupDisplayColumn;
    };
    SortController2.prototype.getDisplaySortForColumn = function(column) {
      var linkedColumns = this.columnModel.getSourceColumnsForGroupColumn(column);
      if (!this.canColumnDisplayMixedSort(column) || !(linkedColumns === null || linkedColumns === void 0 ? void 0 : linkedColumns.length)) {
        return column.getSort();
      }
      var columnHasUniqueData = column.getColDef().field != null || !!column.getColDef().valueGetter;
      var sortableColumns = columnHasUniqueData ? __spreadArray$a([column], __read$c(linkedColumns), false) : linkedColumns;
      var firstSort = sortableColumns[0].getSort();
      var allMatch = sortableColumns.every(function(col) {
        return col.getSort() == firstSort;
      });
      if (!allMatch) {
        return "mixed";
      }
      return firstSort;
    };
    SortController2.prototype.getDisplaySortIndexForColumn = function(column) {
      return this.getIndexedSortMap().get(column);
    };
    var SortController_1;
    SortController2.DEFAULT_SORTING_ORDER = ["asc", "desc", null];
    __decorate$N([
      Autowired("columnModel")
    ], SortController2.prototype, "columnModel", void 0);
    SortController2 = SortController_1 = __decorate$N([
      Bean("sortController")
    ], SortController2);
    return SortController2;
  }(BeanStub)
);
var __extends$L = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$4 = function() {
  __assign$4 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$4.apply(this, arguments);
};
var __decorate$M = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FocusService = (
  /** @class */
  function(_super) {
    __extends$L(FocusService2, _super);
    function FocusService2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    FocusService_1 = FocusService2;
    FocusService2.addKeyboardModeEvents = function(doc) {
      if (this.instanceCount > 0) {
        return;
      }
      doc.addEventListener("keydown", FocusService_1.toggleKeyboardMode);
      doc.addEventListener("mousedown", FocusService_1.toggleKeyboardMode);
    };
    FocusService2.removeKeyboardModeEvents = function(doc) {
      if (this.instanceCount > 0)
        return;
      doc.addEventListener("keydown", FocusService_1.toggleKeyboardMode);
      doc.addEventListener("mousedown", FocusService_1.toggleKeyboardMode);
    };
    FocusService2.toggleKeyboardMode = function(event) {
      var isKeyboardActive = FocusService_1.keyboardModeActive;
      var isKeyboardEvent = event.type === "keydown";
      if (isKeyboardEvent) {
        if (event.ctrlKey || event.metaKey || event.altKey) {
          return;
        }
      }
      if (isKeyboardActive === isKeyboardEvent) {
        return;
      }
      FocusService_1.keyboardModeActive = isKeyboardEvent;
    };
    FocusService2.unregisterGridCompController = function(doc) {
      FocusService_1.removeKeyboardModeEvents(doc);
    };
    FocusService2.prototype.init = function() {
      var _this = this;
      var clearFocusedCellListener = this.clearFocusedCell.bind(this);
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, clearFocusedCellListener);
      this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnEverythingChanged.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, clearFocusedCellListener);
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, clearFocusedCellListener);
      this.registerKeyboardFocusEvents();
      this.ctrlsService.whenReady(function(p) {
        _this.gridCtrl = p.gridCtrl;
      });
    };
    FocusService2.prototype.registerKeyboardFocusEvents = function() {
      var eDocument = this.gridOptionsService.getDocument();
      FocusService_1.addKeyboardModeEvents(eDocument);
      FocusService_1.instanceCount++;
      this.addDestroyFunc(function() {
        FocusService_1.instanceCount--;
        FocusService_1.unregisterGridCompController(eDocument);
      });
    };
    FocusService2.prototype.onColumnEverythingChanged = function() {
      if (!this.focusedCellPosition) {
        return;
      }
      var col = this.focusedCellPosition.column;
      var colFromColumnModel = this.columnModel.getGridColumn(col.getId());
      if (col !== colFromColumnModel) {
        this.clearFocusedCell();
      }
    };
    FocusService2.prototype.isKeyboardMode = function() {
      return FocusService_1.keyboardModeActive;
    };
    FocusService2.prototype.getFocusCellToUseAfterRefresh = function() {
      var eDocument = this.gridOptionsService.getDocument();
      if (this.gridOptionsService.get("suppressFocusAfterRefresh") || !this.focusedCellPosition) {
        return null;
      }
      if (this.isDomDataMissingInHierarchy(eDocument.activeElement, RowCtrl.DOM_DATA_KEY_ROW_CTRL)) {
        return null;
      }
      return this.focusedCellPosition;
    };
    FocusService2.prototype.getFocusHeaderToUseAfterRefresh = function() {
      var eDocument = this.gridOptionsService.getDocument();
      if (this.gridOptionsService.get("suppressFocusAfterRefresh") || !this.focusedHeaderPosition) {
        return null;
      }
      if (this.isDomDataMissingInHierarchy(eDocument.activeElement, AbstractHeaderCellCtrl.DOM_DATA_KEY_HEADER_CTRL)) {
        return null;
      }
      return this.focusedHeaderPosition;
    };
    FocusService2.prototype.isDomDataMissingInHierarchy = function(eBrowserCell, key) {
      var ePointer = eBrowserCell;
      while (ePointer) {
        var data = this.gridOptionsService.getDomData(ePointer, key);
        if (data) {
          return false;
        }
        ePointer = ePointer.parentNode;
      }
      return true;
    };
    FocusService2.prototype.getFocusedCell = function() {
      return this.focusedCellPosition;
    };
    FocusService2.prototype.shouldRestoreFocus = function(cell) {
      var _this = this;
      if (this.isCellRestoreFocused(cell)) {
        setTimeout(function() {
          _this.restoredFocusedCellPosition = null;
        }, 0);
        return true;
      }
      return false;
    };
    FocusService2.prototype.isCellRestoreFocused = function(cellPosition) {
      if (this.restoredFocusedCellPosition == null) {
        return false;
      }
      return this.cellPositionUtils.equals(cellPosition, this.restoredFocusedCellPosition);
    };
    FocusService2.prototype.setRestoreFocusedCell = function(cellPosition) {
      if (this.getFrameworkOverrides().renderingEngine === "react") {
        this.restoredFocusedCellPosition = cellPosition;
      }
    };
    FocusService2.prototype.getFocusEventParams = function() {
      var _a = this.focusedCellPosition, rowIndex = _a.rowIndex, rowPinned = _a.rowPinned, column = _a.column;
      var params = {
        rowIndex,
        rowPinned,
        column,
        isFullWidthCell: false
      };
      var rowCtrl = this.rowRenderer.getRowByPosition({ rowIndex, rowPinned });
      if (rowCtrl) {
        params.isFullWidthCell = rowCtrl.isFullWidth();
      }
      return params;
    };
    FocusService2.prototype.clearFocusedCell = function() {
      this.restoredFocusedCellPosition = null;
      if (this.focusedCellPosition == null) {
        return;
      }
      var event = __assign$4({ type: Events.EVENT_CELL_FOCUS_CLEARED }, this.getFocusEventParams());
      this.focusedCellPosition = null;
      this.eventService.dispatchEvent(event);
    };
    FocusService2.prototype.setFocusedCell = function(params) {
      var column = params.column, rowIndex = params.rowIndex, rowPinned = params.rowPinned, _a = params.forceBrowserFocus, forceBrowserFocus = _a === void 0 ? false : _a, _b = params.preventScrollOnBrowserFocus, preventScrollOnBrowserFocus = _b === void 0 ? false : _b;
      var gridColumn = this.columnModel.getGridColumn(column);
      if (!gridColumn) {
        this.focusedCellPosition = null;
        return;
      }
      this.focusedCellPosition = gridColumn ? {
        rowIndex,
        rowPinned: makeNull(rowPinned),
        column: gridColumn
      } : null;
      var event = __assign$4(__assign$4({ type: Events.EVENT_CELL_FOCUSED }, this.getFocusEventParams()), { forceBrowserFocus, preventScrollOnBrowserFocus, floating: null });
      this.eventService.dispatchEvent(event);
    };
    FocusService2.prototype.isCellFocused = function(cellPosition) {
      if (this.focusedCellPosition == null) {
        return false;
      }
      return this.cellPositionUtils.equals(cellPosition, this.focusedCellPosition);
    };
    FocusService2.prototype.isRowNodeFocused = function(rowNode) {
      return this.isRowFocused(rowNode.rowIndex, rowNode.rowPinned);
    };
    FocusService2.prototype.isHeaderWrapperFocused = function(headerCtrl) {
      if (this.focusedHeaderPosition == null) {
        return false;
      }
      var column = headerCtrl.getColumnGroupChild();
      var headerRowIndex = headerCtrl.getRowIndex();
      var pinned = headerCtrl.getPinned();
      var _a = this.focusedHeaderPosition, focusedColumn = _a.column, focusedHeaderRowIndex = _a.headerRowIndex;
      return column === focusedColumn && headerRowIndex === focusedHeaderRowIndex && pinned == focusedColumn.getPinned();
    };
    FocusService2.prototype.clearFocusedHeader = function() {
      this.focusedHeaderPosition = null;
    };
    FocusService2.prototype.getFocusedHeader = function() {
      return this.focusedHeaderPosition;
    };
    FocusService2.prototype.setFocusedHeader = function(headerRowIndex, column) {
      this.focusedHeaderPosition = { headerRowIndex, column };
    };
    FocusService2.prototype.focusHeaderPosition = function(params) {
      var direction = params.direction, fromTab = params.fromTab, allowUserOverride = params.allowUserOverride, event = params.event, fromCell = params.fromCell;
      var headerPosition = params.headerPosition;
      if (fromCell && this.filterManager.isAdvancedFilterHeaderActive()) {
        return this.focusAdvancedFilter(headerPosition);
      }
      if (allowUserOverride) {
        var currentPosition = this.getFocusedHeader();
        var headerRowCount = this.headerNavigationService.getHeaderRowCount();
        if (fromTab) {
          var userFunc = this.gridOptionsService.getCallback("tabToNextHeader");
          if (userFunc) {
            var params_1 = {
              backwards: direction === "Before",
              previousHeaderPosition: currentPosition,
              nextHeaderPosition: headerPosition,
              headerRowCount
            };
            headerPosition = userFunc(params_1);
          }
        } else {
          var userFunc = this.gridOptionsService.getCallback("navigateToNextHeader");
          if (userFunc && event) {
            var params_2 = {
              key: event.key,
              previousHeaderPosition: currentPosition,
              nextHeaderPosition: headerPosition,
              headerRowCount,
              event
            };
            headerPosition = userFunc(params_2);
          }
        }
      }
      if (!headerPosition) {
        return false;
      }
      if (headerPosition.headerRowIndex === -1) {
        if (this.filterManager.isAdvancedFilterHeaderActive()) {
          return this.focusAdvancedFilter(headerPosition);
        } else {
          return this.focusGridView(headerPosition.column);
        }
      }
      this.headerNavigationService.scrollToColumn(headerPosition.column, direction);
      var headerRowContainerCtrl = this.ctrlsService.getHeaderRowContainerCtrl(headerPosition.column.getPinned());
      var focusSuccess = headerRowContainerCtrl.focusHeader(headerPosition.headerRowIndex, headerPosition.column, event);
      return focusSuccess;
    };
    FocusService2.prototype.focusFirstHeader = function() {
      var firstColumn = this.columnModel.getAllDisplayedColumns()[0];
      if (!firstColumn) {
        return false;
      }
      if (firstColumn.getParent()) {
        firstColumn = this.columnModel.getColumnGroupAtLevel(firstColumn, 0);
      }
      return this.focusHeaderPosition({
        headerPosition: { headerRowIndex: 0, column: firstColumn }
      });
    };
    FocusService2.prototype.focusLastHeader = function(event) {
      var headerRowIndex = this.headerNavigationService.getHeaderRowCount() - 1;
      var column = last(this.columnModel.getAllDisplayedColumns());
      return this.focusHeaderPosition({
        headerPosition: { headerRowIndex, column },
        event
      });
    };
    FocusService2.prototype.focusPreviousFromFirstCell = function(event) {
      if (this.filterManager.isAdvancedFilterHeaderActive()) {
        return this.focusAdvancedFilter(null);
      }
      return this.focusLastHeader(event);
    };
    FocusService2.prototype.isAnyCellFocused = function() {
      return !!this.focusedCellPosition;
    };
    FocusService2.prototype.isRowFocused = function(rowIndex, floating) {
      if (this.focusedCellPosition == null) {
        return false;
      }
      return this.focusedCellPosition.rowIndex === rowIndex && this.focusedCellPosition.rowPinned === makeNull(floating);
    };
    FocusService2.prototype.findFocusableElements = function(rootNode, exclude, onlyUnmanaged) {
      if (onlyUnmanaged === void 0) {
        onlyUnmanaged = false;
      }
      var focusableString = FOCUSABLE_SELECTOR;
      var excludeString = FOCUSABLE_EXCLUDE;
      if (exclude) {
        excludeString += ", " + exclude;
      }
      if (onlyUnmanaged) {
        excludeString += ', [tabindex="-1"]';
      }
      var nodes = Array.prototype.slice.apply(rootNode.querySelectorAll(focusableString)).filter(function(node) {
        return isVisible(node);
      });
      var excludeNodes = Array.prototype.slice.apply(rootNode.querySelectorAll(excludeString));
      if (!excludeNodes.length) {
        return nodes;
      }
      var diff = function(a, b) {
        return a.filter(function(element) {
          return b.indexOf(element) === -1;
        });
      };
      return diff(nodes, excludeNodes);
    };
    FocusService2.prototype.focusInto = function(rootNode, up, onlyUnmanaged) {
      if (up === void 0) {
        up = false;
      }
      if (onlyUnmanaged === void 0) {
        onlyUnmanaged = false;
      }
      var focusableElements = this.findFocusableElements(rootNode, null, onlyUnmanaged);
      var toFocus = up ? last(focusableElements) : focusableElements[0];
      if (toFocus) {
        toFocus.focus({ preventScroll: true });
        return true;
      }
      return false;
    };
    FocusService2.prototype.findFocusableElementBeforeTabGuard = function(rootNode, referenceElement) {
      if (!referenceElement) {
        return null;
      }
      var focusableElements = this.findFocusableElements(rootNode);
      var referenceIndex = focusableElements.indexOf(referenceElement);
      if (referenceIndex === -1) {
        return null;
      }
      var lastTabGuardIndex = -1;
      for (var i = referenceIndex - 1; i >= 0; i--) {
        if (focusableElements[i].classList.contains(TabGuardClassNames.TAB_GUARD_TOP)) {
          lastTabGuardIndex = i;
          break;
        }
      }
      if (lastTabGuardIndex <= 0) {
        return null;
      }
      return focusableElements[lastTabGuardIndex - 1];
    };
    FocusService2.prototype.findNextFocusableElement = function(rootNode, onlyManaged, backwards) {
      if (rootNode === void 0) {
        rootNode = this.eGridDiv;
      }
      var focusable = this.findFocusableElements(rootNode, onlyManaged ? ':not([tabindex="-1"])' : null);
      var eDocument = this.gridOptionsService.getDocument();
      var activeEl = eDocument.activeElement;
      var currentIndex;
      if (onlyManaged) {
        currentIndex = focusable.findIndex(function(el) {
          return el.contains(activeEl);
        });
      } else {
        currentIndex = focusable.indexOf(activeEl);
      }
      var nextIndex = currentIndex + (backwards ? -1 : 1);
      if (nextIndex < 0 || nextIndex >= focusable.length) {
        return null;
      }
      return focusable[nextIndex];
    };
    FocusService2.prototype.isTargetUnderManagedComponent = function(rootNode, target) {
      if (!target) {
        return false;
      }
      var managedContainers = rootNode.querySelectorAll(".".concat(ManagedFocusFeature.FOCUS_MANAGED_CLASS));
      if (!managedContainers.length) {
        return false;
      }
      for (var i = 0; i < managedContainers.length; i++) {
        if (managedContainers[i].contains(target)) {
          return true;
        }
      }
      return false;
    };
    FocusService2.prototype.findTabbableParent = function(node, limit) {
      if (limit === void 0) {
        limit = 5;
      }
      var counter = 0;
      while (node && getTabIndex(node) === null && ++counter <= limit) {
        node = node.parentElement;
      }
      if (getTabIndex(node) === null) {
        return null;
      }
      return node;
    };
    FocusService2.prototype.focusGridView = function(column, backwards) {
      if (this.gridOptionsService.get("suppressCellFocus")) {
        if (backwards) {
          return this.focusLastHeader();
        }
        return this.focusNextGridCoreContainer(false);
      }
      var nextRow = backwards ? this.rowPositionUtils.getLastRow() : this.rowPositionUtils.getFirstRow();
      if (!nextRow) {
        return false;
      }
      var rowIndex = nextRow.rowIndex, rowPinned = nextRow.rowPinned;
      var focusedHeader = this.getFocusedHeader();
      if (!column && focusedHeader) {
        column = focusedHeader.column;
      }
      if (rowIndex == null || !column) {
        return false;
      }
      this.navigationService.ensureCellVisible({ rowIndex, column, rowPinned });
      this.setFocusedCell({
        rowIndex,
        column,
        rowPinned: makeNull(rowPinned),
        forceBrowserFocus: true
      });
      if (this.rangeService) {
        var cellPosition = { rowIndex, rowPinned, column };
        this.rangeService.setRangeToCell(cellPosition);
      }
      return true;
    };
    FocusService2.prototype.focusNextGridCoreContainer = function(backwards, forceOut) {
      if (forceOut === void 0) {
        forceOut = false;
      }
      if (!forceOut && this.gridCtrl.focusNextInnerContainer(backwards)) {
        return true;
      }
      if (forceOut || !backwards && !this.gridCtrl.isDetailGrid()) {
        this.gridCtrl.forceFocusOutOfContainer(backwards);
      }
      return false;
    };
    FocusService2.prototype.focusAdvancedFilter = function(position) {
      this.advancedFilterFocusColumn = position === null || position === void 0 ? void 0 : position.column;
      return this.advancedFilterService.getCtrl().focusHeaderComp();
    };
    FocusService2.prototype.focusNextFromAdvancedFilter = function(backwards, forceFirstColumn) {
      var _a, _b;
      var column = (_a = forceFirstColumn ? void 0 : this.advancedFilterFocusColumn) !== null && _a !== void 0 ? _a : (_b = this.columnModel.getAllDisplayedColumns()) === null || _b === void 0 ? void 0 : _b[0];
      if (backwards) {
        return this.focusHeaderPosition({
          headerPosition: {
            column,
            headerRowIndex: this.headerNavigationService.getHeaderRowCount() - 1
          }
        });
      } else {
        return this.focusGridView(column);
      }
    };
    FocusService2.prototype.clearAdvancedFilterColumn = function() {
      this.advancedFilterFocusColumn = void 0;
    };
    var FocusService_1;
    FocusService2.keyboardModeActive = false;
    FocusService2.instanceCount = 0;
    __decorate$M([
      Autowired("eGridDiv")
    ], FocusService2.prototype, "eGridDiv", void 0);
    __decorate$M([
      Autowired("columnModel")
    ], FocusService2.prototype, "columnModel", void 0);
    __decorate$M([
      Autowired("headerNavigationService")
    ], FocusService2.prototype, "headerNavigationService", void 0);
    __decorate$M([
      Autowired("rowRenderer")
    ], FocusService2.prototype, "rowRenderer", void 0);
    __decorate$M([
      Autowired("rowPositionUtils")
    ], FocusService2.prototype, "rowPositionUtils", void 0);
    __decorate$M([
      Autowired("cellPositionUtils")
    ], FocusService2.prototype, "cellPositionUtils", void 0);
    __decorate$M([
      Optional("rangeService")
    ], FocusService2.prototype, "rangeService", void 0);
    __decorate$M([
      Autowired("navigationService")
    ], FocusService2.prototype, "navigationService", void 0);
    __decorate$M([
      Autowired("ctrlsService")
    ], FocusService2.prototype, "ctrlsService", void 0);
    __decorate$M([
      Autowired("filterManager")
    ], FocusService2.prototype, "filterManager", void 0);
    __decorate$M([
      Optional("advancedFilterService")
    ], FocusService2.prototype, "advancedFilterService", void 0);
    __decorate$M([
      PostConstruct
    ], FocusService2.prototype, "init", null);
    FocusService2 = FocusService_1 = __decorate$M([
      Bean("focusService")
    ], FocusService2);
    return FocusService2;
  }(BeanStub)
);
var __extends$K = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$L = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ColumnHoverService = (
  /** @class */
  function(_super) {
    __extends$K(ColumnHoverService2, _super);
    function ColumnHoverService2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ColumnHoverService2.prototype.setMouseOver = function(columns) {
      this.selectedColumns = columns;
      var event = {
        type: Events.EVENT_COLUMN_HOVER_CHANGED
      };
      this.eventService.dispatchEvent(event);
    };
    ColumnHoverService2.prototype.clearMouseOver = function() {
      this.selectedColumns = null;
      var event = {
        type: Events.EVENT_COLUMN_HOVER_CHANGED
      };
      this.eventService.dispatchEvent(event);
    };
    ColumnHoverService2.prototype.isHovered = function(column) {
      return !!this.selectedColumns && this.selectedColumns.indexOf(column) >= 0;
    };
    ColumnHoverService2 = __decorate$L([
      Bean("columnHoverService")
    ], ColumnHoverService2);
    return ColumnHoverService2;
  }(BeanStub)
);
var __extends$J = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$K = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ColumnAnimationService = (
  /** @class */
  function(_super) {
    __extends$J(ColumnAnimationService2, _super);
    function ColumnAnimationService2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.executeNextFuncs = [];
      _this.executeLaterFuncs = [];
      _this.active = false;
      _this.animationThreadCount = 0;
      return _this;
    }
    ColumnAnimationService2.prototype.postConstruct = function() {
      var _this = this;
      this.ctrlsService.whenReady(function(p) {
        return _this.gridBodyCtrl = p.gridBodyCtrl;
      });
    };
    ColumnAnimationService2.prototype.isActive = function() {
      return this.active;
    };
    ColumnAnimationService2.prototype.start = function() {
      if (this.active) {
        return;
      }
      if (this.gridOptionsService.get("suppressColumnMoveAnimation")) {
        return;
      }
      if (this.gridOptionsService.get("enableRtl")) {
        return;
      }
      this.ensureAnimationCssClassPresent();
      this.active = true;
    };
    ColumnAnimationService2.prototype.finish = function() {
      if (!this.active) {
        return;
      }
      this.flush();
      this.active = false;
    };
    ColumnAnimationService2.prototype.executeNextVMTurn = function(func) {
      if (this.active) {
        this.executeNextFuncs.push(func);
      } else {
        func();
      }
    };
    ColumnAnimationService2.prototype.executeLaterVMTurn = function(func) {
      if (this.active) {
        this.executeLaterFuncs.push(func);
      } else {
        func();
      }
    };
    ColumnAnimationService2.prototype.ensureAnimationCssClassPresent = function() {
      var _this = this;
      this.animationThreadCount++;
      var animationThreadCountCopy = this.animationThreadCount;
      this.gridBodyCtrl.setColumnMovingCss(true);
      this.executeLaterFuncs.push(function() {
        if (_this.animationThreadCount === animationThreadCountCopy) {
          _this.gridBodyCtrl.setColumnMovingCss(false);
        }
      });
    };
    ColumnAnimationService2.prototype.flush = function() {
      var nowFuncs = this.executeNextFuncs;
      this.executeNextFuncs = [];
      var waitFuncs = this.executeLaterFuncs;
      this.executeLaterFuncs = [];
      if (nowFuncs.length === 0 && waitFuncs.length === 0) {
        return;
      }
      this.getFrameworkOverrides().wrapIncoming(function() {
        window.setTimeout(function() {
          return nowFuncs.forEach(function(func) {
            return func();
          });
        }, 0);
        window.setTimeout(function() {
          return waitFuncs.forEach(function(func) {
            return func();
          });
        }, 300);
      });
    };
    __decorate$K([
      Autowired("ctrlsService")
    ], ColumnAnimationService2.prototype, "ctrlsService", void 0);
    __decorate$K([
      PostConstruct
    ], ColumnAnimationService2.prototype, "postConstruct", null);
    ColumnAnimationService2 = __decorate$K([
      Bean("columnAnimationService")
    ], ColumnAnimationService2);
    return ColumnAnimationService2;
  }(BeanStub)
);
var __extends$I = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$J = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PaginationAutoPageSizeService = (
  /** @class */
  function(_super) {
    __extends$I(PaginationAutoPageSizeService2, _super);
    function PaginationAutoPageSizeService2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    PaginationAutoPageSizeService2.prototype.postConstruct = function() {
      var _this = this;
      this.ctrlsService.whenReady(function(p) {
        _this.centerRowContainerCon = p.centerRowContainerCtrl;
        _this.addManagedListener(_this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, _this.checkPageSize.bind(_this));
        _this.addManagedListener(_this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, _this.checkPageSize.bind(_this));
        _this.addManagedPropertyListener("paginationAutoPageSize", _this.onPaginationAutoSizeChanged.bind(_this));
        _this.checkPageSize();
      });
    };
    PaginationAutoPageSizeService2.prototype.notActive = function() {
      return !this.gridOptionsService.get("paginationAutoPageSize") || this.centerRowContainerCon == null;
    };
    PaginationAutoPageSizeService2.prototype.onPaginationAutoSizeChanged = function() {
      if (this.notActive()) {
        this.paginationProxy.unsetAutoCalculatedPageSize();
      } else {
        this.checkPageSize();
      }
    };
    PaginationAutoPageSizeService2.prototype.checkPageSize = function() {
      var _this = this;
      if (this.notActive()) {
        return;
      }
      var bodyHeight = this.centerRowContainerCon.getViewportSizeFeature().getBodyHeight();
      if (bodyHeight > 0) {
        var update_1 = function() {
          var rowHeight = _this.gridOptionsService.getRowHeightAsNumber();
          var newPageSize = Math.floor(bodyHeight / rowHeight);
          _this.paginationProxy.setPageSize(newPageSize, "autoCalculated");
        };
        if (!this.isBodyRendered) {
          update_1();
          this.isBodyRendered = true;
        } else {
          debounce(function() {
            return update_1();
          }, 50)();
        }
      } else {
        this.isBodyRendered = false;
      }
    };
    __decorate$J([
      Autowired("ctrlsService")
    ], PaginationAutoPageSizeService2.prototype, "ctrlsService", void 0);
    __decorate$J([
      Autowired("paginationProxy")
    ], PaginationAutoPageSizeService2.prototype, "paginationProxy", void 0);
    __decorate$J([
      PostConstruct
    ], PaginationAutoPageSizeService2.prototype, "postConstruct", null);
    PaginationAutoPageSizeService2 = __decorate$J([
      Bean("paginationAutoPageSizeService")
    ], PaginationAutoPageSizeService2);
    return PaginationAutoPageSizeService2;
  }(BeanStub)
);
var __extends$H = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$I = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ValueCache = (
  /** @class */
  function(_super) {
    __extends$H(ValueCache2, _super);
    function ValueCache2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.cacheVersion = 0;
      return _this;
    }
    ValueCache2.prototype.init = function() {
      this.active = this.gridOptionsService.get("valueCache");
      this.neverExpires = this.gridOptionsService.get("valueCacheNeverExpires");
    };
    ValueCache2.prototype.onDataChanged = function() {
      if (this.neverExpires) {
        return;
      }
      this.expire();
    };
    ValueCache2.prototype.expire = function() {
      this.cacheVersion++;
    };
    ValueCache2.prototype.setValue = function(rowNode, colId, value) {
      if (this.active) {
        if (rowNode.__cacheVersion !== this.cacheVersion) {
          rowNode.__cacheVersion = this.cacheVersion;
          rowNode.__cacheData = {};
        }
        rowNode.__cacheData[colId] = value;
      }
    };
    ValueCache2.prototype.getValue = function(rowNode, colId) {
      if (!this.active || rowNode.__cacheVersion !== this.cacheVersion) {
        return void 0;
      }
      return rowNode.__cacheData[colId];
    };
    __decorate$I([
      PostConstruct
    ], ValueCache2.prototype, "init", null);
    ValueCache2 = __decorate$I([
      Bean("valueCache")
    ], ValueCache2);
    return ValueCache2;
  }(BeanStub)
);
var __extends$G = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$H = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SOURCE_PASTE = "paste";
var ChangeDetectionService = (
  /** @class */
  function(_super) {
    __extends$G(ChangeDetectionService2, _super);
    function ChangeDetectionService2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeDetectionService2.prototype.init = function() {
      if (this.rowModel.getType() === "clientSide") {
        this.clientSideRowModel = this.rowModel;
      }
      this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged.bind(this));
    };
    ChangeDetectionService2.prototype.onCellValueChanged = function(event) {
      if (event.source === SOURCE_PASTE) {
        return;
      }
      this.doChangeDetection(event.node, event.column);
    };
    ChangeDetectionService2.prototype.doChangeDetection = function(rowNode, column) {
      if (this.gridOptionsService.get("suppressChangeDetection")) {
        return;
      }
      var nodesToRefresh = [rowNode];
      if (this.clientSideRowModel && !rowNode.isRowPinned()) {
        var onlyChangedColumns = this.gridOptionsService.get("aggregateOnlyChangedColumns");
        var changedPath = new ChangedPath(onlyChangedColumns, this.clientSideRowModel.getRootNode());
        changedPath.addParentNode(rowNode.parent, [column]);
        this.clientSideRowModel.doAggregate(changedPath);
        changedPath.forEachChangedNodeDepthFirst(function(rowNode2) {
          nodesToRefresh.push(rowNode2);
        });
      }
      this.rowRenderer.refreshCells({ rowNodes: nodesToRefresh });
    };
    __decorate$H([
      Autowired("rowModel")
    ], ChangeDetectionService2.prototype, "rowModel", void 0);
    __decorate$H([
      Autowired("rowRenderer")
    ], ChangeDetectionService2.prototype, "rowRenderer", void 0);
    __decorate$H([
      PostConstruct
    ], ChangeDetectionService2.prototype, "init", null);
    ChangeDetectionService2 = __decorate$H([
      Bean("changeDetectionService")
    ], ChangeDetectionService2);
    return ChangeDetectionService2;
  }(BeanStub)
);
var __extends$F = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$G = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AgComponentUtils = (
  /** @class */
  function(_super) {
    __extends$F(AgComponentUtils2, _super);
    function AgComponentUtils2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    AgComponentUtils2.prototype.adaptFunction = function(propertyName, jsCompFunc) {
      var metadata = this.componentMetadataProvider.retrieve(propertyName);
      if (metadata && metadata.functionAdapter) {
        return metadata.functionAdapter(jsCompFunc);
      }
      return null;
    };
    AgComponentUtils2.prototype.adaptCellRendererFunction = function(callback) {
      var Adapter = (
        /** @class */
        function() {
          function Adapter2() {
          }
          Adapter2.prototype.refresh = function(params) {
            return false;
          };
          Adapter2.prototype.getGui = function() {
            return this.eGui;
          };
          Adapter2.prototype.init = function(params) {
            var callbackResult = callback(params);
            var type = typeof callbackResult;
            if (type === "string" || type === "number" || type === "boolean") {
              this.eGui = loadTemplate("<span>" + callbackResult + "</span>");
              return;
            }
            if (callbackResult == null) {
              this.eGui = loadTemplate("<span></span>");
              return;
            }
            this.eGui = callbackResult;
          };
          return Adapter2;
        }()
      );
      return Adapter;
    };
    AgComponentUtils2.prototype.doesImplementIComponent = function(candidate) {
      if (!candidate) {
        return false;
      }
      return candidate.prototype && "getGui" in candidate.prototype;
    };
    __decorate$G([
      Autowired("componentMetadataProvider")
    ], AgComponentUtils2.prototype, "componentMetadataProvider", void 0);
    AgComponentUtils2 = __decorate$G([
      Bean("agComponentUtils")
    ], AgComponentUtils2);
    return AgComponentUtils2;
  }(BeanStub)
);
var __extends$E = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$F = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ComponentMetadataProvider = (
  /** @class */
  function(_super) {
    __extends$E(ComponentMetadataProvider2, _super);
    function ComponentMetadataProvider2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ComponentMetadataProvider2.prototype.postConstruct = function() {
      this.componentMetaData = {
        dateComponent: {
          mandatoryMethodList: ["getDate", "setDate"],
          optionalMethodList: ["afterGuiAttached", "setInputPlaceholder", "setInputAriaLabel", "setDisabled", "onParamsUpdated", "refresh"]
        },
        detailCellRenderer: {
          mandatoryMethodList: [],
          optionalMethodList: ["refresh"],
          functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
        },
        headerComponent: {
          mandatoryMethodList: [],
          optionalMethodList: ["refresh"]
        },
        headerGroupComponent: {
          mandatoryMethodList: [],
          optionalMethodList: []
        },
        loadingCellRenderer: {
          mandatoryMethodList: [],
          optionalMethodList: []
        },
        loadingOverlayComponent: {
          mandatoryMethodList: [],
          optionalMethodList: ["refresh"]
        },
        noRowsOverlayComponent: {
          mandatoryMethodList: [],
          optionalMethodList: ["refresh"]
        },
        floatingFilterComponent: {
          mandatoryMethodList: ["onParentModelChanged"],
          optionalMethodList: ["afterGuiAttached", "onParamsUpdated", "refresh"]
        },
        cellRenderer: {
          mandatoryMethodList: [],
          optionalMethodList: ["refresh", "afterGuiAttached"],
          functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
        },
        cellEditor: {
          mandatoryMethodList: ["getValue"],
          optionalMethodList: ["isPopup", "isCancelBeforeStart", "isCancelAfterEnd", "getPopupPosition", "focusIn", "focusOut", "afterGuiAttached", "refresh"]
        },
        innerRenderer: {
          mandatoryMethodList: [],
          optionalMethodList: ["afterGuiAttached"],
          functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
        },
        fullWidthCellRenderer: {
          mandatoryMethodList: [],
          optionalMethodList: ["refresh", "afterGuiAttached"],
          functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
        },
        groupRowRenderer: {
          mandatoryMethodList: [],
          optionalMethodList: ["afterGuiAttached"],
          functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
        },
        filter: {
          mandatoryMethodList: ["isFilterActive", "doesFilterPass", "getModel", "setModel"],
          optionalMethodList: ["afterGuiAttached", "afterGuiDetached", "onNewRowsLoaded", "getModelAsString", "onFloatingFilterChanged", "onAnyFilterChanged", "refresh"]
        },
        statusPanel: {
          mandatoryMethodList: [],
          optionalMethodList: ["refresh"]
        },
        toolPanel: {
          mandatoryMethodList: [],
          optionalMethodList: ["refresh", "getState"]
        },
        tooltipComponent: {
          mandatoryMethodList: [],
          optionalMethodList: []
        }
      };
    };
    ComponentMetadataProvider2.prototype.retrieve = function(name) {
      return this.componentMetaData[name];
    };
    __decorate$F([
      Autowired("agComponentUtils")
    ], ComponentMetadataProvider2.prototype, "agComponentUtils", void 0);
    __decorate$F([
      PostConstruct
    ], ComponentMetadataProvider2.prototype, "postConstruct", null);
    ComponentMetadataProvider2 = __decorate$F([
      Bean("componentMetadataProvider")
    ], ComponentMetadataProvider2);
    return ComponentMetadataProvider2;
  }(BeanStub)
);
var __extends$D = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$E = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __read$b = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$9 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var DEFAULT_ROW_HEIGHT = 25;
var MIN_COL_WIDTH = 10;
var MAT_GRID_SIZE = 8;
var BASE_GRID_SIZE = 4;
var BALHAM_GRID_SIZE = 4;
var ALPINE_GRID_SIZE = 6;
var QUARTZ_ICON_SIZE = 16;
var QUARTZ_FONT_SIZE = 14;
var QUARTZ_GRID_SIZE = 8;
var HARD_CODED_SIZES = {
  // this item is required for custom themes
  "ag-theme-custom": {
    headerHeight: 25,
    headerCellMinWidth: 24,
    listItemHeight: BASE_GRID_SIZE * 5,
    rowHeight: 25,
    chartMenuPanelWidth: 220
  },
  "ag-theme-material": {
    headerHeight: MAT_GRID_SIZE * 7,
    headerCellMinWidth: 48,
    listItemHeight: MAT_GRID_SIZE * 4,
    rowHeight: MAT_GRID_SIZE * 6,
    chartMenuPanelWidth: 240
  },
  "ag-theme-balham": {
    headerHeight: BALHAM_GRID_SIZE * 8,
    headerCellMinWidth: 24,
    listItemHeight: BALHAM_GRID_SIZE * 6,
    rowHeight: BALHAM_GRID_SIZE * 7,
    chartMenuPanelWidth: 220
  },
  "ag-theme-alpine": {
    headerHeight: ALPINE_GRID_SIZE * 8,
    headerCellMinWidth: 36,
    listItemHeight: ALPINE_GRID_SIZE * 4,
    rowHeight: ALPINE_GRID_SIZE * 7,
    chartMenuPanelWidth: 240
  },
  "ag-theme-quartz": {
    headerHeight: QUARTZ_FONT_SIZE + QUARTZ_GRID_SIZE * 4.25,
    headerCellMinWidth: 36,
    listItemHeight: QUARTZ_ICON_SIZE + QUARTZ_GRID_SIZE,
    rowHeight: QUARTZ_FONT_SIZE + QUARTZ_GRID_SIZE * 3.5,
    chartMenuPanelWidth: 260
  }
};
var SASS_PROPERTY_BUILDER = {
  headerHeight: ["ag-header-row"],
  headerCellMinWidth: ["ag-header-cell"],
  listItemHeight: ["ag-virtual-list-item"],
  rowHeight: ["ag-row"],
  chartMenuPanelWidth: ["ag-chart-docked-container"]
};
var Environment = (
  /** @class */
  function(_super) {
    __extends$D(Environment2, _super);
    function Environment2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.calculatedSizes = {};
      return _this;
    }
    Environment2.prototype.postConstruct = function() {
      var _this = this;
      var _a;
      var el = (_a = this.getTheme().el) !== null && _a !== void 0 ? _a : this.eGridDiv;
      this.addManagedPropertyListener("rowHeight", function() {
        return _this.refreshRowHeightVariable();
      });
      this.mutationObserver = new MutationObserver(function() {
        _this.calculatedSizes = {};
        _this.fireGridStylesChangedEvent();
      });
      this.mutationObserver.observe(el || this.eGridDiv, {
        attributes: true,
        attributeFilter: ["class"]
      });
    };
    Environment2.prototype.fireGridStylesChangedEvent = function() {
      var event = {
        type: Events.EVENT_GRID_STYLES_CHANGED
      };
      this.eventService.dispatchEvent(event);
    };
    Environment2.prototype.getSassVariable = function(key) {
      var _a = this.getTheme(), themeFamily = _a.themeFamily, el = _a.el;
      if (!themeFamily || themeFamily.indexOf("ag-theme") !== 0) {
        return;
      }
      if (!this.calculatedSizes) {
        this.calculatedSizes = {};
      }
      if (!this.calculatedSizes[themeFamily]) {
        this.calculatedSizes[themeFamily] = {};
      }
      var size = this.calculatedSizes[themeFamily][key];
      if (size != null) {
        return size;
      }
      this.calculatedSizes[themeFamily][key] = this.calculateValueForSassProperty(key, themeFamily, el);
      return this.calculatedSizes[themeFamily][key];
    };
    Environment2.prototype.calculateValueForSassProperty = function(property, theme, themeElement) {
      var _a;
      var useTheme = "ag-theme-" + (theme.match("material") ? "material" : theme.match("balham") ? "balham" : theme.match("alpine") ? "alpine" : "custom");
      var defaultValue = HARD_CODED_SIZES[useTheme][property];
      var eDocument = this.gridOptionsService.getDocument();
      if (!themeElement) {
        themeElement = this.eGridDiv;
      }
      if (!SASS_PROPERTY_BUILDER[property]) {
        return defaultValue;
      }
      var classList = SASS_PROPERTY_BUILDER[property];
      var div = eDocument.createElement("div");
      var classesFromThemeElement = Array.from(themeElement.classList);
      (_a = div.classList).add.apply(_a, __spreadArray$9([theme], __read$b(classesFromThemeElement), false));
      div.style.position = "absolute";
      var el = classList.reduce(function(prevEl, currentClass) {
        var currentDiv = eDocument.createElement("div");
        currentDiv.style.position = "static";
        currentDiv.classList.add(currentClass);
        prevEl.appendChild(currentDiv);
        return currentDiv;
      }, div);
      var calculatedValue = 0;
      if (eDocument.body) {
        eDocument.body.appendChild(div);
        var sizeName = property.toLowerCase().indexOf("height") !== -1 ? "height" : "width";
        calculatedValue = parseInt(window.getComputedStyle(el)[sizeName], 10);
        eDocument.body.removeChild(div);
      }
      return calculatedValue || defaultValue;
    };
    Environment2.prototype.isThemeDark = function() {
      var theme = this.getTheme().theme;
      return !!theme && theme.indexOf("dark") >= 0;
    };
    Environment2.prototype.chartMenuPanelWidth = function() {
      return this.getSassVariable("chartMenuPanelWidth");
    };
    Environment2.prototype.getTheme = function() {
      var reg = /\bag-(material|(?:theme-([\w\-]*)))\b/g;
      var el = this.eGridDiv;
      var themeMatch = null;
      var allThemes = [];
      while (el) {
        themeMatch = reg.exec(el.className);
        if (!themeMatch) {
          el = el.parentElement || void 0;
        } else {
          var matched = el.className.match(reg);
          if (matched) {
            allThemes = matched;
          }
          break;
        }
      }
      if (!themeMatch) {
        return { allThemes };
      }
      var theme = themeMatch[0];
      return { theme, el, themeFamily: theme.replace(/-dark$/, ""), allThemes };
    };
    Environment2.prototype.getFromTheme = function(defaultValue, sassVariableName) {
      var _a;
      return (_a = this.getSassVariable(sassVariableName)) !== null && _a !== void 0 ? _a : defaultValue;
    };
    Environment2.prototype.getDefaultRowHeight = function() {
      return this.getFromTheme(DEFAULT_ROW_HEIGHT, "rowHeight");
    };
    Environment2.prototype.getListItemHeight = function() {
      return this.getFromTheme(20, "listItemHeight");
    };
    Environment2.prototype.refreshRowHeightVariable = function() {
      var oldRowHeight = this.eGridDiv.style.getPropertyValue("--ag-line-height").trim();
      var height = this.gridOptionsService.get("rowHeight");
      if (height == null || isNaN(height) || !isFinite(height)) {
        if (oldRowHeight !== null) {
          this.eGridDiv.style.setProperty("--ag-line-height", null);
        }
        return -1;
      }
      var newRowHeight = "".concat(height, "px");
      if (oldRowHeight != newRowHeight) {
        this.eGridDiv.style.setProperty("--ag-line-height", newRowHeight);
        return height;
      }
      return oldRowHeight != "" ? parseFloat(oldRowHeight) : -1;
    };
    Environment2.prototype.getMinColWidth = function() {
      var measuredMin = this.getFromTheme(null, "headerCellMinWidth");
      return exists(measuredMin) ? Math.max(measuredMin, MIN_COL_WIDTH) : MIN_COL_WIDTH;
    };
    Environment2.prototype.destroy = function() {
      this.calculatedSizes = null;
      if (this.mutationObserver) {
        this.mutationObserver.disconnect();
      }
      _super.prototype.destroy.call(this);
    };
    __decorate$E([
      Autowired("eGridDiv")
    ], Environment2.prototype, "eGridDiv", void 0);
    __decorate$E([
      PostConstruct
    ], Environment2.prototype, "postConstruct", null);
    Environment2 = __decorate$E([
      Bean("environment")
    ], Environment2);
    return Environment2;
  }(BeanStub)
);
var __extends$C = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$D = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param$1 = function(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
};
var RowContainerHeightService = (
  /** @class */
  function(_super) {
    __extends$C(RowContainerHeightService2, _super);
    function RowContainerHeightService2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.scrollY = 0;
      _this.uiBodyHeight = 0;
      return _this;
    }
    RowContainerHeightService2.prototype.agWire = function(loggerFactory) {
      this.logger = loggerFactory.create("RowContainerHeightService");
    };
    RowContainerHeightService2.prototype.postConstruct = function() {
      this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.updateOffset.bind(this));
      this.maxDivHeight = getMaxDivHeight();
      this.logger.log("maxDivHeight = " + this.maxDivHeight);
    };
    RowContainerHeightService2.prototype.isStretching = function() {
      return this.stretching;
    };
    RowContainerHeightService2.prototype.getDivStretchOffset = function() {
      return this.divStretchOffset;
    };
    RowContainerHeightService2.prototype.updateOffset = function() {
      if (!this.stretching) {
        return;
      }
      var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
      var newScrollY = gridBodyCon.getScrollFeature().getVScrollPosition().top;
      var newBodyHeight = this.getUiBodyHeight();
      var atLeastOneChanged = newScrollY !== this.scrollY || newBodyHeight !== this.uiBodyHeight;
      if (atLeastOneChanged) {
        this.scrollY = newScrollY;
        this.uiBodyHeight = newBodyHeight;
        this.calculateOffset();
      }
    };
    RowContainerHeightService2.prototype.calculateOffset = function() {
      this.setUiContainerHeight(this.maxDivHeight);
      this.pixelsToShave = this.modelHeight - this.uiContainerHeight;
      this.maxScrollY = this.uiContainerHeight - this.uiBodyHeight;
      var scrollPercent = this.scrollY / this.maxScrollY;
      var divStretchOffset = scrollPercent * this.pixelsToShave;
      this.logger.log("Div Stretch Offset = ".concat(divStretchOffset, " (").concat(this.pixelsToShave, " * ").concat(scrollPercent, ")"));
      this.setDivStretchOffset(divStretchOffset);
    };
    RowContainerHeightService2.prototype.setUiContainerHeight = function(height) {
      if (height !== this.uiContainerHeight) {
        this.uiContainerHeight = height;
        this.eventService.dispatchEvent({ type: Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED });
      }
    };
    RowContainerHeightService2.prototype.clearOffset = function() {
      this.setUiContainerHeight(this.modelHeight);
      this.pixelsToShave = 0;
      this.setDivStretchOffset(0);
    };
    RowContainerHeightService2.prototype.setDivStretchOffset = function(newOffset) {
      var newOffsetFloor = typeof newOffset === "number" ? Math.floor(newOffset) : null;
      if (this.divStretchOffset === newOffsetFloor) {
        return;
      }
      this.divStretchOffset = newOffsetFloor;
      this.eventService.dispatchEvent({ type: Events.EVENT_HEIGHT_SCALE_CHANGED });
    };
    RowContainerHeightService2.prototype.setModelHeight = function(modelHeight) {
      this.modelHeight = modelHeight;
      this.stretching = modelHeight != null && this.maxDivHeight > 0 && modelHeight > this.maxDivHeight;
      if (this.stretching) {
        this.calculateOffset();
      } else {
        this.clearOffset();
      }
    };
    RowContainerHeightService2.prototype.getUiContainerHeight = function() {
      return this.uiContainerHeight;
    };
    RowContainerHeightService2.prototype.getRealPixelPosition = function(modelPixel) {
      return modelPixel - this.divStretchOffset;
    };
    RowContainerHeightService2.prototype.getUiBodyHeight = function() {
      var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
      var pos = gridBodyCon.getScrollFeature().getVScrollPosition();
      return pos.bottom - pos.top;
    };
    RowContainerHeightService2.prototype.getScrollPositionForPixel = function(rowTop) {
      if (this.pixelsToShave <= 0) {
        return rowTop;
      }
      var modelMaxScroll = this.modelHeight - this.getUiBodyHeight();
      var scrollPercent = rowTop / modelMaxScroll;
      var scrollPixel = this.maxScrollY * scrollPercent;
      return scrollPixel;
    };
    __decorate$D([
      Autowired("ctrlsService")
    ], RowContainerHeightService2.prototype, "ctrlsService", void 0);
    __decorate$D([
      __param$1(0, Qualifier("loggerFactory"))
    ], RowContainerHeightService2.prototype, "agWire", null);
    __decorate$D([
      PostConstruct
    ], RowContainerHeightService2.prototype, "postConstruct", null);
    RowContainerHeightService2 = __decorate$D([
      Bean("rowContainerHeightService")
    ], RowContainerHeightService2);
    return RowContainerHeightService2;
  }(BeanStub)
);
var __extends$B = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$C = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SelectableService = (
  /** @class */
  function(_super) {
    __extends$B(SelectableService2, _super);
    function SelectableService2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    SelectableService2.prototype.init = function() {
      var _this = this;
      this.addManagedPropertyListener("isRowSelectable", function() {
        return _this.updateSelectable();
      });
    };
    SelectableService2.prototype.updateSelectableAfterGrouping = function() {
      this.updateSelectable(true);
    };
    SelectableService2.prototype.updateSelectable = function(skipLeafNodes) {
      if (skipLeafNodes === void 0) {
        skipLeafNodes = false;
      }
      var isRowSelecting = !!this.gridOptionsService.get("rowSelection");
      var isRowSelectable = this.gridOptionsService.get("isRowSelectable");
      if (!isRowSelecting || !isRowSelectable) {
        return;
      }
      var isGroupSelectsChildren = this.gridOptionsService.get("groupSelectsChildren");
      var isCsrmGroupSelectsChildren = this.rowModel.getType() === "clientSide" && isGroupSelectsChildren;
      var nodesToDeselect = [];
      var nodeCallback = function(node) {
        if (skipLeafNodes && !node.group) {
          return;
        }
        if (isCsrmGroupSelectsChildren && node.group) {
          var hasSelectableChild = node.childrenAfterGroup.some(function(rowNode) {
            return rowNode.selectable === true;
          });
          node.setRowSelectable(hasSelectableChild, true);
          return;
        }
        var rowSelectable = isRowSelectable ? isRowSelectable(node) : true;
        node.setRowSelectable(rowSelectable, true);
        if (!rowSelectable && node.isSelected()) {
          nodesToDeselect.push(node);
        }
      };
      if (isCsrmGroupSelectsChildren) {
        var csrm = this.rowModel;
        var changedPath = new ChangedPath(false, csrm.getRootNode());
        changedPath.forEachChangedNodeDepthFirst(nodeCallback, true, true);
      } else {
        this.rowModel.forEachNode(nodeCallback);
      }
      if (nodesToDeselect.length) {
        this.selectionService.setNodesSelected({ nodes: nodesToDeselect, newValue: false, source: "selectableChanged" });
      }
      if (isCsrmGroupSelectsChildren && this.selectionService instanceof SelectionService) {
        this.selectionService.updateGroupsFromChildrenSelections("selectableChanged");
      }
    };
    __decorate$C([
      Autowired("rowModel")
    ], SelectableService2.prototype, "rowModel", void 0);
    __decorate$C([
      Autowired("selectionService")
    ], SelectableService2.prototype, "selectionService", void 0);
    __decorate$C([
      PostConstruct
    ], SelectableService2.prototype, "init", null);
    SelectableService2 = __decorate$C([
      Bean("selectableService")
    ], SelectableService2);
    return SelectableService2;
  }(BeanStub)
);
var __extends$A = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$B = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PaginationComp = (
  /** @class */
  function(_super) {
    __extends$A(PaginationComp2, _super);
    function PaginationComp2() {
      var _this = _super.call(this) || this;
      _this.previousAndFirstButtonsDisabled = false;
      _this.nextButtonDisabled = false;
      _this.lastButtonDisabled = false;
      _this.areListenersSetup = false;
      return _this;
    }
    PaginationComp2.prototype.postConstruct = function() {
      var _this = this;
      var isRtl = this.gridOptionsService.get("enableRtl");
      this.setTemplate(this.getTemplate());
      var _a = this, btFirst = _a.btFirst, btPrevious = _a.btPrevious, btNext = _a.btNext, btLast = _a.btLast;
      _a.pageSizeComp;
      this.activateTabIndex([btFirst, btPrevious, btNext, btLast]);
      btFirst.insertAdjacentElement("afterbegin", createIconNoSpan(isRtl ? "last" : "first", this.gridOptionsService));
      btPrevious.insertAdjacentElement("afterbegin", createIconNoSpan(isRtl ? "next" : "previous", this.gridOptionsService));
      btNext.insertAdjacentElement("afterbegin", createIconNoSpan(isRtl ? "previous" : "next", this.gridOptionsService));
      btLast.insertAdjacentElement("afterbegin", createIconNoSpan(isRtl ? "first" : "last", this.gridOptionsService));
      this.addManagedPropertyListener("pagination", this.onPaginationChanged.bind(this));
      this.addManagedPropertyListener("suppressPaginationPanel", this.onPaginationChanged.bind(this));
      this.addManagedPropertyListeners(["paginationPageSizeSelector", "paginationAutoPageSize", "suppressPaginationPanel"], function() {
        return _this.onPageSizeRelatedOptionsChange();
      });
      this.pageSizeComp.toggleSelectDisplay(this.pageSizeComp.shouldShowPageSizeSelector());
      this.onPaginationChanged();
    };
    PaginationComp2.prototype.onPaginationChanged = function() {
      var isPaging = this.gridOptionsService.get("pagination");
      var paginationPanelEnabled = isPaging && !this.gridOptionsService.get("suppressPaginationPanel");
      this.setDisplayed(paginationPanelEnabled);
      if (!paginationPanelEnabled) {
        return;
      }
      this.setupListeners();
      this.enableOrDisableButtons();
      this.updateRowLabels();
      this.setCurrentPageLabel();
      this.setTotalLabels();
      this.onPageSizeRelatedOptionsChange();
    };
    PaginationComp2.prototype.onPageSizeRelatedOptionsChange = function() {
      this.pageSizeComp.toggleSelectDisplay(this.pageSizeComp.shouldShowPageSizeSelector());
    };
    PaginationComp2.prototype.setupListeners = function() {
      var _this = this;
      if (!this.areListenersSetup) {
        this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));
        [
          { el: this.btFirst, fn: this.onBtFirst.bind(this) },
          { el: this.btPrevious, fn: this.onBtPrevious.bind(this) },
          { el: this.btNext, fn: this.onBtNext.bind(this) },
          { el: this.btLast, fn: this.onBtLast.bind(this) }
        ].forEach(function(item) {
          var el = item.el, fn = item.fn;
          _this.addManagedListener(el, "click", fn);
          _this.addManagedListener(el, "keydown", function(e) {
            if (e.key === KeyCode.ENTER || e.key === KeyCode.SPACE) {
              e.preventDefault();
              fn();
            }
          });
        });
        this.areListenersSetup = true;
      }
    };
    PaginationComp2.prototype.onBtFirst = function() {
      if (!this.previousAndFirstButtonsDisabled) {
        this.paginationProxy.goToFirstPage();
      }
    };
    PaginationComp2.prototype.setCurrentPageLabel = function() {
      var pagesExist = this.paginationProxy.getTotalPages() > 0;
      var currentPage = this.paginationProxy.getCurrentPage();
      var toDisplay = pagesExist ? currentPage + 1 : 0;
      this.lbCurrent.textContent = this.formatNumber(toDisplay);
    };
    PaginationComp2.prototype.formatNumber = function(value) {
      var userFunc = this.gridOptionsService.getCallback("paginationNumberFormatter");
      if (userFunc) {
        var params = { value };
        return userFunc(params);
      }
      var localeTextFunc = this.localeService.getLocaleTextFunc();
      var thousandSeparator = localeTextFunc("thousandSeparator", ",");
      var decimalSeparator = localeTextFunc("decimalSeparator", ".");
      return formatNumberCommas(value, thousandSeparator, decimalSeparator);
    };
    PaginationComp2.prototype.getTemplate = function() {
      var localeTextFunc = this.localeService.getLocaleTextFunc();
      var strPage = localeTextFunc("page", "Page");
      var strTo = localeTextFunc("to", "to");
      var strOf = localeTextFunc("of", "of");
      var strFirst = localeTextFunc("firstPage", "First Page");
      var strPrevious = localeTextFunc("previousPage", "Previous Page");
      var strNext = localeTextFunc("nextPage", "Next Page");
      var strLast = localeTextFunc("lastPage", "Last Page");
      var compId = this.getCompId();
      return (
        /* html */
        '<div class="ag-paging-panel ag-unselectable" id="ag-'.concat(compId, '">\n                <ag-page-size-selector ref="pageSizeComp"></ag-page-size-selector>\n                <span class="ag-paging-row-summary-panel" role="status">\n                    <span id="ag-').concat(compId, '-first-row" ref="lbFirstRowOnPage" class="ag-paging-row-summary-panel-number"></span>\n                    <span id="ag-').concat(compId, '-to">').concat(strTo, '</span>\n                    <span id="ag-').concat(compId, '-last-row" ref="lbLastRowOnPage" class="ag-paging-row-summary-panel-number"></span>\n                    <span id="ag-').concat(compId, '-of">').concat(strOf, '</span>\n                    <span id="ag-').concat(compId, '-row-count" ref="lbRecordCount" class="ag-paging-row-summary-panel-number"></span>\n                </span>\n                <span class="ag-paging-page-summary-panel" role="presentation">\n                    <div ref="btFirst" class="ag-button ag-paging-button" role="button" aria-label="').concat(strFirst, '"></div>\n                    <div ref="btPrevious" class="ag-button ag-paging-button" role="button" aria-label="').concat(strPrevious, '"></div>\n                    <span class="ag-paging-description" role="status">\n                        <span id="ag-').concat(compId, '-start-page">').concat(strPage, '</span>\n                        <span id="ag-').concat(compId, '-start-page-number" ref="lbCurrent" class="ag-paging-number"></span>\n                        <span id="ag-').concat(compId, '-of-page">').concat(strOf, '</span>\n                        <span id="ag-').concat(compId, '-of-page-number" ref="lbTotal" class="ag-paging-number"></span>\n                    </span>\n                    <div ref="btNext" class="ag-button ag-paging-button" role="button" aria-label="').concat(strNext, '"></div>\n                    <div ref="btLast" class="ag-button ag-paging-button" role="button" aria-label="').concat(strLast, '"></div>\n                </span>\n            </div>')
      );
    };
    PaginationComp2.prototype.onBtNext = function() {
      if (!this.nextButtonDisabled) {
        this.paginationProxy.goToNextPage();
      }
    };
    PaginationComp2.prototype.onBtPrevious = function() {
      if (!this.previousAndFirstButtonsDisabled) {
        this.paginationProxy.goToPreviousPage();
      }
    };
    PaginationComp2.prototype.onBtLast = function() {
      if (!this.lastButtonDisabled) {
        this.paginationProxy.goToLastPage();
      }
    };
    PaginationComp2.prototype.enableOrDisableButtons = function() {
      var currentPage = this.paginationProxy.getCurrentPage();
      var maxRowFound = this.paginationProxy.isLastPageFound();
      var totalPages = this.paginationProxy.getTotalPages();
      this.previousAndFirstButtonsDisabled = currentPage === 0;
      this.toggleButtonDisabled(this.btFirst, this.previousAndFirstButtonsDisabled);
      this.toggleButtonDisabled(this.btPrevious, this.previousAndFirstButtonsDisabled);
      var zeroPagesToDisplay = this.isZeroPagesToDisplay();
      var onLastPage = currentPage === totalPages - 1;
      this.nextButtonDisabled = onLastPage || zeroPagesToDisplay;
      this.lastButtonDisabled = !maxRowFound || zeroPagesToDisplay || currentPage === totalPages - 1;
      this.toggleButtonDisabled(this.btNext, this.nextButtonDisabled);
      this.toggleButtonDisabled(this.btLast, this.lastButtonDisabled);
    };
    PaginationComp2.prototype.toggleButtonDisabled = function(button, disabled) {
      setAriaDisabled(button, disabled);
      button.classList.toggle("ag-disabled", disabled);
    };
    PaginationComp2.prototype.updateRowLabels = function() {
      var currentPage = this.paginationProxy.getCurrentPage();
      var pageSize = this.paginationProxy.getPageSize();
      var maxRowFound = this.paginationProxy.isLastPageFound();
      var rowCount = this.paginationProxy.isLastPageFound() ? this.paginationProxy.getMasterRowCount() : null;
      var startRow;
      var endRow;
      if (this.isZeroPagesToDisplay()) {
        startRow = endRow = 0;
      } else {
        startRow = pageSize * currentPage + 1;
        endRow = startRow + pageSize - 1;
        if (maxRowFound && endRow > rowCount) {
          endRow = rowCount;
        }
      }
      this.lbFirstRowOnPage.textContent = this.formatNumber(startRow);
      if (this.rowNodeBlockLoader.isLoading()) {
        var translate = this.localeService.getLocaleTextFunc();
        this.lbLastRowOnPage.innerHTML = translate("pageLastRowUnknown", "?");
      } else {
        this.lbLastRowOnPage.textContent = this.formatNumber(endRow);
      }
    };
    PaginationComp2.prototype.isZeroPagesToDisplay = function() {
      var maxRowFound = this.paginationProxy.isLastPageFound();
      var totalPages = this.paginationProxy.getTotalPages();
      return maxRowFound && totalPages === 0;
    };
    PaginationComp2.prototype.setTotalLabels = function() {
      var lastPageFound = this.paginationProxy.isLastPageFound();
      var totalPages = this.paginationProxy.getTotalPages();
      var rowCount = lastPageFound ? this.paginationProxy.getMasterRowCount() : null;
      if (rowCount === 1) {
        var firstRow = this.paginationProxy.getRow(0);
        var hiddenGroupRow = firstRow && firstRow.group && !(firstRow.groupData || firstRow.aggData);
        if (hiddenGroupRow) {
          this.setTotalLabelsToZero();
          return;
        }
      }
      if (lastPageFound) {
        this.lbTotal.textContent = this.formatNumber(totalPages);
        this.lbRecordCount.textContent = this.formatNumber(rowCount);
      } else {
        var moreText = this.localeService.getLocaleTextFunc()("more", "more");
        this.lbTotal.innerHTML = moreText;
        this.lbRecordCount.innerHTML = moreText;
      }
    };
    PaginationComp2.prototype.setTotalLabelsToZero = function() {
      this.lbFirstRowOnPage.textContent = this.formatNumber(0);
      this.lbCurrent.textContent = this.formatNumber(0);
      this.lbLastRowOnPage.textContent = this.formatNumber(0);
      this.lbTotal.textContent = this.formatNumber(0);
      this.lbRecordCount.textContent = this.formatNumber(0);
    };
    __decorate$B([
      Autowired("paginationProxy")
    ], PaginationComp2.prototype, "paginationProxy", void 0);
    __decorate$B([
      Autowired("rowNodeBlockLoader")
    ], PaginationComp2.prototype, "rowNodeBlockLoader", void 0);
    __decorate$B([
      RefSelector("btFirst")
    ], PaginationComp2.prototype, "btFirst", void 0);
    __decorate$B([
      RefSelector("btPrevious")
    ], PaginationComp2.prototype, "btPrevious", void 0);
    __decorate$B([
      RefSelector("btNext")
    ], PaginationComp2.prototype, "btNext", void 0);
    __decorate$B([
      RefSelector("btLast")
    ], PaginationComp2.prototype, "btLast", void 0);
    __decorate$B([
      RefSelector("lbRecordCount")
    ], PaginationComp2.prototype, "lbRecordCount", void 0);
    __decorate$B([
      RefSelector("lbFirstRowOnPage")
    ], PaginationComp2.prototype, "lbFirstRowOnPage", void 0);
    __decorate$B([
      RefSelector("lbLastRowOnPage")
    ], PaginationComp2.prototype, "lbLastRowOnPage", void 0);
    __decorate$B([
      RefSelector("lbCurrent")
    ], PaginationComp2.prototype, "lbCurrent", void 0);
    __decorate$B([
      RefSelector("lbTotal")
    ], PaginationComp2.prototype, "lbTotal", void 0);
    __decorate$B([
      RefSelector("pageSizeComp")
    ], PaginationComp2.prototype, "pageSizeComp", void 0);
    __decorate$B([
      PostConstruct
    ], PaginationComp2.prototype, "postConstruct", null);
    return PaginationComp2;
  }(Component2)
);
var __extends$z = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$A = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var OverlayWrapperComponent = (
  /** @class */
  function(_super) {
    __extends$z(OverlayWrapperComponent2, _super);
    function OverlayWrapperComponent2() {
      var _this = _super.call(this, OverlayWrapperComponent2.TEMPLATE) || this;
      _this.inProgress = false;
      _this.destroyRequested = false;
      return _this;
    }
    OverlayWrapperComponent2.prototype.updateLayoutClasses = function(cssClass, params) {
      var overlayWrapperClassList = this.eOverlayWrapper.classList;
      overlayWrapperClassList.toggle(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);
      overlayWrapperClassList.toggle(LayoutCssClasses.NORMAL, params.normal);
      overlayWrapperClassList.toggle(LayoutCssClasses.PRINT, params.print);
    };
    OverlayWrapperComponent2.prototype.postConstruct = function() {
      this.createManagedBean(new LayoutFeature(this));
      this.setDisplayed(false, { skipAriaHidden: true });
      this.overlayService.registerOverlayWrapperComp(this);
    };
    OverlayWrapperComponent2.prototype.setWrapperTypeClass = function(overlayWrapperCssClass) {
      var overlayWrapperClassList = this.eOverlayWrapper.classList;
      if (this.activeOverlayWrapperCssClass) {
        overlayWrapperClassList.toggle(this.activeOverlayWrapperCssClass, false);
      }
      this.activeOverlayWrapperCssClass = overlayWrapperCssClass;
      overlayWrapperClassList.toggle(overlayWrapperCssClass, true);
    };
    OverlayWrapperComponent2.prototype.showOverlay = function(overlayComp, overlayWrapperCssClass, updateListenerDestroyFunc) {
      var _this = this;
      if (this.inProgress) {
        return;
      }
      this.setWrapperTypeClass(overlayWrapperCssClass);
      this.destroyActiveOverlay();
      this.inProgress = true;
      if (overlayComp) {
        overlayComp.then(function(comp) {
          _this.inProgress = false;
          _this.eOverlayWrapper.appendChild(comp.getGui());
          _this.activeOverlay = comp;
          _this.updateListenerDestroyFunc = updateListenerDestroyFunc;
          if (_this.destroyRequested) {
            _this.destroyRequested = false;
            _this.destroyActiveOverlay();
          }
        });
      }
      this.setDisplayed(true, { skipAriaHidden: true });
    };
    OverlayWrapperComponent2.prototype.destroyActiveOverlay = function() {
      var _a;
      if (this.inProgress) {
        this.destroyRequested = true;
        return;
      }
      if (!this.activeOverlay) {
        return;
      }
      this.activeOverlay = this.getContext().destroyBean(this.activeOverlay);
      (_a = this.updateListenerDestroyFunc) === null || _a === void 0 ? void 0 : _a.call(this);
      clearElement(this.eOverlayWrapper);
    };
    OverlayWrapperComponent2.prototype.hideOverlay = function() {
      this.destroyActiveOverlay();
      this.setDisplayed(false, { skipAriaHidden: true });
    };
    OverlayWrapperComponent2.prototype.destroy = function() {
      this.destroyActiveOverlay();
      _super.prototype.destroy.call(this);
    };
    OverlayWrapperComponent2.TEMPLATE = '\n        <div class="ag-overlay" role="presentation">\n            <div class="ag-overlay-panel" role="presentation">\n                <div class="ag-overlay-wrapper" ref="eOverlayWrapper" role="presentation"></div>\n            </div>\n        </div>';
    __decorate$A([
      Autowired("overlayService")
    ], OverlayWrapperComponent2.prototype, "overlayService", void 0);
    __decorate$A([
      RefSelector("eOverlayWrapper")
    ], OverlayWrapperComponent2.prototype, "eOverlayWrapper", void 0);
    __decorate$A([
      PostConstruct
    ], OverlayWrapperComponent2.prototype, "postConstruct", null);
    return OverlayWrapperComponent2;
  }(Component2)
);
var __extends$y = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$z = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RowPositionUtils = (
  /** @class */
  function(_super) {
    __extends$y(RowPositionUtils2, _super);
    function RowPositionUtils2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    RowPositionUtils2.prototype.getFirstRow = function() {
      var rowIndex = 0;
      var rowPinned;
      if (this.pinnedRowModel.getPinnedTopRowCount()) {
        rowPinned = "top";
      } else if (this.rowModel.getRowCount()) {
        rowPinned = null;
        rowIndex = this.paginationProxy.getPageFirstRow();
      } else if (this.pinnedRowModel.getPinnedBottomRowCount()) {
        rowPinned = "bottom";
      }
      return rowPinned === void 0 ? null : { rowIndex, rowPinned };
    };
    RowPositionUtils2.prototype.getLastRow = function() {
      var rowIndex;
      var rowPinned = null;
      var pinnedBottomCount = this.pinnedRowModel.getPinnedBottomRowCount();
      var pinnedTopCount = this.pinnedRowModel.getPinnedTopRowCount();
      if (pinnedBottomCount) {
        rowPinned = "bottom";
        rowIndex = pinnedBottomCount - 1;
      } else if (this.rowModel.getRowCount()) {
        rowPinned = null;
        rowIndex = this.paginationProxy.getPageLastRow();
      } else if (pinnedTopCount) {
        rowPinned = "top";
        rowIndex = pinnedTopCount - 1;
      }
      return rowIndex === void 0 ? null : { rowIndex, rowPinned };
    };
    RowPositionUtils2.prototype.getRowNode = function(gridRow) {
      switch (gridRow.rowPinned) {
        case "top":
          return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];
        case "bottom":
          return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];
        default:
          return this.rowModel.getRow(gridRow.rowIndex);
      }
    };
    RowPositionUtils2.prototype.sameRow = function(rowA, rowB) {
      if (!rowA && !rowB) {
        return true;
      }
      if (rowA && !rowB || !rowA && rowB) {
        return false;
      }
      return rowA.rowIndex === rowB.rowIndex && rowA.rowPinned == rowB.rowPinned;
    };
    RowPositionUtils2.prototype.before = function(rowA, rowB) {
      switch (rowA.rowPinned) {
        case "top":
          if (rowB.rowPinned !== "top") {
            return true;
          }
          break;
        case "bottom":
          if (rowB.rowPinned !== "bottom") {
            return false;
          }
          break;
        default:
          if (exists(rowB.rowPinned)) {
            return rowB.rowPinned !== "top";
          }
          break;
      }
      return rowA.rowIndex < rowB.rowIndex;
    };
    RowPositionUtils2.prototype.rowMax = function(rows) {
      var _this = this;
      var max;
      rows.forEach(function(row) {
        if (max === void 0 || _this.before(max, row)) {
          max = row;
        }
      });
      return max;
    };
    RowPositionUtils2.prototype.rowMin = function(rows) {
      var _this = this;
      var min;
      rows.forEach(function(row) {
        if (min === void 0 || _this.before(row, min)) {
          min = row;
        }
      });
      return min;
    };
    __decorate$z([
      Autowired("rowModel")
    ], RowPositionUtils2.prototype, "rowModel", void 0);
    __decorate$z([
      Autowired("pinnedRowModel")
    ], RowPositionUtils2.prototype, "pinnedRowModel", void 0);
    __decorate$z([
      Autowired("paginationProxy")
    ], RowPositionUtils2.prototype, "paginationProxy", void 0);
    RowPositionUtils2 = __decorate$z([
      Bean("rowPositionUtils")
    ], RowPositionUtils2);
    return RowPositionUtils2;
  }(BeanStub)
);
var __extends$x = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$y = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CellPositionUtils = (
  /** @class */
  function(_super) {
    __extends$x(CellPositionUtils2, _super);
    function CellPositionUtils2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    CellPositionUtils2.prototype.createId = function(cellPosition) {
      var rowIndex = cellPosition.rowIndex, rowPinned = cellPosition.rowPinned, column = cellPosition.column;
      return this.createIdFromValues({ rowIndex, column, rowPinned });
    };
    CellPositionUtils2.prototype.createIdFromValues = function(cellPosition) {
      var rowIndex = cellPosition.rowIndex, rowPinned = cellPosition.rowPinned, column = cellPosition.column;
      return "".concat(rowIndex, ".").concat(rowPinned == null ? "null" : rowPinned, ".").concat(column.getId());
    };
    CellPositionUtils2.prototype.equals = function(cellA, cellB) {
      var colsMatch = cellA.column === cellB.column;
      var floatingMatch = cellA.rowPinned === cellB.rowPinned;
      var indexMatch = cellA.rowIndex === cellB.rowIndex;
      return colsMatch && floatingMatch && indexMatch;
    };
    CellPositionUtils2 = __decorate$y([
      Bean("cellPositionUtils")
    ], CellPositionUtils2);
    return CellPositionUtils2;
  }(BeanStub)
);
var __extends$w = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var UndoRedoAction = (
  /** @class */
  /* @__PURE__ */ function() {
    function UndoRedoAction2(cellValueChanges) {
      this.cellValueChanges = cellValueChanges;
    }
    return UndoRedoAction2;
  }()
);
var RangeUndoRedoAction = (
  /** @class */
  function(_super) {
    __extends$w(RangeUndoRedoAction2, _super);
    function RangeUndoRedoAction2(cellValueChanges, initialRange, finalRange, ranges) {
      var _this = _super.call(this, cellValueChanges) || this;
      _this.initialRange = initialRange;
      _this.finalRange = finalRange;
      _this.ranges = ranges;
      return _this;
    }
    return RangeUndoRedoAction2;
  }(UndoRedoAction)
);
var UndoRedoStack = (
  /** @class */
  function() {
    function UndoRedoStack2(maxStackSize) {
      this.actionStack = [];
      this.maxStackSize = maxStackSize ? maxStackSize : UndoRedoStack2.DEFAULT_STACK_SIZE;
      this.actionStack = new Array(this.maxStackSize);
    }
    UndoRedoStack2.prototype.pop = function() {
      return this.actionStack.pop();
    };
    UndoRedoStack2.prototype.push = function(item) {
      var shouldAddActions = item.cellValueChanges && item.cellValueChanges.length > 0;
      if (!shouldAddActions) {
        return;
      }
      if (this.actionStack.length === this.maxStackSize) {
        this.actionStack.shift();
      }
      this.actionStack.push(item);
    };
    UndoRedoStack2.prototype.clear = function() {
      this.actionStack = [];
    };
    UndoRedoStack2.prototype.getCurrentStackSize = function() {
      return this.actionStack.length;
    };
    UndoRedoStack2.DEFAULT_STACK_SIZE = 10;
    return UndoRedoStack2;
  }()
);
var __extends$v = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$3 = function() {
  __assign$3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$3.apply(this, arguments);
};
var __decorate$x = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __read$a = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$8 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var UndoRedoService = (
  /** @class */
  function(_super) {
    __extends$v(UndoRedoService2, _super);
    function UndoRedoService2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.cellValueChanges = [];
      _this.activeCellEdit = null;
      _this.activeRowEdit = null;
      _this.isPasting = false;
      _this.isRangeInAction = false;
      _this.onCellValueChanged = function(event) {
        var eventCell = { column: event.column, rowIndex: event.rowIndex, rowPinned: event.rowPinned };
        var isCellEditing = _this.activeCellEdit !== null && _this.cellPositionUtils.equals(_this.activeCellEdit, eventCell);
        var isRowEditing = _this.activeRowEdit !== null && _this.rowPositionUtils.sameRow(_this.activeRowEdit, eventCell);
        var shouldCaptureAction = isCellEditing || isRowEditing || _this.isPasting || _this.isRangeInAction;
        if (!shouldCaptureAction) {
          return;
        }
        var rowPinned = event.rowPinned, rowIndex = event.rowIndex, column = event.column, oldValue = event.oldValue, value = event.value;
        var cellValueChange = {
          rowPinned,
          rowIndex,
          columnId: column.getColId(),
          newValue: value,
          oldValue
        };
        _this.cellValueChanges.push(cellValueChange);
      };
      _this.clearStacks = function() {
        _this.undoStack.clear();
        _this.redoStack.clear();
      };
      return _this;
    }
    UndoRedoService2.prototype.init = function() {
      var _this = this;
      if (!this.gridOptionsService.get("undoRedoCellEditing")) {
        return;
      }
      var undoRedoLimit = this.gridOptionsService.get("undoRedoCellEditingLimit");
      if (undoRedoLimit <= 0) {
        return;
      }
      this.undoStack = new UndoRedoStack(undoRedoLimit);
      this.redoStack = new UndoRedoStack(undoRedoLimit);
      this.addRowEditingListeners();
      this.addCellEditingListeners();
      this.addPasteListeners();
      this.addFillListeners();
      this.addCellKeyListeners();
      this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged);
      this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, function(e) {
        if (!e.keepUndoRedoStack) {
          _this.clearStacks();
        }
      });
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.clearStacks);
      this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.clearStacks);
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, this.clearStacks);
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.clearStacks);
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.clearStacks);
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.clearStacks);
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.clearStacks);
      this.addManagedListener(this.eventService, Events.EVENT_ROW_DRAG_END, this.clearStacks);
      this.ctrlsService.whenReady(function() {
        _this.gridBodyCtrl = _this.ctrlsService.getGridBodyCtrl();
      });
    };
    UndoRedoService2.prototype.getCurrentUndoStackSize = function() {
      return this.undoStack ? this.undoStack.getCurrentStackSize() : 0;
    };
    UndoRedoService2.prototype.getCurrentRedoStackSize = function() {
      return this.redoStack ? this.redoStack.getCurrentStackSize() : 0;
    };
    UndoRedoService2.prototype.undo = function(source) {
      var startEvent = {
        type: Events.EVENT_UNDO_STARTED,
        source
      };
      this.eventService.dispatchEvent(startEvent);
      var operationPerformed = this.undoRedo(this.undoStack, this.redoStack, "initialRange", "oldValue", "undo");
      var endEvent = {
        type: Events.EVENT_UNDO_ENDED,
        source,
        operationPerformed
      };
      this.eventService.dispatchEvent(endEvent);
    };
    UndoRedoService2.prototype.redo = function(source) {
      var startEvent = {
        type: Events.EVENT_REDO_STARTED,
        source
      };
      this.eventService.dispatchEvent(startEvent);
      var operationPerformed = this.undoRedo(this.redoStack, this.undoStack, "finalRange", "newValue", "redo");
      var endEvent = {
        type: Events.EVENT_REDO_ENDED,
        source,
        operationPerformed
      };
      this.eventService.dispatchEvent(endEvent);
    };
    UndoRedoService2.prototype.undoRedo = function(undoRedoStack, opposingUndoRedoStack, rangeProperty, cellValueChangeProperty, source) {
      if (!undoRedoStack) {
        return false;
      }
      var undoRedoAction = undoRedoStack.pop();
      if (!undoRedoAction || !undoRedoAction.cellValueChanges) {
        return false;
      }
      this.processAction(undoRedoAction, function(cellValueChange) {
        return cellValueChange[cellValueChangeProperty];
      }, source);
      if (undoRedoAction instanceof RangeUndoRedoAction) {
        this.processRange(undoRedoAction.ranges || [undoRedoAction[rangeProperty]]);
      } else {
        this.processCell(undoRedoAction.cellValueChanges);
      }
      opposingUndoRedoStack.push(undoRedoAction);
      return true;
    };
    UndoRedoService2.prototype.processAction = function(action, valueExtractor, source) {
      var _this = this;
      action.cellValueChanges.forEach(function(cellValueChange) {
        var rowIndex = cellValueChange.rowIndex, rowPinned = cellValueChange.rowPinned, columnId = cellValueChange.columnId;
        var rowPosition = { rowIndex, rowPinned };
        var currentRow = _this.getRowNode(rowPosition);
        if (!currentRow.displayed) {
          return;
        }
        currentRow.setDataValue(columnId, valueExtractor(cellValueChange), source);
      });
    };
    UndoRedoService2.prototype.processRange = function(ranges) {
      var _this = this;
      var lastFocusedCell;
      this.rangeService.removeAllCellRanges(true);
      ranges.forEach(function(range, idx) {
        if (!range) {
          return;
        }
        var startRow = range.startRow;
        var endRow = range.endRow;
        if (idx === ranges.length - 1) {
          lastFocusedCell = {
            rowPinned: startRow.rowPinned,
            rowIndex: startRow.rowIndex,
            columnId: range.startColumn.getColId()
          };
          _this.setLastFocusedCell(lastFocusedCell);
        }
        var cellRangeParams = {
          rowStartIndex: startRow.rowIndex,
          rowStartPinned: startRow.rowPinned,
          rowEndIndex: endRow.rowIndex,
          rowEndPinned: endRow.rowPinned,
          columnStart: range.startColumn,
          columns: range.columns
        };
        _this.rangeService.addCellRange(cellRangeParams);
      });
    };
    UndoRedoService2.prototype.processCell = function(cellValueChanges) {
      var cellValueChange = cellValueChanges[0];
      var rowIndex = cellValueChange.rowIndex, rowPinned = cellValueChange.rowPinned;
      var rowPosition = { rowIndex, rowPinned };
      var row = this.getRowNode(rowPosition);
      var lastFocusedCell = {
        rowPinned: cellValueChange.rowPinned,
        rowIndex: row.rowIndex,
        columnId: cellValueChange.columnId
      };
      this.setLastFocusedCell(lastFocusedCell, !!this.rangeService);
    };
    UndoRedoService2.prototype.setLastFocusedCell = function(lastFocusedCell, setRangeToCell) {
      var rowIndex = lastFocusedCell.rowIndex, columnId = lastFocusedCell.columnId, rowPinned = lastFocusedCell.rowPinned;
      var scrollFeature = this.gridBodyCtrl.getScrollFeature();
      var column = this.columnModel.getGridColumn(columnId);
      if (!column) {
        return;
      }
      scrollFeature.ensureIndexVisible(rowIndex);
      scrollFeature.ensureColumnVisible(column);
      var cellPosition = { rowIndex, column, rowPinned };
      this.focusService.setFocusedCell(__assign$3(__assign$3({}, cellPosition), { forceBrowserFocus: true }));
      if (setRangeToCell) {
        this.rangeService.setRangeToCell(cellPosition);
      }
    };
    UndoRedoService2.prototype.addRowEditingListeners = function() {
      var _this = this;
      this.addManagedListener(this.eventService, Events.EVENT_ROW_EDITING_STARTED, function(e) {
        _this.activeRowEdit = { rowIndex: e.rowIndex, rowPinned: e.rowPinned };
      });
      this.addManagedListener(this.eventService, Events.EVENT_ROW_EDITING_STOPPED, function() {
        var action = new UndoRedoAction(_this.cellValueChanges);
        _this.pushActionsToUndoStack(action);
        _this.activeRowEdit = null;
      });
    };
    UndoRedoService2.prototype.addCellEditingListeners = function() {
      var _this = this;
      this.addManagedListener(this.eventService, Events.EVENT_CELL_EDITING_STARTED, function(e) {
        _this.activeCellEdit = { column: e.column, rowIndex: e.rowIndex, rowPinned: e.rowPinned };
      });
      this.addManagedListener(this.eventService, Events.EVENT_CELL_EDITING_STOPPED, function(e) {
        _this.activeCellEdit = null;
        var shouldPushAction = e.valueChanged && !_this.activeRowEdit && !_this.isPasting && !_this.isRangeInAction;
        if (shouldPushAction) {
          var action = new UndoRedoAction(_this.cellValueChanges);
          _this.pushActionsToUndoStack(action);
        }
      });
    };
    UndoRedoService2.prototype.addPasteListeners = function() {
      var _this = this;
      this.addManagedListener(this.eventService, Events.EVENT_PASTE_START, function() {
        _this.isPasting = true;
      });
      this.addManagedListener(this.eventService, Events.EVENT_PASTE_END, function() {
        var action = new UndoRedoAction(_this.cellValueChanges);
        _this.pushActionsToUndoStack(action);
        _this.isPasting = false;
      });
    };
    UndoRedoService2.prototype.addFillListeners = function() {
      var _this = this;
      this.addManagedListener(this.eventService, Events.EVENT_FILL_START, function() {
        _this.isRangeInAction = true;
      });
      this.addManagedListener(this.eventService, Events.EVENT_FILL_END, function(event) {
        var action = new RangeUndoRedoAction(_this.cellValueChanges, event.initialRange, event.finalRange);
        _this.pushActionsToUndoStack(action);
        _this.isRangeInAction = false;
      });
    };
    UndoRedoService2.prototype.addCellKeyListeners = function() {
      var _this = this;
      this.addManagedListener(this.eventService, Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_START, function() {
        _this.isRangeInAction = true;
      });
      this.addManagedListener(this.eventService, Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_END, function() {
        var action;
        if (_this.rangeService && _this.gridOptionsService.get("enableRangeSelection")) {
          action = new RangeUndoRedoAction(_this.cellValueChanges, void 0, void 0, __spreadArray$8([], __read$a(_this.rangeService.getCellRanges()), false));
        } else {
          action = new UndoRedoAction(_this.cellValueChanges);
        }
        _this.pushActionsToUndoStack(action);
        _this.isRangeInAction = false;
      });
    };
    UndoRedoService2.prototype.pushActionsToUndoStack = function(action) {
      this.undoStack.push(action);
      this.cellValueChanges = [];
      this.redoStack.clear();
    };
    UndoRedoService2.prototype.getRowNode = function(gridRow) {
      switch (gridRow.rowPinned) {
        case "top":
          return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];
        case "bottom":
          return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];
        default:
          return this.rowModel.getRow(gridRow.rowIndex);
      }
    };
    __decorate$x([
      Autowired("focusService")
    ], UndoRedoService2.prototype, "focusService", void 0);
    __decorate$x([
      Autowired("ctrlsService")
    ], UndoRedoService2.prototype, "ctrlsService", void 0);
    __decorate$x([
      Autowired("rowModel")
    ], UndoRedoService2.prototype, "rowModel", void 0);
    __decorate$x([
      Autowired("pinnedRowModel")
    ], UndoRedoService2.prototype, "pinnedRowModel", void 0);
    __decorate$x([
      Autowired("cellPositionUtils")
    ], UndoRedoService2.prototype, "cellPositionUtils", void 0);
    __decorate$x([
      Autowired("rowPositionUtils")
    ], UndoRedoService2.prototype, "rowPositionUtils", void 0);
    __decorate$x([
      Autowired("columnModel")
    ], UndoRedoService2.prototype, "columnModel", void 0);
    __decorate$x([
      Optional("rangeService")
    ], UndoRedoService2.prototype, "rangeService", void 0);
    __decorate$x([
      PostConstruct
    ], UndoRedoService2.prototype, "init", null);
    UndoRedoService2 = __decorate$x([
      Bean("undoRedoService")
    ], UndoRedoService2);
    return UndoRedoService2;
  }(BeanStub)
);
var __extends$u = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$w = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HeaderPositionUtils = (
  /** @class */
  function(_super) {
    __extends$u(HeaderPositionUtils2, _super);
    function HeaderPositionUtils2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    HeaderPositionUtils2.prototype.findHeader = function(focusedHeader, direction) {
      var nextColumn;
      var getGroupMethod;
      var getColMethod;
      if (focusedHeader.column instanceof ColumnGroup) {
        getGroupMethod = "getDisplayedGroup".concat(direction);
        nextColumn = this.columnModel[getGroupMethod](focusedHeader.column);
      } else {
        getColMethod = "getDisplayedCol".concat(direction);
        nextColumn = this.columnModel[getColMethod](focusedHeader.column);
      }
      if (!nextColumn) {
        return;
      }
      var headerRowIndex = focusedHeader.headerRowIndex;
      var currentRowType = this.getHeaderRowType(headerRowIndex);
      if (currentRowType === HeaderRowType.COLUMN_GROUP) {
        var columnGroup = nextColumn;
        if (columnGroup.isPadding() && this.isAnyChildSpanningHeaderHeight(columnGroup)) {
          var _a = this.getColumnVisibleChild(columnGroup, headerRowIndex, direction), nextFocusColumn = _a.nextFocusColumn, nextRow = _a.nextRow;
          if (nextFocusColumn) {
            nextColumn = nextFocusColumn;
            headerRowIndex = nextRow;
          }
        }
      }
      return {
        column: nextColumn,
        headerRowIndex
      };
    };
    HeaderPositionUtils2.prototype.isAnyChildSpanningHeaderHeight = function(columnGroup) {
      if (!columnGroup) {
        return false;
      }
      return columnGroup.getLeafColumns().some(function(col) {
        return col.isSpanHeaderHeight();
      });
    };
    HeaderPositionUtils2.prototype.getColumnVisibleParent = function(currentColumn, currentIndex) {
      var currentRowType = this.getHeaderRowType(currentIndex);
      var isFloatingFilter = currentRowType === HeaderRowType.FLOATING_FILTER;
      var isColumn = currentRowType === HeaderRowType.COLUMN;
      var nextFocusColumn = isFloatingFilter ? currentColumn : currentColumn.getParent();
      var nextRow = currentIndex - 1;
      if (isColumn && this.isAnyChildSpanningHeaderHeight(currentColumn.getParent())) {
        while (nextFocusColumn && nextFocusColumn.isPadding()) {
          nextFocusColumn = nextFocusColumn.getParent();
          nextRow--;
        }
        if (nextRow < 0) {
          nextFocusColumn = currentColumn;
          nextRow = currentIndex;
        }
      }
      return { nextFocusColumn, nextRow };
    };
    HeaderPositionUtils2.prototype.getColumnVisibleChild = function(column, currentIndex, direction) {
      if (direction === void 0) {
        direction = "After";
      }
      var currentRowType = this.getHeaderRowType(currentIndex);
      var nextFocusColumn = column;
      var nextRow = currentIndex + 1;
      if (currentRowType === HeaderRowType.COLUMN_GROUP) {
        var leafColumns = column.getDisplayedLeafColumns();
        var leafChild = direction === "After" ? leafColumns[0] : last(leafColumns);
        if (this.isAnyChildSpanningHeaderHeight(leafChild.getParent())) {
          nextFocusColumn = leafChild;
          var currentColumn = leafChild.getParent();
          while (currentColumn && currentColumn !== column) {
            currentColumn = currentColumn.getParent();
            nextRow++;
          }
        } else {
          nextFocusColumn = column.getDisplayedChildren()[0];
        }
      }
      return { nextFocusColumn, nextRow };
    };
    HeaderPositionUtils2.prototype.getHeaderRowType = function(rowIndex) {
      var centerHeaderContainer = this.ctrlsService.getHeaderRowContainerCtrl();
      if (centerHeaderContainer) {
        return centerHeaderContainer.getRowType(rowIndex);
      }
    };
    HeaderPositionUtils2.prototype.findColAtEdgeForHeaderRow = function(level, position) {
      var displayedColumns = this.columnModel.getAllDisplayedColumns();
      var column = displayedColumns[position === "start" ? 0 : displayedColumns.length - 1];
      if (!column) {
        return;
      }
      var childContainer = this.ctrlsService.getHeaderRowContainerCtrl(column.getPinned());
      var type = childContainer.getRowType(level);
      if (type == HeaderRowType.COLUMN_GROUP) {
        var columnGroup = this.columnModel.getColumnGroupAtLevel(column, level);
        return {
          headerRowIndex: level,
          column: columnGroup
        };
      }
      return {
        // if type==null, means the header level didn't exist
        headerRowIndex: type == null ? -1 : level,
        column
      };
    };
    __decorate$w([
      Autowired("columnModel")
    ], HeaderPositionUtils2.prototype, "columnModel", void 0);
    __decorate$w([
      Autowired("ctrlsService")
    ], HeaderPositionUtils2.prototype, "ctrlsService", void 0);
    HeaderPositionUtils2 = __decorate$w([
      Bean("headerPositionUtils")
    ], HeaderPositionUtils2);
    return HeaderPositionUtils2;
  }(BeanStub)
);
var __decorate$v = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ColumnDefFactory = (
  /** @class */
  function() {
    function ColumnDefFactory2() {
    }
    ColumnDefFactory2.prototype.buildColumnDefs = function(cols, rowGroupColumns, pivotColumns) {
      var _this = this;
      var res = [];
      var colGroupDefs = {};
      cols.forEach(function(col) {
        var colDef = _this.createDefFromColumn(col, rowGroupColumns, pivotColumns);
        var addToResult = true;
        var childDef = colDef;
        var pointer = col.getOriginalParent();
        var lastPointer = null;
        while (pointer) {
          var parentDef = null;
          if (pointer.isPadding()) {
            pointer = pointer.getOriginalParent();
            continue;
          }
          var existingParentDef = colGroupDefs[pointer.getGroupId()];
          if (existingParentDef) {
            existingParentDef.children.push(childDef);
            addToResult = false;
            break;
          }
          parentDef = _this.createDefFromGroup(pointer);
          if (parentDef) {
            parentDef.children = [childDef];
            colGroupDefs[parentDef.groupId] = parentDef;
            childDef = parentDef;
            pointer = pointer.getOriginalParent();
          }
          if (pointer != null && lastPointer === pointer) {
            addToResult = false;
            break;
          }
          lastPointer = pointer;
        }
        if (addToResult) {
          res.push(childDef);
        }
      });
      return res;
    };
    ColumnDefFactory2.prototype.createDefFromGroup = function(group) {
      var defCloned = deepCloneDefinition(group.getColGroupDef(), ["children"]);
      if (defCloned) {
        defCloned.groupId = group.getGroupId();
      }
      return defCloned;
    };
    ColumnDefFactory2.prototype.createDefFromColumn = function(col, rowGroupColumns, pivotColumns) {
      var colDefCloned = deepCloneDefinition(col.getColDef());
      colDefCloned.colId = col.getColId();
      colDefCloned.width = col.getActualWidth();
      colDefCloned.rowGroup = col.isRowGroupActive();
      colDefCloned.rowGroupIndex = col.isRowGroupActive() ? rowGroupColumns.indexOf(col) : null;
      colDefCloned.pivot = col.isPivotActive();
      colDefCloned.pivotIndex = col.isPivotActive() ? pivotColumns.indexOf(col) : null;
      colDefCloned.aggFunc = col.isValueActive() ? col.getAggFunc() : null;
      colDefCloned.hide = col.isVisible() ? void 0 : true;
      colDefCloned.pinned = col.isPinned() ? col.getPinned() : null;
      colDefCloned.sort = col.getSort() ? col.getSort() : null;
      colDefCloned.sortIndex = col.getSortIndex() != null ? col.getSortIndex() : null;
      return colDefCloned;
    };
    ColumnDefFactory2 = __decorate$v([
      Bean("columnDefFactory")
    ], ColumnDefFactory2);
    return ColumnDefFactory2;
  }()
);
var __decorate$u = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RowCssClassCalculator = (
  /** @class */
  function() {
    function RowCssClassCalculator2() {
    }
    RowCssClassCalculator2.prototype.getInitialRowClasses = function(params) {
      var classes = [];
      if (exists(params.extraCssClass)) {
        classes.push(params.extraCssClass);
      }
      classes.push("ag-row");
      classes.push(params.rowFocused ? "ag-row-focus" : "ag-row-no-focus");
      if (params.fadeRowIn) {
        classes.push("ag-opacity-zero");
      }
      classes.push(params.rowIsEven ? "ag-row-even" : "ag-row-odd");
      if (params.rowNode.isRowPinned()) {
        classes.push("ag-row-pinned");
      }
      if (params.rowNode.isSelected()) {
        classes.push("ag-row-selected");
      }
      if (params.rowNode.footer) {
        classes.push("ag-row-footer");
      }
      classes.push("ag-row-level-" + params.rowLevel);
      if (params.rowNode.stub) {
        classes.push("ag-row-loading");
      }
      if (params.fullWidthRow) {
        classes.push("ag-full-width-row");
      }
      if (params.expandable) {
        classes.push("ag-row-group");
        classes.push(params.rowNode.expanded ? "ag-row-group-expanded" : "ag-row-group-contracted");
      }
      if (params.rowNode.dragging) {
        classes.push("ag-row-dragging");
      }
      pushAll(classes, this.processClassesFromGridOptions(params.rowNode));
      pushAll(classes, this.preProcessRowClassRules(params.rowNode));
      classes.push(params.printLayout ? "ag-row-position-relative" : "ag-row-position-absolute");
      if (params.firstRowOnPage) {
        classes.push("ag-row-first");
      }
      if (params.lastRowOnPage) {
        classes.push("ag-row-last");
      }
      if (params.fullWidthRow) {
        if (params.pinned === "left") {
          classes.push("ag-cell-last-left-pinned");
        }
        if (params.pinned === "right") {
          classes.push("ag-cell-first-right-pinned");
        }
      }
      return classes;
    };
    RowCssClassCalculator2.prototype.processClassesFromGridOptions = function(rowNode) {
      var res = [];
      var process = function(rowCls) {
        if (typeof rowCls === "string") {
          res.push(rowCls);
        } else if (Array.isArray(rowCls)) {
          rowCls.forEach(function(e) {
            return res.push(e);
          });
        }
      };
      var rowClass = this.gridOptionsService.get("rowClass");
      if (rowClass) {
        if (typeof rowClass === "function") {
          console.warn("AG Grid: rowClass should not be a function, please use getRowClass instead");
          return [];
        }
        process(rowClass);
      }
      var rowClassFunc = this.gridOptionsService.getCallback("getRowClass");
      if (rowClassFunc) {
        var params = {
          data: rowNode.data,
          node: rowNode,
          rowIndex: rowNode.rowIndex
        };
        var rowClassFuncResult = rowClassFunc(params);
        process(rowClassFuncResult);
      }
      return res;
    };
    RowCssClassCalculator2.prototype.preProcessRowClassRules = function(rowNode) {
      var res = [];
      this.processRowClassRules(rowNode, function(className) {
        res.push(className);
      }, function(className) {
      });
      return res;
    };
    RowCssClassCalculator2.prototype.processRowClassRules = function(rowNode, onApplicableClass, onNotApplicableClass) {
      var rowClassParams = this.gridOptionsService.addGridCommonParams({
        data: rowNode.data,
        node: rowNode,
        rowIndex: rowNode.rowIndex
      });
      this.stylingService.processClassRules(void 0, this.gridOptionsService.get("rowClassRules"), rowClassParams, onApplicableClass, onNotApplicableClass);
    };
    RowCssClassCalculator2.prototype.calculateRowLevel = function(rowNode) {
      if (rowNode.group) {
        return rowNode.level;
      }
      return rowNode.parent ? rowNode.parent.level + 1 : 0;
    };
    __decorate$u([
      Autowired("stylingService")
    ], RowCssClassCalculator2.prototype, "stylingService", void 0);
    __decorate$u([
      Autowired("gridOptionsService")
    ], RowCssClassCalculator2.prototype, "gridOptionsService", void 0);
    RowCssClassCalculator2 = __decorate$u([
      Bean("rowCssClassCalculator")
    ], RowCssClassCalculator2);
    return RowCssClassCalculator2;
  }()
);
var __extends$t = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$t = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RowNodeSorter = (
  /** @class */
  function(_super) {
    __extends$t(RowNodeSorter2, _super);
    function RowNodeSorter2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    RowNodeSorter2.prototype.init = function() {
      var _this = this;
      this.isAccentedSort = this.gridOptionsService.get("accentedSort");
      this.primaryColumnsSortGroups = this.gridOptionsService.isColumnsSortingCoupledToGroup();
      this.addManagedPropertyListener("accentedSort", function(propChange) {
        return _this.isAccentedSort = propChange.currentValue;
      });
      this.addManagedPropertyListener("autoGroupColumnDef", function() {
        return _this.primaryColumnsSortGroups = _this.gridOptionsService.isColumnsSortingCoupledToGroup();
      });
    };
    RowNodeSorter2.prototype.doFullSort = function(rowNodes, sortOptions) {
      var mapper = function(rowNode, pos) {
        return { currentPos: pos, rowNode };
      };
      var sortedRowNodes = rowNodes.map(mapper);
      sortedRowNodes.sort(this.compareRowNodes.bind(this, sortOptions));
      return sortedRowNodes.map(function(item) {
        return item.rowNode;
      });
    };
    RowNodeSorter2.prototype.compareRowNodes = function(sortOptions, sortedNodeA, sortedNodeB) {
      var nodeA = sortedNodeA.rowNode;
      var nodeB = sortedNodeB.rowNode;
      for (var i = 0, len = sortOptions.length; i < len; i++) {
        var sortOption = sortOptions[i];
        var isDescending = sortOption.sort === "desc";
        var valueA = this.getValue(nodeA, sortOption.column);
        var valueB = this.getValue(nodeB, sortOption.column);
        var comparatorResult = void 0;
        var providedComparator = this.getComparator(sortOption, nodeA);
        if (providedComparator) {
          comparatorResult = providedComparator(valueA, valueB, nodeA, nodeB, isDescending);
        } else {
          comparatorResult = _.defaultComparator(valueA, valueB, this.isAccentedSort);
        }
        var validResult = !isNaN(comparatorResult);
        if (validResult && comparatorResult !== 0) {
          return sortOption.sort === "asc" ? comparatorResult : comparatorResult * -1;
        }
      }
      return sortedNodeA.currentPos - sortedNodeB.currentPos;
    };
    RowNodeSorter2.prototype.getComparator = function(sortOption, rowNode) {
      var column = sortOption.column;
      var comparatorOnCol = column.getColDef().comparator;
      if (comparatorOnCol != null) {
        return comparatorOnCol;
      }
      if (!column.getColDef().showRowGroup) {
        return;
      }
      var groupLeafField = !rowNode.group && column.getColDef().field;
      if (!groupLeafField) {
        return;
      }
      var primaryColumn = this.columnModel.getPrimaryColumn(groupLeafField);
      if (!primaryColumn) {
        return;
      }
      return primaryColumn.getColDef().comparator;
    };
    RowNodeSorter2.prototype.getValue = function(node, column) {
      var _a, _b;
      if (!this.primaryColumnsSortGroups) {
        return this.valueService.getValue(column, node, false, false);
      }
      var isNodeGroupedAtLevel = node.rowGroupColumn === column;
      if (isNodeGroupedAtLevel) {
        var isGroupRows = this.gridOptionsService.isGroupUseEntireRow(this.columnModel.isPivotActive());
        if (isGroupRows) {
          var leafChild = (_a = node.allLeafChildren) === null || _a === void 0 ? void 0 : _a[0];
          if (leafChild) {
            return this.valueService.getValue(column, leafChild, false, false);
          }
          return void 0;
        }
        var displayCol = this.columnModel.getGroupDisplayColumnForGroup(column.getId());
        if (!displayCol) {
          return void 0;
        }
        return (_b = node.groupData) === null || _b === void 0 ? void 0 : _b[displayCol.getId()];
      }
      if (node.group && column.getColDef().showRowGroup) {
        return void 0;
      }
      return this.valueService.getValue(column, node, false, false);
    };
    __decorate$t([
      Autowired("valueService")
    ], RowNodeSorter2.prototype, "valueService", void 0);
    __decorate$t([
      Autowired("columnModel")
    ], RowNodeSorter2.prototype, "columnModel", void 0);
    __decorate$t([
      PostConstruct
    ], RowNodeSorter2.prototype, "init", null);
    RowNodeSorter2 = __decorate$t([
      Bean("rowNodeSorter")
    ], RowNodeSorter2);
    return RowNodeSorter2;
  }(BeanStub)
);
var __extends$s = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$s = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CtrlsService = (
  /** @class */
  function(_super) {
    __extends$s(CtrlsService2, _super);
    function CtrlsService2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.ready = false;
      _this.readyCallbacks = [];
      return _this;
    }
    CtrlsService_1 = CtrlsService2;
    CtrlsService2.prototype.checkReady = function() {
      this.ready = this.gridCtrl != null && this.gridBodyCtrl != null && this.centerRowContainerCtrl != null && this.leftRowContainerCtrl != null && this.rightRowContainerCtrl != null && this.bottomCenterRowContainerCtrl != null && this.bottomLeftRowContainerCtrl != null && this.bottomRightRowContainerCtrl != null && this.topCenterRowContainerCtrl != null && this.topLeftRowContainerCtrl != null && this.topRightRowContainerCtrl != null && this.stickyTopCenterRowContainerCtrl != null && this.stickyTopLeftRowContainerCtrl != null && this.stickyTopRightRowContainerCtrl != null && this.centerHeaderRowContainerCtrl != null && this.leftHeaderRowContainerCtrl != null && this.rightHeaderRowContainerCtrl != null && this.fakeHScrollComp != null && this.fakeVScrollComp != null && this.gridHeaderCtrl != null;
      if (this.ready) {
        var p_1 = this.createReadyParams();
        this.readyCallbacks.forEach(function(c) {
          return c(p_1);
        });
        this.readyCallbacks.length = 0;
      }
    };
    CtrlsService2.prototype.whenReady = function(callback) {
      if (this.ready) {
        callback(this.createReadyParams());
      } else {
        this.readyCallbacks.push(callback);
      }
    };
    CtrlsService2.prototype.createReadyParams = function() {
      return {
        centerRowContainerCtrl: this.centerRowContainerCtrl,
        leftRowContainerCtrl: this.leftRowContainerCtrl,
        rightRowContainerCtrl: this.rightRowContainerCtrl,
        bottomCenterRowContainerCtrl: this.bottomCenterRowContainerCtrl,
        bottomLeftRowContainerCtrl: this.bottomLeftRowContainerCtrl,
        bottomRightRowContainerCtrl: this.bottomRightRowContainerCtrl,
        topCenterRowContainerCtrl: this.topCenterRowContainerCtrl,
        topLeftRowContainerCtrl: this.topLeftRowContainerCtrl,
        topRightRowContainerCtrl: this.topRightRowContainerCtrl,
        stickyTopCenterRowContainerCtrl: this.stickyTopCenterRowContainerCtrl,
        stickyTopLeftRowContainerCtrl: this.stickyTopLeftRowContainerCtrl,
        stickyTopRightRowContainerCtrl: this.stickyTopRightRowContainerCtrl,
        centerHeaderRowContainerCtrl: this.centerHeaderRowContainerCtrl,
        leftHeaderRowContainerCtrl: this.leftHeaderRowContainerCtrl,
        rightHeaderRowContainerCtrl: this.rightHeaderRowContainerCtrl,
        fakeHScrollComp: this.fakeHScrollComp,
        fakeVScrollComp: this.fakeVScrollComp,
        gridBodyCtrl: this.gridBodyCtrl,
        gridCtrl: this.gridCtrl,
        gridHeaderCtrl: this.gridHeaderCtrl
      };
    };
    CtrlsService2.prototype.registerFakeHScrollComp = function(comp) {
      this.fakeHScrollComp = comp;
      this.checkReady();
    };
    CtrlsService2.prototype.registerFakeVScrollComp = function(comp) {
      this.fakeVScrollComp = comp;
      this.checkReady();
    };
    CtrlsService2.prototype.registerGridHeaderCtrl = function(gridHeaderCtrl) {
      this.gridHeaderCtrl = gridHeaderCtrl;
      this.checkReady();
    };
    CtrlsService2.prototype.registerCenterRowContainerCtrl = function(ctrl) {
      this.centerRowContainerCtrl = ctrl;
      this.checkReady();
    };
    CtrlsService2.prototype.registerLeftRowContainerCtrl = function(ctrl) {
      this.leftRowContainerCtrl = ctrl;
      this.checkReady();
    };
    CtrlsService2.prototype.registerRightRowContainerCtrl = function(ctrl) {
      this.rightRowContainerCtrl = ctrl;
      this.checkReady();
    };
    CtrlsService2.prototype.registerTopCenterRowContainerCtrl = function(ctrl) {
      this.topCenterRowContainerCtrl = ctrl;
      this.checkReady();
    };
    CtrlsService2.prototype.registerTopLeftRowContainerCon = function(ctrl) {
      this.topLeftRowContainerCtrl = ctrl;
      this.checkReady();
    };
    CtrlsService2.prototype.registerTopRightRowContainerCtrl = function(ctrl) {
      this.topRightRowContainerCtrl = ctrl;
      this.checkReady();
    };
    CtrlsService2.prototype.registerStickyTopCenterRowContainerCtrl = function(ctrl) {
      this.stickyTopCenterRowContainerCtrl = ctrl;
      this.checkReady();
    };
    CtrlsService2.prototype.registerStickyTopLeftRowContainerCon = function(ctrl) {
      this.stickyTopLeftRowContainerCtrl = ctrl;
      this.checkReady();
    };
    CtrlsService2.prototype.registerStickyTopRightRowContainerCtrl = function(ctrl) {
      this.stickyTopRightRowContainerCtrl = ctrl;
      this.checkReady();
    };
    CtrlsService2.prototype.registerBottomCenterRowContainerCtrl = function(ctrl) {
      this.bottomCenterRowContainerCtrl = ctrl;
      this.checkReady();
    };
    CtrlsService2.prototype.registerBottomLeftRowContainerCtrl = function(ctrl) {
      this.bottomLeftRowContainerCtrl = ctrl;
      this.checkReady();
    };
    CtrlsService2.prototype.registerBottomRightRowContainerCtrl = function(ctrl) {
      this.bottomRightRowContainerCtrl = ctrl;
      this.checkReady();
    };
    CtrlsService2.prototype.registerHeaderContainer = function(ctrl, pinned) {
      switch (pinned) {
        case "left":
          this.leftHeaderRowContainerCtrl = ctrl;
          break;
        case "right":
          this.rightHeaderRowContainerCtrl = ctrl;
          break;
        default:
          this.centerHeaderRowContainerCtrl = ctrl;
          break;
      }
      this.checkReady();
    };
    CtrlsService2.prototype.registerGridBodyCtrl = function(ctrl) {
      this.gridBodyCtrl = ctrl;
      this.checkReady();
    };
    CtrlsService2.prototype.registerGridCtrl = function(ctrl) {
      this.gridCtrl = ctrl;
      this.checkReady();
    };
    CtrlsService2.prototype.getFakeHScrollComp = function() {
      return this.fakeHScrollComp;
    };
    CtrlsService2.prototype.getFakeVScrollComp = function() {
      return this.fakeVScrollComp;
    };
    CtrlsService2.prototype.getGridHeaderCtrl = function() {
      return this.gridHeaderCtrl;
    };
    CtrlsService2.prototype.getGridCtrl = function() {
      return this.gridCtrl;
    };
    CtrlsService2.prototype.getCenterRowContainerCtrl = function() {
      return this.centerRowContainerCtrl;
    };
    CtrlsService2.prototype.getTopCenterRowContainerCtrl = function() {
      return this.topCenterRowContainerCtrl;
    };
    CtrlsService2.prototype.getBottomCenterRowContainerCtrl = function() {
      return this.bottomCenterRowContainerCtrl;
    };
    CtrlsService2.prototype.getStickyTopCenterRowContainerCtrl = function() {
      return this.stickyTopCenterRowContainerCtrl;
    };
    CtrlsService2.prototype.getGridBodyCtrl = function() {
      return this.gridBodyCtrl;
    };
    CtrlsService2.prototype.getHeaderRowContainerCtrls = function() {
      return [this.leftHeaderRowContainerCtrl, this.rightHeaderRowContainerCtrl, this.centerHeaderRowContainerCtrl];
    };
    CtrlsService2.prototype.getHeaderRowContainerCtrl = function(pinned) {
      switch (pinned) {
        case "left":
          return this.leftHeaderRowContainerCtrl;
        case "right":
          return this.rightHeaderRowContainerCtrl;
        default:
          return this.centerHeaderRowContainerCtrl;
      }
    };
    var CtrlsService_1;
    CtrlsService2.NAME = "ctrlsService";
    CtrlsService2 = CtrlsService_1 = __decorate$s([
      Bean(CtrlsService_1.NAME)
    ], CtrlsService2);
    return CtrlsService2;
  }(BeanStub)
);
var __extends$r = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$r = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CtrlsFactory = (
  /** @class */
  function(_super) {
    __extends$r(CtrlsFactory2, _super);
    function CtrlsFactory2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.registry = {};
      return _this;
    }
    CtrlsFactory2.prototype.register = function(meta) {
      this.registry[meta.controllerName] = meta.controllerClass;
    };
    CtrlsFactory2.prototype.getInstance = function(name) {
      var ControllerClass = this.registry[name];
      if (ControllerClass == null) {
        return void 0;
      }
      return new ControllerClass();
    };
    CtrlsFactory2 = __decorate$r([
      Bean("ctrlsFactory")
    ], CtrlsFactory2);
    return CtrlsFactory2;
  }(BeanStub)
);
var __extends$q = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$q = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AbstractFakeScrollComp = (
  /** @class */
  function(_super) {
    __extends$q(AbstractFakeScrollComp2, _super);
    function AbstractFakeScrollComp2(template, direction) {
      var _this = _super.call(this, template) || this;
      _this.direction = direction;
      _this.hideTimeout = null;
      return _this;
    }
    AbstractFakeScrollComp2.prototype.postConstruct = function() {
      this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
      this.onScrollVisibilityChanged();
      this.addOrRemoveCssClass("ag-apple-scrollbar", isMacOsUserAgent() || isIOSUserAgent());
    };
    AbstractFakeScrollComp2.prototype.initialiseInvisibleScrollbar = function() {
      if (this.invisibleScrollbar !== void 0) {
        return;
      }
      this.invisibleScrollbar = isInvisibleScrollbar();
      if (this.invisibleScrollbar) {
        this.hideAndShowInvisibleScrollAsNeeded();
        this.addActiveListenerToggles();
      }
    };
    AbstractFakeScrollComp2.prototype.addActiveListenerToggles = function() {
      var _this = this;
      var activateEvents = ["mouseenter", "mousedown", "touchstart"];
      var deactivateEvents = ["mouseleave", "touchend"];
      var eGui = this.getGui();
      activateEvents.forEach(function(eventName) {
        return _this.addManagedListener(eGui, eventName, function() {
          return _this.addOrRemoveCssClass("ag-scrollbar-active", true);
        });
      });
      deactivateEvents.forEach(function(eventName) {
        return _this.addManagedListener(eGui, eventName, function() {
          return _this.addOrRemoveCssClass("ag-scrollbar-active", false);
        });
      });
    };
    AbstractFakeScrollComp2.prototype.onScrollVisibilityChanged = function() {
      var _this = this;
      if (this.invisibleScrollbar === void 0) {
        this.initialiseInvisibleScrollbar();
      }
      this.animationFrameService.requestAnimationFrame(function() {
        return _this.setScrollVisible();
      });
    };
    AbstractFakeScrollComp2.prototype.hideAndShowInvisibleScrollAsNeeded = function() {
      var _this = this;
      this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, function(params) {
        if (params.direction === _this.direction) {
          if (_this.hideTimeout !== null) {
            window.clearTimeout(_this.hideTimeout);
            _this.hideTimeout = null;
          }
          _this.addOrRemoveCssClass("ag-scrollbar-scrolling", true);
        }
      });
      this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL_END, function() {
        _this.hideTimeout = window.setTimeout(function() {
          _this.addOrRemoveCssClass("ag-scrollbar-scrolling", false);
          _this.hideTimeout = null;
        }, 400);
      });
    };
    AbstractFakeScrollComp2.prototype.attemptSettingScrollPosition = function(value) {
      var _this = this;
      var viewport = this.getViewport();
      waitUntil(function() {
        return isVisible(viewport);
      }, function() {
        return _this.setScrollPosition(value);
      }, 100);
    };
    AbstractFakeScrollComp2.prototype.getViewport = function() {
      return this.eViewport;
    };
    AbstractFakeScrollComp2.prototype.getContainer = function() {
      return this.eContainer;
    };
    AbstractFakeScrollComp2.prototype.onScrollCallback = function(fn) {
      this.addManagedListener(this.getViewport(), "scroll", fn);
    };
    __decorate$q([
      RefSelector("eViewport")
    ], AbstractFakeScrollComp2.prototype, "eViewport", void 0);
    __decorate$q([
      RefSelector("eContainer")
    ], AbstractFakeScrollComp2.prototype, "eContainer", void 0);
    __decorate$q([
      Autowired("scrollVisibleService")
    ], AbstractFakeScrollComp2.prototype, "scrollVisibleService", void 0);
    __decorate$q([
      Autowired("ctrlsService")
    ], AbstractFakeScrollComp2.prototype, "ctrlsService", void 0);
    __decorate$q([
      Autowired("animationFrameService")
    ], AbstractFakeScrollComp2.prototype, "animationFrameService", void 0);
    return AbstractFakeScrollComp2;
  }(Component2)
);
var __extends$p = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$p = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FakeHScrollComp = (
  /** @class */
  function(_super) {
    __extends$p(FakeHScrollComp2, _super);
    function FakeHScrollComp2() {
      return _super.call(this, FakeHScrollComp2.TEMPLATE, "horizontal") || this;
    }
    FakeHScrollComp2.prototype.postConstruct = function() {
      var _this = this;
      _super.prototype.postConstruct.call(this);
      var spacerWidthsListener = this.setFakeHScrollSpacerWidths.bind(this);
      this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, spacerWidthsListener);
      this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, spacerWidthsListener);
      this.addManagedListener(this.eventService, Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));
      this.addManagedPropertyListener("domLayout", spacerWidthsListener);
      this.ctrlsService.registerFakeHScrollComp(this);
      this.createManagedBean(new CenterWidthFeature(function(width) {
        return _this.eContainer.style.width = "".concat(width, "px");
      }));
      this.addManagedPropertyListeners(["suppressHorizontalScroll"], this.onScrollVisibilityChanged.bind(this));
    };
    FakeHScrollComp2.prototype.initialiseInvisibleScrollbar = function() {
      if (this.invisibleScrollbar !== void 0) {
        return;
      }
      this.enableRtl = this.gridOptionsService.get("enableRtl");
      _super.prototype.initialiseInvisibleScrollbar.call(this);
      if (this.invisibleScrollbar) {
        this.refreshCompBottom();
      }
    };
    FakeHScrollComp2.prototype.onPinnedRowDataChanged = function() {
      this.refreshCompBottom();
    };
    FakeHScrollComp2.prototype.refreshCompBottom = function() {
      if (!this.invisibleScrollbar) {
        return;
      }
      var bottomPinnedHeight = this.pinnedRowModel.getPinnedBottomTotalHeight();
      this.getGui().style.bottom = "".concat(bottomPinnedHeight, "px");
    };
    FakeHScrollComp2.prototype.onScrollVisibilityChanged = function() {
      _super.prototype.onScrollVisibilityChanged.call(this);
      this.setFakeHScrollSpacerWidths();
    };
    FakeHScrollComp2.prototype.setFakeHScrollSpacerWidths = function() {
      var vScrollShowing = this.scrollVisibleService.isVerticalScrollShowing();
      var rightSpacing = this.columnModel.getDisplayedColumnsRightWidth();
      var scrollOnRight = !this.enableRtl && vScrollShowing;
      var scrollbarWidth = this.gridOptionsService.getScrollbarWidth();
      if (scrollOnRight) {
        rightSpacing += scrollbarWidth;
      }
      setFixedWidth(this.eRightSpacer, rightSpacing);
      this.eRightSpacer.classList.toggle("ag-scroller-corner", rightSpacing <= scrollbarWidth);
      var leftSpacing = this.columnModel.getDisplayedColumnsLeftWidth();
      var scrollOnLeft = this.enableRtl && vScrollShowing;
      if (scrollOnLeft) {
        leftSpacing += scrollbarWidth;
      }
      setFixedWidth(this.eLeftSpacer, leftSpacing);
      this.eLeftSpacer.classList.toggle("ag-scroller-corner", leftSpacing <= scrollbarWidth);
    };
    FakeHScrollComp2.prototype.setScrollVisible = function() {
      var hScrollShowing = this.scrollVisibleService.isHorizontalScrollShowing();
      var invisibleScrollbar2 = this.invisibleScrollbar;
      var isSuppressHorizontalScroll = this.gridOptionsService.get("suppressHorizontalScroll");
      var scrollbarWidth = hScrollShowing ? this.gridOptionsService.getScrollbarWidth() || 0 : 0;
      var adjustedScrollbarWidth = scrollbarWidth === 0 && invisibleScrollbar2 ? 16 : scrollbarWidth;
      var scrollContainerSize = !isSuppressHorizontalScroll ? adjustedScrollbarWidth : 0;
      this.addOrRemoveCssClass("ag-scrollbar-invisible", invisibleScrollbar2);
      setFixedHeight(this.getGui(), scrollContainerSize);
      setFixedHeight(this.eViewport, scrollContainerSize);
      setFixedHeight(this.eContainer, scrollContainerSize);
      this.setDisplayed(hScrollShowing, { skipAriaHidden: true });
    };
    FakeHScrollComp2.prototype.getScrollPosition = function() {
      return getScrollLeft(this.getViewport(), this.enableRtl);
    };
    FakeHScrollComp2.prototype.setScrollPosition = function(value) {
      if (!isVisible(this.getViewport())) {
        this.attemptSettingScrollPosition(value);
      }
      setScrollLeft(this.getViewport(), value, this.enableRtl);
    };
    FakeHScrollComp2.TEMPLATE = '<div class="ag-body-horizontal-scroll" aria-hidden="true">\n            <div class="ag-horizontal-left-spacer" ref="eLeftSpacer"></div>\n            <div class="ag-body-horizontal-scroll-viewport" ref="eViewport">\n                <div class="ag-body-horizontal-scroll-container" ref="eContainer"></div>\n            </div>\n            <div class="ag-horizontal-right-spacer" ref="eRightSpacer"></div>\n        </div>';
    __decorate$p([
      RefSelector("eLeftSpacer")
    ], FakeHScrollComp2.prototype, "eLeftSpacer", void 0);
    __decorate$p([
      RefSelector("eRightSpacer")
    ], FakeHScrollComp2.prototype, "eRightSpacer", void 0);
    __decorate$p([
      Autowired("columnModel")
    ], FakeHScrollComp2.prototype, "columnModel", void 0);
    __decorate$p([
      Autowired("pinnedRowModel")
    ], FakeHScrollComp2.prototype, "pinnedRowModel", void 0);
    __decorate$p([
      PostConstruct
    ], FakeHScrollComp2.prototype, "postConstruct", null);
    return FakeHScrollComp2;
  }(AbstractFakeScrollComp)
);
var __extends$o = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$o = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PinnedWidthService = (
  /** @class */
  function(_super) {
    __extends$o(PinnedWidthService2, _super);
    function PinnedWidthService2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    PinnedWidthService2.prototype.postConstruct = function() {
      var listener = this.checkContainerWidths.bind(this);
      this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);
      this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, listener);
      this.addManagedPropertyListener("domLayout", listener);
    };
    PinnedWidthService2.prototype.checkContainerWidths = function() {
      var printLayout = this.gridOptionsService.isDomLayout("print");
      var newLeftWidth = printLayout ? 0 : this.columnModel.getDisplayedColumnsLeftWidth();
      var newRightWidth = printLayout ? 0 : this.columnModel.getDisplayedColumnsRightWidth();
      if (newLeftWidth != this.leftWidth) {
        this.leftWidth = newLeftWidth;
        this.eventService.dispatchEvent({ type: Events.EVENT_LEFT_PINNED_WIDTH_CHANGED });
      }
      if (newRightWidth != this.rightWidth) {
        this.rightWidth = newRightWidth;
        this.eventService.dispatchEvent({ type: Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED });
      }
    };
    PinnedWidthService2.prototype.getPinnedRightWidth = function() {
      return this.rightWidth;
    };
    PinnedWidthService2.prototype.getPinnedLeftWidth = function() {
      return this.leftWidth;
    };
    __decorate$o([
      Autowired("columnModel")
    ], PinnedWidthService2.prototype, "columnModel", void 0);
    __decorate$o([
      PostConstruct
    ], PinnedWidthService2.prototype, "postConstruct", null);
    PinnedWidthService2 = __decorate$o([
      Bean("pinnedWidthService")
    ], PinnedWidthService2);
    return PinnedWidthService2;
  }(BeanStub)
);
var __extends$n = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$n = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RowNodeEventThrottle = (
  /** @class */
  function(_super) {
    __extends$n(RowNodeEventThrottle2, _super);
    function RowNodeEventThrottle2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.events = [];
      return _this;
    }
    RowNodeEventThrottle2.prototype.postConstruct = function() {
      if (this.rowModel.getType() == "clientSide") {
        this.clientSideRowModel = this.rowModel;
      }
    };
    RowNodeEventThrottle2.prototype.dispatchExpanded = function(event) {
      var _this = this;
      if (this.clientSideRowModel == null) {
        this.eventService.dispatchEvent(event);
        return;
      }
      this.events.push(event);
      var func = function() {
        if (_this.clientSideRowModel) {
          _this.clientSideRowModel.onRowGroupOpened();
        }
        _this.events.forEach(function(e) {
          return _this.eventService.dispatchEvent(e);
        });
        _this.events = [];
      };
      if (this.dispatchExpandedDebounced == null) {
        this.dispatchExpandedDebounced = this.animationFrameService.debounce(func);
      }
      this.dispatchExpandedDebounced();
    };
    __decorate$n([
      Autowired("animationFrameService")
    ], RowNodeEventThrottle2.prototype, "animationFrameService", void 0);
    __decorate$n([
      Autowired("rowModel")
    ], RowNodeEventThrottle2.prototype, "rowModel", void 0);
    __decorate$n([
      PostConstruct
    ], RowNodeEventThrottle2.prototype, "postConstruct", null);
    RowNodeEventThrottle2 = __decorate$n([
      Bean("rowNodeEventThrottle")
    ], RowNodeEventThrottle2);
    return RowNodeEventThrottle2;
  }(BeanStub)
);
var COLUMN_DEFINITION_DEPRECATIONS = {};
var CSRM_REQUIRES_ROW_GROUP_MODULE = function(_options, gridOptions) {
  var _a;
  if (((_a = gridOptions.rowModelType) !== null && _a !== void 0 ? _a : "clientSide") === "clientSide") {
    return { module: ModuleNames.RowGroupingModule };
  }
  return null;
};
var COLUMN_DEFINITION_VALIDATIONS = {
  // supported on all row models, but need module for client side.
  enableRowGroup: CSRM_REQUIRES_ROW_GROUP_MODULE,
  rowGroup: CSRM_REQUIRES_ROW_GROUP_MODULE,
  rowGroupIndex: CSRM_REQUIRES_ROW_GROUP_MODULE,
  enablePivot: CSRM_REQUIRES_ROW_GROUP_MODULE,
  enableValue: CSRM_REQUIRES_ROW_GROUP_MODULE,
  pivot: CSRM_REQUIRES_ROW_GROUP_MODULE,
  pivotIndex: CSRM_REQUIRES_ROW_GROUP_MODULE,
  aggFunc: CSRM_REQUIRES_ROW_GROUP_MODULE,
  cellEditor: function(options) {
    if (options.cellEditor === "agRichSelect" || options.cellEditor === "agRichSelectCellEditor") {
      return { module: ModuleNames.RichSelectModule };
    }
    return null;
  },
  menuTabs: function(options) {
    var _a;
    var enterpriseMenuTabs = ["columnsMenuTab", "generalMenuTab"];
    if ((_a = options.menuTabs) === null || _a === void 0 ? void 0 : _a.some(function(tab) {
      return enterpriseMenuTabs.includes(tab);
    })) {
      return {
        module: ModuleNames.MenuModule
      };
    }
    return null;
  },
  columnsMenuParams: {
    module: [ModuleNames.MenuModule, ModuleNames.ColumnsToolPanelModule]
  },
  headerCheckboxSelection: {
    supportedRowModels: ["clientSide", "serverSide"],
    dependencies: function(_options, _a) {
      var rowSelection = _a.rowSelection;
      return rowSelection === "multiple" ? null : "headerCheckboxSelection is only supported with rowSelection=multiple";
    }
  },
  headerCheckboxSelectionFilteredOnly: {
    supportedRowModels: ["clientSide"],
    dependencies: function(_options, _a) {
      var rowSelection = _a.rowSelection;
      return rowSelection === "multiple" ? null : "headerCheckboxSelectionFilteredOnly is only supported with rowSelection=multiple";
    }
  },
  headerCheckboxSelectionCurrentPageOnly: {
    supportedRowModels: ["clientSide"],
    dependencies: function(_options, _a) {
      var rowSelection = _a.rowSelection;
      return rowSelection === "multiple" ? null : "headerCheckboxSelectionCurrentPageOnly is only supported with rowSelection=multiple";
    }
  },
  children: function() {
    return COL_DEF_VALIDATORS;
  }
};
var COL_DEF_VALIDATORS = {
  objectName: "colDef",
  allProperties: ColDefUtil.ALL_PROPERTIES,
  docsUrl: "column-properties/",
  deprecations: COLUMN_DEFINITION_DEPRECATIONS,
  validations: COLUMN_DEFINITION_VALIDATIONS
};
var __read$9 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$7 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var GRID_OPTION_DEPRECATIONS = {
  enableChartToolPanelsButton: { version: "29", message: "The Chart Tool Panels button is now enabled by default. To hide the Chart Tool Panels button and display the hamburger button instead, set suppressChartToolPanelsButton=true." },
  functionsPassive: { version: "29.2" },
  onColumnRowGroupChangeRequest: { version: "29.2" },
  onColumnPivotChangeRequest: { version: "29.2" },
  onColumnValueChangeRequest: { version: "29.2" },
  onColumnAggFuncChangeRequest: { version: "29.2" },
  serverSideFilterAllLevels: { version: "30", message: "All server-side group levels are now filtered by default. This can be toggled using `serverSideOnlyRefreshFilteredGroups`." },
  suppressAggAtRootLevel: { version: "30", message: "The root level aggregation is now suppressed by default. This can be toggled using  `alwaysAggregateAtRootLevel`." },
  excludeHiddenColumnsFromQuickFilter: { version: "30", message: "Hidden columns are now excluded from the Quick Filter by default. This can be toggled using `includeHiddenColumnsInQuickFilter`." },
  enterMovesDown: { version: "30", renamed: "enterNavigatesVertically" },
  enterMovesDownAfterEdit: { version: "30", renamed: "enterNavigatesVerticallyAfterEdit" },
  suppressParentsInRowNodes: { version: "30.2", message: "Using suppressParentsInRowNodes is no longer recommended. To serialize nodes it is now recommended to instead remove the parent node reference before serialization." },
  advancedFilterModel: { version: "31", message: "Use `initialState.filter.advancedFilterModel` instead." },
  suppressAsyncEvents: { version: "31", message: "Events should be handled asynchronously." }
};
var GRID_OPTION_DEFAULTS = {
  suppressContextMenu: false,
  preventDefaultOnContextMenu: false,
  allowContextMenuWithControlKey: false,
  suppressMenuHide: false,
  enableBrowserTooltips: false,
  tooltipTrigger: "hover",
  tooltipShowDelay: 2e3,
  tooltipHideDelay: 1e4,
  tooltipMouseTrack: false,
  tooltipInteraction: false,
  copyHeadersToClipboard: false,
  copyGroupHeadersToClipboard: false,
  clipboardDelimiter: "	",
  suppressCopyRowsToClipboard: false,
  suppressCopySingleCellRanges: false,
  suppressLastEmptyLineOnPaste: false,
  suppressClipboardPaste: false,
  suppressClipboardApi: false,
  suppressCutToClipboard: false,
  maintainColumnOrder: false,
  suppressFieldDotNotation: false,
  allowDragFromColumnsToolPanel: false,
  suppressMovableColumns: false,
  suppressColumnMoveAnimation: false,
  suppressDragLeaveHidesColumns: false,
  suppressRowGroupHidesColumns: false,
  suppressAutoSize: false,
  autoSizePadding: 20,
  skipHeaderOnAutoSize: false,
  singleClickEdit: false,
  suppressClickEdit: false,
  readOnlyEdit: false,
  stopEditingWhenCellsLoseFocus: false,
  enterNavigatesVertically: false,
  enterNavigatesVerticallyAfterEdit: false,
  enableCellEditingOnBackspace: false,
  undoRedoCellEditing: false,
  undoRedoCellEditingLimit: 10,
  suppressCsvExport: false,
  suppressExcelExport: false,
  cacheQuickFilter: false,
  includeHiddenColumnsInQuickFilter: false,
  excludeChildrenWhenTreeDataFiltering: false,
  enableAdvancedFilter: false,
  includeHiddenColumnsInAdvancedFilter: false,
  enableCharts: false,
  suppressChartToolPanelsButton: false,
  masterDetail: false,
  keepDetailRows: false,
  keepDetailRowsCount: 10,
  detailRowAutoHeight: false,
  tabIndex: 0,
  rowBuffer: 10,
  valueCache: false,
  valueCacheNeverExpires: false,
  enableCellExpressions: false,
  suppressTouch: false,
  suppressFocusAfterRefresh: false,
  suppressAsyncEvents: false,
  suppressBrowserResizeObserver: false,
  suppressPropertyNamesCheck: false,
  suppressChangeDetection: false,
  debug: false,
  suppressLoadingOverlay: false,
  suppressNoRowsOverlay: false,
  pagination: false,
  paginationPageSize: 100,
  paginationPageSizeSelector: true,
  paginationAutoPageSize: false,
  paginateChildRows: false,
  suppressPaginationPanel: false,
  pivotMode: false,
  pivotPanelShow: "never",
  pivotDefaultExpanded: 0,
  pivotSuppressAutoColumn: false,
  suppressExpandablePivotGroups: false,
  functionsReadOnly: false,
  suppressAggFuncInHeader: false,
  alwaysAggregateAtRootLevel: false,
  aggregateOnlyChangedColumns: false,
  suppressAggFilteredOnly: false,
  removePivotHeaderRowWhenSingleValueColumn: false,
  animateRows: true,
  enableCellChangeFlash: false,
  cellFlashDelay: 500,
  cellFadeDelay: 1e3,
  allowShowChangeAfterFilter: false,
  domLayout: "normal",
  ensureDomOrder: false,
  enableRtl: false,
  suppressColumnVirtualisation: false,
  suppressMaxRenderedRowRestriction: false,
  suppressRowVirtualisation: false,
  rowDragManaged: false,
  suppressRowDrag: false,
  suppressMoveWhenRowDragging: false,
  rowDragEntireRow: false,
  rowDragMultiRow: false,
  embedFullWidthRows: false,
  groupDisplayType: "singleColumn",
  groupDefaultExpanded: 0,
  groupMaintainOrder: false,
  groupSelectsChildren: false,
  groupIncludeTotalFooter: false,
  groupSuppressBlankHeader: false,
  groupSelectsFiltered: false,
  showOpenedGroup: false,
  groupRemoveSingleChildren: false,
  groupRemoveLowestSingleChildren: false,
  groupHideOpenParents: false,
  groupAllowUnbalanced: false,
  rowGroupPanelShow: "never",
  suppressMakeColumnVisibleAfterUnGroup: false,
  treeData: false,
  rowGroupPanelSuppressSort: false,
  suppressGroupRowsSticky: false,
  rowModelType: "clientSide",
  asyncTransactionWaitMillis: 50,
  suppressModelUpdateAfterUpdateTransaction: false,
  cacheOverflowSize: 1,
  infiniteInitialRowCount: 1,
  serverSideInitialRowCount: 1,
  suppressServerSideInfiniteScroll: false,
  cacheBlockSize: 100,
  maxBlocksInCache: -1,
  maxConcurrentDatasourceRequests: 2,
  blockLoadDebounceMillis: 0,
  purgeClosedRowNodes: false,
  serverSideSortAllLevels: false,
  serverSideOnlyRefreshFilteredGroups: false,
  serverSideSortOnServer: false,
  serverSideFilterOnServer: false,
  serverSidePivotResultFieldSeparator: "_",
  viewportRowModelPageSize: 5,
  viewportRowModelBufferSize: 5,
  alwaysShowHorizontalScroll: false,
  alwaysShowVerticalScroll: false,
  debounceVerticalScrollbar: false,
  suppressHorizontalScroll: false,
  suppressScrollOnNewData: false,
  suppressScrollWhenPopupsAreOpen: false,
  suppressAnimationFrame: false,
  suppressMiddleClickScrolls: false,
  suppressPreventDefaultOnMouseWheel: false,
  rowMultiSelectWithClick: false,
  suppressRowDeselection: false,
  suppressRowClickSelection: false,
  suppressCellFocus: false,
  suppressMultiRangeSelection: false,
  enableCellTextSelection: false,
  enableRangeSelection: false,
  enableRangeHandle: false,
  enableFillHandle: false,
  fillHandleDirection: "xy",
  suppressClearOnFillReduction: false,
  accentedSort: false,
  unSortIcon: false,
  suppressMultiSort: false,
  alwaysMultiSort: false,
  suppressMaintainUnsortedOrder: false,
  suppressRowHoverHighlight: false,
  suppressRowTransform: false,
  columnHoverHighlight: false,
  deltaSort: false,
  enableGroupEdit: false,
  suppressGroupMaintainValueType: false,
  functionsPassive: false,
  groupLockGroupColumns: 0
};
var GRID_OPTION_VALIDATIONS = {
  sideBar: { module: ModuleNames.SideBarModule },
  statusBar: { module: ModuleNames.StatusBarModule },
  enableCharts: { module: ModuleNames.GridChartsModule },
  getMainMenuItems: { module: ModuleNames.MenuModule },
  getContextMenuItems: { module: ModuleNames.MenuModule },
  allowContextMenuWithControlKey: { module: ModuleNames.MenuModule },
  enableAdvancedFilter: { module: ModuleNames.AdvancedFilterModule },
  treeData: {
    supportedRowModels: ["clientSide", "serverSide"],
    module: ModuleNames.RowGroupingModule,
    dependencies: function(options) {
      var _a;
      var rowModel = (_a = options.rowModelType) !== null && _a !== void 0 ? _a : "clientSide";
      switch (rowModel) {
        case "clientSide":
          var csrmWarning = "treeData requires 'getDataPath' in the ".concat(rowModel, " row model.");
          return options.getDataPath ? null : csrmWarning;
        case "serverSide":
          var ssrmWarning = "treeData requires 'isServerSideGroup' and 'getServerSideGroupKey' in the ".concat(rowModel, " row model.");
          return options.isServerSideGroup && options.getServerSideGroupKey ? null : ssrmWarning;
      }
      return null;
    }
  },
  masterDetail: { module: ModuleNames.MasterDetailModule },
  enableRangeSelection: { module: ModuleNames.RangeSelectionModule },
  enableRangeHandle: {
    dependencies: {
      enableRangeSelection: [true]
    }
  },
  enableFillHandle: {
    dependencies: {
      enableRangeSelection: [true]
    }
  },
  groupDefaultExpanded: {
    supportedRowModels: ["clientSide"]
  },
  groupIncludeFooter: {
    supportedRowModels: ["clientSide", "serverSide"],
    dependencies: function(options) {
      var _a;
      var rowModel = (_a = options.rowModelType) !== null && _a !== void 0 ? _a : "clientSide";
      switch (rowModel) {
        case "clientSide":
          return null;
        case "serverSide":
          var warning = "groupIncludeFooter is not supported alongside suppressServerSideInfiniteScroll";
          return options.suppressServerSideInfiniteScroll ? warning : null;
      }
      return null;
    }
  },
  groupIncludeTotalFooter: {
    supportedRowModels: ["clientSide"]
  },
  groupRemoveSingleChildren: {
    dependencies: {
      groupHideOpenParents: [void 0, false],
      groupRemoveLowestSingleChildren: [void 0, false]
    }
  },
  groupRemoveLowestSingleChildren: {
    dependencies: {
      groupHideOpenParents: [void 0, false],
      groupRemoveSingleChildren: [void 0, false]
    }
  },
  groupSelectsChildren: {
    dependencies: {
      rowSelection: ["multiple"]
    }
  },
  suppressParentsInRowNodes: {
    dependencies: {
      groupSelectsChildren: [void 0, false]
    }
  },
  viewportDatasource: {
    supportedRowModels: ["viewport"],
    module: ModuleNames.ViewportRowModelModule
  },
  serverSideDatasource: {
    supportedRowModels: ["serverSide"],
    module: ModuleNames.ServerSideRowModelModule
  },
  cacheBlockSize: {
    supportedRowModels: ["serverSide", "infinite"]
  },
  datasource: {
    supportedRowModels: ["infinite"],
    module: ModuleNames.InfiniteRowModelModule
  },
  rowData: {
    supportedRowModels: ["clientSide"],
    module: ModuleNames.ClientSideRowModelModule
  },
  columnDefs: function() {
    return COL_DEF_VALIDATORS;
  },
  defaultColDef: function() {
    return COL_DEF_VALIDATORS;
  },
  defaultColGroupDef: function() {
    return COL_DEF_VALIDATORS;
  },
  autoGroupColumnDef: function() {
    return COL_DEF_VALIDATORS;
  }
};
var GRID_OPTIONS_VALIDATORS = {
  objectName: "gridOptions",
  allProperties: __spreadArray$7(__spreadArray$7([], __read$9(PropertyKeys.ALL_PROPERTIES), false), __read$9(ComponentUtil.EVENT_CALLBACKS), false),
  propertyExceptions: ["api", "columnApi"],
  docsUrl: "grid-options/",
  deprecations: GRID_OPTION_DEPRECATIONS,
  validations: GRID_OPTION_VALIDATIONS
};
var __decorate$m = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __read$8 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$6 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var GridOptionsService = (
  /** @class */
  function() {
    function GridOptionsService2() {
      var _this = this;
      this.destroyed = false;
      this.domDataKey = "__AG_" + Math.random().toString();
      this.propertyEventService = new EventService();
      this.globalEventHandlerFactory = function(restrictToSyncOnly) {
        return function(eventName, event) {
          if (_this.destroyed) {
            return;
          }
          var alwaysSync = GridOptionsService_1.alwaysSyncGlobalEvents.has(eventName);
          if (alwaysSync && !restrictToSyncOnly || !alwaysSync && restrictToSyncOnly) {
            return;
          }
          var eventHandlerName = ComponentUtil.getCallbackForEvent(eventName);
          var eventHandler = _this.gridOptions[eventHandlerName];
          if (typeof eventHandler === "function") {
            _this.frameworkOverrides.wrapOutgoing(function() {
              eventHandler(event);
            });
          }
        };
      };
    }
    GridOptionsService_1 = GridOptionsService2;
    Object.defineProperty(GridOptionsService2.prototype, "context", {
      // This is quicker then having code call gridOptionsService.get('context')
      get: function() {
        return this.gridOptions["context"];
      },
      enumerable: false,
      configurable: true
    });
    GridOptionsService2.prototype.init = function() {
      this.columnApi = new ColumnApi(this.api);
      var async = !this.get("suppressAsyncEvents");
      this.eventService.addGlobalListener(this.globalEventHandlerFactory().bind(this), async);
      this.eventService.addGlobalListener(this.globalEventHandlerFactory(true).bind(this), false);
      this.propertyEventService.setFrameworkOverrides(this.frameworkOverrides);
      this.getScrollbarWidth();
    };
    GridOptionsService2.prototype.destroy = function() {
      this.destroyed = true;
      this.columnApi = void 0;
    };
    GridOptionsService2.prototype.get = function(property) {
      var _a;
      return (_a = this.gridOptions[property]) !== null && _a !== void 0 ? _a : GRID_OPTION_DEFAULTS[property];
    };
    GridOptionsService2.prototype.getCallback = function(property) {
      return this.mergeGridCommonParams(this.gridOptions[property]);
    };
    GridOptionsService2.prototype.exists = function(property) {
      return exists(this.gridOptions[property]);
    };
    GridOptionsService2.prototype.mergeGridCommonParams = function(callback) {
      var _this = this;
      if (callback) {
        var wrapped = function(callbackParams) {
          var mergedParams = callbackParams;
          mergedParams.api = _this.api;
          mergedParams.columnApi = _this.columnApi;
          mergedParams.context = _this.context;
          return callback(mergedParams);
        };
        return wrapped;
      }
      return callback;
    };
    GridOptionsService2.toBoolean = function(value) {
      if (typeof value === "boolean") {
        return value;
      }
      if (typeof value === "string") {
        return value.toUpperCase() === "TRUE" || value == "";
      }
      return false;
    };
    GridOptionsService2.toNumber = function(value) {
      if (typeof value === "number") {
        return value;
      }
      if (typeof value === "string") {
        var parsed = parseInt(value);
        if (isNaN(parsed)) {
          return void 0;
        }
        return parsed;
      }
      return void 0;
    };
    GridOptionsService2.toConstrainedNum = function(min, max) {
      return function(value) {
        var num = GridOptionsService_1.toNumber(value);
        if (num == null || num < min || num > max) {
          return void 0;
        }
        return num;
      };
    };
    GridOptionsService2.getCoercedValue = function(key, value) {
      var coerceFunc = GridOptionsService_1.PROPERTY_COERCIONS.get(key);
      if (!coerceFunc) {
        return value;
      }
      return coerceFunc(value);
    };
    GridOptionsService2.getCoercedGridOptions = function(gridOptions) {
      var newGo = {};
      Object.entries(gridOptions).forEach(function(_a) {
        var _b = __read$8(_a, 2), key = _b[0], value = _b[1];
        var coercedValue = GridOptionsService_1.getCoercedValue(key, value);
        newGo[key] = coercedValue;
      });
      return newGo;
    };
    GridOptionsService2.prototype.updateGridOptions = function(_a) {
      var _this = this;
      var options = _a.options, _b = _a.source, source = _b === void 0 ? "api" : _b;
      var changeSet = { id: GridOptionsService_1.changeSetId++, properties: [] };
      var events = [];
      Object.entries(options).forEach(function(_a2) {
        var _b2 = __read$8(_a2, 2), key = _b2[0], value = _b2[1];
        if (source === "api" && INITIAL_GRID_OPTION_KEYS[key]) {
          warnOnce("".concat(key, " is an initial property and cannot be updated."));
        }
        var coercedValue = GridOptionsService_1.getCoercedValue(key, value);
        var shouldForce = typeof coercedValue === "object" && source === "api";
        var previousValue = _this.gridOptions[key];
        if (shouldForce || previousValue !== coercedValue) {
          _this.gridOptions[key] = coercedValue;
          var event_1 = {
            type: key,
            currentValue: coercedValue,
            previousValue,
            changeSet,
            source
          };
          events.push(event_1);
        }
      });
      this.validationService.processGridOptions(this.gridOptions);
      changeSet.properties = events.map(function(event) {
        return event.type;
      });
      events.forEach(function(event) {
        if (_this.gridOptions.debug) {
          console.log("AG Grid: Updated property ".concat(event.type, " from "), event.previousValue, " to  ", event.currentValue);
        }
        _this.propertyEventService.dispatchEvent(event);
      });
    };
    GridOptionsService2.prototype.addEventListener = function(key, listener) {
      this.propertyEventService.addEventListener(key, listener);
    };
    GridOptionsService2.prototype.removeEventListener = function(key, listener) {
      this.propertyEventService.removeEventListener(key, listener);
    };
    GridOptionsService2.prototype.getGridId = function() {
      return this.api.getGridId();
    };
    GridOptionsService2.prototype.getScrollbarWidth = function() {
      if (this.scrollbarWidth == null) {
        var useGridOptions = typeof this.gridOptions.scrollbarWidth === "number" && this.gridOptions.scrollbarWidth >= 0;
        var scrollbarWidth = useGridOptions ? this.gridOptions.scrollbarWidth : getScrollbarWidth();
        if (scrollbarWidth != null) {
          this.scrollbarWidth = scrollbarWidth;
          this.eventService.dispatchEvent({
            type: Events.EVENT_SCROLLBAR_WIDTH_CHANGED
          });
        }
      }
      return this.scrollbarWidth;
    };
    GridOptionsService2.prototype.isRowModelType = function(rowModelType) {
      return this.gridOptions.rowModelType === rowModelType || rowModelType === "clientSide" && missing(this.gridOptions.rowModelType);
    };
    GridOptionsService2.prototype.isDomLayout = function(domLayout) {
      var _a;
      var gridLayout = (_a = this.gridOptions.domLayout) !== null && _a !== void 0 ? _a : "normal";
      return gridLayout === domLayout;
    };
    GridOptionsService2.prototype.isRowSelection = function() {
      return this.gridOptions.rowSelection === "single" || this.gridOptions.rowSelection === "multiple";
    };
    GridOptionsService2.prototype.useAsyncEvents = function() {
      return !this.get("suppressAsyncEvents");
    };
    GridOptionsService2.prototype.isGetRowHeightFunction = function() {
      return typeof this.gridOptions.getRowHeight === "function";
    };
    GridOptionsService2.prototype.getRowHeightForNode = function(rowNode, allowEstimate, defaultRowHeight) {
      if (allowEstimate === void 0) {
        allowEstimate = false;
      }
      if (defaultRowHeight == null) {
        defaultRowHeight = this.environment.getDefaultRowHeight();
      }
      if (this.isGetRowHeightFunction()) {
        if (allowEstimate) {
          return { height: defaultRowHeight, estimated: true };
        }
        var params = {
          node: rowNode,
          data: rowNode.data
        };
        var height = this.getCallback("getRowHeight")(params);
        if (this.isNumeric(height)) {
          if (height === 0) {
            warnOnce("The return of `getRowHeight` cannot be zero. If the intention is to hide rows, use a filter instead.");
          }
          return { height: Math.max(1, height), estimated: false };
        }
      }
      if (rowNode.detail && this.get("masterDetail")) {
        return this.getMasterDetailRowHeight();
      }
      var rowHeight = this.gridOptions.rowHeight && this.isNumeric(this.gridOptions.rowHeight) ? this.gridOptions.rowHeight : defaultRowHeight;
      return { height: rowHeight, estimated: false };
    };
    GridOptionsService2.prototype.getMasterDetailRowHeight = function() {
      if (this.get("detailRowAutoHeight")) {
        return { height: 1, estimated: false };
      }
      if (this.isNumeric(this.gridOptions.detailRowHeight)) {
        return { height: this.gridOptions.detailRowHeight, estimated: false };
      }
      return { height: 300, estimated: false };
    };
    GridOptionsService2.prototype.getRowHeightAsNumber = function() {
      if (!this.gridOptions.rowHeight || missing(this.gridOptions.rowHeight)) {
        return this.environment.getDefaultRowHeight();
      }
      var rowHeight = this.environment.refreshRowHeightVariable();
      if (rowHeight !== -1) {
        return rowHeight;
      }
      console.warn("AG Grid row height must be a number if not using standard row model");
      return this.environment.getDefaultRowHeight();
    };
    GridOptionsService2.prototype.isNumeric = function(value) {
      return !isNaN(value) && typeof value === "number" && isFinite(value);
    };
    GridOptionsService2.prototype.getDomDataKey = function() {
      return this.domDataKey;
    };
    GridOptionsService2.prototype.getDomData = function(element, key) {
      var domData = element[this.getDomDataKey()];
      return domData ? domData[key] : void 0;
    };
    GridOptionsService2.prototype.setDomData = function(element, key, value) {
      var domDataKey = this.getDomDataKey();
      var domData = element[domDataKey];
      if (missing(domData)) {
        domData = {};
        element[domDataKey] = domData;
      }
      domData[key] = value;
    };
    GridOptionsService2.prototype.getDocument = function() {
      var result = null;
      if (this.gridOptions.getDocument && exists(this.gridOptions.getDocument)) {
        result = this.gridOptions.getDocument();
      } else if (this.eGridDiv) {
        result = this.eGridDiv.ownerDocument;
      }
      if (result && exists(result)) {
        return result;
      }
      return document;
    };
    GridOptionsService2.prototype.getWindow = function() {
      var eDocument = this.getDocument();
      return eDocument.defaultView || window;
    };
    GridOptionsService2.prototype.getRootNode = function() {
      return this.eGridDiv.getRootNode();
    };
    GridOptionsService2.prototype.getAsyncTransactionWaitMillis = function() {
      return exists(this.gridOptions.asyncTransactionWaitMillis) ? this.gridOptions.asyncTransactionWaitMillis : 50;
    };
    GridOptionsService2.prototype.isAnimateRows = function() {
      if (this.get("ensureDomOrder")) {
        return false;
      }
      return this.get("animateRows");
    };
    GridOptionsService2.prototype.isGroupRowsSticky = function() {
      if (this.get("suppressGroupRowsSticky") || this.get("paginateChildRows") || this.get("groupHideOpenParents") || this.isDomLayout("print")) {
        return false;
      }
      return true;
    };
    GridOptionsService2.prototype.isColumnsSortingCoupledToGroup = function() {
      var autoGroupColumnDef = this.gridOptions.autoGroupColumnDef;
      return !(autoGroupColumnDef === null || autoGroupColumnDef === void 0 ? void 0 : autoGroupColumnDef.comparator) && !this.get("treeData");
    };
    GridOptionsService2.prototype.getGroupAggFiltering = function() {
      var userValue = this.gridOptions.groupAggFiltering;
      if (typeof userValue === "function") {
        return this.getCallback("groupAggFiltering");
      }
      if (userValue === true) {
        return function() {
          return true;
        };
      }
      return void 0;
    };
    GridOptionsService2.prototype.isGroupIncludeFooterTrueOrCallback = function() {
      var userValue = this.gridOptions.groupIncludeFooter;
      return userValue === true || typeof userValue === "function";
    };
    GridOptionsService2.prototype.getGroupIncludeFooter = function() {
      var userValue = this.gridOptions.groupIncludeFooter;
      if (typeof userValue === "function") {
        return this.getCallback("groupIncludeFooter");
      }
      if (userValue === true) {
        return function() {
          return true;
        };
      }
      return function() {
        return false;
      };
    };
    GridOptionsService2.prototype.isGroupMultiAutoColumn = function() {
      if (this.gridOptions.groupDisplayType) {
        return this.gridOptions.groupDisplayType === "multipleColumns";
      }
      return this.get("groupHideOpenParents");
    };
    GridOptionsService2.prototype.isGroupUseEntireRow = function(pivotMode) {
      if (pivotMode) {
        return false;
      }
      return this.gridOptions.groupDisplayType === "groupRows";
    };
    GridOptionsService2.prototype.getGridCommonParams = function() {
      return {
        api: this.api,
        columnApi: this.columnApi,
        context: this.context
      };
    };
    GridOptionsService2.prototype.addGridCommonParams = function(params) {
      var updatedParams = params;
      updatedParams.api = this.api;
      updatedParams.columnApi = this.columnApi;
      updatedParams.context = this.context;
      return updatedParams;
    };
    var GridOptionsService_1;
    GridOptionsService2.alwaysSyncGlobalEvents = /* @__PURE__ */ new Set([Events.EVENT_GRID_PRE_DESTROYED]);
    GridOptionsService2.PROPERTY_COERCIONS = new Map(__spreadArray$6(__spreadArray$6(__spreadArray$6([], __read$8(PropertyKeys.BOOLEAN_PROPERTIES.map(function(key) {
      return [key, GridOptionsService_1.toBoolean];
    })), false), __read$8(PropertyKeys.NUMBER_PROPERTIES.map(function(key) {
      return [key, GridOptionsService_1.toNumber];
    })), false), [
      ["groupAggFiltering", function(val) {
        return typeof val === "function" ? val : GridOptionsService_1.toBoolean(val);
      }],
      ["pageSize", GridOptionsService_1.toConstrainedNum(1, Number.MAX_VALUE)],
      ["autoSizePadding", GridOptionsService_1.toConstrainedNum(0, Number.MAX_VALUE)],
      ["keepDetailRowsCount", GridOptionsService_1.toConstrainedNum(1, Number.MAX_VALUE)],
      ["rowBuffer", GridOptionsService_1.toConstrainedNum(0, Number.MAX_VALUE)],
      ["infiniteInitialRowCount", GridOptionsService_1.toConstrainedNum(1, Number.MAX_VALUE)],
      ["cacheOverflowSize", GridOptionsService_1.toConstrainedNum(1, Number.MAX_VALUE)],
      ["cacheBlockSize", GridOptionsService_1.toConstrainedNum(1, Number.MAX_VALUE)],
      ["serverSideInitialRowCount", GridOptionsService_1.toConstrainedNum(1, Number.MAX_VALUE)],
      ["viewportRowModelPageSize", GridOptionsService_1.toConstrainedNum(1, Number.MAX_VALUE)],
      ["viewportRowModelBufferSize", GridOptionsService_1.toConstrainedNum(0, Number.MAX_VALUE)]
    ], false));
    GridOptionsService2.changeSetId = 0;
    __decorate$m([
      Autowired("gridOptions")
    ], GridOptionsService2.prototype, "gridOptions", void 0);
    __decorate$m([
      Autowired("eventService")
    ], GridOptionsService2.prototype, "eventService", void 0);
    __decorate$m([
      Autowired("environment")
    ], GridOptionsService2.prototype, "environment", void 0);
    __decorate$m([
      Autowired("frameworkOverrides")
    ], GridOptionsService2.prototype, "frameworkOverrides", void 0);
    __decorate$m([
      Autowired("eGridDiv")
    ], GridOptionsService2.prototype, "eGridDiv", void 0);
    __decorate$m([
      Autowired("validationService")
    ], GridOptionsService2.prototype, "validationService", void 0);
    __decorate$m([
      Autowired("gridApi")
    ], GridOptionsService2.prototype, "api", void 0);
    __decorate$m([
      PostConstruct
    ], GridOptionsService2.prototype, "init", null);
    __decorate$m([
      PreDestroy
    ], GridOptionsService2.prototype, "destroy", null);
    GridOptionsService2 = GridOptionsService_1 = __decorate$m([
      Bean("gridOptionsService")
    ], GridOptionsService2);
    return GridOptionsService2;
  }()
);
var __extends$m = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$l = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var LocaleService = (
  /** @class */
  function(_super) {
    __extends$m(LocaleService2, _super);
    function LocaleService2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    LocaleService2.prototype.getLocaleTextFunc = function() {
      var getLocaleText = this.gridOptionsService.getCallback("getLocaleText");
      if (getLocaleText) {
        return function(key, defaultValue, variableValues) {
          var params = {
            key,
            defaultValue,
            variableValues
          };
          return getLocaleText(params);
        };
      }
      var localeText = this.gridOptionsService.get("localeText");
      return function(key, defaultValue, variableValues) {
        var localisedText = localeText && localeText[key];
        if (localisedText && variableValues && variableValues.length) {
          var found = 0;
          while (true) {
            if (found >= variableValues.length) {
              break;
            }
            var idx = localisedText.indexOf("${variable}");
            if (idx === -1) {
              break;
            }
            localisedText = localisedText.replace("${variable}", variableValues[found++]);
          }
        }
        return localisedText !== null && localisedText !== void 0 ? localisedText : defaultValue;
      };
    };
    LocaleService2 = __decorate$l([
      Bean("localeService")
    ], LocaleService2);
    return LocaleService2;
  }(BeanStub)
);
var __extends$l = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$k = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FakeVScrollComp = (
  /** @class */
  function(_super) {
    __extends$l(FakeVScrollComp2, _super);
    function FakeVScrollComp2() {
      return _super.call(this, FakeVScrollComp2.TEMPLATE, "vertical") || this;
    }
    FakeVScrollComp2.prototype.postConstruct = function() {
      _super.prototype.postConstruct.call(this);
      this.createManagedBean(new SetHeightFeature(this.eContainer));
      this.ctrlsService.registerFakeVScrollComp(this);
      this.addManagedListener(this.eventService, Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED, this.onRowContainerHeightChanged.bind(this));
    };
    FakeVScrollComp2.prototype.setScrollVisible = function() {
      var vScrollShowing = this.scrollVisibleService.isVerticalScrollShowing();
      var invisibleScrollbar2 = this.invisibleScrollbar;
      var scrollbarWidth = vScrollShowing ? this.gridOptionsService.getScrollbarWidth() || 0 : 0;
      var adjustedScrollbarWidth = scrollbarWidth === 0 && invisibleScrollbar2 ? 16 : scrollbarWidth;
      this.addOrRemoveCssClass("ag-scrollbar-invisible", invisibleScrollbar2);
      setFixedWidth(this.getGui(), adjustedScrollbarWidth);
      setFixedWidth(this.eViewport, adjustedScrollbarWidth);
      setFixedWidth(this.eContainer, adjustedScrollbarWidth);
      this.setDisplayed(vScrollShowing, { skipAriaHidden: true });
    };
    FakeVScrollComp2.prototype.onRowContainerHeightChanged = function() {
      var ctrlsService = this.ctrlsService;
      var gridBodyCtrl = ctrlsService.getGridBodyCtrl();
      var gridBodyViewportEl = gridBodyCtrl.getBodyViewportElement();
      var eViewportScrollTop = this.getScrollPosition();
      var gridBodyViewportScrollTop = gridBodyViewportEl.scrollTop;
      if (eViewportScrollTop != gridBodyViewportScrollTop) {
        this.setScrollPosition(gridBodyViewportScrollTop, true);
      }
    };
    FakeVScrollComp2.prototype.getScrollPosition = function() {
      return this.getViewport().scrollTop;
    };
    FakeVScrollComp2.prototype.setScrollPosition = function(value, force) {
      if (!force && !isVisible(this.getViewport())) {
        this.attemptSettingScrollPosition(value);
      }
      this.getViewport().scrollTop = value;
    };
    FakeVScrollComp2.TEMPLATE = '<div class="ag-body-vertical-scroll" aria-hidden="true">\n            <div class="ag-body-vertical-scroll-viewport" ref="eViewport">\n                <div class="ag-body-vertical-scroll-container" ref="eContainer"></div>\n            </div>\n        </div>';
    __decorate$k([
      PostConstruct
    ], FakeVScrollComp2.prototype, "postConstruct", null);
    return FakeVScrollComp2;
  }(AbstractFakeScrollComp)
);
var __extends$k = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$2 = function() {
  __assign$2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$2.apply(this, arguments);
};
var __decorate$j = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __read$7 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$5 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var MONTH_LOCALE_TEXT = {
  january: "January",
  february: "February",
  march: "March",
  april: "April",
  may: "May",
  june: "June",
  july: "July",
  august: "August",
  september: "September",
  october: "October",
  november: "November",
  december: "December"
};
var MONTH_KEYS = ["january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"];
var DataTypeService = (
  /** @class */
  function(_super) {
    __extends$k(DataTypeService2, _super);
    function DataTypeService2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.dataTypeDefinitions = {};
      _this.isWaitingForRowData = false;
      _this.isColumnTypeOverrideInDataTypeDefinitions = false;
      _this.columnStateUpdatesPendingInference = {};
      _this.columnStateUpdateListenerDestroyFuncs = [];
      return _this;
    }
    DataTypeService2.prototype.init = function() {
      var _this = this;
      this.groupHideOpenParents = this.gridOptionsService.get("groupHideOpenParents");
      this.addManagedPropertyListener("groupHideOpenParents", function() {
        _this.groupHideOpenParents = _this.gridOptionsService.get("groupHideOpenParents");
      });
      this.processDataTypeDefinitions();
      this.addManagedPropertyListener("dataTypeDefinitions", function() {
        _this.processDataTypeDefinitions();
        _this.columnModel.recreateColumnDefs("gridOptionsChanged");
      });
    };
    DataTypeService2.prototype.processDataTypeDefinitions = function() {
      var _this = this;
      var _a;
      var defaultDataTypes = this.getDefaultDataTypes();
      this.dataTypeDefinitions = {};
      Object.entries(defaultDataTypes).forEach(function(_a2) {
        var _b = __read$7(_a2, 2), cellDataType = _b[0], dataTypeDefinition = _b[1];
        _this.dataTypeDefinitions[cellDataType] = __assign$2(__assign$2({}, dataTypeDefinition), { groupSafeValueFormatter: _this.createGroupSafeValueFormatter(dataTypeDefinition) });
      });
      var dataTypeDefinitions = (_a = this.gridOptionsService.get("dataTypeDefinitions")) !== null && _a !== void 0 ? _a : {};
      this.dataTypeMatchers = {};
      Object.entries(dataTypeDefinitions).forEach(function(_a2) {
        var _b = __read$7(_a2, 2), cellDataType = _b[0], dataTypeDefinition = _b[1];
        var mergedDataTypeDefinition = _this.processDataTypeDefinition(dataTypeDefinition, dataTypeDefinitions, [cellDataType], defaultDataTypes);
        if (mergedDataTypeDefinition) {
          _this.dataTypeDefinitions[cellDataType] = mergedDataTypeDefinition;
          if (dataTypeDefinition.dataTypeMatcher) {
            _this.dataTypeMatchers[cellDataType] = dataTypeDefinition.dataTypeMatcher;
          }
        }
      });
      this.checkObjectValueHandlers(defaultDataTypes);
      ["dateString", "text", "number", "boolean", "date"].forEach(function(cellDataType) {
        var overriddenDataTypeMatcher = _this.dataTypeMatchers[cellDataType];
        if (overriddenDataTypeMatcher) {
          delete _this.dataTypeMatchers[cellDataType];
        }
        _this.dataTypeMatchers[cellDataType] = overriddenDataTypeMatcher !== null && overriddenDataTypeMatcher !== void 0 ? overriddenDataTypeMatcher : defaultDataTypes[cellDataType].dataTypeMatcher;
      });
    };
    DataTypeService2.prototype.mergeDataTypeDefinitions = function(parentDataTypeDefinition, childDataTypeDefinition) {
      var mergedDataTypeDefinition = __assign$2(__assign$2({}, parentDataTypeDefinition), childDataTypeDefinition);
      if (parentDataTypeDefinition.columnTypes && childDataTypeDefinition.columnTypes && childDataTypeDefinition.appendColumnTypes) {
        mergedDataTypeDefinition.columnTypes = __spreadArray$5(__spreadArray$5([], __read$7(this.convertColumnTypes(parentDataTypeDefinition.columnTypes)), false), __read$7(this.convertColumnTypes(childDataTypeDefinition.columnTypes)), false);
      }
      return mergedDataTypeDefinition;
    };
    DataTypeService2.prototype.processDataTypeDefinition = function(dataTypeDefinition, dataTypeDefinitions, alreadyProcessedDataTypes, defaultDataTypes) {
      var mergedDataTypeDefinition;
      var extendsCellDataType = dataTypeDefinition.extendsDataType;
      if (dataTypeDefinition.columnTypes) {
        this.isColumnTypeOverrideInDataTypeDefinitions = true;
      }
      if (dataTypeDefinition.extendsDataType === dataTypeDefinition.baseDataType) {
        var baseDataTypeDefinition = defaultDataTypes[extendsCellDataType];
        var overriddenBaseDataTypeDefinition = dataTypeDefinitions[extendsCellDataType];
        if (baseDataTypeDefinition && overriddenBaseDataTypeDefinition) {
          baseDataTypeDefinition = overriddenBaseDataTypeDefinition;
        }
        if (!this.validateDataTypeDefinition(dataTypeDefinition, baseDataTypeDefinition, extendsCellDataType)) {
          return void 0;
        }
        mergedDataTypeDefinition = this.mergeDataTypeDefinitions(baseDataTypeDefinition, dataTypeDefinition);
      } else {
        if (alreadyProcessedDataTypes.includes(extendsCellDataType)) {
          warnOnce('Data type definition hierarchies (via the "extendsDataType" property) cannot contain circular references.');
          return void 0;
        }
        var extendedDataTypeDefinition = dataTypeDefinitions[extendsCellDataType];
        if (!this.validateDataTypeDefinition(dataTypeDefinition, extendedDataTypeDefinition, extendsCellDataType)) {
          return void 0;
        }
        var mergedExtendedDataTypeDefinition = this.processDataTypeDefinition(extendedDataTypeDefinition, dataTypeDefinitions, __spreadArray$5(__spreadArray$5([], __read$7(alreadyProcessedDataTypes), false), [extendsCellDataType], false), defaultDataTypes);
        if (!mergedExtendedDataTypeDefinition) {
          return void 0;
        }
        mergedDataTypeDefinition = this.mergeDataTypeDefinitions(mergedExtendedDataTypeDefinition, dataTypeDefinition);
      }
      return __assign$2(__assign$2({}, mergedDataTypeDefinition), { groupSafeValueFormatter: this.createGroupSafeValueFormatter(mergedDataTypeDefinition) });
    };
    DataTypeService2.prototype.validateDataTypeDefinition = function(dataTypeDefinition, parentDataTypeDefinition, parentCellDataType) {
      if (!parentDataTypeDefinition) {
        warnOnce("The data type definition ".concat(parentCellDataType, " does not exist."));
        return false;
      }
      if (parentDataTypeDefinition.baseDataType !== dataTypeDefinition.baseDataType) {
        warnOnce('The "baseDataType" property of a data type definition must match that of its parent.');
        return false;
      }
      return true;
    };
    DataTypeService2.prototype.createGroupSafeValueFormatter = function(dataTypeDefinition) {
      var _this = this;
      if (!dataTypeDefinition.valueFormatter) {
        return void 0;
      }
      return function(params) {
        var _a, _b;
        if ((_a = params.node) === null || _a === void 0 ? void 0 : _a.group) {
          var aggFunc = params.column.getAggFunc();
          if (aggFunc) {
            if (aggFunc === "first" || aggFunc === "last") {
              return dataTypeDefinition.valueFormatter(params);
            }
            if (dataTypeDefinition.baseDataType === "number" && aggFunc !== "count") {
              if (typeof params.value === "number") {
                return dataTypeDefinition.valueFormatter(params);
              }
              if (typeof params.value === "object") {
                if (!params.value) {
                  return void 0;
                }
                if ("toNumber" in params.value) {
                  return dataTypeDefinition.valueFormatter(__assign$2(__assign$2({}, params), { value: params.value.toNumber() }));
                }
                if ("value" in params.value) {
                  return dataTypeDefinition.valueFormatter(__assign$2(__assign$2({}, params), { value: params.value.value }));
                }
              }
            }
          }
          if (!_this.gridOptionsService.get("suppressGroupMaintainValueType")) {
            return void 0;
          }
        } else if (_this.groupHideOpenParents && params.column.isRowGroupActive()) {
          if (typeof params.value !== "string" || ((_b = dataTypeDefinition.dataTypeMatcher) === null || _b === void 0 ? void 0 : _b.call(dataTypeDefinition, params.value))) {
            return dataTypeDefinition.valueFormatter(params);
          }
          if (!_this.gridOptionsService.get("suppressGroupMaintainValueType")) {
            return void 0;
          }
        }
        return dataTypeDefinition.valueFormatter(params);
      };
    };
    DataTypeService2.prototype.updateColDefAndGetDataTypeDefinitionColumnType = function(colDef, userColDef, colId) {
      var cellDataType = userColDef.cellDataType;
      var field = userColDef.field;
      if (cellDataType === void 0) {
        cellDataType = colDef.cellDataType;
      }
      if (cellDataType == null || cellDataType === true) {
        cellDataType = this.canInferCellDataType(colDef, userColDef) ? this.inferCellDataType(field, colId) : false;
      }
      if (!cellDataType) {
        colDef.cellDataType = false;
        return void 0;
      }
      var dataTypeDefinition = this.dataTypeDefinitions[cellDataType];
      if (!dataTypeDefinition) {
        warnOnce('Missing data type definition - "'.concat(cellDataType, '"'));
        return void 0;
      }
      colDef.cellDataType = cellDataType;
      if (dataTypeDefinition.groupSafeValueFormatter) {
        colDef.valueFormatter = dataTypeDefinition.groupSafeValueFormatter;
      }
      if (dataTypeDefinition.valueParser) {
        colDef.valueParser = dataTypeDefinition.valueParser;
      }
      if (!dataTypeDefinition.suppressDefaultProperties) {
        this.setColDefPropertiesForBaseDataType(colDef, dataTypeDefinition, colId);
      }
      return dataTypeDefinition.columnTypes;
    };
    DataTypeService2.prototype.updateColDefAndGetColumnType = function(colDef, userColDef, colId) {
      var _a, _b;
      var dataTypeDefinitionColumnType = this.updateColDefAndGetDataTypeDefinitionColumnType(colDef, userColDef, colId);
      var columnTypes = (_b = (_a = userColDef.type) !== null && _a !== void 0 ? _a : dataTypeDefinitionColumnType) !== null && _b !== void 0 ? _b : colDef.type;
      colDef.type = columnTypes;
      return columnTypes ? this.convertColumnTypes(columnTypes) : void 0;
    };
    DataTypeService2.prototype.addColumnListeners = function(column) {
      if (!this.isWaitingForRowData) {
        return;
      }
      var columnStateUpdates = this.columnStateUpdatesPendingInference[column.getColId()];
      if (!columnStateUpdates) {
        return;
      }
      var columnListener = function(event) {
        columnStateUpdates.add(event.key);
      };
      column.addEventListener(Column.EVENT_STATE_UPDATED, columnListener);
      this.columnStateUpdateListenerDestroyFuncs.push(function() {
        return column.removeEventListener(Column.EVENT_STATE_UPDATED, columnListener);
      });
    };
    DataTypeService2.prototype.canInferCellDataType = function(colDef, userColDef) {
      var _this = this;
      var _a;
      if (this.rowModel.getType() !== "clientSide") {
        return false;
      }
      var propsToCheckForInference = { cellRenderer: true, valueGetter: true, valueParser: true, refData: true };
      if (this.doColDefPropsPreventInference(userColDef, propsToCheckForInference)) {
        return false;
      }
      var columnTypes = userColDef.type === null ? colDef.type : userColDef.type;
      if (columnTypes) {
        var columnTypeDefs_1 = (_a = this.gridOptionsService.get("columnTypes")) !== null && _a !== void 0 ? _a : {};
        var hasPropsPreventingInference = this.convertColumnTypes(columnTypes).some(function(columnType) {
          var columnTypeDef = columnTypeDefs_1[columnType.trim()];
          return columnTypeDef && _this.doColDefPropsPreventInference(columnTypeDef, propsToCheckForInference);
        });
        if (hasPropsPreventingInference) {
          return false;
        }
      }
      return !this.doColDefPropsPreventInference(colDef, propsToCheckForInference);
    };
    DataTypeService2.prototype.doColDefPropsPreventInference = function(colDef, propsToCheckForInference) {
      var _this = this;
      return [
        ["cellRenderer", "agSparklineCellRenderer"],
        ["valueGetter", void 0],
        ["valueParser", void 0],
        ["refData", void 0]
      ].some(function(_a) {
        var _b = __read$7(_a, 2), prop = _b[0], comparisonValue = _b[1];
        return _this.doesColDefPropPreventInference(colDef, propsToCheckForInference, prop, comparisonValue);
      });
    };
    DataTypeService2.prototype.doesColDefPropPreventInference = function(colDef, checkProps, prop, comparisonValue) {
      if (!checkProps[prop]) {
        return false;
      }
      var value = colDef[prop];
      if (value === null) {
        checkProps[prop] = false;
        return false;
      } else {
        return comparisonValue === void 0 ? !!value : value === comparisonValue;
      }
    };
    DataTypeService2.prototype.inferCellDataType = function(field, colId) {
      var _a;
      if (!field) {
        return void 0;
      }
      var value;
      var initialData = this.getInitialData();
      if (initialData) {
        var fieldContainsDots = field.indexOf(".") >= 0 && !this.gridOptionsService.get("suppressFieldDotNotation");
        value = getValueUsingField(initialData, field, fieldContainsDots);
      } else {
        this.initWaitForRowData(colId);
      }
      if (value == null) {
        return void 0;
      }
      var _b = __read$7((_a = Object.entries(this.dataTypeMatchers).find(function(_a2) {
        var _b2 = __read$7(_a2, 2);
        _b2[0];
        var dataTypeMatcher = _b2[1];
        return dataTypeMatcher(value);
      })) !== null && _a !== void 0 ? _a : ["object"], 1), cellDataType = _b[0];
      return cellDataType;
    };
    DataTypeService2.prototype.getInitialData = function() {
      var rowData = this.gridOptionsService.get("rowData");
      if (rowData === null || rowData === void 0 ? void 0 : rowData.length) {
        return rowData[0];
      } else if (this.initialData) {
        return this.initialData;
      } else {
        var rowNodes = this.rowModel.getRootNode().allLeafChildren;
        if (rowNodes === null || rowNodes === void 0 ? void 0 : rowNodes.length) {
          return rowNodes[0].data;
        }
      }
      return null;
    };
    DataTypeService2.prototype.initWaitForRowData = function(colId) {
      var _this = this;
      this.columnStateUpdatesPendingInference[colId] = /* @__PURE__ */ new Set();
      if (this.isWaitingForRowData) {
        return;
      }
      this.isWaitingForRowData = true;
      var columnTypeOverridesExist = this.isColumnTypeOverrideInDataTypeDefinitions;
      if (columnTypeOverridesExist) {
        this.columnModel.queueResizeOperations();
      }
      var destroyFunc = this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_UPDATE_STARTED, function(event) {
        var firstRowData = event.firstRowData;
        if (!firstRowData) {
          return;
        }
        destroyFunc === null || destroyFunc === void 0 ? void 0 : destroyFunc();
        _this.isWaitingForRowData = false;
        _this.processColumnsPendingInference(firstRowData, columnTypeOverridesExist);
        _this.columnStateUpdatesPendingInference = {};
        if (columnTypeOverridesExist) {
          _this.columnModel.processResizeOperations();
        }
        var dataTypesInferredEvent = {
          type: Events.EVENT_DATA_TYPES_INFERRED
        };
        _this.eventService.dispatchEvent(dataTypesInferredEvent);
      });
    };
    DataTypeService2.prototype.isPendingInference = function() {
      return this.isWaitingForRowData;
    };
    DataTypeService2.prototype.processColumnsPendingInference = function(firstRowData, columnTypeOverridesExist) {
      var _this = this;
      this.initialData = firstRowData;
      var state = [];
      this.columnStateUpdateListenerDestroyFuncs.forEach(function(destroyFunc) {
        return destroyFunc();
      });
      this.columnStateUpdateListenerDestroyFuncs = [];
      var newRowGroupColumnStateWithoutIndex = {};
      var newPivotColumnStateWithoutIndex = {};
      Object.entries(this.columnStateUpdatesPendingInference).forEach(function(_a) {
        var _b = __read$7(_a, 2), colId = _b[0], columnStateUpdates = _b[1];
        var column = _this.columnModel.getGridColumn(colId);
        if (!column) {
          return;
        }
        var oldColDef = column.getColDef();
        if (!_this.columnModel.resetColumnDefIntoColumn(column, "cellDataTypeInferred")) {
          return;
        }
        var newColDef = column.getColDef();
        if (columnTypeOverridesExist && newColDef.type && newColDef.type !== oldColDef.type) {
          var updatedColumnState = _this.getUpdatedColumnState(column, columnStateUpdates);
          if (updatedColumnState.rowGroup && updatedColumnState.rowGroupIndex == null) {
            newRowGroupColumnStateWithoutIndex[colId] = updatedColumnState;
          }
          if (updatedColumnState.pivot && updatedColumnState.pivotIndex == null) {
            newPivotColumnStateWithoutIndex[colId] = updatedColumnState;
          }
          state.push(updatedColumnState);
        }
      });
      if (columnTypeOverridesExist) {
        state.push.apply(state, __spreadArray$5([], __read$7(this.columnModel.generateColumnStateForRowGroupAndPivotIndexes(newRowGroupColumnStateWithoutIndex, newPivotColumnStateWithoutIndex)), false));
      }
      if (state.length) {
        this.columnModel.applyColumnState({ state }, "cellDataTypeInferred");
      }
      this.initialData = null;
    };
    DataTypeService2.prototype.getUpdatedColumnState = function(column, columnStateUpdates) {
      var columnState = this.columnModel.getColumnStateFromColDef(column);
      columnStateUpdates.forEach(function(key) {
        delete columnState[key];
        if (key === "rowGroup") {
          delete columnState.rowGroupIndex;
        } else if (key === "pivot") {
          delete columnState.pivotIndex;
        }
      });
      return columnState;
    };
    DataTypeService2.prototype.checkObjectValueHandlers = function(defaultDataTypes) {
      var resolvedObjectDataTypeDefinition = this.dataTypeDefinitions.object;
      var defaultObjectDataTypeDefinition = defaultDataTypes.object;
      this.hasObjectValueParser = resolvedObjectDataTypeDefinition.valueParser !== defaultObjectDataTypeDefinition.valueParser;
      this.hasObjectValueFormatter = resolvedObjectDataTypeDefinition.valueFormatter !== defaultObjectDataTypeDefinition.valueFormatter;
    };
    DataTypeService2.prototype.convertColumnTypes = function(type) {
      var typeKeys = [];
      if (type instanceof Array) {
        var invalidArray = type.some(function(a) {
          return typeof a !== "string";
        });
        if (invalidArray) {
          console.warn("if colDef.type is supplied an array it should be of type 'string[]'");
        } else {
          typeKeys = type;
        }
      } else if (typeof type === "string") {
        typeKeys = type.split(",");
      } else {
        console.warn("colDef.type should be of type 'string' | 'string[]'");
      }
      return typeKeys;
    };
    DataTypeService2.prototype.getDateStringTypeDefinition = function() {
      return this.dataTypeDefinitions.dateString;
    };
    DataTypeService2.prototype.getDateParserFunction = function() {
      return this.getDateStringTypeDefinition().dateParser;
    };
    DataTypeService2.prototype.getDateFormatterFunction = function() {
      return this.getDateStringTypeDefinition().dateFormatter;
    };
    DataTypeService2.prototype.getDataTypeDefinition = function(column) {
      var colDef = column.getColDef();
      if (!colDef.cellDataType) {
        return void 0;
      }
      return this.dataTypeDefinitions[colDef.cellDataType];
    };
    DataTypeService2.prototype.getBaseDataType = function(column) {
      var _a;
      return (_a = this.getDataTypeDefinition(column)) === null || _a === void 0 ? void 0 : _a.baseDataType;
    };
    DataTypeService2.prototype.checkType = function(column, value) {
      var _a;
      if (value == null) {
        return true;
      }
      var dataTypeMatcher = (_a = this.getDataTypeDefinition(column)) === null || _a === void 0 ? void 0 : _a.dataTypeMatcher;
      if (!dataTypeMatcher) {
        return true;
      }
      return dataTypeMatcher(value);
    };
    DataTypeService2.prototype.validateColDef = function(colDef) {
      if (colDef.cellDataType === "object") {
        if (colDef.valueFormatter === this.dataTypeDefinitions.object.groupSafeValueFormatter && !this.hasObjectValueFormatter) {
          warnOnce('Cell data type is "object" but no value formatter has been provided. Please either provide an object data type definition with a value formatter, or set "colDef.valueFormatter"');
        }
        if (colDef.editable && colDef.valueParser === this.dataTypeDefinitions.object.valueParser && !this.hasObjectValueParser) {
          warnOnce('Cell data type is "object" but no value parser has been provided. Please either provide an object data type definition with a value parser, or set "colDef.valueParser"');
        }
      }
    };
    DataTypeService2.prototype.setColDefPropertiesForBaseDataType = function(colDef, dataTypeDefinition, colId) {
      var _this = this;
      var formatValue = function(column, node, value) {
        var valueFormatter = column.getColDef().valueFormatter;
        if (valueFormatter === dataTypeDefinition.groupSafeValueFormatter) {
          valueFormatter = dataTypeDefinition.valueFormatter;
        }
        return _this.valueFormatterService.formatValue(column, node, value, valueFormatter);
      };
      var usingSetFilter = ModuleRegistry.__isRegistered(ModuleNames.SetFilterModule, this.context.getGridId());
      var translate = this.localeService.getLocaleTextFunc();
      var mergeFilterParams = function(params) {
        var filterParams = colDef.filterParams;
        colDef.filterParams = typeof filterParams === "object" ? __assign$2(__assign$2({}, filterParams), params) : params;
      };
      switch (dataTypeDefinition.baseDataType) {
        case "number": {
          colDef.cellEditor = "agNumberCellEditor";
          if (usingSetFilter) {
            mergeFilterParams({
              comparator: function(a, b) {
                var valA = a == null ? 0 : parseInt(a);
                var valB = b == null ? 0 : parseInt(b);
                if (valA === valB)
                  return 0;
                return valA > valB ? 1 : -1;
              }
            });
          }
          break;
        }
        case "boolean": {
          colDef.cellEditor = "agCheckboxCellEditor";
          colDef.cellRenderer = "agCheckboxCellRenderer";
          colDef.suppressKeyboardEvent = function(params) {
            return !!params.colDef.editable && params.event.key === KeyCode.SPACE;
          };
          if (usingSetFilter) {
            mergeFilterParams({
              valueFormatter: function(params) {
                if (!exists(params.value)) {
                  return translate("blanks", "(Blanks)");
                }
                return translate(String(params.value), params.value ? "True" : "False");
              }
            });
          } else {
            mergeFilterParams({
              maxNumConditions: 1,
              filterOptions: [
                "empty",
                {
                  displayKey: "true",
                  displayName: "True",
                  predicate: function(_filterValues, cellValue) {
                    return cellValue;
                  },
                  numberOfInputs: 0
                },
                {
                  displayKey: "false",
                  displayName: "False",
                  predicate: function(_filterValues, cellValue) {
                    return cellValue === false;
                  },
                  numberOfInputs: 0
                }
              ]
            });
          }
          break;
        }
        case "date": {
          colDef.cellEditor = "agDateCellEditor";
          colDef.keyCreator = function(params) {
            return formatValue(params.column, params.node, params.value);
          };
          if (usingSetFilter) {
            mergeFilterParams({
              valueFormatter: function(params) {
                var valueFormatted = formatValue(params.column, params.node, params.value);
                return exists(valueFormatted) ? valueFormatted : translate("blanks", "(Blanks)");
              },
              treeList: true,
              treeListFormatter: function(pathKey, level) {
                if (level === 1 && pathKey != null) {
                  var monthKey = MONTH_KEYS[Number(pathKey) - 1];
                  return translate(monthKey, MONTH_LOCALE_TEXT[monthKey]);
                }
                return pathKey !== null && pathKey !== void 0 ? pathKey : translate("blanks", "(Blanks)");
              }
            });
          }
          break;
        }
        case "dateString": {
          colDef.cellEditor = "agDateStringCellEditor";
          colDef.keyCreator = function(params) {
            return formatValue(params.column, params.node, params.value);
          };
          var convertToDate_1 = this.getDateParserFunction();
          if (usingSetFilter) {
            mergeFilterParams({
              valueFormatter: function(params) {
                var valueFormatted = formatValue(params.column, params.node, params.value);
                return exists(valueFormatted) ? valueFormatted : translate("blanks", "(Blanks)");
              },
              treeList: true,
              treeListPathGetter: function(value) {
                var date = convertToDate_1(value !== null && value !== void 0 ? value : void 0);
                return date ? [String(date.getFullYear()), String(date.getMonth() + 1), String(date.getDate())] : null;
              },
              treeListFormatter: function(pathKey, level) {
                if (level === 1 && pathKey != null) {
                  var monthKey = MONTH_KEYS[Number(pathKey) - 1];
                  return translate(monthKey, MONTH_LOCALE_TEXT[monthKey]);
                }
                return pathKey !== null && pathKey !== void 0 ? pathKey : translate("blanks", "(Blanks)");
              }
            });
          } else {
            mergeFilterParams({
              comparator: function(filterDate, cellValue) {
                var cellAsDate = convertToDate_1(cellValue);
                if (cellValue == null || cellAsDate < filterDate) {
                  return -1;
                }
                if (cellAsDate > filterDate) {
                  return 1;
                }
                return 0;
              }
            });
          }
          break;
        }
        case "object": {
          colDef.cellEditorParams = {
            useFormatter: true
          };
          colDef.comparator = function(a, b) {
            var column = _this.columnModel.getPrimaryColumn(colId);
            var colDef2 = column === null || column === void 0 ? void 0 : column.getColDef();
            if (!column || !colDef2) {
              return 0;
            }
            var valA = a == null ? "" : formatValue(column, null, a);
            var valB = b == null ? "" : formatValue(column, null, b);
            if (valA === valB)
              return 0;
            return valA > valB ? 1 : -1;
          };
          colDef.keyCreator = function(params) {
            return formatValue(params.column, params.node, params.value);
          };
          if (usingSetFilter) {
            mergeFilterParams({
              valueFormatter: function(params) {
                var valueFormatted = formatValue(params.column, params.node, params.value);
                return exists(valueFormatted) ? valueFormatted : translate("blanks", "(Blanks)");
              }
            });
          } else {
            colDef.filterValueGetter = function(params) {
              return formatValue(params.column, params.node, _this.valueService.getValue(params.column, params.node));
            };
          }
          break;
        }
      }
    };
    DataTypeService2.prototype.getDefaultDataTypes = function() {
      var defaultDateFormatMatcher = function(value) {
        return !!value.match("^\\d{4}-\\d{2}-\\d{2}$");
      };
      var translate = this.localeService.getLocaleTextFunc();
      return {
        number: {
          baseDataType: "number",
          // can be empty space with legacy copy
          valueParser: function(params) {
            var _a, _b;
            return ((_b = (_a = params.newValue) === null || _a === void 0 ? void 0 : _a.trim) === null || _b === void 0 ? void 0 : _b.call(_a)) === "" ? null : Number(params.newValue);
          },
          valueFormatter: function(params) {
            if (params.value == null) {
              return "";
            }
            if (typeof params.value !== "number" || isNaN(params.value)) {
              console.log("was", typeof params.value, params.value, params);
              return translate("invalidNumber", "Invalid Number");
            }
            return String(params.value);
          },
          dataTypeMatcher: function(value) {
            return typeof value === "number";
          }
        },
        text: {
          baseDataType: "text",
          valueParser: function(params) {
            return params.newValue === "" ? null : toStringOrNull(params.newValue);
          },
          dataTypeMatcher: function(value) {
            return typeof value === "string";
          }
        },
        boolean: {
          baseDataType: "boolean",
          valueParser: function(params) {
            var _a, _b;
            if (params.newValue == null) {
              return params.newValue;
            }
            return ((_b = (_a = params.newValue) === null || _a === void 0 ? void 0 : _a.trim) === null || _b === void 0 ? void 0 : _b.call(_a)) === "" ? null : String(params.newValue).toLowerCase() === "true";
          },
          valueFormatter: function(params) {
            return params.value == null ? "" : String(params.value);
          },
          dataTypeMatcher: function(value) {
            return typeof value === "boolean";
          }
        },
        date: {
          baseDataType: "date",
          valueParser: function(params) {
            return parseDateTimeFromString(params.newValue == null ? null : String(params.newValue));
          },
          valueFormatter: function(params) {
            var _a;
            if (params.value == null) {
              return "";
            }
            if (!(params.value instanceof Date) || isNaN(params.value.getTime())) {
              return translate("invalidDate", "Invalid Date");
            }
            return (_a = serialiseDate(params.value, false)) !== null && _a !== void 0 ? _a : "";
          },
          dataTypeMatcher: function(value) {
            return value instanceof Date;
          }
        },
        dateString: {
          baseDataType: "dateString",
          dateParser: function(value) {
            var _a;
            return (_a = parseDateTimeFromString(value)) !== null && _a !== void 0 ? _a : void 0;
          },
          dateFormatter: function(value) {
            var _a;
            return (_a = serialiseDate(value !== null && value !== void 0 ? value : null, false)) !== null && _a !== void 0 ? _a : void 0;
          },
          valueParser: function(params) {
            return defaultDateFormatMatcher(String(params.newValue)) ? params.newValue : null;
          },
          valueFormatter: function(params) {
            return defaultDateFormatMatcher(String(params.value)) ? params.value : "";
          },
          dataTypeMatcher: function(value) {
            return typeof value === "string" && defaultDateFormatMatcher(value);
          }
        },
        object: {
          baseDataType: "object",
          valueParser: function() {
            return null;
          },
          valueFormatter: function(params) {
            var _a;
            return (_a = toStringOrNull(params.value)) !== null && _a !== void 0 ? _a : "";
          }
        }
      };
    };
    __decorate$j([
      Autowired("rowModel")
    ], DataTypeService2.prototype, "rowModel", void 0);
    __decorate$j([
      Autowired("columnModel")
    ], DataTypeService2.prototype, "columnModel", void 0);
    __decorate$j([
      Autowired("columnUtils")
    ], DataTypeService2.prototype, "columnUtils", void 0);
    __decorate$j([
      Autowired("valueService")
    ], DataTypeService2.prototype, "valueService", void 0);
    __decorate$j([
      Autowired("valueFormatterService")
    ], DataTypeService2.prototype, "valueFormatterService", void 0);
    __decorate$j([
      PostConstruct
    ], DataTypeService2.prototype, "init", null);
    DataTypeService2 = __decorate$j([
      Bean("dataTypeService")
    ], DataTypeService2);
    return DataTypeService2;
  }(BeanStub)
);
var __extends$j = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$i = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ValueParserService = (
  /** @class */
  function(_super) {
    __extends$j(ValueParserService2, _super);
    function ValueParserService2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ValueParserService2.prototype.parseValue = function(column, rowNode, newValue, oldValue) {
      var colDef = column.getColDef();
      var params = this.gridOptionsService.addGridCommonParams({
        node: rowNode,
        data: rowNode === null || rowNode === void 0 ? void 0 : rowNode.data,
        oldValue,
        newValue,
        colDef,
        column
      });
      var valueParser = colDef.valueParser;
      if (exists(valueParser)) {
        if (typeof valueParser === "function") {
          return valueParser(params);
        }
        return this.expressionService.evaluate(valueParser, params);
      }
      return newValue;
    };
    __decorate$i([
      Autowired("expressionService")
    ], ValueParserService2.prototype, "expressionService", void 0);
    ValueParserService2 = __decorate$i([
      Bean("valueParserService")
    ], ValueParserService2);
    return ValueParserService2;
  }(BeanStub)
);
var __extends$i = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$h = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SyncService = (
  /** @class */
  function(_super) {
    __extends$i(SyncService2, _super);
    function SyncService2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.waitingForColumns = false;
      return _this;
    }
    SyncService2.prototype.postConstruct = function() {
      var _this = this;
      this.addManagedPropertyListener("columnDefs", function(event) {
        return _this.setColumnDefs(event);
      });
    };
    SyncService2.prototype.start = function() {
      var _this = this;
      this.ctrlsService.whenReady(function() {
        var columnDefs = _this.gridOptionsService.get("columnDefs");
        if (columnDefs) {
          _this.setColumnsAndData(columnDefs);
        } else {
          _this.waitingForColumns = true;
        }
        _this.gridReady();
      });
    };
    SyncService2.prototype.setColumnsAndData = function(columnDefs) {
      this.columnModel.setColumnDefs(columnDefs !== null && columnDefs !== void 0 ? columnDefs : [], "gridInitializing");
      this.rowModel.start();
    };
    SyncService2.prototype.gridReady = function() {
      var _this = this;
      this.dispatchGridReadyEvent();
      var isEnterprise = ModuleRegistry.__isRegistered(ModuleNames.EnterpriseCoreModule, this.context.getGridId());
      var logger = new Logger("AG Grid", function() {
        return _this.gridOptionsService.get("debug");
      });
      logger.log("initialised successfully, enterprise = ".concat(isEnterprise));
    };
    SyncService2.prototype.dispatchGridReadyEvent = function() {
      var readyEvent = {
        type: Events.EVENT_GRID_READY
      };
      this.eventService.dispatchEvent(readyEvent);
    };
    SyncService2.prototype.setColumnDefs = function(event) {
      var _a;
      var columnDefs = this.gridOptionsService.get("columnDefs");
      if (!columnDefs) {
        return;
      }
      if (this.waitingForColumns) {
        this.waitingForColumns = false;
        this.setColumnsAndData(columnDefs);
        return;
      }
      var source = (_a = event.source) !== null && _a !== void 0 ? _a : "api";
      this.columnModel.setColumnDefs(columnDefs, source);
    };
    __decorate$h([
      Autowired("ctrlsService")
    ], SyncService2.prototype, "ctrlsService", void 0);
    __decorate$h([
      Autowired("columnModel")
    ], SyncService2.prototype, "columnModel", void 0);
    __decorate$h([
      Autowired("rowModel")
    ], SyncService2.prototype, "rowModel", void 0);
    __decorate$h([
      PostConstruct
    ], SyncService2.prototype, "postConstruct", null);
    SyncService2 = __decorate$h([
      Bean("syncService")
    ], SyncService2);
    return SyncService2;
  }(BeanStub)
);
var __extends$h = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$1 = function() {
  __assign$1 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$1.apply(this, arguments);
};
var __decorate$g = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var OverlayService = (
  /** @class */
  function(_super) {
    __extends$h(OverlayService2, _super);
    function OverlayService2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.manuallyDisplayed = false;
      return _this;
    }
    OverlayService2.prototype.postConstruct = function() {
      var _this = this;
      this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_UPDATED, function() {
        return _this.onRowDataUpdated();
      });
      this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, function() {
        return _this.onNewColumnsLoaded();
      });
    };
    OverlayService2.prototype.registerOverlayWrapperComp = function(overlayWrapperComp) {
      this.overlayWrapperComp = overlayWrapperComp;
      if (!this.gridOptionsService.get("columnDefs") || this.gridOptionsService.isRowModelType("clientSide") && !this.gridOptionsService.get("rowData")) {
        this.showLoadingOverlay();
      }
    };
    OverlayService2.prototype.showLoadingOverlay = function() {
      if (this.gridOptionsService.get("suppressLoadingOverlay")) {
        return;
      }
      var params = {};
      var compDetails = this.userComponentFactory.getLoadingOverlayCompDetails(params);
      this.showOverlay(compDetails, "ag-overlay-loading-wrapper", "loadingOverlayComponentParams");
    };
    OverlayService2.prototype.showNoRowsOverlay = function() {
      if (this.gridOptionsService.get("suppressNoRowsOverlay")) {
        return;
      }
      var params = {};
      var compDetails = this.userComponentFactory.getNoRowsOverlayCompDetails(params);
      this.showOverlay(compDetails, "ag-overlay-no-rows-wrapper", "noRowsOverlayComponentParams");
    };
    OverlayService2.prototype.showOverlay = function(compDetails, wrapperCssClass, gridOption) {
      var _this = this;
      var promise = compDetails.newAgStackInstance();
      var listenerDestroyFunc = this.addManagedPropertyListener(gridOption, function(_a) {
        var currentValue = _a.currentValue;
        promise.then(function(comp) {
          if (comp.refresh) {
            comp.refresh(_this.gridOptionsService.addGridCommonParams(__assign$1({}, currentValue !== null && currentValue !== void 0 ? currentValue : {})));
          }
        });
      });
      this.manuallyDisplayed = this.columnModel.isReady() && !this.paginationProxy.isEmpty();
      this.overlayWrapperComp.showOverlay(promise, wrapperCssClass, listenerDestroyFunc);
    };
    OverlayService2.prototype.hideOverlay = function() {
      this.manuallyDisplayed = false;
      this.overlayWrapperComp.hideOverlay();
    };
    OverlayService2.prototype.showOrHideOverlay = function() {
      var isEmpty = this.paginationProxy.isEmpty();
      var isSuppressNoRowsOverlay = this.gridOptionsService.get("suppressNoRowsOverlay");
      if (isEmpty && !isSuppressNoRowsOverlay) {
        this.showNoRowsOverlay();
      } else {
        this.hideOverlay();
      }
    };
    OverlayService2.prototype.onRowDataUpdated = function() {
      this.showOrHideOverlay();
    };
    OverlayService2.prototype.onNewColumnsLoaded = function() {
      if (this.columnModel.isReady() && !this.paginationProxy.isEmpty() && !this.manuallyDisplayed) {
        this.hideOverlay();
      }
    };
    __decorate$g([
      Autowired("userComponentFactory")
    ], OverlayService2.prototype, "userComponentFactory", void 0);
    __decorate$g([
      Autowired("paginationProxy")
    ], OverlayService2.prototype, "paginationProxy", void 0);
    __decorate$g([
      Autowired("columnModel")
    ], OverlayService2.prototype, "columnModel", void 0);
    __decorate$g([
      PostConstruct
    ], OverlayService2.prototype, "postConstruct", null);
    OverlayService2 = __decorate$g([
      Bean("overlayService")
    ], OverlayService2);
    return OverlayService2;
  }(BeanStub)
);
var __extends$g = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __decorate$f = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __values$1 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read$6 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var StateService = (
  /** @class */
  function(_super) {
    __extends$g(StateService2, _super);
    function StateService2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.suppressEvents = true;
      _this.queuedUpdateSources = /* @__PURE__ */ new Set();
      _this.dispatchStateUpdateEventDebounced = debounce(function() {
        return _this.dispatchQueuedStateUpdateEvents();
      }, 0);
      return _this;
    }
    StateService2.prototype.postConstruct = function() {
      var _this = this;
      var _a;
      this.isClientSideRowModel = this.rowModel.getType() === "clientSide";
      this.cachedState = (_a = this.gridOptionsService.get("initialState")) !== null && _a !== void 0 ? _a : {};
      this.ctrlsService.whenReady(function() {
        return _this.suppressEventsAndDispatchInitEvent(function() {
          return _this.setupStateOnGridReady();
        });
      });
      var newColumnsLoadedDestroyFunc = this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, function(_a2) {
        var source = _a2.source;
        if (source === "gridInitializing") {
          newColumnsLoadedDestroyFunc === null || newColumnsLoadedDestroyFunc === void 0 ? void 0 : newColumnsLoadedDestroyFunc();
          _this.suppressEventsAndDispatchInitEvent(function() {
            return _this.setupStateOnColumnsInitialised();
          });
        }
      });
      var rowCountReadyDestroyFunc = this.addManagedListener(this.eventService, Events.EVENT_ROW_COUNT_READY, function() {
        rowCountReadyDestroyFunc === null || rowCountReadyDestroyFunc === void 0 ? void 0 : rowCountReadyDestroyFunc();
        _this.suppressEventsAndDispatchInitEvent(function() {
          return _this.setupStateOnRowCountReady();
        });
      });
      var firstDataRenderedDestroyFunc = this.addManagedListener(this.eventService, Events.EVENT_FIRST_DATA_RENDERED, function() {
        firstDataRenderedDestroyFunc === null || firstDataRenderedDestroyFunc === void 0 ? void 0 : firstDataRenderedDestroyFunc();
        _this.suppressEventsAndDispatchInitEvent(function() {
          return _this.setupStateOnFirstDataRendered();
        });
      });
    };
    StateService2.prototype.getState = function() {
      return this.cachedState;
    };
    StateService2.prototype.setupStateOnGridReady = function() {
      var _this = this;
      this.updateCachedState("sideBar", this.getSideBarState());
      this.addManagedListener(this.eventService, Events.EVENT_TOOL_PANEL_VISIBLE_CHANGED, function() {
        return _this.updateCachedState("sideBar", _this.getSideBarState());
      });
      this.addManagedListener(this.eventService, Events.EVENT_SIDE_BAR_UPDATED, function() {
        return _this.updateCachedState("sideBar", _this.getSideBarState());
      });
    };
    StateService2.prototype.setupStateOnColumnsInitialised = function() {
      var _this = this;
      var _a;
      var initialState = (_a = this.gridOptionsService.get("initialState")) !== null && _a !== void 0 ? _a : {};
      var columnGroupState = initialState.columnGroup;
      this.setColumnState(initialState);
      if (columnGroupState) {
        this.setColumnGroupState(columnGroupState);
      }
      this.updateColumnState([
        "aggregation",
        "columnOrder",
        "columnPinning",
        "columnSizing",
        "columnVisibility",
        "pivot",
        "pivot",
        "rowGroup",
        "sort"
      ]);
      this.updateCachedState("columnGroup", this.getColumnGroupState());
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, function() {
        return _this.updateColumnState(["aggregation"]);
      });
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, function() {
        return _this.updateColumnState(["columnOrder"]);
      });
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, function() {
        return _this.updateColumnState(["columnPinning"]);
      });
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, function() {
        return _this.updateColumnState(["columnSizing"]);
      });
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, function() {
        return _this.updateColumnState(["columnVisibility"]);
      });
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, function() {
        return _this.updateColumnState(["pivot"]);
      });
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, function() {
        return _this.updateColumnState(["pivot"]);
      });
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, function() {
        return _this.updateColumnState(["rowGroup"]);
      });
      this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, function() {
        return _this.updateColumnState(["sort"]);
      });
      this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, function() {
        return _this.updateColumnState([
          "aggregation",
          "columnOrder",
          "columnPinning",
          "columnSizing",
          "columnVisibility",
          "pivot",
          "pivot",
          "rowGroup",
          "sort"
        ]);
      });
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, function() {
        return _this.updateCachedState("columnGroup", _this.getColumnGroupState());
      });
    };
    StateService2.prototype.setupStateOnRowCountReady = function() {
      var _this = this;
      var _a;
      var _b = (_a = this.gridOptionsService.get("initialState")) !== null && _a !== void 0 ? _a : {}, filterState = _b.filter, rowGroupExpansionState = _b.rowGroupExpansion, rowSelectionState = _b.rowSelection, paginationState = _b.pagination;
      var advancedFilterModel = this.gridOptionsService.get("advancedFilterModel");
      if (filterState || advancedFilterModel) {
        this.setFilterState(filterState, advancedFilterModel);
      }
      if (rowGroupExpansionState) {
        this.setRowGroupExpansionState(rowGroupExpansionState);
      }
      if (rowSelectionState) {
        this.setRowSelectionState(rowSelectionState);
      }
      if (paginationState) {
        this.setPaginationState(paginationState);
      }
      this.updateCachedState("filter", this.getFilterState());
      this.updateCachedState("rowGroupExpansion", this.getRowGroupExpansionState());
      this.updateCachedState("rowSelection", this.getRowSelectionState());
      this.updateCachedState("pagination", this.getPaginationState());
      this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, function() {
        return _this.updateCachedState("filter", _this.getFilterState());
      });
      this.addManagedListener(this.eventService, Events.EVENT_ROW_GROUP_OPENED, function() {
        return _this.updateCachedState("rowGroupExpansion", _this.getRowGroupExpansionState());
      });
      this.addManagedListener(this.eventService, Events.EVENT_EXPAND_COLLAPSE_ALL, function() {
        return _this.updateCachedState("rowGroupExpansion", _this.getRowGroupExpansionState());
      });
      this.addManagedListener(this.eventService, Events.EVENT_SELECTION_CHANGED, function() {
        return _this.updateCachedState("rowSelection", _this.getRowSelectionState());
      });
      this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, function(event) {
        if (event.newPage || event.newPageSize) {
          _this.updateCachedState("pagination", _this.getPaginationState());
        }
      });
    };
    StateService2.prototype.setupStateOnFirstDataRendered = function() {
      var _this = this;
      var _a;
      var _b = (_a = this.gridOptionsService.get("initialState")) !== null && _a !== void 0 ? _a : {}, scrollState = _b.scroll, rangeSelectionState = _b.rangeSelection, focusedCellState = _b.focusedCell, columnOrderState = _b.columnOrder;
      if (focusedCellState) {
        this.setFocusedCellState(focusedCellState);
      }
      if (rangeSelectionState) {
        this.setRangeSelectionState(rangeSelectionState);
      }
      if (scrollState) {
        this.setScrollState(scrollState);
      }
      this.setColumnPivotState(!!(columnOrderState === null || columnOrderState === void 0 ? void 0 : columnOrderState.orderedColIds));
      this.updateCachedState("sideBar", this.getSideBarState());
      this.updateCachedState("focusedCell", this.getFocusedCellState());
      this.updateCachedState("rangeSelection", this.getRangeSelectionState());
      this.updateCachedState("scroll", this.getScrollState());
      this.addManagedListener(this.eventService, Events.EVENT_CELL_FOCUSED, function() {
        return _this.updateCachedState("focusedCell", _this.getFocusedCellState());
      });
      this.addManagedListener(this.eventService, Events.EVENT_RANGE_SELECTION_CHANGED, function(event) {
        if (event.finished) {
          _this.updateCachedState("rangeSelection", _this.getRangeSelectionState());
        }
      });
      this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL_END, function() {
        return _this.updateCachedState("scroll", _this.getScrollState());
      });
    };
    StateService2.prototype.getColumnState = function() {
      var pivotMode = this.columnModel.isPivotMode();
      var sortColumns = [];
      var groupColIds = [];
      var aggregationColumns = [];
      var pivotColIds = [];
      var leftColIds = [];
      var rightColIds = [];
      var hiddenColIds = [];
      var columnSizes = [];
      var columns = [];
      var columnState = this.columnModel.getColumnState();
      for (var i = 0; i < columnState.length; i++) {
        var _a = columnState[i], colId = _a.colId, sort = _a.sort, sortIndex = _a.sortIndex, rowGroup = _a.rowGroup, rowGroupIndex = _a.rowGroupIndex, aggFunc = _a.aggFunc, pivot = _a.pivot, pivotIndex = _a.pivotIndex, pinned = _a.pinned, hide = _a.hide, width = _a.width, flex = _a.flex;
        columns.push(colId);
        if (sort) {
          sortColumns[sortIndex !== null && sortIndex !== void 0 ? sortIndex : 0] = { colId, sort };
        }
        if (rowGroup) {
          groupColIds[rowGroupIndex !== null && rowGroupIndex !== void 0 ? rowGroupIndex : 0] = colId;
        }
        if (typeof aggFunc === "string") {
          aggregationColumns.push({ colId, aggFunc });
        }
        if (pivot) {
          pivotColIds[pivotIndex !== null && pivotIndex !== void 0 ? pivotIndex : 0] = colId;
        }
        if (pinned) {
          (pinned === "right" ? rightColIds : leftColIds).push(colId);
        }
        if (hide) {
          hiddenColIds.push(colId);
        }
        if (flex || width) {
          columnSizes.push({ colId, flex: flex !== null && flex !== void 0 ? flex : void 0, width });
        }
      }
      return {
        sort: sortColumns.length ? { sortModel: sortColumns } : void 0,
        rowGroup: groupColIds.length ? { groupColIds } : void 0,
        aggregation: aggregationColumns.length ? { aggregationModel: aggregationColumns } : void 0,
        pivot: pivotColIds.length || pivotMode ? { pivotMode, pivotColIds } : void 0,
        columnPinning: leftColIds.length || rightColIds.length ? { leftColIds, rightColIds } : void 0,
        columnVisibility: hiddenColIds.length ? { hiddenColIds } : void 0,
        columnSizing: columnSizes.length ? { columnSizingModel: columnSizes } : void 0,
        columnOrder: columns.length ? { orderedColIds: columns } : void 0
      };
    };
    StateService2.prototype.setColumnState = function(initialState) {
      var sortState = initialState.sort, groupState = initialState.rowGroup, aggregationState = initialState.aggregation, pivotState = initialState.pivot, columnPinningState = initialState.columnPinning, columnVisibilityState = initialState.columnVisibility, columnSizingState = initialState.columnSizing, columnOrderState = initialState.columnOrder;
      var columnStateMap = {};
      var getColumnState = function(colId) {
        var columnState = columnStateMap[colId];
        if (columnState) {
          return columnState;
        }
        columnState = { colId };
        columnStateMap[colId] = columnState;
        return columnState;
      };
      if (sortState) {
        sortState.sortModel.forEach(function(_a, sortIndex) {
          var colId = _a.colId, sort = _a.sort;
          var columnState = getColumnState(colId);
          columnState.sort = sort;
          columnState.sortIndex = sortIndex;
        });
      }
      if (groupState) {
        groupState.groupColIds.forEach(function(colId, rowGroupIndex) {
          var columnState = getColumnState(colId);
          columnState.rowGroup = true;
          columnState.rowGroupIndex = rowGroupIndex;
        });
      }
      if (aggregationState) {
        aggregationState.aggregationModel.forEach(function(_a) {
          var colId = _a.colId, aggFunc = _a.aggFunc;
          getColumnState(colId).aggFunc = aggFunc;
        });
      }
      if (pivotState) {
        pivotState.pivotColIds.forEach(function(colId, pivotIndex) {
          var columnState = getColumnState(colId);
          columnState.pivot = true;
          columnState.pivotIndex = pivotIndex;
        });
        this.gridOptionsService.updateGridOptions({ options: { pivotMode: pivotState.pivotMode }, source: "gridInitializing" });
      }
      if (columnPinningState) {
        columnPinningState.leftColIds.forEach(function(colId) {
          getColumnState(colId).pinned = "left";
        });
        columnPinningState.rightColIds.forEach(function(colId) {
          getColumnState(colId).pinned = "right";
        });
      }
      if (columnVisibilityState) {
        columnVisibilityState.hiddenColIds.forEach(function(colId) {
          getColumnState(colId).hide = true;
        });
      }
      if (columnSizingState) {
        columnSizingState.columnSizingModel.forEach(function(_a) {
          var colId = _a.colId, flex = _a.flex, width = _a.width;
          var columnState = getColumnState(colId);
          columnState.flex = flex !== null && flex !== void 0 ? flex : null;
          columnState.width = width;
        });
      }
      var columns = columnOrderState === null || columnOrderState === void 0 ? void 0 : columnOrderState.orderedColIds;
      var applyOrder = !!(columns === null || columns === void 0 ? void 0 : columns.length);
      var columnStates = applyOrder ? columns.map(function(colId) {
        return getColumnState(colId);
      }) : Object.values(columnStateMap);
      if (columnStates.length) {
        this.columnStates = columnStates;
        var defaultState = {
          sort: null,
          sortIndex: null,
          rowGroup: null,
          rowGroupIndex: null,
          aggFunc: null,
          pivot: null,
          pivotIndex: null,
          pinned: null,
          hide: null,
          flex: null
        };
        this.columnModel.applyColumnState({
          state: columnStates,
          applyOrder,
          defaultState
        }, "gridInitializing");
      }
    };
    StateService2.prototype.setColumnPivotState = function(applyOrder) {
      var e_1, _a;
      var columnStates = this.columnStates;
      this.columnStates = void 0;
      if (!columnStates || !this.columnModel.isSecondaryColumnsPresent()) {
        return;
      }
      var secondaryColumnStates = [];
      try {
        for (var columnStates_1 = __values$1(columnStates), columnStates_1_1 = columnStates_1.next(); !columnStates_1_1.done; columnStates_1_1 = columnStates_1.next()) {
          var columnState = columnStates_1_1.value;
          if (this.columnModel.getSecondaryColumn(columnState.colId)) {
            secondaryColumnStates.push(columnState);
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (columnStates_1_1 && !columnStates_1_1.done && (_a = columnStates_1.return))
            _a.call(columnStates_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      this.columnModel.applyColumnState({
        state: secondaryColumnStates,
        applyOrder
      }, "gridInitializing");
    };
    StateService2.prototype.getColumnGroupState = function() {
      var columnGroupState = this.columnModel.getColumnGroupState();
      var openColumnGroups = [];
      columnGroupState.forEach(function(_a) {
        var groupId = _a.groupId, open = _a.open;
        if (open) {
          openColumnGroups.push(groupId);
        }
      });
      return openColumnGroups.length ? { openColumnGroupIds: openColumnGroups } : void 0;
    };
    StateService2.prototype.setColumnGroupState = function(columnGroupState) {
      var openColumnGroups = columnGroupState.openColumnGroupIds;
      var openColumnGroupSet = new Set(openColumnGroups);
      var existingColumnGroupState = this.columnModel.getColumnGroupState();
      var stateItems = existingColumnGroupState.map(function(_a) {
        var groupId = _a.groupId;
        return {
          groupId,
          open: openColumnGroupSet.has(groupId)
        };
      });
      this.columnModel.setColumnGroupState(stateItems, "gridInitializing");
    };
    StateService2.prototype.getFilterState = function() {
      var _a;
      var filterModel = this.filterManager.getFilterModel();
      if (filterModel && Object.keys(filterModel).length === 0) {
        filterModel = void 0;
      }
      var advancedFilterModel = (_a = this.filterManager.getAdvancedFilterModel()) !== null && _a !== void 0 ? _a : void 0;
      return filterModel || advancedFilterModel ? { filterModel, advancedFilterModel } : void 0;
    };
    StateService2.prototype.setFilterState = function(filterState, gridOptionAdvancedFilterModel) {
      var _a = filterState !== null && filterState !== void 0 ? filterState : { advancedFilterModel: gridOptionAdvancedFilterModel }, filterModel = _a.filterModel, advancedFilterModel = _a.advancedFilterModel;
      if (filterModel) {
        this.filterManager.setFilterModel(filterModel, "columnFilter");
      }
      if (advancedFilterModel) {
        this.filterManager.setAdvancedFilterModel(advancedFilterModel);
      }
    };
    StateService2.prototype.getRangeSelectionState = function() {
      var _a;
      var cellRanges = (_a = this.rangeService) === null || _a === void 0 ? void 0 : _a.getCellRanges().map(function(cellRange) {
        var id = cellRange.id, type = cellRange.type, startRow = cellRange.startRow, endRow = cellRange.endRow, columns = cellRange.columns, startColumn = cellRange.startColumn;
        return {
          id,
          type,
          startRow,
          endRow,
          colIds: columns.map(function(column) {
            return column.getColId();
          }),
          startColId: startColumn.getColId()
        };
      });
      return (cellRanges === null || cellRanges === void 0 ? void 0 : cellRanges.length) ? { cellRanges } : void 0;
    };
    StateService2.prototype.setRangeSelectionState = function(rangeSelectionState) {
      var _this = this;
      var _a;
      if (!this.gridOptionsService.get("enableRangeSelection")) {
        return;
      }
      var cellRanges = rangeSelectionState.cellRanges.map(function(cellRange) {
        return __assign(__assign({}, cellRange), { columns: cellRange.colIds.map(function(colId) {
          return _this.columnModel.getGridColumn(colId);
        }), startColumn: _this.columnModel.getGridColumn(cellRange.startColId) });
      });
      (_a = this.rangeService) === null || _a === void 0 ? void 0 : _a.setCellRanges(cellRanges);
    };
    StateService2.prototype.getScrollState = function() {
      var _a, _b, _c;
      if (!this.isClientSideRowModel) {
        return void 0;
      }
      var scrollFeature = (_a = this.ctrlsService.getGridBodyCtrl()) === null || _a === void 0 ? void 0 : _a.getScrollFeature();
      var left = ((_b = scrollFeature === null || scrollFeature === void 0 ? void 0 : scrollFeature.getHScrollPosition()) !== null && _b !== void 0 ? _b : { left: 0 }).left;
      var top = ((_c = scrollFeature === null || scrollFeature === void 0 ? void 0 : scrollFeature.getVScrollPosition()) !== null && _c !== void 0 ? _c : { top: 0 }).top;
      return top || left ? {
        top,
        left
      } : void 0;
    };
    StateService2.prototype.setScrollState = function(scrollState) {
      var _a;
      if (!this.isClientSideRowModel) {
        return;
      }
      var top = scrollState.top, left = scrollState.left;
      (_a = this.ctrlsService.getGridBodyCtrl()) === null || _a === void 0 ? void 0 : _a.getScrollFeature().setScrollPosition(top, left);
    };
    StateService2.prototype.getSideBarState = function() {
      var _a, _b;
      return (_b = (_a = this.sideBarService) === null || _a === void 0 ? void 0 : _a.getSideBarComp()) === null || _b === void 0 ? void 0 : _b.getState();
    };
    StateService2.prototype.getFocusedCellState = function() {
      if (!this.isClientSideRowModel) {
        return void 0;
      }
      var focusedCell = this.focusService.getFocusedCell();
      if (focusedCell) {
        var column = focusedCell.column, rowIndex = focusedCell.rowIndex, rowPinned = focusedCell.rowPinned;
        return {
          colId: column.getColId(),
          rowIndex,
          rowPinned
        };
      }
      return void 0;
    };
    StateService2.prototype.setFocusedCellState = function(focusedCellState) {
      if (!this.isClientSideRowModel) {
        return;
      }
      var colId = focusedCellState.colId, rowIndex = focusedCellState.rowIndex, rowPinned = focusedCellState.rowPinned;
      this.focusService.setFocusedCell({
        column: this.columnModel.getGridColumn(colId),
        rowIndex,
        rowPinned,
        forceBrowserFocus: true,
        preventScrollOnBrowserFocus: true
      });
    };
    StateService2.prototype.getPaginationState = function() {
      var page = this.paginationProxy.getCurrentPage();
      var pageSize = !this.gridOptionsService.get("paginationAutoPageSize") ? this.paginationProxy.getPageSize() : void 0;
      if (!page && !pageSize) {
        return;
      }
      return { page, pageSize };
    };
    StateService2.prototype.setPaginationState = function(paginationState) {
      if (paginationState.pageSize && !this.gridOptionsService.get("paginationAutoPageSize")) {
        this.paginationProxy.setPageSize(paginationState.pageSize, "initialState");
      }
      if (typeof paginationState.page === "number") {
        this.paginationProxy.setPage(paginationState.page);
      }
    };
    StateService2.prototype.getRowSelectionState = function() {
      var _a;
      var selectionState = this.selectionService.getSelectionState();
      var noSelections = !selectionState || !Array.isArray(selectionState) && (selectionState.selectAll === false || selectionState.selectAllChildren === false) && !((_a = selectionState === null || selectionState === void 0 ? void 0 : selectionState.toggledNodes) === null || _a === void 0 ? void 0 : _a.length);
      return noSelections ? void 0 : selectionState;
    };
    StateService2.prototype.setRowSelectionState = function(rowSelectionState) {
      this.selectionService.setSelectionState(rowSelectionState, "gridInitializing");
    };
    StateService2.prototype.getRowGroupExpansionState = function() {
      var expandedRowGroups = this.expansionService.getExpandedRows();
      return expandedRowGroups.length ? {
        expandedRowGroupIds: expandedRowGroups
      } : void 0;
    };
    StateService2.prototype.setRowGroupExpansionState = function(rowGroupExpansionState) {
      this.expansionService.expandRows(rowGroupExpansionState.expandedRowGroupIds);
    };
    StateService2.prototype.updateColumnState = function(features) {
      var _this = this;
      var newColumnState = this.getColumnState();
      var hasChanged = false;
      Object.entries(newColumnState).forEach(function(_a) {
        var _b = __read$6(_a, 2), key = _b[0], value = _b[1];
        if (!jsonEquals(value, _this.cachedState[key])) {
          hasChanged = true;
        }
      });
      this.cachedState = __assign(__assign({}, this.cachedState), newColumnState);
      if (hasChanged) {
        this.dispatchStateUpdateEvent(features);
      }
    };
    StateService2.prototype.updateCachedState = function(key, value) {
      var _a;
      var existingValue = this.cachedState[key];
      this.cachedState = __assign(__assign({}, this.cachedState), (_a = {}, _a[key] = value, _a));
      if (!jsonEquals(value, existingValue)) {
        this.dispatchStateUpdateEvent([key]);
      }
    };
    StateService2.prototype.dispatchStateUpdateEvent = function(sources) {
      var _this = this;
      if (this.suppressEvents) {
        return;
      }
      sources.forEach(function(source) {
        return _this.queuedUpdateSources.add(source);
      });
      this.dispatchStateUpdateEventDebounced();
    };
    StateService2.prototype.dispatchQueuedStateUpdateEvents = function() {
      var sources = Array.from(this.queuedUpdateSources);
      this.queuedUpdateSources.clear();
      var event = {
        type: Events.EVENT_STATE_UPDATED,
        sources,
        state: this.cachedState
      };
      this.eventService.dispatchEvent(event);
    };
    StateService2.prototype.suppressEventsAndDispatchInitEvent = function(updateFunc) {
      var _this = this;
      this.suppressEvents = true;
      updateFunc();
      setTimeout(function() {
        _this.suppressEvents = false;
        _this.queuedUpdateSources.clear();
        _this.dispatchStateUpdateEvent(["gridInitializing"]);
      });
    };
    __decorate$f([
      Autowired("filterManager")
    ], StateService2.prototype, "filterManager", void 0);
    __decorate$f([
      Optional("rangeService")
    ], StateService2.prototype, "rangeService", void 0);
    __decorate$f([
      Autowired("ctrlsService")
    ], StateService2.prototype, "ctrlsService", void 0);
    __decorate$f([
      Optional("sideBarService")
    ], StateService2.prototype, "sideBarService", void 0);
    __decorate$f([
      Autowired("focusService")
    ], StateService2.prototype, "focusService", void 0);
    __decorate$f([
      Autowired("columnModel")
    ], StateService2.prototype, "columnModel", void 0);
    __decorate$f([
      Autowired("paginationProxy")
    ], StateService2.prototype, "paginationProxy", void 0);
    __decorate$f([
      Autowired("rowModel")
    ], StateService2.prototype, "rowModel", void 0);
    __decorate$f([
      Autowired("selectionService")
    ], StateService2.prototype, "selectionService", void 0);
    __decorate$f([
      Autowired("expansionService")
    ], StateService2.prototype, "expansionService", void 0);
    __decorate$f([
      PostConstruct
    ], StateService2.prototype, "postConstruct", null);
    StateService2 = __decorate$f([
      Bean("stateService")
    ], StateService2);
    return StateService2;
  }(BeanStub)
);
var __extends$f = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$e = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __read$5 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$4 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var ValidationService = (
  /** @class */
  function(_super) {
    __extends$f(ValidationService2, _super);
    function ValidationService2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ValidationService2.prototype.init = function() {
      this.processGridOptions(this.gridOptions);
    };
    ValidationService2.prototype.processGridOptions = function(options) {
      this.processOptions(options, GRID_OPTIONS_VALIDATORS);
    };
    ValidationService2.prototype.processColumnDefs = function(options) {
      this.processOptions(options, COL_DEF_VALIDATORS);
    };
    ValidationService2.prototype.processOptions = function(options, validator) {
      var _this = this;
      var validations = validator.validations, deprecations = validator.deprecations, allProperties = validator.allProperties, propertyExceptions = validator.propertyExceptions, objectName = validator.objectName, docsUrl = validator.docsUrl;
      if (allProperties && this.gridOptions.suppressPropertyNamesCheck !== true) {
        this.checkProperties(options, __spreadArray$4(__spreadArray$4([], __read$5(propertyExceptions !== null && propertyExceptions !== void 0 ? propertyExceptions : []), false), __read$5(Object.keys(deprecations)), false), allProperties, objectName, docsUrl);
      }
      var warnings = /* @__PURE__ */ new Set();
      var optionKeys = Object.keys(options);
      optionKeys.forEach(function(key) {
        var _a;
        var deprecation = deprecations[key];
        if (deprecation) {
          if ("renamed" in deprecation) {
            var renamed = deprecation.renamed, version = deprecation.version;
            warnings.add("As of v".concat(version, ", ").concat(String(key), " is deprecated. Please use ").concat(String(renamed), " instead."));
            options[renamed] = options[key];
          } else {
            var message = deprecation.message, version = deprecation.version;
            warnings.add("As of v".concat(version, ", ").concat(String(key), " is deprecated. ").concat(message !== null && message !== void 0 ? message : ""));
          }
        }
        var value = options[key];
        if (value == null || value === false) {
          return;
        }
        var rulesOrGetter = validations[key];
        var rules;
        if (!rulesOrGetter) {
          return;
        } else if (typeof rulesOrGetter === "function") {
          var fromGetter_1 = rulesOrGetter(options, _this.gridOptions);
          if (!fromGetter_1) {
            return;
          }
          if ("objectName" in fromGetter_1) {
            var value_1 = options[key];
            if (Array.isArray(value_1)) {
              value_1.forEach(function(item) {
                _this.processOptions(item, fromGetter_1);
              });
              return;
            }
            _this.processOptions(options[key], fromGetter_1);
            return;
          }
          rules = fromGetter_1;
        } else {
          rules = rulesOrGetter;
        }
        var module = rules.module, dependencies = rules.dependencies, supportedRowModels = rules.supportedRowModels;
        if (supportedRowModels) {
          var rowModel = (_a = _this.gridOptions.rowModelType) !== null && _a !== void 0 ? _a : "clientSide";
          if (!supportedRowModels.includes(rowModel)) {
            warnings.add("".concat(String(key), " is not supported with the '").concat(rowModel, "' row model."));
            return;
          }
        }
        if (module) {
          var modules = Array.isArray(module) ? module : [module];
          var allRegistered_1 = true;
          modules.forEach(function(m) {
            if (!ModuleRegistry.__assertRegistered(m, String(key), _this.gridOptionsService.getGridId())) {
              allRegistered_1 = false;
              warnings.add("".concat(String(key), " is only available when ").concat(m, " is loaded."));
            }
          });
          if (!allRegistered_1) {
            return;
          }
        }
        if (dependencies) {
          var warning = _this.checkForWarning(key, dependencies, options);
          if (warning) {
            warnings.add(warning);
            return;
          }
        }
      });
      if (warnings.size > 0) {
        warnings.forEach(function(warning) {
          warnOnce(warning);
        });
      }
    };
    ValidationService2.prototype.checkForWarning = function(key, validator, options) {
      if (typeof validator === "function") {
        return validator(options, this.gridOptions);
      }
      var optionEntries = Object.entries(validator);
      var failed = optionEntries.find(function(_a2) {
        var _b = __read$5(_a2, 2), key2 = _b[0], value = _b[1];
        var gridOptionValue = options[key2];
        return !value.includes(gridOptionValue);
      });
      if (!failed) {
        return null;
      }
      var _a = __read$5(failed, 2), failedKey = _a[0], possibleOptions = _a[1];
      if (possibleOptions.length > 1) {
        return "'".concat(String(key), "' requires '").concat(failedKey, "' to be one of [").concat(possibleOptions.join(", "), "].");
      }
      return "'".concat(String(key), "' requires '").concat(failedKey, "' to be ").concat(possibleOptions[0], ".");
    };
    ValidationService2.prototype.checkProperties = function(object, exceptions, validProperties, containerName, docsUrl) {
      var VUE_FRAMEWORK_PROPS = ["__ob__", "__v_skip", "__metadata__"];
      var invalidProperties = fuzzyCheckStrings(Object.getOwnPropertyNames(object), __spreadArray$4(__spreadArray$4(__spreadArray$4([], __read$5(VUE_FRAMEWORK_PROPS), false), __read$5(exceptions), false), __read$5(validProperties), false), validProperties);
      iterateObject(invalidProperties, function(key, value) {
        warnOnce("invalid ".concat(containerName, " property '").concat(key, "' did you mean any of these: ").concat(value.slice(0, 8).join(", ")));
      });
      if (Object.keys(invalidProperties).length > 0 && docsUrl) {
        var url = this.getFrameworkOverrides().getDocLink(docsUrl);
        warnOnce("to see all the valid ".concat(containerName, " properties please check: ").concat(url));
      }
    };
    __decorate$e([
      Autowired("gridOptions")
    ], ValidationService2.prototype, "gridOptions", void 0);
    __decorate$e([
      PostConstruct
    ], ValidationService2.prototype, "init", null);
    ValidationService2 = __decorate$e([
      Bean("validationService")
    ], ValidationService2);
    return ValidationService2;
  }(BeanStub)
);
var __extends$e = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$d = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ApiEventService = (
  /** @class */
  function(_super) {
    __extends$e(ApiEventService2, _super);
    function ApiEventService2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.syncEventListeners = /* @__PURE__ */ new Map();
      _this.asyncEventListeners = /* @__PURE__ */ new Map();
      _this.syncGlobalEventListeners = /* @__PURE__ */ new Set();
      _this.asyncGlobalEventListeners = /* @__PURE__ */ new Set();
      return _this;
    }
    ApiEventService2.prototype.postConstruct = function() {
      this.frameworkEventWrappingService = new FrameworkEventListenerService(this.getFrameworkOverrides());
    };
    ApiEventService2.prototype.addEventListener = function(eventType, userListener) {
      var listener = this.frameworkEventWrappingService.wrap(userListener);
      var async = this.gridOptionsService.useAsyncEvents();
      var listeners = async ? this.asyncEventListeners : this.syncEventListeners;
      if (!listeners.has(eventType)) {
        listeners.set(eventType, /* @__PURE__ */ new Set());
      }
      listeners.get(eventType).add(listener);
      this.eventService.addEventListener(eventType, listener, async);
    };
    ApiEventService2.prototype.addGlobalListener = function(userListener) {
      var listener = this.frameworkEventWrappingService.wrapGlobal(userListener);
      var async = this.gridOptionsService.useAsyncEvents();
      var listeners = async ? this.asyncGlobalEventListeners : this.syncGlobalEventListeners;
      listeners.add(listener);
      this.eventService.addGlobalListener(listener, async);
    };
    ApiEventService2.prototype.removeEventListener = function(eventType, userListener) {
      var _a;
      var listener = this.frameworkEventWrappingService.unwrap(userListener);
      var asyncListeners = this.asyncEventListeners.get(eventType);
      var hasAsync = !!(asyncListeners === null || asyncListeners === void 0 ? void 0 : asyncListeners.delete(listener));
      if (!hasAsync) {
        (_a = this.asyncEventListeners.get(eventType)) === null || _a === void 0 ? void 0 : _a.delete(listener);
      }
      this.eventService.removeEventListener(eventType, listener, hasAsync);
    };
    ApiEventService2.prototype.removeGlobalListener = function(userListener) {
      var listener = this.frameworkEventWrappingService.unwrapGlobal(userListener);
      var hasAsync = this.asyncGlobalEventListeners.delete(listener);
      if (!hasAsync) {
        this.syncGlobalEventListeners.delete(listener);
      }
      this.eventService.removeGlobalListener(listener, hasAsync);
    };
    ApiEventService2.prototype.destroyEventListeners = function(map, async) {
      var _this = this;
      map.forEach(function(listeners, eventType) {
        listeners.forEach(function(listener) {
          return _this.eventService.removeEventListener(eventType, listener, async);
        });
        listeners.clear();
      });
      map.clear();
    };
    ApiEventService2.prototype.destroyGlobalListeners = function(set2, async) {
      var _this = this;
      set2.forEach(function(listener) {
        return _this.eventService.removeGlobalListener(listener, async);
      });
      set2.clear();
    };
    ApiEventService2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.destroyEventListeners(this.syncEventListeners, false);
      this.destroyEventListeners(this.asyncEventListeners, true);
      this.destroyGlobalListeners(this.syncGlobalEventListeners, false);
      this.destroyGlobalListeners(this.asyncGlobalEventListeners, true);
    };
    __decorate$d([
      PostConstruct
    ], ApiEventService2.prototype, "postConstruct", null);
    ApiEventService2 = __decorate$d([
      Bean("apiEventService")
    ], ApiEventService2);
    return ApiEventService2;
  }(BeanStub)
);
var __extends$d = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$c = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __read$4 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$3 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var PageSizeSelectorComp = (
  /** @class */
  function(_super) {
    __extends$d(PageSizeSelectorComp2, _super);
    function PageSizeSelectorComp2() {
      var _this = _super.call(
        this,
        /* html */
        '<span class="ag-paging-page-size"></span>'
      ) || this;
      _this.hasEmptyOption = false;
      _this.handlePageSizeItemSelected = function() {
        if (!_this.selectPageSizeComp) {
          return;
        }
        var newValue = _this.selectPageSizeComp.getValue();
        if (!newValue) {
          return;
        }
        var paginationPageSize = Number(newValue);
        if (isNaN(paginationPageSize) || paginationPageSize < 1 || paginationPageSize === _this.paginationProxy.getPageSize()) {
          return;
        }
        _this.paginationProxy.setPageSize(paginationPageSize, "pageSizeSelector");
        if (_this.hasEmptyOption) {
          _this.toggleSelectDisplay(true);
        }
        _this.selectPageSizeComp.getFocusableElement().focus();
      };
      return _this;
    }
    PageSizeSelectorComp2.prototype.init = function() {
      var _this = this;
      this.addManagedPropertyListener("paginationPageSizeSelector", function() {
        _this.onPageSizeSelectorValuesChange();
      });
      this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, function(event) {
        return _this.handlePaginationChanged(event);
      });
    };
    PageSizeSelectorComp2.prototype.handlePaginationChanged = function(paginationChangedEvent) {
      if (!this.selectPageSizeComp || !(paginationChangedEvent === null || paginationChangedEvent === void 0 ? void 0 : paginationChangedEvent.newPageSize)) {
        return;
      }
      var paginationPageSize = this.paginationProxy.getPageSize();
      if (this.getPageSizeSelectorValues().includes(paginationPageSize)) {
        this.selectPageSizeComp.setValue(paginationPageSize.toString());
      } else {
        if (this.hasEmptyOption) {
          this.selectPageSizeComp.setValue("");
        } else {
          this.toggleSelectDisplay(true);
        }
      }
    };
    PageSizeSelectorComp2.prototype.toggleSelectDisplay = function(show) {
      if (this.selectPageSizeComp) {
        this.reset();
      }
      if (!show) {
        return;
      }
      this.reloadPageSizesSelector();
      if (!this.selectPageSizeComp) {
        return;
      }
      this.appendChild(this.selectPageSizeComp);
    };
    PageSizeSelectorComp2.prototype.reset = function() {
      clearElement(this.getGui());
      if (!this.selectPageSizeComp) {
        return;
      }
      this.destroyBean(this.selectPageSizeComp);
      this.selectPageSizeComp = void 0;
    };
    PageSizeSelectorComp2.prototype.onPageSizeSelectorValuesChange = function() {
      if (!this.selectPageSizeComp) {
        return;
      }
      if (this.shouldShowPageSizeSelector()) {
        this.reloadPageSizesSelector();
      }
    };
    PageSizeSelectorComp2.prototype.shouldShowPageSizeSelector = function() {
      return this.gridOptionsService.get("pagination") && !this.gridOptionsService.get("suppressPaginationPanel") && !this.gridOptionsService.get("paginationAutoPageSize") && this.gridOptionsService.get("paginationPageSizeSelector") !== false;
    };
    PageSizeSelectorComp2.prototype.reloadPageSizesSelector = function() {
      var _this = this;
      var pageSizeOptions = this.getPageSizeSelectorValues();
      var paginationPageSizeOption = this.paginationProxy.getPageSize();
      var shouldAddAndSelectEmptyOption = !paginationPageSizeOption || !pageSizeOptions.includes(paginationPageSizeOption);
      if (shouldAddAndSelectEmptyOption) {
        pageSizeOptions.unshift("");
        warnOnce("The paginationPageSize grid option is set to a value that is not in the list of page size options.\n                Please make sure that the paginationPageSize grid option is set to one of the values in the \n                paginationPageSizeSelector array, or set the paginationPageSizeSelector to false to hide the page size selector.");
      }
      if (this.selectPageSizeComp) {
        this.destroyBean(this.selectPageSizeComp);
        this.selectPageSizeComp = void 0;
      }
      var localeTextFunc = this.localeService.getLocaleTextFunc();
      var localisedLabel = localeTextFunc("pageSizeSelectorLabel", "Page Size:");
      var options = pageSizeOptions.map(function(value) {
        return {
          value: String(value),
          text: String(value)
        };
      });
      var localisedAriaLabel = localeTextFunc("ariaPageSizeSelectorLabel", "Page Size");
      this.selectPageSizeComp = this.createManagedBean(new AgSelect()).addOptions(options).setValue(String(shouldAddAndSelectEmptyOption ? "" : paginationPageSizeOption)).setAriaLabel(localisedAriaLabel).setLabel(localisedLabel).onValueChange(function() {
        return _this.handlePageSizeItemSelected();
      });
      this.hasEmptyOption = shouldAddAndSelectEmptyOption;
    };
    PageSizeSelectorComp2.prototype.getPageSizeSelectorValues = function() {
      var defaultValues = [20, 50, 100];
      var paginationPageSizeSelectorValues = this.gridOptionsService.get("paginationPageSizeSelector");
      if (!Array.isArray(paginationPageSizeSelectorValues) || !this.validateValues(paginationPageSizeSelectorValues)) {
        return defaultValues;
      }
      return __spreadArray$3([], __read$4(paginationPageSizeSelectorValues), false).sort(function(a, b) {
        return a - b;
      });
    };
    PageSizeSelectorComp2.prototype.validateValues = function(values2) {
      if (!values2.length) {
        warnOnce("The paginationPageSizeSelector grid option is an empty array. This is most likely a mistake.\n                If you want to hide the page size selector, please set the paginationPageSizeSelector to false.");
        return false;
      }
      for (var i = 0; i < values2.length; i++) {
        var value = values2[i];
        var isNumber = typeof value === "number";
        var isPositive = value > 0;
        if (!isNumber) {
          warnOnce("The paginationPageSizeSelector grid option contains a non-numeric value.\n                    Please make sure that all values in the paginationPageSizeSelector array are numbers.");
          return false;
        }
        if (!isPositive) {
          warnOnce("The paginationPageSizeSelector grid option contains a negative number or zero.\n                    Please make sure that all values in the paginationPageSizeSelector array are positive.");
          return false;
        }
      }
      return true;
    };
    PageSizeSelectorComp2.prototype.destroy = function() {
      this.toggleSelectDisplay(false);
      _super.prototype.destroy.call(this);
    };
    __decorate$c([
      Autowired("localeService")
    ], PageSizeSelectorComp2.prototype, "localeService", void 0);
    __decorate$c([
      Autowired("gridOptionsService")
    ], PageSizeSelectorComp2.prototype, "gridOptionsService", void 0);
    __decorate$c([
      Autowired("paginationProxy")
    ], PageSizeSelectorComp2.prototype, "paginationProxy", void 0);
    __decorate$c([
      PostConstruct
    ], PageSizeSelectorComp2.prototype, "init", null);
    return PageSizeSelectorComp2;
  }(Component2)
);
var __read$3 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$2 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
function createGrid(eGridDiv, gridOptions, params) {
  if (!gridOptions) {
    errorOnce("No gridOptions provided to createGrid");
    return {};
  }
  var shallowCopy = GridOptionsService.getCoercedGridOptions(gridOptions);
  var api = new GridCoreCreator().create(eGridDiv, shallowCopy, function(context) {
    var gridComp = new GridComp(eGridDiv);
    context.createBean(gridComp);
  }, void 0, params);
  if (!Object.isFrozen(gridOptions) && !(params === null || params === void 0 ? void 0 : params.frameworkOverrides)) {
    var apiUrl_1 = "https://ag-grid.com/javascript-data-grid/grid-interface/#grid-api";
    Object.defineProperty(gridOptions, "api", {
      get: function() {
        errorOnce("gridOptions.api is no longer supported. See ".concat(apiUrl_1, "."));
        return void 0;
      },
      configurable: true
    });
    Object.defineProperty(gridOptions, "columnApi", {
      get: function() {
        errorOnce("gridOptions.columnApi is no longer supported and all methods moved to the grid api. See ".concat(apiUrl_1, "."));
        return void 0;
      },
      configurable: true
    });
  }
  return api;
}
var Grid = (
  /** @class */
  function() {
    function Grid2(eGridDiv, gridOptions, params) {
      var _this = this;
      warnOnce("Since v31 new Grid(...) is deprecated. Use createGrid instead: `const gridApi = createGrid(...)`. The grid api is returned from createGrid and will not be available on gridOptions.");
      if (!gridOptions) {
        errorOnce("No gridOptions provided to the grid");
        return;
      }
      this.gridOptions = gridOptions;
      var api = new GridCoreCreator().create(eGridDiv, gridOptions, function(context) {
        var gridComp = new GridComp(eGridDiv);
        var bean = context.createBean(gridComp);
        bean.addDestroyFunc(function() {
          _this.destroy();
        });
      }, void 0, params);
      this.gridOptions.api = api;
      this.gridOptions.columnApi = new ColumnApi(api);
    }
    Grid2.prototype.destroy = function() {
      var _a;
      if (this.gridOptions) {
        (_a = this.gridOptions.api) === null || _a === void 0 ? void 0 : _a.destroy();
        delete this.gridOptions.api;
        delete this.gridOptions.columnApi;
      }
    };
    return Grid2;
  }()
);
var nextGridId = 1;
var GridCoreCreator = (
  /** @class */
  function() {
    function GridCoreCreator2() {
    }
    GridCoreCreator2.prototype.create = function(eGridDiv, gridOptions, createUi, acceptChanges, params) {
      var _a;
      var debug = !!gridOptions.debug;
      var gridId = (_a = gridOptions.gridId) !== null && _a !== void 0 ? _a : String(nextGridId++);
      var registeredModules = this.getRegisteredModules(params, gridId);
      var beanClasses = this.createBeansList(gridOptions.rowModelType, registeredModules, gridId);
      var providedBeanInstances = this.createProvidedBeans(eGridDiv, gridOptions, params);
      if (!beanClasses) {
        errorOnce("Failed to create grid.");
        return void 0;
      }
      var contextParams = {
        providedBeanInstances,
        beanClasses,
        debug,
        gridId
      };
      var contextLogger = new Logger("Context", function() {
        return contextParams.debug;
      });
      var context = new Context(contextParams, contextLogger);
      var beans = context.getBean("beans");
      this.registerModuleUserComponents(beans, registeredModules);
      this.registerStackComponents(beans, registeredModules);
      this.registerControllers(beans, registeredModules);
      createUi(context);
      beans.syncService.start();
      if (acceptChanges) {
        acceptChanges(context);
      }
      return beans.gridApi;
    };
    GridCoreCreator2.prototype.registerControllers = function(beans, registeredModules) {
      registeredModules.forEach(function(module) {
        if (module.controllers) {
          module.controllers.forEach(function(meta) {
            return beans.ctrlsFactory.register(meta);
          });
        }
      });
    };
    GridCoreCreator2.prototype.registerStackComponents = function(beans, registeredModules) {
      var agStackComponents = this.createAgStackComponentsList(registeredModules);
      beans.agStackComponentsRegistry.setupComponents(agStackComponents);
    };
    GridCoreCreator2.prototype.getRegisteredModules = function(params, gridId) {
      var passedViaConstructor = params ? params.modules : null;
      var registered = ModuleRegistry.__getRegisteredModules(gridId);
      var allModules = [];
      var mapNames = {};
      var addModule = function(moduleBased, mod, gridId2) {
        var addIndividualModule = function(currentModule) {
          if (!mapNames[currentModule.moduleName]) {
            mapNames[currentModule.moduleName] = true;
            allModules.push(currentModule);
            ModuleRegistry.__register(currentModule, moduleBased, gridId2);
          }
        };
        addIndividualModule(mod);
        if (mod.dependantModules) {
          mod.dependantModules.forEach(function(m) {
            return addModule(moduleBased, m, gridId2);
          });
        }
      };
      if (passedViaConstructor) {
        passedViaConstructor.forEach(function(m) {
          return addModule(true, m, gridId);
        });
      }
      if (registered) {
        registered.forEach(function(m) {
          return addModule(!ModuleRegistry.__isPackageBased(), m, void 0);
        });
      }
      return allModules;
    };
    GridCoreCreator2.prototype.registerModuleUserComponents = function(beans, registeredModules) {
      var moduleUserComps = this.extractModuleEntity(registeredModules, function(module) {
        return module.userComponents ? module.userComponents : [];
      });
      moduleUserComps.forEach(function(compMeta) {
        beans.userComponentRegistry.registerDefaultComponent(compMeta.componentName, compMeta.componentClass);
      });
    };
    GridCoreCreator2.prototype.createProvidedBeans = function(eGridDiv, gridOptions, params) {
      var frameworkOverrides = params ? params.frameworkOverrides : null;
      if (missing(frameworkOverrides)) {
        frameworkOverrides = new VanillaFrameworkOverrides();
      }
      var seed = {
        gridOptions,
        eGridDiv,
        globalEventListener: params ? params.globalEventListener : null,
        globalSyncEventListener: params ? params.globalSyncEventListener : null,
        frameworkOverrides
      };
      if (params && params.providedBeanInstances) {
        Object.assign(seed, params.providedBeanInstances);
      }
      return seed;
    };
    GridCoreCreator2.prototype.createAgStackComponentsList = function(registeredModules) {
      var components = [
        { componentName: "AgCheckbox", componentClass: AgCheckbox },
        { componentName: "AgRadioButton", componentClass: AgRadioButton },
        { componentName: "AgToggleButton", componentClass: AgToggleButton },
        { componentName: "AgInputTextField", componentClass: AgInputTextField },
        { componentName: "AgInputTextArea", componentClass: AgInputTextArea },
        { componentName: "AgInputNumberField", componentClass: AgInputNumberField },
        { componentName: "AgInputDateField", componentClass: AgInputDateField },
        { componentName: "AgInputRange", componentClass: AgInputRange },
        { componentName: "AgRichSelect", componentClass: AgRichSelect },
        { componentName: "AgSelect", componentClass: AgSelect },
        { componentName: "AgSlider", componentClass: AgSlider },
        { componentName: "AgGridBody", componentClass: GridBodyComp },
        { componentName: "AgHeaderRoot", componentClass: GridHeaderComp },
        { componentName: "AgSortIndicator", componentClass: SortIndicatorComp },
        { componentName: "AgPagination", componentClass: PaginationComp },
        { componentName: "AgPageSizeSelector", componentClass: PageSizeSelectorComp },
        { componentName: "AgOverlayWrapper", componentClass: OverlayWrapperComponent },
        { componentName: "AgGroupComponent", componentClass: AgGroupComponent },
        { componentName: "AgPanel", componentClass: AgPanel },
        { componentName: "AgDialog", componentClass: AgDialog },
        { componentName: "AgRowContainer", componentClass: RowContainerComp },
        { componentName: "AgFakeHorizontalScroll", componentClass: FakeHScrollComp },
        { componentName: "AgFakeVerticalScroll", componentClass: FakeVScrollComp },
        { componentName: "AgAutocomplete", componentClass: AgAutocomplete }
      ];
      var moduleAgStackComps = this.extractModuleEntity(registeredModules, function(module) {
        return module.agStackComponents ? module.agStackComponents : [];
      });
      components = components.concat(moduleAgStackComps);
      return components;
    };
    GridCoreCreator2.prototype.createBeansList = function(rowModelType, registeredModules, gridId) {
      if (rowModelType === void 0) {
        rowModelType = "clientSide";
      }
      var rowModelModules = registeredModules.filter(function(module) {
        return !module.rowModel || module.rowModel === rowModelType;
      });
      var rowModelModuleNames = {
        clientSide: ModuleNames.ClientSideRowModelModule,
        infinite: ModuleNames.InfiniteRowModelModule,
        serverSide: ModuleNames.ServerSideRowModelModule,
        viewport: ModuleNames.ViewportRowModelModule
      };
      if (!rowModelModuleNames[rowModelType]) {
        errorOnce("Could not find row model for rowModelType = " + rowModelType);
        return;
      }
      if (!ModuleRegistry.__assertRegistered(rowModelModuleNames[rowModelType], "rowModelType = '".concat(rowModelType, "'"), gridId)) {
        return;
      }
      var beans = [
        Beans,
        RowPositionUtils,
        CellPositionUtils,
        HeaderPositionUtils,
        PaginationAutoPageSizeService,
        GridApi,
        UserComponentRegistry,
        AgComponentUtils,
        ComponentMetadataProvider,
        ResizeObserverService,
        UserComponentFactory,
        RowContainerHeightService,
        HorizontalResizeService,
        LocaleService,
        ValidationService,
        PinnedRowModel,
        DragService,
        DisplayedGroupCreator,
        EventService,
        GridOptionsService,
        PopupService,
        SelectionService,
        FilterManager,
        ColumnModel,
        HeaderNavigationService,
        PaginationProxy,
        RowRenderer,
        ExpressionService,
        ColumnFactory,
        TemplateService,
        AlignedGridsService,
        NavigationService,
        ValueCache,
        ValueService,
        LoggerFactory,
        ColumnUtils,
        AutoWidthCalculator,
        StandardMenuFactory,
        DragAndDropService,
        ColumnApi,
        FocusService,
        MouseEventService,
        Environment,
        CellNavigationService,
        ValueFormatterService,
        StylingService,
        ScrollVisibleService,
        SortController,
        ColumnHoverService,
        ColumnAnimationService,
        SelectableService,
        AutoGroupColService,
        ChangeDetectionService,
        AnimationFrameService,
        UndoRedoService,
        AgStackComponentsRegistry,
        ColumnDefFactory,
        RowCssClassCalculator,
        RowNodeBlockLoader,
        RowNodeSorter,
        CtrlsService,
        PinnedWidthService,
        RowNodeEventThrottle,
        CtrlsFactory,
        DataTypeService,
        ValueParserService,
        QuickFilterService,
        SyncService,
        OverlayService,
        StateService,
        ExpansionService,
        ApiEventService
      ];
      var moduleBeans = this.extractModuleEntity(rowModelModules, function(module) {
        return module.beans ? module.beans : [];
      });
      beans.push.apply(beans, __spreadArray$2([], __read$3(moduleBeans), false));
      var beansNoDuplicates = [];
      beans.forEach(function(bean) {
        if (beansNoDuplicates.indexOf(bean) < 0) {
          beansNoDuplicates.push(bean);
        }
      });
      return beansNoDuplicates;
    };
    GridCoreCreator2.prototype.extractModuleEntity = function(moduleEntities, extractor) {
      return [].concat.apply([], __spreadArray$2([], __read$3(moduleEntities.map(extractor)), false));
    };
    return GridCoreCreator2;
  }()
);
var BaseComponentWrapper = (
  /** @class */
  function() {
    function BaseComponentWrapper2() {
    }
    BaseComponentWrapper2.prototype.wrap = function(OriginalConstructor, mandatoryMethodList, optionalMethodList, componentType) {
      var _this = this;
      if (optionalMethodList === void 0) {
        optionalMethodList = [];
      }
      var wrapper = this.createWrapper(OriginalConstructor, componentType);
      mandatoryMethodList.forEach(function(methodName) {
        _this.createMethod(wrapper, methodName, true);
      });
      optionalMethodList.forEach(function(methodName) {
        _this.createMethod(wrapper, methodName, false);
      });
      return wrapper;
    };
    BaseComponentWrapper2.prototype.unwrap = function(comp) {
      return comp;
    };
    BaseComponentWrapper2.prototype.createMethod = function(wrapper, methodName, mandatory) {
      wrapper.addMethod(methodName, this.createMethodProxy(wrapper, methodName, mandatory));
    };
    BaseComponentWrapper2.prototype.createMethodProxy = function(wrapper, methodName, mandatory) {
      return function() {
        if (wrapper.hasMethod(methodName)) {
          return wrapper.callMethod(methodName, arguments);
        }
        if (mandatory) {
          console.warn("AG Grid: Framework component is missing the method " + methodName + "()");
        }
        return null;
      };
    };
    return BaseComponentWrapper2;
  }()
);
var BarColumnLabelPlacement;
(function(BarColumnLabelPlacement2) {
  BarColumnLabelPlacement2["InsideBase"] = "insideBase";
  BarColumnLabelPlacement2["InsideEnd"] = "insideEnd";
  BarColumnLabelPlacement2["Center"] = "center";
  BarColumnLabelPlacement2["OutsideEnd"] = "outsideEnd";
})(BarColumnLabelPlacement || (BarColumnLabelPlacement = {}));
var globalObj = typeof global === "undefined" ? {} : global;
globalObj.HTMLElement = typeof HTMLElement === "undefined" ? {} : HTMLElement;
globalObj.HTMLButtonElement = typeof HTMLButtonElement === "undefined" ? {} : HTMLButtonElement;
globalObj.HTMLSelectElement = typeof HTMLSelectElement === "undefined" ? {} : HTMLSelectElement;
globalObj.HTMLInputElement = typeof HTMLInputElement === "undefined" ? {} : HTMLInputElement;
globalObj.Node = typeof Node === "undefined" ? {} : Node;
globalObj.MouseEvent = typeof MouseEvent === "undefined" ? {} : MouseEvent;
var __read$2 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray$1 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var ClientSideNodeManager = (
  /** @class */
  function() {
    function ClientSideNodeManager2(rootNode, gridOptionsService, eventService, columnModel, selectionService, beans) {
      this.nextId = 0;
      this.allNodesMap = {};
      this.rootNode = rootNode;
      this.gridOptionsService = gridOptionsService;
      this.eventService = eventService;
      this.columnModel = columnModel;
      this.beans = beans;
      this.selectionService = selectionService;
      this.rootNode.group = true;
      this.rootNode.level = -1;
      this.rootNode.id = ClientSideNodeManager2.ROOT_NODE_ID;
      this.rootNode.allLeafChildren = [];
      this.rootNode.childrenAfterGroup = [];
      this.rootNode.childrenAfterSort = [];
      this.rootNode.childrenAfterAggFilter = [];
      this.rootNode.childrenAfterFilter = [];
    }
    ClientSideNodeManager2.prototype.getCopyOfNodesMap = function() {
      return _.cloneObject(this.allNodesMap);
    };
    ClientSideNodeManager2.prototype.getRowNode = function(id) {
      return this.allNodesMap[id];
    };
    ClientSideNodeManager2.prototype.setRowData = function(rowData) {
      var _this = this;
      if (typeof rowData === "string") {
        console.warn("AG Grid: rowData must be an array, however you passed in a string. If you are loading JSON, make sure you convert the JSON string to JavaScript objects first");
        return;
      }
      this.dispatchRowDataUpdateStartedEvent(rowData);
      var rootNode = this.rootNode;
      var sibling = this.rootNode.sibling;
      rootNode.childrenAfterFilter = null;
      rootNode.childrenAfterGroup = null;
      rootNode.childrenAfterAggFilter = null;
      rootNode.childrenAfterSort = null;
      rootNode.childrenMapped = null;
      rootNode.updateHasChildren();
      this.nextId = 0;
      this.allNodesMap = {};
      if (rowData) {
        rootNode.allLeafChildren = rowData.map(function(dataItem) {
          return _this.createNode(dataItem, _this.rootNode, ClientSideNodeManager2.TOP_LEVEL);
        });
      } else {
        rootNode.allLeafChildren = [];
        rootNode.childrenAfterGroup = [];
      }
      if (sibling) {
        sibling.childrenAfterFilter = rootNode.childrenAfterFilter;
        sibling.childrenAfterGroup = rootNode.childrenAfterGroup;
        sibling.childrenAfterAggFilter = rootNode.childrenAfterAggFilter;
        sibling.childrenAfterSort = rootNode.childrenAfterSort;
        sibling.childrenMapped = rootNode.childrenMapped;
        sibling.allLeafChildren = rootNode.allLeafChildren;
      }
    };
    ClientSideNodeManager2.prototype.updateRowData = function(rowDataTran, rowNodeOrder) {
      this.dispatchRowDataUpdateStartedEvent(rowDataTran.add);
      var rowNodeTransaction = {
        remove: [],
        update: [],
        add: []
      };
      var nodesToUnselect = [];
      this.executeRemove(rowDataTran, rowNodeTransaction, nodesToUnselect);
      this.executeUpdate(rowDataTran, rowNodeTransaction, nodesToUnselect);
      this.executeAdd(rowDataTran, rowNodeTransaction);
      this.updateSelection(nodesToUnselect, "rowDataChanged");
      if (rowNodeOrder) {
        _.sortRowNodesByOrder(this.rootNode.allLeafChildren, rowNodeOrder);
      }
      return rowNodeTransaction;
    };
    ClientSideNodeManager2.prototype.dispatchRowDataUpdateStartedEvent = function(rowData) {
      var event = {
        type: Events.EVENT_ROW_DATA_UPDATE_STARTED,
        firstRowData: (rowData === null || rowData === void 0 ? void 0 : rowData.length) ? rowData[0] : null
      };
      this.eventService.dispatchEvent(event);
    };
    ClientSideNodeManager2.prototype.updateSelection = function(nodesToUnselect, source) {
      var selectionChanged = nodesToUnselect.length > 0;
      if (selectionChanged) {
        this.selectionService.setNodesSelected({
          newValue: false,
          nodes: nodesToUnselect,
          suppressFinishActions: true,
          source
        });
      }
      this.selectionService.updateGroupsFromChildrenSelections(source);
      if (selectionChanged) {
        var event_1 = {
          type: Events.EVENT_SELECTION_CHANGED,
          source
        };
        this.eventService.dispatchEvent(event_1);
      }
    };
    ClientSideNodeManager2.prototype.executeAdd = function(rowDataTran, rowNodeTransaction) {
      var _this = this;
      var _a;
      var add = rowDataTran.add, addIndex = rowDataTran.addIndex;
      if (_.missingOrEmpty(add)) {
        return;
      }
      var newNodes = add.map(function(item) {
        return _this.createNode(item, _this.rootNode, ClientSideNodeManager2.TOP_LEVEL);
      });
      if (typeof addIndex === "number" && addIndex >= 0) {
        var allLeafChildren = this.rootNode.allLeafChildren;
        var len = allLeafChildren.length;
        var normalisedAddIndex = addIndex;
        var isTreeData = this.gridOptionsService.get("treeData");
        if (isTreeData && addIndex > 0 && len > 0) {
          for (var i = 0; i < len; i++) {
            if (((_a = allLeafChildren[i]) === null || _a === void 0 ? void 0 : _a.rowIndex) == addIndex - 1) {
              normalisedAddIndex = i + 1;
              break;
            }
          }
        }
        var nodesBeforeIndex = allLeafChildren.slice(0, normalisedAddIndex);
        var nodesAfterIndex = allLeafChildren.slice(normalisedAddIndex, allLeafChildren.length);
        this.rootNode.allLeafChildren = __spreadArray$1(__spreadArray$1(__spreadArray$1([], __read$2(nodesBeforeIndex), false), __read$2(newNodes), false), __read$2(nodesAfterIndex), false);
      } else {
        this.rootNode.allLeafChildren = __spreadArray$1(__spreadArray$1([], __read$2(this.rootNode.allLeafChildren), false), __read$2(newNodes), false);
      }
      if (this.rootNode.sibling) {
        this.rootNode.sibling.allLeafChildren = this.rootNode.allLeafChildren;
      }
      rowNodeTransaction.add = newNodes;
    };
    ClientSideNodeManager2.prototype.executeRemove = function(rowDataTran, rowNodeTransaction, nodesToUnselect) {
      var _this = this;
      var remove = rowDataTran.remove;
      if (_.missingOrEmpty(remove)) {
        return;
      }
      var rowIdsRemoved = {};
      remove.forEach(function(item) {
        var rowNode = _this.lookupRowNode(item);
        if (!rowNode) {
          return;
        }
        if (rowNode.isSelected()) {
          nodesToUnselect.push(rowNode);
        }
        rowNode.clearRowTopAndRowIndex();
        rowIdsRemoved[rowNode.id] = true;
        delete _this.allNodesMap[rowNode.id];
        rowNodeTransaction.remove.push(rowNode);
      });
      this.rootNode.allLeafChildren = this.rootNode.allLeafChildren.filter(function(rowNode) {
        return !rowIdsRemoved[rowNode.id];
      });
      if (this.rootNode.sibling) {
        this.rootNode.sibling.allLeafChildren = this.rootNode.allLeafChildren;
      }
    };
    ClientSideNodeManager2.prototype.executeUpdate = function(rowDataTran, rowNodeTransaction, nodesToUnselect) {
      var _this = this;
      var update = rowDataTran.update;
      if (_.missingOrEmpty(update)) {
        return;
      }
      update.forEach(function(item) {
        var rowNode = _this.lookupRowNode(item);
        if (!rowNode) {
          return;
        }
        rowNode.updateData(item);
        if (!rowNode.selectable && rowNode.isSelected()) {
          nodesToUnselect.push(rowNode);
        }
        _this.setMasterForRow(rowNode, item, ClientSideNodeManager2.TOP_LEVEL, false);
        rowNodeTransaction.update.push(rowNode);
      });
    };
    ClientSideNodeManager2.prototype.lookupRowNode = function(data) {
      var getRowIdFunc = this.gridOptionsService.getCallback("getRowId");
      var rowNode;
      if (getRowIdFunc) {
        var id = getRowIdFunc({ data, level: 0 });
        rowNode = this.allNodesMap[id];
        if (!rowNode) {
          console.error("AG Grid: could not find row id=".concat(id, ", data item was not found for this id"));
          return null;
        }
      } else {
        rowNode = this.rootNode.allLeafChildren.find(function(node) {
          return node.data === data;
        });
        if (!rowNode) {
          console.error("AG Grid: could not find data item as object was not found", data);
          console.error("Consider using getRowId to help the Grid find matching row data");
          return null;
        }
      }
      return rowNode || null;
    };
    ClientSideNodeManager2.prototype.createNode = function(dataItem, parent, level) {
      var node = new RowNode(this.beans);
      node.group = false;
      this.setMasterForRow(node, dataItem, level, true);
      var suppressParentsInRowNodes = this.gridOptionsService.get("suppressParentsInRowNodes");
      if (parent && !suppressParentsInRowNodes) {
        node.parent = parent;
      }
      node.level = level;
      node.setDataAndId(dataItem, this.nextId.toString());
      if (this.allNodesMap[node.id]) {
        console.warn("AG Grid: duplicate node id '".concat(node.id, "' detected from getRowId callback, this could cause issues in your grid."));
      }
      this.allNodesMap[node.id] = node;
      this.nextId++;
      return node;
    };
    ClientSideNodeManager2.prototype.setMasterForRow = function(rowNode, data, level, setExpanded) {
      var isTreeData = this.gridOptionsService.get("treeData");
      if (isTreeData) {
        rowNode.setMaster(false);
        if (setExpanded) {
          rowNode.expanded = false;
        }
      } else {
        var masterDetail = this.gridOptionsService.get("masterDetail");
        if (masterDetail) {
          var isRowMasterFunc = this.gridOptionsService.get("isRowMaster");
          if (isRowMasterFunc) {
            rowNode.setMaster(isRowMasterFunc(data));
          } else {
            rowNode.setMaster(true);
          }
        } else {
          rowNode.setMaster(false);
        }
        if (setExpanded) {
          var rowGroupColumns = this.columnModel.getRowGroupColumns();
          var numRowGroupColumns = rowGroupColumns ? rowGroupColumns.length : 0;
          var masterRowLevel = level + numRowGroupColumns;
          rowNode.expanded = rowNode.master ? this.isExpanded(masterRowLevel) : false;
        }
      }
    };
    ClientSideNodeManager2.prototype.isExpanded = function(level) {
      var expandByDefault = this.gridOptionsService.get("groupDefaultExpanded");
      if (expandByDefault === -1) {
        return true;
      }
      return level < expandByDefault;
    };
    ClientSideNodeManager2.TOP_LEVEL = 0;
    ClientSideNodeManager2.ROOT_NODE_ID = "ROOT_NODE_ID";
    return ClientSideNodeManager2;
  }()
);
var __extends$c = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$b = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __read$1 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var RecursionType;
(function(RecursionType2) {
  RecursionType2[RecursionType2["Normal"] = 0] = "Normal";
  RecursionType2[RecursionType2["AfterFilter"] = 1] = "AfterFilter";
  RecursionType2[RecursionType2["AfterFilterAndSort"] = 2] = "AfterFilterAndSort";
  RecursionType2[RecursionType2["PivotNodes"] = 3] = "PivotNodes";
})(RecursionType || (RecursionType = {}));
var ClientSideRowModel = (
  /** @class */
  function(_super) {
    __extends$c(ClientSideRowModel2, _super);
    function ClientSideRowModel2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.onRowHeightChanged_debounced = _.debounce(_this.onRowHeightChanged.bind(_this), 100);
      _this.rowsToDisplay = [];
      _this.hasStarted = false;
      _this.shouldSkipSettingDataOnStart = false;
      _this.isRefreshingModel = false;
      _this.rowCountReady = false;
      return _this;
    }
    ClientSideRowModel2.prototype.init = function() {
      var _this = this;
      var refreshEverythingFunc = this.refreshModel.bind(this, { step: ClientSideRowModelSteps.EVERYTHING });
      var animate = !this.gridOptionsService.get("suppressAnimationFrame");
      var refreshEverythingAfterColsChangedFunc = this.refreshModel.bind(this, {
        step: ClientSideRowModelSteps.EVERYTHING,
        afterColumnsChanged: true,
        keepRenderedRows: true,
        animate
      });
      this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, refreshEverythingAfterColsChangedFunc);
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, refreshEverythingFunc);
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.onValueChanged.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, this.refreshModel.bind(this, { step: ClientSideRowModelSteps.PIVOT }));
      this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, refreshEverythingFunc);
      this.addManagedListener(this.eventService, Events.EVENT_GRID_STYLES_CHANGED, this.onGridStylesChanges.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_GRID_READY, function() {
        return _this.onGridReady();
      });
      this.addPropertyListeners();
      this.rootNode = new RowNode(this.beans);
      this.nodeManager = new ClientSideNodeManager(this.rootNode, this.gridOptionsService, this.eventService, this.columnModel, this.selectionService, this.beans);
    };
    ClientSideRowModel2.prototype.addPropertyListeners = function() {
      var _this = this;
      var resetProps = /* @__PURE__ */ new Set([
        "treeData",
        "masterDetail"
      ]);
      var groupStageRefreshProps = /* @__PURE__ */ new Set([
        "suppressParentsInRowNodes",
        "groupDefaultExpanded",
        "groupAllowUnbalanced",
        "initialGroupOrderComparator",
        "groupHideOpenParents",
        "groupDisplayType"
      ]);
      var filterStageRefreshProps = /* @__PURE__ */ new Set([
        "excludeChildrenWhenTreeDataFiltering"
      ]);
      var pivotStageRefreshProps = /* @__PURE__ */ new Set([
        "removePivotHeaderRowWhenSingleValueColumn",
        "pivotRowTotals",
        "pivotColumnGroupTotals",
        "suppressExpandablePivotGroups"
      ]);
      var aggregateStageRefreshProps = /* @__PURE__ */ new Set([
        "getGroupRowAgg",
        "alwaysAggregateAtRootLevel",
        "groupIncludeTotalFooter",
        "suppressAggFilteredOnly"
      ]);
      var sortStageRefreshProps = /* @__PURE__ */ new Set([
        "postSortRows",
        "groupDisplayType",
        "accentedSort"
      ]);
      var filterAggStageRefreshProps = /* @__PURE__ */ new Set([]);
      var flattenStageRefreshProps = /* @__PURE__ */ new Set([
        "groupRemoveSingleChildren",
        "groupRemoveLowestSingleChildren",
        "groupIncludeFooter"
      ]);
      var allProps = __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], __read$1(resetProps), false), __read$1(groupStageRefreshProps), false), __read$1(filterStageRefreshProps), false), __read$1(pivotStageRefreshProps), false), __read$1(pivotStageRefreshProps), false), __read$1(aggregateStageRefreshProps), false), __read$1(sortStageRefreshProps), false), __read$1(filterAggStageRefreshProps), false), __read$1(flattenStageRefreshProps), false);
      this.addManagedPropertyListeners(allProps, function(params) {
        var _a;
        var properties = (_a = params.changeSet) === null || _a === void 0 ? void 0 : _a.properties;
        if (!properties) {
          return;
        }
        var arePropertiesImpacted = function(propSet) {
          return properties.some(function(prop) {
            return propSet.has(prop);
          });
        };
        if (arePropertiesImpacted(resetProps)) {
          _this.setRowData(_this.rootNode.allLeafChildren.map(function(child) {
            return child.data;
          }));
          return;
        }
        if (arePropertiesImpacted(groupStageRefreshProps)) {
          _this.refreshModel({ step: ClientSideRowModelSteps.EVERYTHING });
          return;
        }
        if (arePropertiesImpacted(filterStageRefreshProps)) {
          _this.refreshModel({ step: ClientSideRowModelSteps.FILTER });
          return;
        }
        if (arePropertiesImpacted(pivotStageRefreshProps)) {
          _this.refreshModel({ step: ClientSideRowModelSteps.PIVOT });
          return;
        }
        if (arePropertiesImpacted(aggregateStageRefreshProps)) {
          _this.refreshModel({ step: ClientSideRowModelSteps.AGGREGATE });
          return;
        }
        if (arePropertiesImpacted(sortStageRefreshProps)) {
          _this.refreshModel({ step: ClientSideRowModelSteps.SORT });
          return;
        }
        if (arePropertiesImpacted(filterAggStageRefreshProps)) {
          _this.refreshModel({ step: ClientSideRowModelSteps.FILTER_AGGREGATES });
          return;
        }
        if (arePropertiesImpacted(flattenStageRefreshProps)) {
          _this.refreshModel({ step: ClientSideRowModelSteps.MAP });
        }
      });
      this.addManagedPropertyListener("rowHeight", function() {
        return _this.resetRowHeights();
      });
    };
    ClientSideRowModel2.prototype.start = function() {
      this.hasStarted = true;
      if (this.shouldSkipSettingDataOnStart) {
        this.dispatchUpdateEventsAndRefresh();
      } else {
        this.setInitialData();
      }
    };
    ClientSideRowModel2.prototype.setInitialData = function() {
      var rowData = this.gridOptionsService.get("rowData");
      if (rowData) {
        this.shouldSkipSettingDataOnStart = true;
        this.setRowData(rowData);
      }
    };
    ClientSideRowModel2.prototype.ensureRowHeightsValid = function(startPixel, endPixel, startLimitIndex, endLimitIndex) {
      var atLeastOneChange;
      var res = false;
      do {
        atLeastOneChange = false;
        var rowAtStartPixel = this.getRowIndexAtPixel(startPixel);
        var rowAtEndPixel = this.getRowIndexAtPixel(endPixel);
        var firstRow = Math.max(rowAtStartPixel, startLimitIndex);
        var lastRow = Math.min(rowAtEndPixel, endLimitIndex);
        for (var rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {
          var rowNode = this.getRow(rowIndex);
          if (rowNode.rowHeightEstimated) {
            var rowHeight = this.gridOptionsService.getRowHeightForNode(rowNode);
            rowNode.setRowHeight(rowHeight.height);
            atLeastOneChange = true;
            res = true;
          }
        }
        if (atLeastOneChange) {
          this.setRowTopAndRowIndex();
        }
      } while (atLeastOneChange);
      return res;
    };
    ClientSideRowModel2.prototype.setRowTopAndRowIndex = function() {
      var defaultRowHeight = this.environment.getDefaultRowHeight();
      var nextRowTop = 0;
      var displayedRowsMapped = /* @__PURE__ */ new Set();
      var allowEstimate = this.gridOptionsService.isDomLayout("normal");
      for (var i = 0; i < this.rowsToDisplay.length; i++) {
        var rowNode = this.rowsToDisplay[i];
        if (rowNode.id != null) {
          displayedRowsMapped.add(rowNode.id);
        }
        if (rowNode.rowHeight == null) {
          var rowHeight = this.gridOptionsService.getRowHeightForNode(rowNode, allowEstimate, defaultRowHeight);
          rowNode.setRowHeight(rowHeight.height, rowHeight.estimated);
        }
        rowNode.setRowTop(nextRowTop);
        rowNode.setRowIndex(i);
        nextRowTop += rowNode.rowHeight;
      }
      return displayedRowsMapped;
    };
    ClientSideRowModel2.prototype.clearRowTopAndRowIndex = function(changedPath, displayedRowsMapped) {
      var changedPathActive = changedPath.isActive();
      var clearIfNotDisplayed = function(rowNode) {
        if (rowNode && rowNode.id != null && !displayedRowsMapped.has(rowNode.id)) {
          rowNode.clearRowTopAndRowIndex();
        }
      };
      var recurse = function(rowNode) {
        clearIfNotDisplayed(rowNode);
        clearIfNotDisplayed(rowNode.detailNode);
        clearIfNotDisplayed(rowNode.sibling);
        if (rowNode.hasChildren()) {
          if (rowNode.childrenAfterGroup) {
            var isRootNode = rowNode.level == -1;
            var skipChildren = changedPathActive && !isRootNode && !rowNode.expanded;
            if (!skipChildren) {
              rowNode.childrenAfterGroup.forEach(recurse);
            }
          }
        }
      };
      recurse(this.rootNode);
    };
    ClientSideRowModel2.prototype.ensureRowsAtPixel = function(rowNodes, pixel, increment) {
      var _this = this;
      if (increment === void 0) {
        increment = 0;
      }
      var indexAtPixelNow = this.getRowIndexAtPixel(pixel);
      var rowNodeAtPixelNow = this.getRow(indexAtPixelNow);
      var animate = !this.gridOptionsService.get("suppressAnimationFrame");
      if (rowNodeAtPixelNow === rowNodes[0]) {
        return false;
      }
      rowNodes.forEach(function(rowNode) {
        _.removeFromArray(_this.rootNode.allLeafChildren, rowNode);
      });
      rowNodes.forEach(function(rowNode, idx) {
        _.insertIntoArray(_this.rootNode.allLeafChildren, rowNode, Math.max(indexAtPixelNow + increment, 0) + idx);
      });
      this.refreshModel({
        step: ClientSideRowModelSteps.EVERYTHING,
        keepRenderedRows: true,
        keepEditingRows: true,
        animate
      });
      return true;
    };
    ClientSideRowModel2.prototype.highlightRowAtPixel = function(rowNode, pixel) {
      var indexAtPixelNow = pixel != null ? this.getRowIndexAtPixel(pixel) : null;
      var rowNodeAtPixelNow = indexAtPixelNow != null ? this.getRow(indexAtPixelNow) : null;
      if (!rowNodeAtPixelNow || !rowNode || rowNodeAtPixelNow === rowNode || pixel == null) {
        if (this.lastHighlightedRow) {
          this.lastHighlightedRow.setHighlighted(null);
          this.lastHighlightedRow = null;
        }
        return;
      }
      var highlight = this.getHighlightPosition(pixel, rowNodeAtPixelNow);
      if (this.lastHighlightedRow && this.lastHighlightedRow !== rowNodeAtPixelNow) {
        this.lastHighlightedRow.setHighlighted(null);
        this.lastHighlightedRow = null;
      }
      rowNodeAtPixelNow.setHighlighted(highlight);
      this.lastHighlightedRow = rowNodeAtPixelNow;
    };
    ClientSideRowModel2.prototype.getHighlightPosition = function(pixel, rowNode) {
      if (!rowNode) {
        var index = this.getRowIndexAtPixel(pixel);
        rowNode = this.getRow(index || 0);
        if (!rowNode) {
          return RowHighlightPosition.Below;
        }
      }
      var rowTop = rowNode.rowTop, rowHeight = rowNode.rowHeight;
      return pixel - rowTop < rowHeight / 2 ? RowHighlightPosition.Above : RowHighlightPosition.Below;
    };
    ClientSideRowModel2.prototype.getLastHighlightedRowNode = function() {
      return this.lastHighlightedRow;
    };
    ClientSideRowModel2.prototype.isLastRowIndexKnown = function() {
      return true;
    };
    ClientSideRowModel2.prototype.getRowCount = function() {
      if (this.rowsToDisplay) {
        return this.rowsToDisplay.length;
      }
      return 0;
    };
    ClientSideRowModel2.prototype.getTopLevelRowCount = function() {
      var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;
      if (showingRootNode) {
        return 1;
      }
      var filteredChildren = this.rootNode.childrenAfterAggFilter;
      return filteredChildren ? filteredChildren.length : 0;
    };
    ClientSideRowModel2.prototype.getTopLevelRowDisplayedIndex = function(topLevelIndex) {
      var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;
      if (showingRootNode) {
        return topLevelIndex;
      }
      var rowNode = this.rootNode.childrenAfterSort[topLevelIndex];
      if (this.gridOptionsService.get("groupHideOpenParents")) {
        while (rowNode.expanded && rowNode.childrenAfterSort && rowNode.childrenAfterSort.length > 0) {
          rowNode = rowNode.childrenAfterSort[0];
        }
      }
      return rowNode.rowIndex;
    };
    ClientSideRowModel2.prototype.getRowBounds = function(index) {
      if (_.missing(this.rowsToDisplay)) {
        return null;
      }
      var rowNode = this.rowsToDisplay[index];
      if (rowNode) {
        return {
          rowTop: rowNode.rowTop,
          rowHeight: rowNode.rowHeight
        };
      }
      return null;
    };
    ClientSideRowModel2.prototype.onRowGroupOpened = function() {
      var animate = this.gridOptionsService.isAnimateRows();
      this.refreshModel({ step: ClientSideRowModelSteps.MAP, keepRenderedRows: true, animate });
    };
    ClientSideRowModel2.prototype.onFilterChanged = function(event) {
      if (event.afterDataChange) {
        return;
      }
      var animate = this.gridOptionsService.isAnimateRows();
      var primaryOrQuickFilterChanged = event.columns.length === 0 || event.columns.some(function(col) {
        return col.isPrimary();
      });
      var step = primaryOrQuickFilterChanged ? ClientSideRowModelSteps.FILTER : ClientSideRowModelSteps.FILTER_AGGREGATES;
      this.refreshModel({ step, keepRenderedRows: true, animate });
    };
    ClientSideRowModel2.prototype.onSortChanged = function() {
      var animate = this.gridOptionsService.isAnimateRows();
      this.refreshModel({ step: ClientSideRowModelSteps.SORT, keepRenderedRows: true, animate, keepEditingRows: true });
    };
    ClientSideRowModel2.prototype.getType = function() {
      return "clientSide";
    };
    ClientSideRowModel2.prototype.onValueChanged = function() {
      if (this.columnModel.isPivotActive()) {
        this.refreshModel({ step: ClientSideRowModelSteps.PIVOT });
      } else {
        this.refreshModel({ step: ClientSideRowModelSteps.AGGREGATE });
      }
    };
    ClientSideRowModel2.prototype.createChangePath = function(rowNodeTransactions) {
      var noTransactions = _.missingOrEmpty(rowNodeTransactions);
      var changedPath = new ChangedPath(false, this.rootNode);
      if (noTransactions || this.gridOptionsService.get("treeData")) {
        changedPath.setInactive();
      }
      return changedPath;
    };
    ClientSideRowModel2.prototype.isSuppressModelUpdateAfterUpdateTransaction = function(params) {
      if (!this.gridOptionsService.get("suppressModelUpdateAfterUpdateTransaction")) {
        return false;
      }
      if (params.rowNodeTransactions == null) {
        return false;
      }
      var transWithAddsOrDeletes = params.rowNodeTransactions.filter(function(tx) {
        return tx.add != null && tx.add.length > 0 || tx.remove != null && tx.remove.length > 0;
      });
      var transactionsContainUpdatesOnly = transWithAddsOrDeletes == null || transWithAddsOrDeletes.length == 0;
      return transactionsContainUpdatesOnly;
    };
    ClientSideRowModel2.prototype.buildRefreshModelParams = function(step) {
      var paramsStep = ClientSideRowModelSteps.EVERYTHING;
      var stepsMapped = {
        everything: ClientSideRowModelSteps.EVERYTHING,
        group: ClientSideRowModelSteps.EVERYTHING,
        filter: ClientSideRowModelSteps.FILTER,
        map: ClientSideRowModelSteps.MAP,
        aggregate: ClientSideRowModelSteps.AGGREGATE,
        sort: ClientSideRowModelSteps.SORT,
        pivot: ClientSideRowModelSteps.PIVOT
      };
      if (_.exists(step)) {
        paramsStep = stepsMapped[step];
      }
      if (_.missing(paramsStep)) {
        console.error("AG Grid: invalid step ".concat(step, ", available steps are ").concat(Object.keys(stepsMapped).join(", ")));
        return void 0;
      }
      var animate = !this.gridOptionsService.get("suppressAnimationFrame");
      var modelParams = {
        step: paramsStep,
        keepRenderedRows: true,
        keepEditingRows: true,
        animate
      };
      return modelParams;
    };
    ClientSideRowModel2.prototype.refreshModel = function(paramsOrStep) {
      if (!this.hasStarted || this.isRefreshingModel) {
        return;
      }
      var params = typeof paramsOrStep === "object" && "step" in paramsOrStep ? paramsOrStep : this.buildRefreshModelParams(paramsOrStep);
      if (!params) {
        return;
      }
      if (this.isSuppressModelUpdateAfterUpdateTransaction(params)) {
        return;
      }
      var changedPath = this.createChangePath(params.rowNodeTransactions);
      this.isRefreshingModel = true;
      switch (params.step) {
        case ClientSideRowModelSteps.EVERYTHING:
          this.doRowGrouping(params.rowNodeTransactions, params.rowNodeOrder, changedPath, !!params.afterColumnsChanged);
        case ClientSideRowModelSteps.FILTER:
          this.doFilter(changedPath);
        case ClientSideRowModelSteps.PIVOT:
          this.doPivot(changedPath);
        case ClientSideRowModelSteps.AGGREGATE:
          this.doAggregate(changedPath);
        case ClientSideRowModelSteps.FILTER_AGGREGATES:
          this.doFilterAggregates(changedPath);
        case ClientSideRowModelSteps.SORT:
          this.doSort(params.rowNodeTransactions, changedPath);
        case ClientSideRowModelSteps.MAP:
          this.doRowsToDisplay();
      }
      var displayedNodesMapped = this.setRowTopAndRowIndex();
      this.clearRowTopAndRowIndex(changedPath, displayedNodesMapped);
      this.isRefreshingModel = false;
      var event = {
        type: Events.EVENT_MODEL_UPDATED,
        animate: params.animate,
        keepRenderedRows: params.keepRenderedRows,
        newData: params.newData,
        newPage: false,
        keepUndoRedoStack: params.keepUndoRedoStack
      };
      this.eventService.dispatchEvent(event);
    };
    ClientSideRowModel2.prototype.isEmpty = function() {
      var rowsMissing = _.missing(this.rootNode.allLeafChildren) || this.rootNode.allLeafChildren.length === 0;
      return _.missing(this.rootNode) || rowsMissing || !this.columnModel.isReady();
    };
    ClientSideRowModel2.prototype.isRowsToRender = function() {
      return _.exists(this.rowsToDisplay) && this.rowsToDisplay.length > 0;
    };
    ClientSideRowModel2.prototype.getNodesInRangeForSelection = function(firstInRange, lastInRange) {
      var started = !lastInRange;
      var finished = false;
      var result = [];
      var groupsSelectChildren = this.gridOptionsService.get("groupSelectsChildren");
      this.forEachNodeAfterFilterAndSort(function(rowNode) {
        if (finished) {
          return;
        }
        if (started) {
          if (rowNode === lastInRange || rowNode === firstInRange) {
            finished = true;
            if (rowNode.group && groupsSelectChildren) {
              result.push.apply(result, __spreadArray([], __read$1(rowNode.allLeafChildren), false));
              return;
            }
          }
        }
        if (!started) {
          if (rowNode !== lastInRange && rowNode !== firstInRange) {
            return;
          }
          started = true;
        }
        var includeThisNode = !rowNode.group || !groupsSelectChildren;
        if (includeThisNode) {
          result.push(rowNode);
          return;
        }
      });
      return result;
    };
    ClientSideRowModel2.prototype.setDatasource = function(datasource) {
      console.error("AG Grid: should never call setDatasource on clientSideRowController");
    };
    ClientSideRowModel2.prototype.getTopLevelNodes = function() {
      return this.rootNode ? this.rootNode.childrenAfterGroup : null;
    };
    ClientSideRowModel2.prototype.getRootNode = function() {
      return this.rootNode;
    };
    ClientSideRowModel2.prototype.getRow = function(index) {
      return this.rowsToDisplay[index];
    };
    ClientSideRowModel2.prototype.isRowPresent = function(rowNode) {
      return this.rowsToDisplay.indexOf(rowNode) >= 0;
    };
    ClientSideRowModel2.prototype.getRowIndexAtPixel = function(pixelToMatch) {
      if (this.isEmpty() || this.rowsToDisplay.length === 0) {
        return -1;
      }
      var bottomPointer = 0;
      var topPointer = this.rowsToDisplay.length - 1;
      if (pixelToMatch <= 0) {
        return 0;
      }
      var lastNode = _.last(this.rowsToDisplay);
      if (lastNode.rowTop <= pixelToMatch) {
        return this.rowsToDisplay.length - 1;
      }
      var oldBottomPointer = -1;
      var oldTopPointer = -1;
      while (true) {
        var midPointer = Math.floor((bottomPointer + topPointer) / 2);
        var currentRowNode = this.rowsToDisplay[midPointer];
        if (this.isRowInPixel(currentRowNode, pixelToMatch)) {
          return midPointer;
        }
        if (currentRowNode.rowTop < pixelToMatch) {
          bottomPointer = midPointer + 1;
        } else if (currentRowNode.rowTop > pixelToMatch) {
          topPointer = midPointer - 1;
        }
        var caughtInInfiniteLoop = oldBottomPointer === bottomPointer && oldTopPointer === topPointer;
        if (caughtInInfiniteLoop) {
          return midPointer;
        }
        oldBottomPointer = bottomPointer;
        oldTopPointer = topPointer;
      }
    };
    ClientSideRowModel2.prototype.isRowInPixel = function(rowNode, pixelToMatch) {
      var topPixel = rowNode.rowTop;
      var bottomPixel = rowNode.rowTop + rowNode.rowHeight;
      var pixelInRow = topPixel <= pixelToMatch && bottomPixel > pixelToMatch;
      return pixelInRow;
    };
    ClientSideRowModel2.prototype.forEachLeafNode = function(callback) {
      if (this.rootNode.allLeafChildren) {
        this.rootNode.allLeafChildren.forEach(function(rowNode, index) {
          return callback(rowNode, index);
        });
      }
    };
    ClientSideRowModel2.prototype.forEachNode = function(callback, includeFooterNodes) {
      if (includeFooterNodes === void 0) {
        includeFooterNodes = false;
      }
      this.recursivelyWalkNodesAndCallback({
        nodes: __spreadArray([], __read$1(this.rootNode.childrenAfterGroup || []), false),
        callback,
        recursionType: RecursionType.Normal,
        index: 0,
        includeFooterNodes
      });
    };
    ClientSideRowModel2.prototype.forEachNodeAfterFilter = function(callback, includeFooterNodes) {
      if (includeFooterNodes === void 0) {
        includeFooterNodes = false;
      }
      this.recursivelyWalkNodesAndCallback({
        nodes: __spreadArray([], __read$1(this.rootNode.childrenAfterAggFilter || []), false),
        callback,
        recursionType: RecursionType.AfterFilter,
        index: 0,
        includeFooterNodes
      });
    };
    ClientSideRowModel2.prototype.forEachNodeAfterFilterAndSort = function(callback, includeFooterNodes) {
      if (includeFooterNodes === void 0) {
        includeFooterNodes = false;
      }
      this.recursivelyWalkNodesAndCallback({
        nodes: __spreadArray([], __read$1(this.rootNode.childrenAfterSort || []), false),
        callback,
        recursionType: RecursionType.AfterFilterAndSort,
        index: 0,
        includeFooterNodes
      });
    };
    ClientSideRowModel2.prototype.forEachPivotNode = function(callback, includeFooterNodes) {
      if (includeFooterNodes === void 0) {
        includeFooterNodes = false;
      }
      this.recursivelyWalkNodesAndCallback({
        nodes: [this.rootNode],
        callback,
        recursionType: RecursionType.PivotNodes,
        index: 0,
        includeFooterNodes
      });
    };
    ClientSideRowModel2.prototype.recursivelyWalkNodesAndCallback = function(params) {
      var _a;
      var nodes = params.nodes, callback = params.callback, recursionType = params.recursionType, includeFooterNodes = params.includeFooterNodes;
      var index = params.index;
      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        callback(node, index++);
        if (node.hasChildren() && !node.footer) {
          var nodeChildren = null;
          switch (recursionType) {
            case RecursionType.Normal:
              nodeChildren = node.childrenAfterGroup;
              break;
            case RecursionType.AfterFilter:
              nodeChildren = node.childrenAfterAggFilter;
              break;
            case RecursionType.AfterFilterAndSort:
              nodeChildren = node.childrenAfterSort;
              break;
            case RecursionType.PivotNodes:
              nodeChildren = !node.leafGroup ? node.childrenAfterSort : null;
              break;
          }
          if (nodeChildren) {
            index = this.recursivelyWalkNodesAndCallback({
              nodes: __spreadArray([], __read$1(nodeChildren), false),
              callback,
              recursionType,
              index,
              includeFooterNodes
            });
          }
        }
      }
      var parentNode = (_a = nodes[0]) === null || _a === void 0 ? void 0 : _a.parent;
      if (!includeFooterNodes || !parentNode)
        return index;
      var isRootNode = parentNode === this.rootNode;
      if (isRootNode) {
        var totalFooters = this.gridOptionsService.get("groupIncludeTotalFooter");
        if (!totalFooters)
          return index;
      } else {
        var isGroupIncludeFooter = this.gridOptionsService.getGroupIncludeFooter();
        if (!isGroupIncludeFooter({ node: parentNode }))
          return index;
      }
      parentNode.createFooter();
      callback(parentNode.sibling, index++);
      return index;
    };
    ClientSideRowModel2.prototype.doAggregate = function(changedPath) {
      if (this.aggregationStage) {
        this.aggregationStage.execute({ rowNode: this.rootNode, changedPath });
      }
    };
    ClientSideRowModel2.prototype.doFilterAggregates = function(changedPath) {
      if (this.filterAggregatesStage) {
        this.filterAggregatesStage.execute({ rowNode: this.rootNode, changedPath });
      } else {
        this.rootNode.childrenAfterAggFilter = this.rootNode.childrenAfterFilter;
      }
    };
    ClientSideRowModel2.prototype.expandOrCollapseAll = function(expand) {
      var usingTreeData = this.gridOptionsService.get("treeData");
      var usingPivotMode = this.columnModel.isPivotActive();
      var recursiveExpandOrCollapse = function(rowNodes) {
        if (!rowNodes) {
          return;
        }
        rowNodes.forEach(function(rowNode) {
          var actionRow = function() {
            rowNode.expanded = expand;
            recursiveExpandOrCollapse(rowNode.childrenAfterGroup);
          };
          if (usingTreeData) {
            var hasChildren = _.exists(rowNode.childrenAfterGroup);
            if (hasChildren) {
              actionRow();
            }
            return;
          }
          if (usingPivotMode) {
            var notLeafGroup = !rowNode.leafGroup;
            if (notLeafGroup) {
              actionRow();
            }
            return;
          }
          var isRowGroup = rowNode.group;
          if (isRowGroup) {
            actionRow();
          }
        });
      };
      if (this.rootNode) {
        recursiveExpandOrCollapse(this.rootNode.childrenAfterGroup);
      }
      this.refreshModel({ step: ClientSideRowModelSteps.MAP });
      var eventSource = expand ? "expandAll" : "collapseAll";
      var event = {
        type: Events.EVENT_EXPAND_COLLAPSE_ALL,
        source: eventSource
      };
      this.eventService.dispatchEvent(event);
    };
    ClientSideRowModel2.prototype.doSort = function(rowNodeTransactions, changedPath) {
      this.sortStage.execute({
        rowNode: this.rootNode,
        rowNodeTransactions,
        changedPath
      });
    };
    ClientSideRowModel2.prototype.doRowGrouping = function(rowNodeTransactions, rowNodeOrder, changedPath, afterColumnsChanged) {
      if (this.groupStage) {
        if (rowNodeTransactions) {
          this.groupStage.execute({
            rowNode: this.rootNode,
            rowNodeTransactions,
            rowNodeOrder,
            changedPath
          });
        } else {
          this.groupStage.execute({
            rowNode: this.rootNode,
            changedPath,
            afterColumnsChanged
          });
        }
        if (this.gridOptionsService.get("groupSelectsChildren")) {
          var selectionChanged = this.selectionService.updateGroupsFromChildrenSelections("rowGroupChanged", changedPath);
          if (selectionChanged) {
            var event_1 = {
              type: Events.EVENT_SELECTION_CHANGED,
              source: "rowGroupChanged"
            };
            this.eventService.dispatchEvent(event_1);
          }
        }
      } else {
        this.rootNode.childrenAfterGroup = this.rootNode.allLeafChildren;
        if (this.rootNode.sibling) {
          this.rootNode.sibling.childrenAfterGroup = this.rootNode.childrenAfterGroup;
        }
        this.rootNode.updateHasChildren();
      }
      this.rowCountReady = true;
      this.eventService.dispatchEventOnce({
        type: Events.EVENT_ROW_COUNT_READY
      });
    };
    ClientSideRowModel2.prototype.doFilter = function(changedPath) {
      this.filterStage.execute({ rowNode: this.rootNode, changedPath });
    };
    ClientSideRowModel2.prototype.doPivot = function(changedPath) {
      if (this.pivotStage) {
        this.pivotStage.execute({ rowNode: this.rootNode, changedPath });
      }
    };
    ClientSideRowModel2.prototype.getCopyOfNodesMap = function() {
      return this.nodeManager.getCopyOfNodesMap();
    };
    ClientSideRowModel2.prototype.getRowNode = function(id) {
      var idIsGroup = typeof id == "string" && id.indexOf(RowNode.ID_PREFIX_ROW_GROUP) == 0;
      if (idIsGroup) {
        var res_1 = void 0;
        this.forEachNode(function(node) {
          if (node.id === id) {
            res_1 = node;
          }
        });
        return res_1;
      }
      return this.nodeManager.getRowNode(id);
    };
    ClientSideRowModel2.prototype.setRowData = function(rowData) {
      this.selectionService.reset("rowDataChanged");
      this.nodeManager.setRowData(rowData);
      if (this.hasStarted) {
        this.dispatchUpdateEventsAndRefresh();
      }
    };
    ClientSideRowModel2.prototype.dispatchUpdateEventsAndRefresh = function() {
      var rowDataUpdatedEvent = {
        type: Events.EVENT_ROW_DATA_UPDATED
      };
      this.eventService.dispatchEvent(rowDataUpdatedEvent);
      this.refreshModel({
        step: ClientSideRowModelSteps.EVERYTHING,
        newData: true
      });
    };
    ClientSideRowModel2.prototype.batchUpdateRowData = function(rowDataTransaction, callback) {
      var _this = this;
      if (this.applyAsyncTransactionsTimeout == null) {
        this.rowDataTransactionBatch = [];
        var waitMillis = this.gridOptionsService.getAsyncTransactionWaitMillis();
        this.applyAsyncTransactionsTimeout = window.setTimeout(function() {
          _this.executeBatchUpdateRowData();
        }, waitMillis);
      }
      this.rowDataTransactionBatch.push({ rowDataTransaction, callback });
    };
    ClientSideRowModel2.prototype.flushAsyncTransactions = function() {
      if (this.applyAsyncTransactionsTimeout != null) {
        clearTimeout(this.applyAsyncTransactionsTimeout);
        this.executeBatchUpdateRowData();
      }
    };
    ClientSideRowModel2.prototype.executeBatchUpdateRowData = function() {
      var _this = this;
      this.valueCache.onDataChanged();
      var callbackFuncsBound = [];
      var rowNodeTrans = [];
      var forceRowNodeOrder = false;
      if (this.rowDataTransactionBatch) {
        this.rowDataTransactionBatch.forEach(function(tranItem) {
          var rowNodeTran = _this.nodeManager.updateRowData(tranItem.rowDataTransaction, void 0);
          rowNodeTrans.push(rowNodeTran);
          if (tranItem.callback) {
            callbackFuncsBound.push(tranItem.callback.bind(null, rowNodeTran));
          }
          if (typeof tranItem.rowDataTransaction.addIndex === "number") {
            forceRowNodeOrder = true;
          }
        });
      }
      this.commonUpdateRowData(rowNodeTrans, void 0, forceRowNodeOrder);
      if (callbackFuncsBound.length > 0) {
        window.setTimeout(function() {
          callbackFuncsBound.forEach(function(func) {
            return func();
          });
        }, 0);
      }
      if (rowNodeTrans.length > 0) {
        var event_2 = {
          type: Events.EVENT_ASYNC_TRANSACTIONS_FLUSHED,
          results: rowNodeTrans
        };
        this.eventService.dispatchEvent(event_2);
      }
      this.rowDataTransactionBatch = null;
      this.applyAsyncTransactionsTimeout = void 0;
    };
    ClientSideRowModel2.prototype.updateRowData = function(rowDataTran, rowNodeOrder) {
      this.valueCache.onDataChanged();
      var rowNodeTran = this.nodeManager.updateRowData(rowDataTran, rowNodeOrder);
      var forceRowNodeOrder = typeof rowDataTran.addIndex === "number";
      this.commonUpdateRowData([rowNodeTran], rowNodeOrder, forceRowNodeOrder);
      return rowNodeTran;
    };
    ClientSideRowModel2.prototype.createRowNodeOrder = function() {
      var suppressSortOrder = this.gridOptionsService.get("suppressMaintainUnsortedOrder");
      if (suppressSortOrder) {
        return;
      }
      var orderMap = {};
      if (this.rootNode && this.rootNode.allLeafChildren) {
        for (var index = 0; index < this.rootNode.allLeafChildren.length; index++) {
          var node = this.rootNode.allLeafChildren[index];
          orderMap[node.id] = index;
        }
      }
      return orderMap;
    };
    ClientSideRowModel2.prototype.commonUpdateRowData = function(rowNodeTrans, rowNodeOrder, forceRowNodeOrder) {
      if (!this.hasStarted) {
        return;
      }
      var animate = !this.gridOptionsService.get("suppressAnimationFrame");
      if (forceRowNodeOrder) {
        rowNodeOrder = this.createRowNodeOrder();
      }
      var event = {
        type: Events.EVENT_ROW_DATA_UPDATED
      };
      this.eventService.dispatchEvent(event);
      this.refreshModel({
        step: ClientSideRowModelSteps.EVERYTHING,
        rowNodeTransactions: rowNodeTrans,
        rowNodeOrder,
        keepRenderedRows: true,
        keepEditingRows: true,
        animate
      });
    };
    ClientSideRowModel2.prototype.doRowsToDisplay = function() {
      this.rowsToDisplay = this.flattenStage.execute({ rowNode: this.rootNode });
    };
    ClientSideRowModel2.prototype.onRowHeightChanged = function() {
      this.refreshModel({ step: ClientSideRowModelSteps.MAP, keepRenderedRows: true, keepEditingRows: true, keepUndoRedoStack: true });
    };
    ClientSideRowModel2.prototype.onRowHeightChangedDebounced = function() {
      this.onRowHeightChanged_debounced();
    };
    ClientSideRowModel2.prototype.resetRowHeights = function() {
      var atLeastOne = this.resetRowHeightsForAllRowNodes();
      this.rootNode.setRowHeight(this.rootNode.rowHeight, true);
      if (this.rootNode.sibling) {
        this.rootNode.sibling.setRowHeight(this.rootNode.sibling.rowHeight, true);
      }
      if (atLeastOne) {
        this.onRowHeightChanged();
      }
    };
    ClientSideRowModel2.prototype.resetRowHeightsForAllRowNodes = function() {
      var atLeastOne = false;
      this.forEachNode(function(rowNode) {
        rowNode.setRowHeight(rowNode.rowHeight, true);
        var detailNode = rowNode.detailNode;
        if (detailNode) {
          detailNode.setRowHeight(detailNode.rowHeight, true);
        }
        if (rowNode.sibling) {
          rowNode.sibling.setRowHeight(rowNode.sibling.rowHeight, true);
        }
        atLeastOne = true;
      });
      return atLeastOne;
    };
    ClientSideRowModel2.prototype.onGridStylesChanges = function() {
      if (this.columnModel.isAutoRowHeightActive()) {
        return;
      }
      this.resetRowHeights();
    };
    ClientSideRowModel2.prototype.onGridReady = function() {
      if (this.hasStarted) {
        return;
      }
      this.setInitialData();
    };
    ClientSideRowModel2.prototype.isRowDataLoaded = function() {
      return this.rowCountReady;
    };
    __decorate$b([
      Autowired("columnModel")
    ], ClientSideRowModel2.prototype, "columnModel", void 0);
    __decorate$b([
      Autowired("selectionService")
    ], ClientSideRowModel2.prototype, "selectionService", void 0);
    __decorate$b([
      Autowired("filterManager")
    ], ClientSideRowModel2.prototype, "filterManager", void 0);
    __decorate$b([
      Autowired("valueCache")
    ], ClientSideRowModel2.prototype, "valueCache", void 0);
    __decorate$b([
      Autowired("beans")
    ], ClientSideRowModel2.prototype, "beans", void 0);
    __decorate$b([
      Autowired("filterStage")
    ], ClientSideRowModel2.prototype, "filterStage", void 0);
    __decorate$b([
      Autowired("sortStage")
    ], ClientSideRowModel2.prototype, "sortStage", void 0);
    __decorate$b([
      Autowired("flattenStage")
    ], ClientSideRowModel2.prototype, "flattenStage", void 0);
    __decorate$b([
      Optional("groupStage")
    ], ClientSideRowModel2.prototype, "groupStage", void 0);
    __decorate$b([
      Optional("aggregationStage")
    ], ClientSideRowModel2.prototype, "aggregationStage", void 0);
    __decorate$b([
      Optional("pivotStage")
    ], ClientSideRowModel2.prototype, "pivotStage", void 0);
    __decorate$b([
      Optional("filterAggregatesStage")
    ], ClientSideRowModel2.prototype, "filterAggregatesStage", void 0);
    __decorate$b([
      PostConstruct
    ], ClientSideRowModel2.prototype, "init", null);
    ClientSideRowModel2 = __decorate$b([
      Bean("rowModel")
    ], ClientSideRowModel2);
    return ClientSideRowModel2;
  }(BeanStub)
);
var __extends$b = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$a = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FilterStage = (
  /** @class */
  function(_super) {
    __extends$b(FilterStage2, _super);
    function FilterStage2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    FilterStage2.prototype.execute = function(params) {
      var changedPath = params.changedPath;
      this.filterService.filter(changedPath);
    };
    __decorate$a([
      Autowired("filterService")
    ], FilterStage2.prototype, "filterService", void 0);
    FilterStage2 = __decorate$a([
      Bean("filterStage")
    ], FilterStage2);
    return FilterStage2;
  }(BeanStub)
);
var __extends$a = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$9 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SortStage = (
  /** @class */
  function(_super) {
    __extends$a(SortStage2, _super);
    function SortStage2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    SortStage2.prototype.execute = function(params) {
      var _this = this;
      var sortOptions = this.sortController.getSortOptions();
      var sortActive = _.exists(sortOptions) && sortOptions.length > 0;
      var deltaSort = sortActive && _.exists(params.rowNodeTransactions) && this.gridOptionsService.get("deltaSort");
      var sortContainsGroupColumns = sortOptions.some(function(opt) {
        var isSortingCoupled = _this.gridOptionsService.isColumnsSortingCoupledToGroup();
        if (isSortingCoupled) {
          return opt.column.isPrimary() && opt.column.isRowGroupActive();
        }
        return !!opt.column.getColDef().showRowGroup;
      });
      this.sortService.sort(sortOptions, sortActive, deltaSort, params.rowNodeTransactions, params.changedPath, sortContainsGroupColumns);
    };
    __decorate$9([
      Autowired("sortService")
    ], SortStage2.prototype, "sortService", void 0);
    __decorate$9([
      Autowired("sortController")
    ], SortStage2.prototype, "sortController", void 0);
    SortStage2 = __decorate$9([
      Bean("sortStage")
    ], SortStage2);
    return SortStage2;
  }(BeanStub)
);
var __extends$9 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$8 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FlattenStage = (
  /** @class */
  function(_super) {
    __extends$9(FlattenStage2, _super);
    function FlattenStage2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    FlattenStage2.prototype.execute = function(params) {
      var rootNode = params.rowNode;
      var result = [];
      var skipLeafNodes = this.columnModel.isPivotMode();
      var showRootNode = skipLeafNodes && rootNode.leafGroup;
      var topList = showRootNode ? [rootNode] : rootNode.childrenAfterSort;
      var details = this.getFlattenDetails();
      this.recursivelyAddToRowsToDisplay(details, topList, result, skipLeafNodes, 0);
      var atLeastOneRowPresent = result.length > 0;
      var includeGroupTotalFooter = !showRootNode && atLeastOneRowPresent && details.groupIncludeTotalFooter;
      if (includeGroupTotalFooter) {
        rootNode.createFooter();
        this.addRowNodeToRowsToDisplay(details, rootNode.sibling, result, 0);
      }
      return result;
    };
    FlattenStage2.prototype.getFlattenDetails = function() {
      var groupRemoveSingleChildren = this.gridOptionsService.get("groupRemoveSingleChildren");
      var groupRemoveLowestSingleChildren = !groupRemoveSingleChildren && this.gridOptionsService.get("groupRemoveLowestSingleChildren");
      return {
        groupRemoveLowestSingleChildren,
        groupRemoveSingleChildren,
        isGroupMultiAutoColumn: this.gridOptionsService.isGroupMultiAutoColumn(),
        hideOpenParents: this.gridOptionsService.get("groupHideOpenParents"),
        groupIncludeTotalFooter: this.gridOptionsService.get("groupIncludeTotalFooter"),
        getGroupIncludeFooter: this.gridOptionsService.getGroupIncludeFooter()
      };
    };
    FlattenStage2.prototype.recursivelyAddToRowsToDisplay = function(details, rowsToFlatten, result, skipLeafNodes, uiLevel) {
      if (_.missingOrEmpty(rowsToFlatten)) {
        return;
      }
      for (var i = 0; i < rowsToFlatten.length; i++) {
        var rowNode = rowsToFlatten[i];
        var isParent = rowNode.hasChildren();
        var isSkippedLeafNode = skipLeafNodes && !isParent;
        var isRemovedSingleChildrenGroup = details.groupRemoveSingleChildren && isParent && rowNode.childrenAfterGroup.length === 1;
        var isRemovedLowestSingleChildrenGroup = details.groupRemoveLowestSingleChildren && isParent && rowNode.leafGroup && rowNode.childrenAfterGroup.length === 1;
        var neverAllowToExpand = skipLeafNodes && rowNode.leafGroup;
        var isHiddenOpenParent = details.hideOpenParents && rowNode.expanded && !rowNode.master && !neverAllowToExpand;
        var thisRowShouldBeRendered = !isSkippedLeafNode && !isHiddenOpenParent && !isRemovedSingleChildrenGroup && !isRemovedLowestSingleChildrenGroup;
        if (thisRowShouldBeRendered) {
          this.addRowNodeToRowsToDisplay(details, rowNode, result, uiLevel);
        }
        if (skipLeafNodes && rowNode.leafGroup) {
          continue;
        }
        if (isParent) {
          var excludedParent = isRemovedSingleChildrenGroup || isRemovedLowestSingleChildrenGroup;
          if (rowNode.expanded || excludedParent) {
            var uiLevelForChildren = excludedParent ? uiLevel : uiLevel + 1;
            this.recursivelyAddToRowsToDisplay(details, rowNode.childrenAfterSort, result, skipLeafNodes, uiLevelForChildren);
            var doesRowShowFooter = details.getGroupIncludeFooter({ node: rowNode });
            if (doesRowShowFooter) {
              rowNode.createFooter();
              this.addRowNodeToRowsToDisplay(details, rowNode.sibling, result, uiLevelForChildren);
            } else {
              rowNode.destroyFooter();
            }
          }
        } else if (rowNode.master && rowNode.expanded) {
          var detailNode = this.createDetailNode(rowNode);
          this.addRowNodeToRowsToDisplay(details, detailNode, result, uiLevel);
        }
      }
    };
    FlattenStage2.prototype.addRowNodeToRowsToDisplay = function(details, rowNode, result, uiLevel) {
      result.push(rowNode);
      rowNode.setUiLevel(details.isGroupMultiAutoColumn ? 0 : uiLevel);
    };
    FlattenStage2.prototype.createDetailNode = function(masterNode) {
      if (_.exists(masterNode.detailNode)) {
        return masterNode.detailNode;
      }
      var detailNode = new RowNode(this.beans);
      detailNode.detail = true;
      detailNode.selectable = false;
      detailNode.parent = masterNode;
      if (_.exists(masterNode.id)) {
        detailNode.id = "detail_" + masterNode.id;
      }
      detailNode.data = masterNode.data;
      detailNode.level = masterNode.level + 1;
      masterNode.detailNode = detailNode;
      return detailNode;
    };
    __decorate$8([
      Autowired("columnModel")
    ], FlattenStage2.prototype, "columnModel", void 0);
    __decorate$8([
      Autowired("beans")
    ], FlattenStage2.prototype, "beans", void 0);
    FlattenStage2 = __decorate$8([
      Bean("flattenStage")
    ], FlattenStage2);
    return FlattenStage2;
  }(BeanStub)
);
var __extends$8 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$7 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SortService = (
  /** @class */
  function(_super) {
    __extends$8(SortService2, _super);
    function SortService2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    SortService2.prototype.sort = function(sortOptions, sortActive, useDeltaSort, rowNodeTransactions, changedPath, sortContainsGroupColumns) {
      var _this = this;
      var groupMaintainOrder = this.gridOptionsService.get("groupMaintainOrder");
      var groupColumnsPresent = this.columnModel.getAllGridColumns().some(function(c) {
        return c.isRowGroupActive();
      });
      var allDirtyNodes = {};
      if (useDeltaSort && rowNodeTransactions) {
        allDirtyNodes = this.calculateDirtyNodes(rowNodeTransactions);
      }
      var isPivotMode = this.columnModel.isPivotMode();
      var postSortFunc = this.gridOptionsService.getCallback("postSortRows");
      var callback = function(rowNode) {
        var _a;
        _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterAggFilter, true);
        var skipSortingPivotLeafs = isPivotMode && rowNode.leafGroup;
        var skipSortingGroups = groupMaintainOrder && groupColumnsPresent && !rowNode.leafGroup && !sortContainsGroupColumns;
        if (skipSortingGroups) {
          var nextGroup = (_a = _this.columnModel.getRowGroupColumns()) === null || _a === void 0 ? void 0 : _a[rowNode.level + 1];
          var wasSortExplicitlyRemoved = (nextGroup === null || nextGroup === void 0 ? void 0 : nextGroup.getSort()) === null;
          var childrenToBeSorted = rowNode.childrenAfterAggFilter.slice(0);
          if (rowNode.childrenAfterSort && !wasSortExplicitlyRemoved) {
            var indexedOrders_1 = {};
            rowNode.childrenAfterSort.forEach(function(node, idx) {
              indexedOrders_1[node.id] = idx;
            });
            childrenToBeSorted.sort(function(row1, row2) {
              var _a2, _b;
              return ((_a2 = indexedOrders_1[row1.id]) !== null && _a2 !== void 0 ? _a2 : 0) - ((_b = indexedOrders_1[row2.id]) !== null && _b !== void 0 ? _b : 0);
            });
          }
          rowNode.childrenAfterSort = childrenToBeSorted;
        } else if (!sortActive || skipSortingPivotLeafs) {
          rowNode.childrenAfterSort = rowNode.childrenAfterAggFilter.slice(0);
        } else if (useDeltaSort) {
          rowNode.childrenAfterSort = _this.doDeltaSort(rowNode, allDirtyNodes, changedPath, sortOptions);
        } else {
          rowNode.childrenAfterSort = _this.rowNodeSorter.doFullSort(rowNode.childrenAfterAggFilter, sortOptions);
        }
        if (rowNode.sibling) {
          rowNode.sibling.childrenAfterSort = rowNode.childrenAfterSort;
        }
        _this.updateChildIndexes(rowNode);
        if (postSortFunc) {
          var params = { nodes: rowNode.childrenAfterSort };
          postSortFunc(params);
        }
      };
      if (changedPath) {
        changedPath.forEachChangedNodeDepthFirst(callback);
      }
      this.updateGroupDataForHideOpenParents(changedPath);
    };
    SortService2.prototype.calculateDirtyNodes = function(rowNodeTransactions) {
      var dirtyNodes = {};
      var addNodesFunc = function(rowNodes) {
        if (rowNodes) {
          rowNodes.forEach(function(rowNode) {
            return dirtyNodes[rowNode.id] = true;
          });
        }
      };
      if (rowNodeTransactions) {
        rowNodeTransactions.forEach(function(tran) {
          addNodesFunc(tran.add);
          addNodesFunc(tran.update);
          addNodesFunc(tran.remove);
        });
      }
      return dirtyNodes;
    };
    SortService2.prototype.doDeltaSort = function(rowNode, allTouchedNodes, changedPath, sortOptions) {
      var _this = this;
      var unsortedRows = rowNode.childrenAfterAggFilter;
      var oldSortedRows = rowNode.childrenAfterSort;
      if (!oldSortedRows) {
        return this.rowNodeSorter.doFullSort(unsortedRows, sortOptions);
      }
      var untouchedRowsMap = {};
      var touchedRows = [];
      unsortedRows.forEach(function(row) {
        if (allTouchedNodes[row.id] || !changedPath.canSkip(row)) {
          touchedRows.push(row);
        } else {
          untouchedRowsMap[row.id] = true;
        }
      });
      var sortedUntouchedRows = oldSortedRows.filter(function(child) {
        return untouchedRowsMap[child.id];
      });
      var mapNodeToSortedNode = function(rowNode2, pos) {
        return { currentPos: pos, rowNode: rowNode2 };
      };
      var sortedChangedRows = touchedRows.map(mapNodeToSortedNode).sort(function(a, b) {
        return _this.rowNodeSorter.compareRowNodes(sortOptions, a, b);
      });
      return this.mergeSortedArrays(sortOptions, sortedChangedRows, sortedUntouchedRows.map(mapNodeToSortedNode)).map(function(_a) {
        var rowNode2 = _a.rowNode;
        return rowNode2;
      });
    };
    SortService2.prototype.mergeSortedArrays = function(sortOptions, arr1, arr2) {
      var res = [];
      var i = 0;
      var j = 0;
      while (i < arr1.length && j < arr2.length) {
        var compareResult = this.rowNodeSorter.compareRowNodes(sortOptions, arr1[i], arr2[j]);
        if (compareResult < 0) {
          res.push(arr1[i++]);
        } else {
          res.push(arr2[j++]);
        }
      }
      while (i < arr1.length) {
        res.push(arr1[i++]);
      }
      while (j < arr2.length) {
        res.push(arr2[j++]);
      }
      return res;
    };
    SortService2.prototype.updateChildIndexes = function(rowNode) {
      if (_.missing(rowNode.childrenAfterSort)) {
        return;
      }
      var listToSort = rowNode.childrenAfterSort;
      for (var i = 0; i < listToSort.length; i++) {
        var child = listToSort[i];
        var firstChild = i === 0;
        var lastChild = i === rowNode.childrenAfterSort.length - 1;
        child.setFirstChild(firstChild);
        child.setLastChild(lastChild);
        child.setChildIndex(i);
      }
    };
    SortService2.prototype.updateGroupDataForHideOpenParents = function(changedPath) {
      var _this = this;
      if (!this.gridOptionsService.get("groupHideOpenParents")) {
        return;
      }
      if (this.gridOptionsService.get("treeData")) {
        _.warnOnce("The property hideOpenParents dose not work with Tree Data. This is because Tree Data has values at the group level, it doesn't make sense to hide them.");
        return false;
      }
      var callback = function(rowNode) {
        _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterSort, false);
        rowNode.childrenAfterSort.forEach(function(child) {
          if (child.hasChildren()) {
            callback(child);
          }
        });
      };
      if (changedPath) {
        changedPath.executeFromRootNode(function(rowNode) {
          return callback(rowNode);
        });
      }
    };
    SortService2.prototype.pullDownGroupDataForHideOpenParents = function(rowNodes, clearOperation) {
      var _this = this;
      if (!this.gridOptionsService.get("groupHideOpenParents") || _.missing(rowNodes)) {
        return;
      }
      rowNodes.forEach(function(childRowNode) {
        var groupDisplayCols = _this.columnModel.getGroupDisplayColumns();
        groupDisplayCols.forEach(function(groupDisplayCol) {
          var showRowGroup = groupDisplayCol.getColDef().showRowGroup;
          if (typeof showRowGroup !== "string") {
            console.error("AG Grid: groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup");
            return;
          }
          var displayingGroupKey = showRowGroup;
          var rowGroupColumn = _this.columnModel.getPrimaryColumn(displayingGroupKey);
          var thisRowNodeMatches = rowGroupColumn === childRowNode.rowGroupColumn;
          if (thisRowNodeMatches) {
            return;
          }
          if (clearOperation) {
            childRowNode.setGroupValue(groupDisplayCol.getId(), void 0);
          } else {
            var parentToStealFrom = childRowNode.getFirstChildOfFirstChild(rowGroupColumn);
            if (parentToStealFrom) {
              childRowNode.setGroupValue(groupDisplayCol.getId(), parentToStealFrom.key);
            }
          }
        });
      });
    };
    __decorate$7([
      Autowired("columnModel")
    ], SortService2.prototype, "columnModel", void 0);
    __decorate$7([
      Autowired("rowNodeSorter")
    ], SortService2.prototype, "rowNodeSorter", void 0);
    SortService2 = __decorate$7([
      Bean("sortService")
    ], SortService2);
    return SortService2;
  }(BeanStub)
);
var __extends$7 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$6 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FilterService = (
  /** @class */
  function(_super) {
    __extends$7(FilterService2, _super);
    function FilterService2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    FilterService2.prototype.filter = function(changedPath) {
      var filterActive = this.filterManager.isChildFilterPresent();
      this.filterNodes(filterActive, changedPath);
    };
    FilterService2.prototype.filterNodes = function(filterActive, changedPath) {
      var _this = this;
      var filterCallback = function(rowNode, includeChildNodes) {
        if (rowNode.hasChildren()) {
          if (filterActive && !includeChildNodes) {
            rowNode.childrenAfterFilter = rowNode.childrenAfterGroup.filter(function(childNode) {
              var passBecauseChildren = childNode.childrenAfterFilter && childNode.childrenAfterFilter.length > 0;
              var passBecauseDataPasses = childNode.data && _this.filterManager.doesRowPassFilter({ rowNode: childNode });
              return passBecauseChildren || passBecauseDataPasses;
            });
          } else {
            rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;
          }
        } else {
          rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;
        }
        if (rowNode.sibling) {
          rowNode.sibling.childrenAfterFilter = rowNode.childrenAfterFilter;
        }
      };
      if (this.doingTreeDataFiltering()) {
        var treeDataDepthFirstFilter_1 = function(rowNode, alreadyFoundInParent) {
          if (rowNode.childrenAfterGroup) {
            for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {
              var childNode = rowNode.childrenAfterGroup[i];
              var foundInParent = alreadyFoundInParent || _this.filterManager.doesRowPassFilter({ rowNode: childNode });
              if (childNode.childrenAfterGroup) {
                treeDataDepthFirstFilter_1(rowNode.childrenAfterGroup[i], foundInParent);
              } else {
                filterCallback(childNode, foundInParent);
              }
            }
          }
          filterCallback(rowNode, alreadyFoundInParent);
        };
        var treeDataFilterCallback = function(rowNode) {
          return treeDataDepthFirstFilter_1(rowNode, false);
        };
        changedPath.executeFromRootNode(treeDataFilterCallback);
      } else {
        var defaultFilterCallback = function(rowNode) {
          return filterCallback(rowNode, false);
        };
        changedPath.forEachChangedNodeDepthFirst(defaultFilterCallback, true);
      }
    };
    FilterService2.prototype.doingTreeDataFiltering = function() {
      return this.gridOptionsService.get("treeData") && !this.gridOptionsService.get("excludeChildrenWhenTreeDataFiltering");
    };
    __decorate$6([
      Autowired("filterManager")
    ], FilterService2.prototype, "filterManager", void 0);
    FilterService2 = __decorate$6([
      Bean("filterService")
    ], FilterService2);
    return FilterService2;
  }(BeanStub)
);
var __extends$6 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$5 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __read = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var ImmutableService = (
  /** @class */
  function(_super) {
    __extends$6(ImmutableService2, _super);
    function ImmutableService2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ImmutableService2.prototype.postConstruct = function() {
      var _this = this;
      if (this.rowModel.getType() === "clientSide") {
        this.clientSideRowModel = this.rowModel;
        this.addManagedPropertyListener("rowData", function() {
          return _this.onRowDataUpdated();
        });
      }
    };
    ImmutableService2.prototype.isActive = function() {
      var getRowIdProvided = this.gridOptionsService.exists("getRowId");
      var resetRowDataOnUpdate = this.gridOptionsService.get("resetRowDataOnUpdate");
      if (resetRowDataOnUpdate) {
        return false;
      }
      return getRowIdProvided;
    };
    ImmutableService2.prototype.setRowData = function(rowData) {
      var transactionAndMap = this.createTransactionForRowData(rowData);
      if (!transactionAndMap) {
        return;
      }
      var _a = __read(transactionAndMap, 2), transaction = _a[0], orderIdMap = _a[1];
      this.clientSideRowModel.updateRowData(transaction, orderIdMap);
    };
    ImmutableService2.prototype.createTransactionForRowData = function(rowData) {
      if (_.missing(this.clientSideRowModel)) {
        console.error("AG Grid: ImmutableService only works with ClientSideRowModel");
        return;
      }
      var getRowIdFunc = this.gridOptionsService.getCallback("getRowId");
      if (getRowIdFunc == null) {
        console.error("AG Grid: ImmutableService requires getRowId() callback to be implemented, your row data needs IDs!");
        return;
      }
      var transaction = {
        remove: [],
        update: [],
        add: []
      };
      var existingNodesMap = this.clientSideRowModel.getCopyOfNodesMap();
      var suppressSortOrder = this.gridOptionsService.get("suppressMaintainUnsortedOrder");
      var orderMap = suppressSortOrder ? void 0 : {};
      if (_.exists(rowData)) {
        rowData.forEach(function(data, index) {
          var id = getRowIdFunc({ data, level: 0 });
          var existingNode = existingNodesMap[id];
          if (orderMap) {
            orderMap[id] = index;
          }
          if (existingNode) {
            var dataHasChanged = existingNode.data !== data;
            if (dataHasChanged) {
              transaction.update.push(data);
            }
            existingNodesMap[id] = void 0;
          } else {
            transaction.add.push(data);
          }
        });
      }
      _.iterateObject(existingNodesMap, function(id, rowNode) {
        if (rowNode) {
          transaction.remove.push(rowNode.data);
        }
      });
      return [transaction, orderMap];
    };
    ImmutableService2.prototype.onRowDataUpdated = function() {
      var rowData = this.gridOptionsService.get("rowData");
      if (!rowData) {
        return;
      }
      if (this.isActive()) {
        this.setRowData(rowData);
      } else {
        this.selectionService.reset("rowDataChanged");
        this.clientSideRowModel.setRowData(rowData);
      }
    };
    __decorate$5([
      Autowired("rowModel")
    ], ImmutableService2.prototype, "rowModel", void 0);
    __decorate$5([
      Autowired("rowRenderer")
    ], ImmutableService2.prototype, "rowRenderer", void 0);
    __decorate$5([
      Autowired("selectionService")
    ], ImmutableService2.prototype, "selectionService", void 0);
    __decorate$5([
      PostConstruct
    ], ImmutableService2.prototype, "postConstruct", null);
    ImmutableService2 = __decorate$5([
      Bean("immutableService")
    ], ImmutableService2);
    return ImmutableService2;
  }(BeanStub)
);
var VERSION$2 = "31.0.3";
var ClientSideRowModelModule = {
  version: VERSION$2,
  moduleName: ModuleNames.ClientSideRowModelModule,
  rowModel: "clientSide",
  beans: [ClientSideRowModel, FilterStage, SortStage, FlattenStage, SortService, FilterService, ImmutableService]
};
var __extends$5 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$4 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var InfiniteBlock = (
  /** @class */
  function(_super) {
    __extends$5(InfiniteBlock2, _super);
    function InfiniteBlock2(id, parentCache, params) {
      var _this = _super.call(this, id) || this;
      _this.parentCache = parentCache;
      _this.params = params;
      _this.startRow = id * params.blockSize;
      _this.endRow = _this.startRow + params.blockSize;
      return _this;
    }
    InfiniteBlock2.prototype.postConstruct = function() {
      this.createRowNodes();
    };
    InfiniteBlock2.prototype.getBlockStateJson = function() {
      return {
        id: "" + this.getId(),
        state: {
          blockNumber: this.getId(),
          startRow: this.getStartRow(),
          endRow: this.getEndRow(),
          pageStatus: this.getState()
        }
      };
    };
    InfiniteBlock2.prototype.setDataAndId = function(rowNode, data, index) {
      if (_.exists(data)) {
        rowNode.setDataAndId(data, index.toString());
      } else {
        rowNode.setDataAndId(void 0, void 0);
      }
    };
    InfiniteBlock2.prototype.loadFromDatasource = function() {
      var _this = this;
      var params = this.createLoadParams();
      if (_.missing(this.params.datasource.getRows)) {
        console.warn("AG Grid: datasource is missing getRows method");
        return;
      }
      window.setTimeout(function() {
        _this.params.datasource.getRows(params);
      }, 0);
    };
    InfiniteBlock2.prototype.processServerFail = function() {
    };
    InfiniteBlock2.prototype.createLoadParams = function() {
      var params = {
        startRow: this.getStartRow(),
        endRow: this.getEndRow(),
        successCallback: this.pageLoaded.bind(this, this.getVersion()),
        failCallback: this.pageLoadFailed.bind(this, this.getVersion()),
        sortModel: this.params.sortModel,
        filterModel: this.params.filterModel,
        context: this.gridOptionsService.getGridCommonParams().context
      };
      return params;
    };
    InfiniteBlock2.prototype.forEachNode = function(callback, sequence, rowCount) {
      var _this = this;
      this.rowNodes.forEach(function(rowNode, index) {
        var rowIndex = _this.startRow + index;
        if (rowIndex < rowCount) {
          callback(rowNode, sequence.next());
        }
      });
    };
    InfiniteBlock2.prototype.getLastAccessed = function() {
      return this.lastAccessed;
    };
    InfiniteBlock2.prototype.getRow = function(rowIndex, dontTouchLastAccessed) {
      if (dontTouchLastAccessed === void 0) {
        dontTouchLastAccessed = false;
      }
      if (!dontTouchLastAccessed) {
        this.lastAccessed = this.params.lastAccessedSequence.next();
      }
      var localIndex = rowIndex - this.startRow;
      return this.rowNodes[localIndex];
    };
    InfiniteBlock2.prototype.getStartRow = function() {
      return this.startRow;
    };
    InfiniteBlock2.prototype.getEndRow = function() {
      return this.endRow;
    };
    InfiniteBlock2.prototype.createRowNodes = function() {
      this.rowNodes = [];
      for (var i = 0; i < this.params.blockSize; i++) {
        var rowIndex = this.startRow + i;
        var rowNode = new RowNode(this.beans);
        rowNode.setRowHeight(this.params.rowHeight);
        rowNode.uiLevel = 0;
        rowNode.setRowIndex(rowIndex);
        rowNode.setRowTop(this.params.rowHeight * rowIndex);
        this.rowNodes.push(rowNode);
      }
    };
    InfiniteBlock2.prototype.processServerResult = function(params) {
      var _this = this;
      this.rowNodes.forEach(function(rowNode, index) {
        var data = params.rowData ? params.rowData[index] : void 0;
        if (!rowNode.id && rowNode.alreadyRendered && data) {
          _this.rowNodes[index] = new RowNode(_this.beans);
          _this.rowNodes[index].setRowIndex(rowNode.rowIndex);
          _this.rowNodes[index].setRowTop(rowNode.rowTop);
          _this.rowNodes[index].setRowHeight(rowNode.rowHeight);
          rowNode.clearRowTopAndRowIndex();
        }
        _this.setDataAndId(_this.rowNodes[index], data, _this.startRow + index);
      });
      var finalRowCount = params.rowCount != null && params.rowCount >= 0 ? params.rowCount : void 0;
      this.parentCache.pageLoaded(this, finalRowCount);
    };
    InfiniteBlock2.prototype.destroyRowNodes = function() {
      this.rowNodes.forEach(function(rowNode) {
        rowNode.clearRowTopAndRowIndex();
      });
    };
    __decorate$4([
      Autowired("beans")
    ], InfiniteBlock2.prototype, "beans", void 0);
    __decorate$4([
      PostConstruct
    ], InfiniteBlock2.prototype, "postConstruct", null);
    __decorate$4([
      PreDestroy
    ], InfiniteBlock2.prototype, "destroyRowNodes", null);
    return InfiniteBlock2;
  }(RowNodeBlock)
);
var __extends$4 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$3 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = function(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
};
var InfiniteCache = (
  /** @class */
  function(_super) {
    __extends$4(InfiniteCache2, _super);
    function InfiniteCache2(params) {
      var _this = _super.call(this) || this;
      _this.lastRowIndexKnown = false;
      _this.blocks = {};
      _this.blockCount = 0;
      _this.rowCount = params.initialRowCount;
      _this.params = params;
      return _this;
    }
    InfiniteCache2.prototype.setBeans = function(loggerFactory) {
      this.logger = loggerFactory.create("InfiniteCache");
    };
    InfiniteCache2.prototype.getRow = function(rowIndex, dontCreatePage) {
      if (dontCreatePage === void 0) {
        dontCreatePage = false;
      }
      var blockId = Math.floor(rowIndex / this.params.blockSize);
      var block = this.blocks[blockId];
      if (!block) {
        if (dontCreatePage) {
          return void 0;
        }
        block = this.createBlock(blockId);
      }
      return block.getRow(rowIndex);
    };
    InfiniteCache2.prototype.createBlock = function(blockNumber) {
      var newBlock = this.createBean(new InfiniteBlock(blockNumber, this, this.params));
      this.blocks[newBlock.getId()] = newBlock;
      this.blockCount++;
      this.purgeBlocksIfNeeded(newBlock);
      this.params.rowNodeBlockLoader.addBlock(newBlock);
      return newBlock;
    };
    InfiniteCache2.prototype.refreshCache = function() {
      var nothingToRefresh = this.blockCount == 0;
      if (nothingToRefresh) {
        this.purgeCache();
        return;
      }
      this.getBlocksInOrder().forEach(function(block) {
        return block.setStateWaitingToLoad();
      });
      this.params.rowNodeBlockLoader.checkBlockToLoad();
    };
    InfiniteCache2.prototype.destroyAllBlocks = function() {
      var _this = this;
      this.getBlocksInOrder().forEach(function(block) {
        return _this.destroyBlock(block);
      });
    };
    InfiniteCache2.prototype.getRowCount = function() {
      return this.rowCount;
    };
    InfiniteCache2.prototype.isLastRowIndexKnown = function() {
      return this.lastRowIndexKnown;
    };
    InfiniteCache2.prototype.pageLoaded = function(block, lastRow) {
      if (!this.isAlive()) {
        return;
      }
      this.logger.log("onPageLoaded: page = ".concat(block.getId(), ", lastRow = ").concat(lastRow));
      this.checkRowCount(block, lastRow);
      this.onCacheUpdated();
    };
    InfiniteCache2.prototype.purgeBlocksIfNeeded = function(blockToExclude) {
      var _this = this;
      var blocksForPurging = this.getBlocksInOrder().filter(function(b) {
        return b != blockToExclude;
      });
      var lastAccessedComparator = function(a, b) {
        return b.getLastAccessed() - a.getLastAccessed();
      };
      blocksForPurging.sort(lastAccessedComparator);
      var maxBlocksProvided = this.params.maxBlocksInCache > 0;
      var blocksToKeep = maxBlocksProvided ? this.params.maxBlocksInCache - 1 : null;
      var emptyBlocksToKeep = InfiniteCache2.MAX_EMPTY_BLOCKS_TO_KEEP - 1;
      blocksForPurging.forEach(function(block, index) {
        var purgeBecauseBlockEmpty = block.getState() === InfiniteBlock.STATE_WAITING_TO_LOAD && index >= emptyBlocksToKeep;
        var purgeBecauseCacheFull = maxBlocksProvided ? index >= blocksToKeep : false;
        if (purgeBecauseBlockEmpty || purgeBecauseCacheFull) {
          if (_this.isBlockCurrentlyDisplayed(block)) {
            return;
          }
          if (_this.isBlockFocused(block)) {
            return;
          }
          _this.removeBlockFromCache(block);
        }
      });
    };
    InfiniteCache2.prototype.isBlockFocused = function(block) {
      var focusedCell = this.focusService.getFocusCellToUseAfterRefresh();
      if (!focusedCell) {
        return false;
      }
      if (focusedCell.rowPinned != null) {
        return false;
      }
      var blockIndexStart = block.getStartRow();
      var blockIndexEnd = block.getEndRow();
      var hasFocus = focusedCell.rowIndex >= blockIndexStart && focusedCell.rowIndex < blockIndexEnd;
      return hasFocus;
    };
    InfiniteCache2.prototype.isBlockCurrentlyDisplayed = function(block) {
      var startIndex = block.getStartRow();
      var endIndex = block.getEndRow() - 1;
      return this.rowRenderer.isRangeInRenderedViewport(startIndex, endIndex);
    };
    InfiniteCache2.prototype.removeBlockFromCache = function(blockToRemove) {
      if (!blockToRemove) {
        return;
      }
      this.destroyBlock(blockToRemove);
    };
    InfiniteCache2.prototype.checkRowCount = function(block, lastRow) {
      if (typeof lastRow === "number" && lastRow >= 0) {
        this.rowCount = lastRow;
        this.lastRowIndexKnown = true;
      } else if (!this.lastRowIndexKnown) {
        var lastRowIndex = (block.getId() + 1) * this.params.blockSize;
        var lastRowIndexPlusOverflow = lastRowIndex + this.params.overflowSize;
        if (this.rowCount < lastRowIndexPlusOverflow) {
          this.rowCount = lastRowIndexPlusOverflow;
        }
      }
    };
    InfiniteCache2.prototype.setRowCount = function(rowCount, lastRowIndexKnown) {
      this.rowCount = rowCount;
      if (_.exists(lastRowIndexKnown)) {
        this.lastRowIndexKnown = lastRowIndexKnown;
      }
      if (!this.lastRowIndexKnown) {
        if (this.rowCount % this.params.blockSize === 0) {
          this.rowCount++;
        }
      }
      this.onCacheUpdated();
    };
    InfiniteCache2.prototype.forEachNodeDeep = function(callback) {
      var _this = this;
      var sequence = new NumberSequence();
      this.getBlocksInOrder().forEach(function(block) {
        return block.forEachNode(callback, sequence, _this.rowCount);
      });
    };
    InfiniteCache2.prototype.getBlocksInOrder = function() {
      var blockComparator = function(a, b) {
        return a.getId() - b.getId();
      };
      var blocks = _.getAllValuesInObject(this.blocks).sort(blockComparator);
      return blocks;
    };
    InfiniteCache2.prototype.destroyBlock = function(block) {
      delete this.blocks[block.getId()];
      this.destroyBean(block);
      this.blockCount--;
      this.params.rowNodeBlockLoader.removeBlock(block);
    };
    InfiniteCache2.prototype.onCacheUpdated = function() {
      if (this.isAlive()) {
        this.destroyAllBlocksPastVirtualRowCount();
        var event_1 = {
          type: Events.EVENT_STORE_UPDATED
        };
        this.eventService.dispatchEvent(event_1);
      }
    };
    InfiniteCache2.prototype.destroyAllBlocksPastVirtualRowCount = function() {
      var _this = this;
      var blocksToDestroy = [];
      this.getBlocksInOrder().forEach(function(block) {
        var startRow = block.getId() * _this.params.blockSize;
        if (startRow >= _this.rowCount) {
          blocksToDestroy.push(block);
        }
      });
      if (blocksToDestroy.length > 0) {
        blocksToDestroy.forEach(function(block) {
          return _this.destroyBlock(block);
        });
      }
    };
    InfiniteCache2.prototype.purgeCache = function() {
      var _this = this;
      this.getBlocksInOrder().forEach(function(block) {
        return _this.removeBlockFromCache(block);
      });
      this.lastRowIndexKnown = false;
      if (this.rowCount === 0) {
        this.rowCount = this.params.initialRowCount;
      }
      this.onCacheUpdated();
    };
    InfiniteCache2.prototype.getRowNodesInRange = function(firstInRange, lastInRange) {
      var _this = this;
      var result = [];
      var lastBlockId = -1;
      var inActiveRange = false;
      var numberSequence = new NumberSequence();
      if (_.missing(firstInRange)) {
        inActiveRange = true;
      }
      var foundGapInSelection = false;
      this.getBlocksInOrder().forEach(function(block) {
        if (foundGapInSelection) {
          return;
        }
        if (inActiveRange && lastBlockId + 1 !== block.getId()) {
          foundGapInSelection = true;
          return;
        }
        lastBlockId = block.getId();
        block.forEachNode(function(rowNode) {
          var hitFirstOrLast = rowNode === firstInRange || rowNode === lastInRange;
          if (inActiveRange || hitFirstOrLast) {
            result.push(rowNode);
          }
          if (hitFirstOrLast) {
            inActiveRange = !inActiveRange;
          }
        }, numberSequence, _this.rowCount);
      });
      var invalidRange = foundGapInSelection || inActiveRange;
      return invalidRange ? [] : result;
    };
    InfiniteCache2.MAX_EMPTY_BLOCKS_TO_KEEP = 2;
    __decorate$3([
      Autowired("rowRenderer")
    ], InfiniteCache2.prototype, "rowRenderer", void 0);
    __decorate$3([
      Autowired("focusService")
    ], InfiniteCache2.prototype, "focusService", void 0);
    __decorate$3([
      __param(0, Qualifier("loggerFactory"))
    ], InfiniteCache2.prototype, "setBeans", null);
    __decorate$3([
      PreDestroy
    ], InfiniteCache2.prototype, "destroyAllBlocks", null);
    return InfiniteCache2;
  }(BeanStub)
);
var __extends$3 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$2 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var InfiniteRowModel = (
  /** @class */
  function(_super) {
    __extends$3(InfiniteRowModel2, _super);
    function InfiniteRowModel2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    InfiniteRowModel2.prototype.getRowBounds = function(index) {
      return {
        rowHeight: this.rowHeight,
        rowTop: this.rowHeight * index
      };
    };
    InfiniteRowModel2.prototype.ensureRowHeightsValid = function(startPixel, endPixel, startLimitIndex, endLimitIndex) {
      return false;
    };
    InfiniteRowModel2.prototype.init = function() {
      var _this = this;
      if (!this.gridOptionsService.isRowModelType("infinite")) {
        return;
      }
      this.rowHeight = this.gridOptionsService.getRowHeightAsNumber();
      this.addEventListeners();
      this.addDestroyFunc(function() {
        return _this.destroyCache();
      });
      this.verifyProps();
    };
    InfiniteRowModel2.prototype.verifyProps = function() {
      if (this.gridOptionsService.exists("initialGroupOrderComparator")) {
        _.warnOnce("initialGroupOrderComparator cannot be used with Infinite Row Model as sorting is done on the server side");
      }
    };
    InfiniteRowModel2.prototype.start = function() {
      this.setDatasource(this.gridOptionsService.get("datasource"));
    };
    InfiniteRowModel2.prototype.destroyDatasource = function() {
      if (this.datasource) {
        this.getContext().destroyBean(this.datasource);
        this.rowRenderer.datasourceChanged();
        this.datasource = null;
      }
    };
    InfiniteRowModel2.prototype.addEventListeners = function() {
      var _this = this;
      this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnEverything.bind(this));
      this.addManagedListener(this.eventService, Events.EVENT_STORE_UPDATED, this.onCacheUpdated.bind(this));
      this.addManagedPropertyListener("datasource", function() {
        return _this.setDatasource(_this.gridOptionsService.get("datasource"));
      });
      this.addManagedPropertyListener("cacheBlockSize", function() {
        return _this.resetCache();
      });
      this.addManagedPropertyListener("rowHeight", function() {
        _this.rowHeight = _this.gridOptionsService.getRowHeightAsNumber();
        _this.cacheParams.rowHeight = _this.rowHeight;
        _this.updateRowHeights();
      });
    };
    InfiniteRowModel2.prototype.onFilterChanged = function() {
      this.reset();
    };
    InfiniteRowModel2.prototype.onSortChanged = function() {
      this.reset();
    };
    InfiniteRowModel2.prototype.onColumnEverything = function() {
      var resetRequired;
      if (this.cacheParams) {
        resetRequired = this.isSortModelDifferent();
      } else {
        resetRequired = true;
      }
      if (resetRequired) {
        this.reset();
      }
    };
    InfiniteRowModel2.prototype.isSortModelDifferent = function() {
      return !_.jsonEquals(this.cacheParams.sortModel, this.sortController.getSortModel());
    };
    InfiniteRowModel2.prototype.getType = function() {
      return "infinite";
    };
    InfiniteRowModel2.prototype.setDatasource = function(datasource) {
      this.destroyDatasource();
      this.datasource = datasource;
      if (datasource) {
        this.reset();
      }
    };
    InfiniteRowModel2.prototype.isEmpty = function() {
      return !this.infiniteCache;
    };
    InfiniteRowModel2.prototype.isRowsToRender = function() {
      return !!this.infiniteCache;
    };
    InfiniteRowModel2.prototype.getNodesInRangeForSelection = function(firstInRange, lastInRange) {
      return this.infiniteCache ? this.infiniteCache.getRowNodesInRange(firstInRange, lastInRange) : [];
    };
    InfiniteRowModel2.prototype.reset = function() {
      if (!this.datasource) {
        return;
      }
      var getRowIdFunc = this.gridOptionsService.getCallback("getRowId");
      var userGeneratingIds = getRowIdFunc != null;
      if (!userGeneratingIds) {
        this.selectionService.reset("rowDataChanged");
      }
      this.resetCache();
    };
    InfiniteRowModel2.prototype.createModelUpdatedEvent = function() {
      return {
        type: Events.EVENT_MODEL_UPDATED,
        // not sure if these should all be false - noticed if after implementing,
        // maybe they should be true?
        newPage: false,
        newPageSize: false,
        newData: false,
        keepRenderedRows: true,
        animate: false
      };
    };
    InfiniteRowModel2.prototype.resetCache = function() {
      this.destroyCache();
      this.cacheParams = {
        // the user provided datasource
        datasource: this.datasource,
        // sort and filter model
        filterModel: this.filterManager.getFilterModel(),
        sortModel: this.sortController.getSortModel(),
        rowNodeBlockLoader: this.rowNodeBlockLoader,
        // properties - this way we take a snapshot of them, so if user changes any, they will be
        // used next time we create a new cache, which is generally after a filter or sort change,
        // or a new datasource is set
        initialRowCount: this.gridOptionsService.get("infiniteInitialRowCount"),
        maxBlocksInCache: this.gridOptionsService.get("maxBlocksInCache"),
        rowHeight: this.gridOptionsService.getRowHeightAsNumber(),
        // if user doesn't provide overflow, we use default overflow of 1, so user can scroll past
        // the current page and request first row of next page
        overflowSize: this.gridOptionsService.get("cacheOverflowSize"),
        // page size needs to be 1 or greater. having it at 1 would be silly, as you would be hitting the
        // server for one page at a time. so the default if not specified is 100.
        blockSize: this.gridOptionsService.get("cacheBlockSize"),
        // the cache could create this, however it is also used by the pages, so handy to create it
        // here as the settings are also passed to the pages
        lastAccessedSequence: new NumberSequence()
      };
      this.infiniteCache = this.createBean(new InfiniteCache(this.cacheParams));
      this.eventService.dispatchEventOnce({
        type: Events.EVENT_ROW_COUNT_READY
      });
      var event = this.createModelUpdatedEvent();
      this.eventService.dispatchEvent(event);
    };
    InfiniteRowModel2.prototype.updateRowHeights = function() {
      var _this = this;
      this.forEachNode(function(node) {
        node.setRowHeight(_this.rowHeight);
        node.setRowTop(_this.rowHeight * node.rowIndex);
      });
      var event = this.createModelUpdatedEvent();
      this.eventService.dispatchEvent(event);
    };
    InfiniteRowModel2.prototype.destroyCache = function() {
      if (this.infiniteCache) {
        this.infiniteCache = this.destroyBean(this.infiniteCache);
      }
    };
    InfiniteRowModel2.prototype.onCacheUpdated = function() {
      var event = this.createModelUpdatedEvent();
      this.eventService.dispatchEvent(event);
    };
    InfiniteRowModel2.prototype.getRow = function(rowIndex) {
      if (!this.infiniteCache) {
        return void 0;
      }
      if (rowIndex >= this.infiniteCache.getRowCount()) {
        return void 0;
      }
      return this.infiniteCache.getRow(rowIndex);
    };
    InfiniteRowModel2.prototype.getRowNode = function(id) {
      var result;
      this.forEachNode(function(rowNode) {
        if (rowNode.id === id) {
          result = rowNode;
        }
      });
      return result;
    };
    InfiniteRowModel2.prototype.forEachNode = function(callback) {
      if (this.infiniteCache) {
        this.infiniteCache.forEachNodeDeep(callback);
      }
    };
    InfiniteRowModel2.prototype.getTopLevelRowCount = function() {
      return this.getRowCount();
    };
    InfiniteRowModel2.prototype.getTopLevelRowDisplayedIndex = function(topLevelIndex) {
      return topLevelIndex;
    };
    InfiniteRowModel2.prototype.getRowIndexAtPixel = function(pixel) {
      if (this.rowHeight !== 0) {
        var rowIndexForPixel = Math.floor(pixel / this.rowHeight);
        var lastRowIndex = this.getRowCount() - 1;
        if (rowIndexForPixel > lastRowIndex) {
          return lastRowIndex;
        }
        return rowIndexForPixel;
      }
      return 0;
    };
    InfiniteRowModel2.prototype.getRowCount = function() {
      return this.infiniteCache ? this.infiniteCache.getRowCount() : 0;
    };
    InfiniteRowModel2.prototype.isRowPresent = function(rowNode) {
      var foundRowNode = this.getRowNode(rowNode.id);
      return !!foundRowNode;
    };
    InfiniteRowModel2.prototype.refreshCache = function() {
      if (this.infiniteCache) {
        this.infiniteCache.refreshCache();
      }
    };
    InfiniteRowModel2.prototype.purgeCache = function() {
      if (this.infiniteCache) {
        this.infiniteCache.purgeCache();
      }
    };
    InfiniteRowModel2.prototype.isLastRowIndexKnown = function() {
      if (this.infiniteCache) {
        return this.infiniteCache.isLastRowIndexKnown();
      }
      return false;
    };
    InfiniteRowModel2.prototype.setRowCount = function(rowCount, lastRowIndexKnown) {
      if (this.infiniteCache) {
        this.infiniteCache.setRowCount(rowCount, lastRowIndexKnown);
      }
    };
    __decorate$2([
      Autowired("filterManager")
    ], InfiniteRowModel2.prototype, "filterManager", void 0);
    __decorate$2([
      Autowired("sortController")
    ], InfiniteRowModel2.prototype, "sortController", void 0);
    __decorate$2([
      Autowired("selectionService")
    ], InfiniteRowModel2.prototype, "selectionService", void 0);
    __decorate$2([
      Autowired("rowRenderer")
    ], InfiniteRowModel2.prototype, "rowRenderer", void 0);
    __decorate$2([
      Autowired("rowNodeBlockLoader")
    ], InfiniteRowModel2.prototype, "rowNodeBlockLoader", void 0);
    __decorate$2([
      PostConstruct
    ], InfiniteRowModel2.prototype, "init", null);
    __decorate$2([
      PreDestroy
    ], InfiniteRowModel2.prototype, "destroyDatasource", null);
    InfiniteRowModel2 = __decorate$2([
      Bean("rowModel")
    ], InfiniteRowModel2);
    return InfiniteRowModel2;
  }(BeanStub)
);
var VERSION$1 = "31.0.3";
var InfiniteRowModelModule = {
  version: VERSION$1,
  moduleName: ModuleNames.InfiniteRowModelModule,
  rowModel: "infinite",
  beans: [InfiniteRowModel]
};
var BaseCreator = (
  /** @class */
  function() {
    function BaseCreator2() {
    }
    BaseCreator2.prototype.setBeans = function(beans) {
      this.beans = beans;
    };
    BaseCreator2.prototype.getFileName = function(fileName) {
      var extension = this.getDefaultFileExtension();
      if (fileName == null || !fileName.length) {
        fileName = this.getDefaultFileName();
      }
      return fileName.indexOf(".") === -1 ? "".concat(fileName, ".").concat(extension) : fileName;
    };
    BaseCreator2.prototype.getData = function(params) {
      var serializingSession = this.createSerializingSession(params);
      var data = this.beans.gridSerializer.serialize(serializingSession, params);
      return data;
    };
    BaseCreator2.prototype.getDefaultFileName = function() {
      return "export.".concat(this.getDefaultFileExtension());
    };
    return BaseCreator2;
  }()
);
var BaseGridSerializingSession = (
  /** @class */
  function() {
    function BaseGridSerializingSession2(config) {
      this.groupColumns = [];
      var columnModel = config.columnModel, valueService = config.valueService, gridOptionsService = config.gridOptionsService, valueFormatterService = config.valueFormatterService, valueParserService = config.valueParserService, processCellCallback = config.processCellCallback, processHeaderCallback = config.processHeaderCallback, processGroupHeaderCallback = config.processGroupHeaderCallback, processRowGroupCallback = config.processRowGroupCallback;
      this.columnModel = columnModel;
      this.valueService = valueService;
      this.gridOptionsService = gridOptionsService;
      this.valueFormatterService = valueFormatterService;
      this.valueParserService = valueParserService;
      this.processCellCallback = processCellCallback;
      this.processHeaderCallback = processHeaderCallback;
      this.processGroupHeaderCallback = processGroupHeaderCallback;
      this.processRowGroupCallback = processRowGroupCallback;
    }
    BaseGridSerializingSession2.prototype.prepare = function(columnsToExport) {
      this.groupColumns = columnsToExport.filter(function(col) {
        return !!col.getColDef().showRowGroup;
      });
    };
    BaseGridSerializingSession2.prototype.extractHeaderValue = function(column) {
      var value = this.getHeaderName(this.processHeaderCallback, column);
      return value != null ? value : "";
    };
    BaseGridSerializingSession2.prototype.extractRowCellValue = function(column, index, accumulatedRowIndex, type, node) {
      var hideOpenParents = this.gridOptionsService.get("groupHideOpenParents");
      var value = (!hideOpenParents || node.footer) && this.shouldRenderGroupSummaryCell(node, column, index) ? this.createValueForGroupNode(column, node) : this.valueService.getValue(column, node);
      var processedValue = this.processCell({
        accumulatedRowIndex,
        rowNode: node,
        column,
        value,
        processCellCallback: this.processCellCallback,
        type
      });
      return processedValue;
    };
    BaseGridSerializingSession2.prototype.shouldRenderGroupSummaryCell = function(node, column, currentColumnIndex) {
      var _a;
      var isGroupNode = node && node.group;
      if (!isGroupNode) {
        return false;
      }
      var currentColumnGroupIndex = this.groupColumns.indexOf(column);
      if (currentColumnGroupIndex !== -1) {
        if (((_a = node.groupData) === null || _a === void 0 ? void 0 : _a[column.getId()]) != null) {
          return true;
        }
        if (this.gridOptionsService.isRowModelType("serverSide") && node.group) {
          return true;
        }
        if (node.footer && node.level === -1) {
          var colDef = column.getColDef();
          var isFullWidth = colDef == null || colDef.showRowGroup === true;
          return isFullWidth || colDef.showRowGroup === this.columnModel.getRowGroupColumns()[0].getId();
        }
      }
      var isGroupUseEntireRow = this.gridOptionsService.isGroupUseEntireRow(this.columnModel.isPivotMode());
      return currentColumnIndex === 0 && isGroupUseEntireRow;
    };
    BaseGridSerializingSession2.prototype.getHeaderName = function(callback, column) {
      if (callback) {
        return callback(this.gridOptionsService.addGridCommonParams({ column }));
      }
      return this.columnModel.getDisplayNameForColumn(column, "csv", true);
    };
    BaseGridSerializingSession2.prototype.createValueForGroupNode = function(column, node) {
      var _this = this;
      if (this.processRowGroupCallback) {
        return this.processRowGroupCallback(this.gridOptionsService.addGridCommonParams({ column, node }));
      }
      var isTreeData = this.gridOptionsService.get("treeData");
      var isSuppressGroupMaintainValueType = this.gridOptionsService.get("suppressGroupMaintainValueType");
      var getValueFromNode = function(node2) {
        var _a, _b;
        if (isTreeData || isSuppressGroupMaintainValueType) {
          return node2.key;
        }
        var value = (_a = node2.groupData) === null || _a === void 0 ? void 0 : _a[column.getId()];
        if (!value || !node2.rowGroupColumn || node2.rowGroupColumn.getColDef().useValueFormatterForExport === false) {
          return value;
        }
        return (_b = _this.valueFormatterService.formatValue(node2.rowGroupColumn, node2, value)) !== null && _b !== void 0 ? _b : value;
      };
      var isFooter = node.footer;
      var keys2 = [getValueFromNode(node)];
      if (!this.gridOptionsService.isGroupMultiAutoColumn()) {
        while (node.parent) {
          node = node.parent;
          keys2.push(getValueFromNode(node));
        }
      }
      var groupValue = keys2.reverse().join(" -> ");
      return isFooter ? "Total ".concat(groupValue) : groupValue;
    };
    BaseGridSerializingSession2.prototype.processCell = function(params) {
      var _this = this;
      var _a;
      var accumulatedRowIndex = params.accumulatedRowIndex, rowNode = params.rowNode, column = params.column, value = params.value, processCellCallback = params.processCellCallback, type = params.type;
      if (processCellCallback) {
        return {
          value: (_a = processCellCallback(this.gridOptionsService.addGridCommonParams({
            accumulatedRowIndex,
            column,
            node: rowNode,
            value,
            type,
            parseValue: function(valueToParse) {
              return _this.valueParserService.parseValue(column, rowNode, valueToParse, _this.valueService.getValue(column, rowNode));
            },
            formatValue: function(valueToFormat) {
              var _a2;
              return (_a2 = _this.valueFormatterService.formatValue(column, rowNode, valueToFormat)) !== null && _a2 !== void 0 ? _a2 : valueToFormat;
            }
          }))) !== null && _a !== void 0 ? _a : ""
        };
      }
      if (column.getColDef().useValueFormatterForExport !== false) {
        return {
          value: value !== null && value !== void 0 ? value : "",
          valueFormatted: this.valueFormatterService.formatValue(column, rowNode, value)
        };
      }
      return { value: value !== null && value !== void 0 ? value : "" };
    };
    return BaseGridSerializingSession2;
  }()
);
var Downloader = (
  /** @class */
  function() {
    function Downloader2() {
    }
    Downloader2.download = function(fileName, content) {
      var win = document.defaultView || window;
      if (!win) {
        console.warn("AG Grid: There is no `window` associated with the current `document`");
        return;
      }
      var element = document.createElement("a");
      var url = win.URL.createObjectURL(content);
      element.setAttribute("href", url);
      element.setAttribute("download", fileName);
      element.style.display = "none";
      document.body.appendChild(element);
      element.dispatchEvent(new MouseEvent("click", {
        bubbles: false,
        cancelable: true,
        view: win
      }));
      document.body.removeChild(element);
      win.setTimeout(function() {
        win.URL.revokeObjectURL(url);
      }, 0);
    };
    return Downloader2;
  }()
);
var __extends$2 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var LINE_SEPARATOR$1 = "\r\n";
var CsvSerializingSession = (
  /** @class */
  function(_super) {
    __extends$2(CsvSerializingSession2, _super);
    function CsvSerializingSession2(config) {
      var _this = _super.call(this, config) || this;
      _this.isFirstLine = true;
      _this.result = "";
      var suppressQuotes = config.suppressQuotes, columnSeparator = config.columnSeparator;
      _this.suppressQuotes = suppressQuotes;
      _this.columnSeparator = columnSeparator;
      return _this;
    }
    CsvSerializingSession2.prototype.addCustomContent = function(content) {
      var _this = this;
      if (!content) {
        return;
      }
      if (typeof content === "string") {
        if (!/^\s*\n/.test(content)) {
          this.beginNewLine();
        }
        content = content.replace(/\r?\n/g, LINE_SEPARATOR$1);
        this.result += content;
      } else {
        content.forEach(function(row) {
          _this.beginNewLine();
          row.forEach(function(cell, index) {
            if (index !== 0) {
              _this.result += _this.columnSeparator;
            }
            _this.result += _this.putInQuotes(cell.data.value || "");
            if (cell.mergeAcross) {
              _this.appendEmptyCells(cell.mergeAcross);
            }
          });
        });
      }
    };
    CsvSerializingSession2.prototype.onNewHeaderGroupingRow = function() {
      this.beginNewLine();
      return {
        onColumn: this.onNewHeaderGroupingRowColumn.bind(this)
      };
    };
    CsvSerializingSession2.prototype.onNewHeaderGroupingRowColumn = function(columnGroup, header, index, span) {
      if (index != 0) {
        this.result += this.columnSeparator;
      }
      this.result += this.putInQuotes(header);
      this.appendEmptyCells(span);
    };
    CsvSerializingSession2.prototype.appendEmptyCells = function(count) {
      for (var i = 1; i <= count; i++) {
        this.result += this.columnSeparator + this.putInQuotes("");
      }
    };
    CsvSerializingSession2.prototype.onNewHeaderRow = function() {
      this.beginNewLine();
      return {
        onColumn: this.onNewHeaderRowColumn.bind(this)
      };
    };
    CsvSerializingSession2.prototype.onNewHeaderRowColumn = function(column, index) {
      if (index != 0) {
        this.result += this.columnSeparator;
      }
      this.result += this.putInQuotes(this.extractHeaderValue(column));
    };
    CsvSerializingSession2.prototype.onNewBodyRow = function() {
      this.beginNewLine();
      return {
        onColumn: this.onNewBodyRowColumn.bind(this)
      };
    };
    CsvSerializingSession2.prototype.onNewBodyRowColumn = function(column, index, node) {
      var _a;
      if (index != 0) {
        this.result += this.columnSeparator;
      }
      var rowCellValue = this.extractRowCellValue(column, index, index, "csv", node);
      this.result += this.putInQuotes((_a = rowCellValue.valueFormatted) !== null && _a !== void 0 ? _a : rowCellValue.value);
    };
    CsvSerializingSession2.prototype.putInQuotes = function(value) {
      if (this.suppressQuotes) {
        return value;
      }
      if (value === null || value === void 0) {
        return '""';
      }
      var stringValue;
      if (typeof value === "string") {
        stringValue = value;
      } else if (typeof value.toString === "function") {
        stringValue = value.toString();
      } else {
        console.warn("AG Grid: unknown value type during csv conversion");
        stringValue = "";
      }
      var valueEscaped = stringValue.replace(/"/g, '""');
      return '"' + valueEscaped + '"';
    };
    CsvSerializingSession2.prototype.parse = function() {
      return this.result;
    };
    CsvSerializingSession2.prototype.beginNewLine = function() {
      if (!this.isFirstLine) {
        this.result += LINE_SEPARATOR$1;
      }
      this.isFirstLine = false;
    };
    return CsvSerializingSession2;
  }(BaseGridSerializingSession)
);
var __extends$1 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$1 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CsvCreator = (
  /** @class */
  function(_super) {
    __extends$1(CsvCreator2, _super);
    function CsvCreator2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    CsvCreator2.prototype.postConstruct = function() {
      this.setBeans({
        gridSerializer: this.gridSerializer,
        gridOptionsService: this.gridOptionsService
      });
    };
    CsvCreator2.prototype.getMergedParams = function(params) {
      var baseParams = this.gridOptionsService.get("defaultCsvExportParams");
      return Object.assign({}, baseParams, params);
    };
    CsvCreator2.prototype.export = function(userParams) {
      if (this.isExportSuppressed()) {
        console.warn("AG Grid: Export cancelled. Export is not allowed as per your configuration.");
        return "";
      }
      var mergedParams = this.getMergedParams(userParams);
      var data = this.getData(mergedParams);
      var packagedFile = new Blob(["\uFEFF", data], { type: "text/plain" });
      Downloader.download(this.getFileName(mergedParams.fileName), packagedFile);
      return data;
    };
    CsvCreator2.prototype.exportDataAsCsv = function(params) {
      return this.export(params);
    };
    CsvCreator2.prototype.getDataAsCsv = function(params, skipDefaultParams) {
      if (skipDefaultParams === void 0) {
        skipDefaultParams = false;
      }
      var mergedParams = skipDefaultParams ? Object.assign({}, params) : this.getMergedParams(params);
      return this.getData(mergedParams);
    };
    CsvCreator2.prototype.getDefaultFileExtension = function() {
      return "csv";
    };
    CsvCreator2.prototype.createSerializingSession = function(params) {
      var _a = this, columnModel = _a.columnModel, valueService = _a.valueService, gridOptionsService = _a.gridOptionsService, valueFormatterService = _a.valueFormatterService, valueParserService = _a.valueParserService;
      var _b = params, processCellCallback = _b.processCellCallback, processHeaderCallback = _b.processHeaderCallback, processGroupHeaderCallback = _b.processGroupHeaderCallback, processRowGroupCallback = _b.processRowGroupCallback, suppressQuotes = _b.suppressQuotes, columnSeparator = _b.columnSeparator;
      return new CsvSerializingSession({
        columnModel,
        valueService,
        gridOptionsService,
        valueFormatterService,
        valueParserService,
        processCellCallback: processCellCallback || void 0,
        processHeaderCallback: processHeaderCallback || void 0,
        processGroupHeaderCallback: processGroupHeaderCallback || void 0,
        processRowGroupCallback: processRowGroupCallback || void 0,
        suppressQuotes: suppressQuotes || false,
        columnSeparator: columnSeparator || ","
      });
    };
    CsvCreator2.prototype.isExportSuppressed = function() {
      return this.gridOptionsService.get("suppressCsvExport");
    };
    __decorate$1([
      Autowired("columnModel")
    ], CsvCreator2.prototype, "columnModel", void 0);
    __decorate$1([
      Autowired("valueService")
    ], CsvCreator2.prototype, "valueService", void 0);
    __decorate$1([
      Autowired("gridSerializer")
    ], CsvCreator2.prototype, "gridSerializer", void 0);
    __decorate$1([
      Autowired("gridOptionsService")
    ], CsvCreator2.prototype, "gridOptionsService", void 0);
    __decorate$1([
      Autowired("valueFormatterService")
    ], CsvCreator2.prototype, "valueFormatterService", void 0);
    __decorate$1([
      Autowired("valueParserService")
    ], CsvCreator2.prototype, "valueParserService", void 0);
    __decorate$1([
      PostConstruct
    ], CsvCreator2.prototype, "postConstruct", null);
    CsvCreator2 = __decorate$1([
      Bean("csvCreator")
    ], CsvCreator2);
    return CsvCreator2;
  }(BaseCreator)
);
var __extends = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RowType;
(function(RowType2) {
  RowType2[RowType2["HEADER_GROUPING"] = 0] = "HEADER_GROUPING";
  RowType2[RowType2["HEADER"] = 1] = "HEADER";
  RowType2[RowType2["BODY"] = 2] = "BODY";
})(RowType || (RowType = {}));
var GridSerializer = (
  /** @class */
  function(_super) {
    __extends(GridSerializer2, _super);
    function GridSerializer2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    GridSerializer2.prototype.serialize = function(gridSerializingSession, params) {
      if (params === void 0) {
        params = {};
      }
      var allColumns = params.allColumns, columnKeys = params.columnKeys, skipRowGroups = params.skipRowGroups;
      var columnsToExport = this.getColumnsToExport(allColumns, skipRowGroups, columnKeys);
      var serializeChain = _.compose(
        // first pass, put in the header names of the cols
        this.prepareSession(columnsToExport),
        this.prependContent(params),
        this.exportColumnGroups(params, columnsToExport),
        this.exportHeaders(params, columnsToExport),
        this.processPinnedTopRows(params, columnsToExport),
        this.processRows(params, columnsToExport),
        this.processPinnedBottomRows(params, columnsToExport),
        this.appendContent(params)
      );
      return serializeChain(gridSerializingSession).parse();
    };
    GridSerializer2.prototype.processRow = function(gridSerializingSession, params, columnsToExport, node) {
      var rowSkipper = params.shouldRowBeSkipped || function() {
        return false;
      };
      var skipSingleChildrenGroup = this.gridOptionsService.get("groupRemoveSingleChildren");
      var skipLowestSingleChildrenGroup = this.gridOptionsService.get("groupRemoveLowestSingleChildren");
      var isClipboardExport = params.rowPositions != null;
      var isExplicitExportSelection = isClipboardExport || !!params.onlySelected;
      var hideOpenParents = this.gridOptionsService.get("groupHideOpenParents") && !isExplicitExportSelection;
      var isLeafNode = this.columnModel.isPivotMode() ? node.leafGroup : !node.group;
      var isFooter = !!node.footer;
      params.skipRowGroups;
      var shouldSkipLowestGroup = skipLowestSingleChildrenGroup && node.leafGroup;
      var shouldSkipCurrentGroup = node.allChildrenCount === 1 && (skipSingleChildrenGroup || shouldSkipLowestGroup);
      if (!isLeafNode && !isFooter && (params.skipRowGroups || shouldSkipCurrentGroup || hideOpenParents) || params.onlySelected && !node.isSelected() || params.skipPinnedTop && node.rowPinned === "top" || params.skipPinnedBottom && node.rowPinned === "bottom") {
        return;
      }
      var nodeIsRootNode = node.level === -1;
      if (nodeIsRootNode && !isLeafNode && !isFooter) {
        return;
      }
      var shouldRowBeSkipped = rowSkipper(this.gridOptionsService.addGridCommonParams({ node }));
      if (shouldRowBeSkipped) {
        return;
      }
      var rowAccumulator = gridSerializingSession.onNewBodyRow(node);
      columnsToExport.forEach(function(column, index) {
        rowAccumulator.onColumn(column, index, node);
      });
      if (params.getCustomContentBelowRow) {
        var content = params.getCustomContentBelowRow(this.gridOptionsService.addGridCommonParams({ node }));
        if (content) {
          gridSerializingSession.addCustomContent(content);
        }
      }
    };
    GridSerializer2.prototype.appendContent = function(params) {
      return function(gridSerializingSession) {
        var appendContent = params.appendContent;
        if (appendContent) {
          gridSerializingSession.addCustomContent(appendContent);
        }
        return gridSerializingSession;
      };
    };
    GridSerializer2.prototype.prependContent = function(params) {
      return function(gridSerializingSession) {
        var prependContent = params.prependContent;
        if (prependContent) {
          gridSerializingSession.addCustomContent(prependContent);
        }
        return gridSerializingSession;
      };
    };
    GridSerializer2.prototype.prepareSession = function(columnsToExport) {
      return function(gridSerializingSession) {
        gridSerializingSession.prepare(columnsToExport);
        return gridSerializingSession;
      };
    };
    GridSerializer2.prototype.exportColumnGroups = function(params, columnsToExport) {
      var _this = this;
      return function(gridSerializingSession) {
        if (!params.skipColumnGroupHeaders) {
          var groupInstanceIdCreator = new GroupInstanceIdCreator();
          var displayedGroups = _this.displayedGroupCreator.createDisplayedGroups(columnsToExport, groupInstanceIdCreator, null);
          _this.recursivelyAddHeaderGroups(displayedGroups, gridSerializingSession, params.processGroupHeaderCallback);
        }
        return gridSerializingSession;
      };
    };
    GridSerializer2.prototype.exportHeaders = function(params, columnsToExport) {
      return function(gridSerializingSession) {
        if (!params.skipColumnHeaders) {
          var gridRowIterator_1 = gridSerializingSession.onNewHeaderRow();
          columnsToExport.forEach(function(column, index) {
            gridRowIterator_1.onColumn(column, index, void 0);
          });
        }
        return gridSerializingSession;
      };
    };
    GridSerializer2.prototype.processPinnedTopRows = function(params, columnsToExport) {
      var _this = this;
      return function(gridSerializingSession) {
        var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);
        if (params.rowPositions) {
          params.rowPositions.filter(function(position) {
            return position.rowPinned === "top";
          }).sort(function(a, b) {
            return a.rowIndex - b.rowIndex;
          }).map(function(position) {
            return _this.pinnedRowModel.getPinnedTopRow(position.rowIndex);
          }).forEach(processRow);
        } else {
          _this.pinnedRowModel.forEachPinnedTopRow(processRow);
        }
        return gridSerializingSession;
      };
    };
    GridSerializer2.prototype.processRows = function(params, columnsToExport) {
      var _this = this;
      return function(gridSerializingSession) {
        var rowModel = _this.rowModel;
        var rowModelType = rowModel.getType();
        var usingCsrm = rowModelType === "clientSide";
        var usingSsrm = rowModelType === "serverSide";
        var onlySelectedNonStandardModel = !usingCsrm && params.onlySelected;
        var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);
        var _a = params.exportedRows, exportedRows = _a === void 0 ? "filteredAndSorted" : _a;
        if (params.rowPositions) {
          params.rowPositions.filter(function(position) {
            return position.rowPinned == null;
          }).sort(function(a, b) {
            return a.rowIndex - b.rowIndex;
          }).map(function(position) {
            return rowModel.getRow(position.rowIndex);
          }).forEach(processRow);
        } else if (_this.columnModel.isPivotMode()) {
          if (usingCsrm) {
            rowModel.forEachPivotNode(processRow, true);
          } else if (usingSsrm) {
            rowModel.forEachNodeAfterFilterAndSort(processRow, true);
          } else {
            rowModel.forEachNode(processRow);
          }
        } else {
          if (params.onlySelectedAllPages || onlySelectedNonStandardModel) {
            var selectedNodes = _this.selectionService.getSelectedNodes();
            _this.replicateSortedOrder(selectedNodes);
            selectedNodes.forEach(processRow);
          } else {
            if (exportedRows === "all") {
              rowModel.forEachNode(processRow);
            } else if (usingCsrm) {
              rowModel.forEachNodeAfterFilterAndSort(processRow, true);
            } else if (usingSsrm) {
              rowModel.forEachNodeAfterFilterAndSort(processRow, true);
            } else {
              rowModel.forEachNode(processRow);
            }
          }
        }
        return gridSerializingSession;
      };
    };
    GridSerializer2.prototype.replicateSortedOrder = function(rows) {
      var _this = this;
      var sortOptions = this.sortController.getSortOptions();
      var compareNodes = function(rowA, rowB) {
        var _a, _b, _c, _d;
        if (rowA.rowIndex != null && rowB.rowIndex != null) {
          return rowA.rowIndex - rowB.rowIndex;
        }
        if (rowA.level === rowB.level) {
          if (((_a = rowA.parent) === null || _a === void 0 ? void 0 : _a.id) === ((_b = rowB.parent) === null || _b === void 0 ? void 0 : _b.id)) {
            return _this.rowNodeSorter.compareRowNodes(sortOptions, {
              rowNode: rowA,
              currentPos: (_c = rowA.rowIndex) !== null && _c !== void 0 ? _c : -1
            }, {
              rowNode: rowB,
              currentPos: (_d = rowB.rowIndex) !== null && _d !== void 0 ? _d : -1
            });
          }
          return compareNodes(rowA.parent, rowB.parent);
        }
        if (rowA.level > rowB.level) {
          return compareNodes(rowA.parent, rowB);
        }
        return compareNodes(rowA, rowB.parent);
      };
      rows.sort(compareNodes);
    };
    GridSerializer2.prototype.processPinnedBottomRows = function(params, columnsToExport) {
      var _this = this;
      return function(gridSerializingSession) {
        var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);
        if (params.rowPositions) {
          params.rowPositions.filter(function(position) {
            return position.rowPinned === "bottom";
          }).sort(function(a, b) {
            return a.rowIndex - b.rowIndex;
          }).map(function(position) {
            return _this.pinnedRowModel.getPinnedBottomRow(position.rowIndex);
          }).forEach(processRow);
        } else {
          _this.pinnedRowModel.forEachPinnedBottomRow(processRow);
        }
        return gridSerializingSession;
      };
    };
    GridSerializer2.prototype.getColumnsToExport = function(allColumns, skipRowGroups, columnKeys) {
      if (allColumns === void 0) {
        allColumns = false;
      }
      if (skipRowGroups === void 0) {
        skipRowGroups = false;
      }
      var isPivotMode = this.columnModel.isPivotMode();
      if (columnKeys && columnKeys.length) {
        return this.columnModel.getGridColumns(columnKeys);
      }
      var isTreeData = this.gridOptionsService.get("treeData");
      var columnsToExport = [];
      if (allColumns && !isPivotMode) {
        columnsToExport = this.columnModel.getAllGridColumns();
      } else {
        columnsToExport = this.columnModel.getAllDisplayedColumns();
      }
      if (skipRowGroups && !isTreeData) {
        columnsToExport = columnsToExport.filter(function(column) {
          return column.getColId() !== GROUP_AUTO_COLUMN_ID;
        });
      }
      return columnsToExport;
    };
    GridSerializer2.prototype.recursivelyAddHeaderGroups = function(displayedGroups, gridSerializingSession, processGroupHeaderCallback) {
      var directChildrenHeaderGroups = [];
      displayedGroups.forEach(function(columnGroupChild) {
        var columnGroup = columnGroupChild;
        if (!columnGroup.getChildren) {
          return;
        }
        columnGroup.getChildren().forEach(function(it) {
          return directChildrenHeaderGroups.push(it);
        });
      });
      if (displayedGroups.length > 0 && displayedGroups[0] instanceof ColumnGroup) {
        this.doAddHeaderHeader(gridSerializingSession, displayedGroups, processGroupHeaderCallback);
      }
      if (directChildrenHeaderGroups && directChildrenHeaderGroups.length > 0) {
        this.recursivelyAddHeaderGroups(directChildrenHeaderGroups, gridSerializingSession, processGroupHeaderCallback);
      }
    };
    GridSerializer2.prototype.doAddHeaderHeader = function(gridSerializingSession, displayedGroups, processGroupHeaderCallback) {
      var _this = this;
      var gridRowIterator = gridSerializingSession.onNewHeaderGroupingRow();
      var columnIndex = 0;
      displayedGroups.forEach(function(columnGroupChild) {
        var columnGroup = columnGroupChild;
        var name;
        if (processGroupHeaderCallback) {
          name = processGroupHeaderCallback(_this.gridOptionsService.addGridCommonParams({
            columnGroup
          }));
        } else {
          name = _this.columnModel.getDisplayNameForColumnGroup(columnGroup, "header");
        }
        var collapsibleGroupRanges = columnGroup.getLeafColumns().reduce(function(collapsibleGroups, currentColumn, currentIdx, arr) {
          var lastGroup = _.last(collapsibleGroups);
          var groupShow = currentColumn.getColumnGroupShow() === "open";
          if (!groupShow) {
            if (lastGroup && lastGroup[1] == null) {
              lastGroup[1] = currentIdx - 1;
            }
          } else if (!lastGroup || lastGroup[1] != null) {
            lastGroup = [currentIdx];
            collapsibleGroups.push(lastGroup);
          }
          if (currentIdx === arr.length - 1 && lastGroup && lastGroup[1] == null) {
            lastGroup[1] = currentIdx;
          }
          return collapsibleGroups;
        }, []);
        gridRowIterator.onColumn(columnGroup, name || "", columnIndex++, columnGroup.getLeafColumns().length - 1, collapsibleGroupRanges);
      });
    };
    __decorate([
      Autowired("displayedGroupCreator")
    ], GridSerializer2.prototype, "displayedGroupCreator", void 0);
    __decorate([
      Autowired("columnModel")
    ], GridSerializer2.prototype, "columnModel", void 0);
    __decorate([
      Autowired("rowModel")
    ], GridSerializer2.prototype, "rowModel", void 0);
    __decorate([
      Autowired("pinnedRowModel")
    ], GridSerializer2.prototype, "pinnedRowModel", void 0);
    __decorate([
      Autowired("selectionService")
    ], GridSerializer2.prototype, "selectionService", void 0);
    __decorate([
      Autowired("rowNodeSorter")
    ], GridSerializer2.prototype, "rowNodeSorter", void 0);
    __decorate([
      Autowired("sortController")
    ], GridSerializer2.prototype, "sortController", void 0);
    GridSerializer2 = __decorate([
      Bean("gridSerializer")
    ], GridSerializer2);
    return GridSerializer2;
  }(BeanStub)
);
var VERSION = "31.0.3";
var CsvExportModule = {
  version: VERSION,
  moduleName: ModuleNames.CsvExportModule,
  beans: [CsvCreator, GridSerializer]
};
var LINE_SEPARATOR = "\r\n";
var XmlFactory = (
  /** @class */
  function() {
    function XmlFactory2() {
    }
    XmlFactory2.createHeader = function(headerElement) {
      if (headerElement === void 0) {
        headerElement = {};
      }
      var headerStart = "<?";
      var headerEnd = "?>";
      var keys2 = ["version"];
      if (!headerElement.version) {
        headerElement.version = "1.0";
      }
      if (headerElement.encoding) {
        keys2.push("encoding");
      }
      if (headerElement.standalone) {
        keys2.push("standalone");
      }
      var att = keys2.map(function(key) {
        return "".concat(key, '="').concat(headerElement[key], '"');
      }).join(" ");
      return "".concat(headerStart, "xml ").concat(att, " ").concat(headerEnd);
    };
    XmlFactory2.createXml = function(xmlElement, booleanTransformer) {
      var _this = this;
      var props = "";
      if (xmlElement.properties) {
        if (xmlElement.properties.prefixedAttributes) {
          xmlElement.properties.prefixedAttributes.forEach(function(prefixedSet) {
            Object.keys(prefixedSet.map).forEach(function(key) {
              props += _this.returnAttributeIfPopulated(prefixedSet.prefix + key, prefixedSet.map[key], booleanTransformer);
            });
          });
        }
        if (xmlElement.properties.rawMap) {
          Object.keys(xmlElement.properties.rawMap).forEach(function(key) {
            props += _this.returnAttributeIfPopulated(key, xmlElement.properties.rawMap[key], booleanTransformer);
          });
        }
      }
      var result = "<" + xmlElement.name + props;
      if (!xmlElement.children && xmlElement.textNode == null) {
        return result + "/>" + LINE_SEPARATOR;
      }
      if (xmlElement.textNode != null) {
        return result + ">" + xmlElement.textNode + "</" + xmlElement.name + ">" + LINE_SEPARATOR;
      }
      result += ">" + LINE_SEPARATOR;
      if (xmlElement.children) {
        xmlElement.children.forEach(function(it) {
          result += _this.createXml(it, booleanTransformer);
        });
      }
      return result + "</" + xmlElement.name + ">" + LINE_SEPARATOR;
    };
    XmlFactory2.returnAttributeIfPopulated = function(key, value, booleanTransformer) {
      if (!value && value !== "" && value !== 0) {
        return "";
      }
      var xmlValue = value;
      if (typeof value === "boolean") {
        if (booleanTransformer) {
          xmlValue = booleanTransformer(value);
        }
      }
      return " ".concat(key, '="').concat(xmlValue, '"');
    };
    return XmlFactory2;
  }()
);
var __values = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var crcTable = new Uint32Array([
  0,
  1996959894,
  3993919788,
  2567524794,
  124634137,
  1886057615,
  3915621685,
  2657392035,
  249268274,
  2044508324,
  3772115230,
  2547177864,
  162941995,
  2125561021,
  3887607047,
  2428444049,
  498536548,
  1789927666,
  4089016648,
  2227061214,
  450548861,
  1843258603,
  4107580753,
  2211677639,
  325883990,
  1684777152,
  4251122042,
  2321926636,
  335633487,
  1661365465,
  4195302755,
  2366115317,
  997073096,
  1281953886,
  3579855332,
  2724688242,
  1006888145,
  1258607687,
  3524101629,
  2768942443,
  901097722,
  1119000684,
  3686517206,
  2898065728,
  853044451,
  1172266101,
  3705015759,
  2882616665,
  651767980,
  1373503546,
  3369554304,
  3218104598,
  565507253,
  1454621731,
  3485111705,
  3099436303,
  671266974,
  1594198024,
  3322730930,
  2970347812,
  795835527,
  1483230225,
  3244367275,
  3060149565,
  1994146192,
  31158534,
  2563907772,
  4023717930,
  1907459465,
  112637215,
  2680153253,
  3904427059,
  2013776290,
  251722036,
  2517215374,
  3775830040,
  2137656763,
  141376813,
  2439277719,
  3865271297,
  1802195444,
  476864866,
  2238001368,
  4066508878,
  1812370925,
  453092731,
  2181625025,
  4111451223,
  1706088902,
  314042704,
  2344532202,
  4240017532,
  1658658271,
  366619977,
  2362670323,
  4224994405,
  1303535960,
  984961486,
  2747007092,
  3569037538,
  1256170817,
  1037604311,
  2765210733,
  3554079995,
  1131014506,
  879679996,
  2909243462,
  3663771856,
  1141124467,
  855842277,
  2852801631,
  3708648649,
  1342533948,
  654459306,
  3188396048,
  3373015174,
  1466479909,
  544179635,
  3110523913,
  3462522015,
  1591671054,
  702138776,
  2966460450,
  3352799412,
  1504918807,
  783551873,
  3082640443,
  3233442989,
  3988292384,
  2596254646,
  62317068,
  1957810842,
  3939845945,
  2647816111,
  81470997,
  1943803523,
  3814918930,
  2489596804,
  225274430,
  2053790376,
  3826175755,
  2466906013,
  167816743,
  2097651377,
  4027552580,
  2265490386,
  503444072,
  1762050814,
  4150417245,
  2154129355,
  426522225,
  1852507879,
  4275313526,
  2312317920,
  282753626,
  1742555852,
  4189708143,
  2394877945,
  397917763,
  1622183637,
  3604390888,
  2714866558,
  953729732,
  1340076626,
  3518719985,
  2797360999,
  1068828381,
  1219638859,
  3624741850,
  2936675148,
  906185462,
  1090812512,
  3747672003,
  2825379669,
  829329135,
  1181335161,
  3412177804,
  3160834842,
  628085408,
  1382605366,
  3423369109,
  3138078467,
  570562233,
  1426400815,
  3317316542,
  2998733608,
  733239954,
  1555261956,
  3268935591,
  3050360625,
  752459403,
  1541320221,
  2607071920,
  3965973030,
  1969922972,
  40735498,
  2617837225,
  3943577151,
  1913087877,
  83908371,
  2512341634,
  3803740692,
  2075208622,
  213261112,
  2463272603,
  3855990285,
  2094854071,
  198958881,
  2262029012,
  4057260610,
  1759359992,
  534414190,
  2176718541,
  4139329115,
  1873836001,
  414664567,
  2282248934,
  4279200368,
  1711684554,
  285281116,
  2405801727,
  4167216745,
  1634467795,
  376229701,
  2685067896,
  3608007406,
  1308918612,
  956543938,
  2808555105,
  3495958263,
  1231636301,
  1047427035,
  2932959818,
  3654703836,
  1088359270,
  936918e3,
  2847714899,
  3736837829,
  1202900863,
  817233897,
  3183342108,
  3401237130,
  1404277552,
  615818150,
  3134207493,
  3453421203,
  1423857449,
  601450431,
  3009837614,
  3294710456,
  1567103746,
  711928724,
  3020668471,
  3272380065,
  1510334235,
  755167117
]);
var ZipContainer = (
  /** @class */
  function() {
    function ZipContainer2() {
    }
    ZipContainer2.addFolders = function(paths) {
      paths.forEach(this.addFolder.bind(this));
    };
    ZipContainer2.addFolder = function(path) {
      this.folders.push({
        path,
        created: /* @__PURE__ */ new Date(),
        isBase64: false
      });
    };
    ZipContainer2.addFile = function(path, content, isBase64) {
      if (isBase64 === void 0) {
        isBase64 = false;
      }
      this.files.push({
        path,
        created: /* @__PURE__ */ new Date(),
        content,
        isBase64
      });
    };
    ZipContainer2.getContent = function(mimeType) {
      if (mimeType === void 0) {
        mimeType = "application/zip";
      }
      var textOutput = this.buildFileStream();
      var uInt8Output = this.buildUint8Array(textOutput);
      this.clearStream();
      return new Blob([uInt8Output], { type: mimeType });
    };
    ZipContainer2.clearStream = function() {
      this.folders = [];
      this.files = [];
    };
    ZipContainer2.buildFileStream = function(fData) {
      var e_1, _a;
      if (fData === void 0) {
        fData = "";
      }
      var totalFiles = this.folders.concat(this.files);
      var len = totalFiles.length;
      var foData = "";
      var lL = 0;
      var cL = 0;
      try {
        for (var totalFiles_1 = __values(totalFiles), totalFiles_1_1 = totalFiles_1.next(); !totalFiles_1_1.done; totalFiles_1_1 = totalFiles_1.next()) {
          var currentFile = totalFiles_1_1.value;
          var _b = this.getHeader(currentFile, lL), fileHeader = _b.fileHeader, folderHeader = _b.folderHeader, content = _b.content;
          lL += fileHeader.length + content.length;
          cL += folderHeader.length;
          fData += fileHeader + content;
          foData += folderHeader;
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (totalFiles_1_1 && !totalFiles_1_1.done && (_a = totalFiles_1.return))
            _a.call(totalFiles_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      var foEnd = this.buildFolderEnd(len, cL, lL);
      return fData + foData + foEnd;
    };
    ZipContainer2.getHeader = function(currentFile, offset) {
      var content = currentFile.content, path = currentFile.path, created = currentFile.created, isBase64 = currentFile.isBase64;
      var utf8_encode2 = _.utf8_encode, decToHex2 = _.decToHex;
      var utfPath = utf8_encode2(path);
      var isUTF8 = utfPath !== path;
      var time = this.convertTime(created);
      var dt = this.convertDate(created);
      var extraFields = "";
      if (isUTF8) {
        var uExtraFieldPath = decToHex2(1, 1) + decToHex2(this.getFromCrc32Table(utfPath), 4) + utfPath;
        extraFields = "up" + decToHex2(uExtraFieldPath.length, 2) + uExtraFieldPath;
      }
      var _a = !content ? { size: 0, content: "" } : this.getConvertedContent(content, isBase64), size = _a.size, convertedContent = _a.content;
      var header = "\n\0" + (isUTF8 ? "\0\b" : "\0\0") + "\0\0" + decToHex2(time, 2) + // last modified time
      decToHex2(dt, 2) + // last modified date
      decToHex2(size ? this.getFromCrc32Table(convertedContent) : 0, 4) + decToHex2(size, 4) + // compressed size
      decToHex2(size, 4) + // uncompressed size
      decToHex2(utfPath.length, 2) + // file name length
      decToHex2(extraFields.length, 2);
      var fileHeader = "PK" + header + utfPath + extraFields;
      var folderHeader = "PK\0" + header + // file header
      "\0\0\0\0\0\0" + (content ? "\0\0\0\0" : "\0\0\0") + // external file attributes
      decToHex2(offset, 4) + // relative offset of local header
      utfPath + // file name
      extraFields;
      return { fileHeader, folderHeader, content: convertedContent || "" };
    };
    ZipContainer2.getConvertedContent = function(content, isBase64) {
      if (isBase64 === void 0) {
        isBase64 = false;
      }
      if (isBase64) {
        content = content.split(";base64,")[1];
      }
      content = isBase64 ? atob(content) : content;
      return {
        size: content.length,
        content
      };
    };
    ZipContainer2.buildFolderEnd = function(tLen, cLen, lLen) {
      var decToHex2 = _.decToHex;
      return "PK\0\0\0\0" + decToHex2(tLen, 2) + // total number of entries in the central folder
      decToHex2(tLen, 2) + // total number of entries in the central folder
      decToHex2(cLen, 4) + // size of the central folder
      decToHex2(lLen, 4) + // central folder start offset
      "\0\0";
    };
    ZipContainer2.buildUint8Array = function(content) {
      var uint8 = new Uint8Array(content.length);
      for (var i = 0; i < uint8.length; i++) {
        uint8[i] = content.charCodeAt(i);
      }
      return uint8;
    };
    ZipContainer2.getFromCrc32Table = function(content) {
      if (!content.length) {
        return 0;
      }
      var size = content.length;
      var iterable = new Uint8Array(size);
      for (var i = 0; i < size; i++) {
        iterable[i] = content.charCodeAt(i);
      }
      var crc = 0 ^ -1;
      var j = 0;
      var k = 0;
      var l = 0;
      for (var i = 0; i < size; i++) {
        j = iterable[i];
        k = (crc ^ j) & 255;
        l = crcTable[k];
        crc = crc >>> 8 ^ l;
      }
      return crc ^ -1;
    };
    ZipContainer2.convertTime = function(date) {
      var time = date.getHours();
      time <<= 6;
      time = time | date.getMinutes();
      time <<= 5;
      time = time | date.getSeconds() / 2;
      return time;
    };
    ZipContainer2.convertDate = function(date) {
      var dt = date.getFullYear() - 1980;
      dt <<= 4;
      dt = dt | date.getMonth() + 1;
      dt <<= 5;
      dt = dt | date.getDate();
      return dt;
    };
    ZipContainer2.folders = [];
    ZipContainer2.files = [];
    return ZipContainer2;
  }()
);
var AllCommunityModules = [ClientSideRowModelModule, InfiniteRowModelModule, CsvExportModule];
ModuleRegistry.registerModules(AllCommunityModules);

// node_modules/ag-grid-angular/fesm2020/ag-grid-angular.mjs
var AngularFrameworkOverrides = class extends VanillaFrameworkOverrides {
  constructor(_ngZone) {
    super("angular");
    this._ngZone = _ngZone;
    this.isRunningWithinTestZone = false;
    this.wrapIncoming = (callback, source) => this.runOutside(callback, source);
    this.wrapOutgoing = (callback) => this.runInsideAngular(callback);
    this.isRunningWithinTestZone = window?.AG_GRID_UNDER_TEST ?? !!window?.Zone?.AsyncTestZoneSpec;
    if (!this._ngZone) {
      this.runOutside = (callback) => callback();
    } else if (this.isRunningWithinTestZone) {
      this.runOutside = (callback, source) => {
        if (source === "resize-observer") {
          return this._ngZone.runOutsideAngular(callback);
        }
        return callback();
      };
    } else {
      this.runOutside = (callback) => this._ngZone.runOutsideAngular(callback);
    }
  }
  // Only setup wrapping when the call is coming from within Angular zone, i.e from a users application code.
  // Used to distinguish between user code and AG Grid code setting up events against RowNodes and Columns
  get shouldWrapOutgoing() {
    return this._ngZone && NgZone.isInAngularZone();
  }
  isFrameworkComponent(comp) {
    if (!comp) {
      return false;
    }
    const prototype = comp.prototype;
    const isAngularComp = prototype && "agInit" in prototype;
    return isAngularComp;
  }
  runInsideAngular(callback) {
    return this._ngZone ? this._ngZone.run(callback) : callback();
  }
  runOutsideAngular(callback, source) {
    return this.runOutside(callback, source);
  }
};
AngularFrameworkOverrides.ɵfac = function AngularFrameworkOverrides_Factory(t) {
  return new (t || AngularFrameworkOverrides)(ɵɵinject(NgZone));
};
AngularFrameworkOverrides.ɵprov = ɵɵdefineInjectable({
  token: AngularFrameworkOverrides,
  factory: AngularFrameworkOverrides.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AngularFrameworkOverrides, [{
    type: Injectable
  }], function() {
    return [{
      type: NgZone
    }];
  }, null);
})();
var AngularFrameworkComponentWrapper = class extends BaseComponentWrapper {
  setViewContainerRef(viewContainerRef, angularFrameworkOverrides) {
    this.viewContainerRef = viewContainerRef;
    this.angularFrameworkOverrides = angularFrameworkOverrides;
  }
  createWrapper(OriginalConstructor, compType) {
    let angularFrameworkOverrides = this.angularFrameworkOverrides;
    let that = this;
    class DynamicAgNg2Component extends BaseGuiComponent {
      init(params) {
        angularFrameworkOverrides.runInsideAngular(() => {
          super.init(params);
          this._componentRef.changeDetectorRef.detectChanges();
        });
      }
      createComponent() {
        return angularFrameworkOverrides.runInsideAngular(() => that.createComponent(OriginalConstructor));
      }
      hasMethod(name) {
        return wrapper.getFrameworkComponentInstance()[name] != null;
      }
      callMethod(name, args) {
        const componentRef = this.getFrameworkComponentInstance();
        return angularFrameworkOverrides.runInsideAngular(() => wrapper.getFrameworkComponentInstance()[name].apply(componentRef, args));
      }
      addMethod(name, callback) {
        wrapper[name] = callback;
      }
    }
    let wrapper = new DynamicAgNg2Component();
    return wrapper;
  }
  createComponent(componentType) {
    return this.viewContainerRef.createComponent(componentType);
  }
};
AngularFrameworkComponentWrapper.ɵfac = /* @__PURE__ */ (() => {
  let ɵAngularFrameworkComponentWrapper_BaseFactory;
  return function AngularFrameworkComponentWrapper_Factory(t) {
    return (ɵAngularFrameworkComponentWrapper_BaseFactory || (ɵAngularFrameworkComponentWrapper_BaseFactory = ɵɵgetInheritedFactory(AngularFrameworkComponentWrapper)))(t || AngularFrameworkComponentWrapper);
  };
})();
AngularFrameworkComponentWrapper.ɵprov = ɵɵdefineInjectable({
  token: AngularFrameworkComponentWrapper,
  factory: AngularFrameworkComponentWrapper.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AngularFrameworkComponentWrapper, [{
    type: Injectable
  }], null, null);
})();
var BaseGuiComponent = class {
  init(params) {
    this._params = params;
    this._componentRef = this.createComponent();
    this._agAwareComponent = this._componentRef.instance;
    this._frameworkComponentInstance = this._componentRef.instance;
    this._eGui = this._componentRef.location.nativeElement;
    this._agAwareComponent.agInit(this._params);
  }
  getGui() {
    return this._eGui;
  }
  destroy() {
    if (this._frameworkComponentInstance && typeof this._frameworkComponentInstance.destroy === "function") {
      this._frameworkComponentInstance.destroy();
    }
    if (this._componentRef) {
      this._componentRef.destroy();
    }
  }
  getFrameworkComponentInstance() {
    return this._frameworkComponentInstance;
  }
};
var AgGridAngular = class {
  constructor(elementDef, viewContainerRef, angularFrameworkOverrides, frameworkComponentWrapper) {
    this.viewContainerRef = viewContainerRef;
    this.angularFrameworkOverrides = angularFrameworkOverrides;
    this.frameworkComponentWrapper = frameworkComponentWrapper;
    this._initialised = false;
    this._destroyed = false;
    this._fullyReady = AgPromise.resolve(true);
    this.statusBar = void 0;
    this.sideBar = void 0;
    this.suppressContextMenu = void 0;
    this.preventDefaultOnContextMenu = void 0;
    this.allowContextMenuWithControlKey = void 0;
    this.suppressMenuHide = void 0;
    this.enableBrowserTooltips = void 0;
    this.tooltipTrigger = void 0;
    this.tooltipShowDelay = void 0;
    this.tooltipHideDelay = void 0;
    this.tooltipMouseTrack = void 0;
    this.tooltipInteraction = void 0;
    this.popupParent = void 0;
    this.copyHeadersToClipboard = void 0;
    this.copyGroupHeadersToClipboard = void 0;
    this.clipboardDelimiter = void 0;
    this.suppressCopyRowsToClipboard = void 0;
    this.suppressCopySingleCellRanges = void 0;
    this.suppressLastEmptyLineOnPaste = void 0;
    this.suppressClipboardPaste = void 0;
    this.suppressClipboardApi = void 0;
    this.suppressCutToClipboard = void 0;
    this.columnDefs = void 0;
    this.defaultColDef = void 0;
    this.defaultColGroupDef = void 0;
    this.columnTypes = void 0;
    this.dataTypeDefinitions = void 0;
    this.maintainColumnOrder = void 0;
    this.suppressFieldDotNotation = void 0;
    this.headerHeight = void 0;
    this.groupHeaderHeight = void 0;
    this.floatingFiltersHeight = void 0;
    this.pivotHeaderHeight = void 0;
    this.pivotGroupHeaderHeight = void 0;
    this.allowDragFromColumnsToolPanel = void 0;
    this.suppressMovableColumns = void 0;
    this.suppressColumnMoveAnimation = void 0;
    this.suppressDragLeaveHidesColumns = void 0;
    this.suppressRowGroupHidesColumns = void 0;
    this.colResizeDefault = void 0;
    this.suppressAutoSize = void 0;
    this.autoSizePadding = void 0;
    this.skipHeaderOnAutoSize = void 0;
    this.autoSizeStrategy = void 0;
    this.components = void 0;
    this.editType = void 0;
    this.singleClickEdit = void 0;
    this.suppressClickEdit = void 0;
    this.readOnlyEdit = void 0;
    this.stopEditingWhenCellsLoseFocus = void 0;
    this.enterMovesDown = void 0;
    this.enterMovesDownAfterEdit = void 0;
    this.enterNavigatesVertically = void 0;
    this.enterNavigatesVerticallyAfterEdit = void 0;
    this.enableCellEditingOnBackspace = void 0;
    this.undoRedoCellEditing = void 0;
    this.undoRedoCellEditingLimit = void 0;
    this.defaultCsvExportParams = void 0;
    this.suppressCsvExport = void 0;
    this.defaultExcelExportParams = void 0;
    this.suppressExcelExport = void 0;
    this.excelStyles = void 0;
    this.quickFilterText = void 0;
    this.cacheQuickFilter = void 0;
    this.excludeHiddenColumnsFromQuickFilter = void 0;
    this.includeHiddenColumnsInQuickFilter = void 0;
    this.quickFilterParser = void 0;
    this.quickFilterMatcher = void 0;
    this.excludeChildrenWhenTreeDataFiltering = void 0;
    this.enableAdvancedFilter = void 0;
    this.advancedFilterModel = void 0;
    this.includeHiddenColumnsInAdvancedFilter = void 0;
    this.advancedFilterParent = void 0;
    this.advancedFilterBuilderParams = void 0;
    this.enableCharts = void 0;
    this.chartThemes = void 0;
    this.customChartThemes = void 0;
    this.chartThemeOverrides = void 0;
    this.enableChartToolPanelsButton = void 0;
    this.suppressChartToolPanelsButton = void 0;
    this.chartToolPanelsDef = void 0;
    this.loadingCellRenderer = void 0;
    this.loadingCellRendererParams = void 0;
    this.loadingCellRendererSelector = void 0;
    this.localeText = void 0;
    this.masterDetail = void 0;
    this.keepDetailRows = void 0;
    this.keepDetailRowsCount = void 0;
    this.detailCellRenderer = void 0;
    this.detailCellRendererParams = void 0;
    this.detailRowHeight = void 0;
    this.detailRowAutoHeight = void 0;
    this.context = void 0;
    this.alignedGrids = void 0;
    this.tabIndex = void 0;
    this.rowBuffer = void 0;
    this.valueCache = void 0;
    this.valueCacheNeverExpires = void 0;
    this.enableCellExpressions = void 0;
    this.suppressParentsInRowNodes = void 0;
    this.suppressTouch = void 0;
    this.suppressFocusAfterRefresh = void 0;
    this.suppressAsyncEvents = void 0;
    this.suppressBrowserResizeObserver = void 0;
    this.suppressPropertyNamesCheck = void 0;
    this.suppressChangeDetection = void 0;
    this.debug = void 0;
    this.overlayLoadingTemplate = void 0;
    this.loadingOverlayComponent = void 0;
    this.loadingOverlayComponentParams = void 0;
    this.suppressLoadingOverlay = void 0;
    this.overlayNoRowsTemplate = void 0;
    this.noRowsOverlayComponent = void 0;
    this.noRowsOverlayComponentParams = void 0;
    this.suppressNoRowsOverlay = void 0;
    this.pagination = void 0;
    this.paginationPageSize = void 0;
    this.paginationPageSizeSelector = void 0;
    this.paginationAutoPageSize = void 0;
    this.paginateChildRows = void 0;
    this.suppressPaginationPanel = void 0;
    this.pivotMode = void 0;
    this.pivotPanelShow = void 0;
    this.pivotDefaultExpanded = void 0;
    this.pivotColumnGroupTotals = void 0;
    this.pivotRowTotals = void 0;
    this.pivotSuppressAutoColumn = void 0;
    this.suppressExpandablePivotGroups = void 0;
    this.functionsReadOnly = void 0;
    this.aggFuncs = void 0;
    this.suppressAggFuncInHeader = void 0;
    this.alwaysAggregateAtRootLevel = void 0;
    this.suppressAggAtRootLevel = void 0;
    this.aggregateOnlyChangedColumns = void 0;
    this.suppressAggFilteredOnly = void 0;
    this.removePivotHeaderRowWhenSingleValueColumn = void 0;
    this.animateRows = void 0;
    this.enableCellChangeFlash = void 0;
    this.cellFlashDelay = void 0;
    this.cellFadeDelay = void 0;
    this.allowShowChangeAfterFilter = void 0;
    this.domLayout = void 0;
    this.ensureDomOrder = void 0;
    this.enableRtl = void 0;
    this.suppressColumnVirtualisation = void 0;
    this.suppressMaxRenderedRowRestriction = void 0;
    this.suppressRowVirtualisation = void 0;
    this.rowDragManaged = void 0;
    this.suppressRowDrag = void 0;
    this.suppressMoveWhenRowDragging = void 0;
    this.rowDragEntireRow = void 0;
    this.rowDragMultiRow = void 0;
    this.rowDragText = void 0;
    this.fullWidthCellRenderer = void 0;
    this.fullWidthCellRendererParams = void 0;
    this.embedFullWidthRows = void 0;
    this.suppressGroupMaintainValueType = void 0;
    this.groupDisplayType = void 0;
    this.groupDefaultExpanded = void 0;
    this.autoGroupColumnDef = void 0;
    this.groupMaintainOrder = void 0;
    this.groupSelectsChildren = void 0;
    this.groupLockGroupColumns = void 0;
    this.groupAggFiltering = void 0;
    this.groupIncludeFooter = void 0;
    this.groupIncludeTotalFooter = void 0;
    this.groupSuppressBlankHeader = void 0;
    this.groupSelectsFiltered = void 0;
    this.showOpenedGroup = void 0;
    this.groupRemoveSingleChildren = void 0;
    this.groupRemoveLowestSingleChildren = void 0;
    this.groupHideOpenParents = void 0;
    this.groupAllowUnbalanced = void 0;
    this.rowGroupPanelShow = void 0;
    this.groupRowRenderer = void 0;
    this.groupRowRendererParams = void 0;
    this.suppressMakeColumnVisibleAfterUnGroup = void 0;
    this.treeData = void 0;
    this.rowGroupPanelSuppressSort = void 0;
    this.suppressGroupRowsSticky = void 0;
    this.pinnedTopRowData = void 0;
    this.pinnedBottomRowData = void 0;
    this.rowModelType = void 0;
    this.rowData = void 0;
    this.asyncTransactionWaitMillis = void 0;
    this.suppressModelUpdateAfterUpdateTransaction = void 0;
    this.datasource = void 0;
    this.cacheOverflowSize = void 0;
    this.infiniteInitialRowCount = void 0;
    this.serverSideInitialRowCount = void 0;
    this.suppressServerSideInfiniteScroll = void 0;
    this.cacheBlockSize = void 0;
    this.maxBlocksInCache = void 0;
    this.maxConcurrentDatasourceRequests = void 0;
    this.blockLoadDebounceMillis = void 0;
    this.purgeClosedRowNodes = void 0;
    this.serverSideDatasource = void 0;
    this.serverSideSortAllLevels = void 0;
    this.serverSideOnlyRefreshFilteredGroups = void 0;
    this.serverSideFilterAllLevels = void 0;
    this.serverSideSortOnServer = void 0;
    this.serverSideFilterOnServer = void 0;
    this.serverSidePivotResultFieldSeparator = void 0;
    this.viewportDatasource = void 0;
    this.viewportRowModelPageSize = void 0;
    this.viewportRowModelBufferSize = void 0;
    this.alwaysShowHorizontalScroll = void 0;
    this.alwaysShowVerticalScroll = void 0;
    this.debounceVerticalScrollbar = void 0;
    this.suppressHorizontalScroll = void 0;
    this.suppressScrollOnNewData = void 0;
    this.suppressScrollWhenPopupsAreOpen = void 0;
    this.suppressAnimationFrame = void 0;
    this.suppressMiddleClickScrolls = void 0;
    this.suppressPreventDefaultOnMouseWheel = void 0;
    this.scrollbarWidth = void 0;
    this.rowSelection = void 0;
    this.rowMultiSelectWithClick = void 0;
    this.suppressRowDeselection = void 0;
    this.suppressRowClickSelection = void 0;
    this.suppressCellFocus = void 0;
    this.suppressMultiRangeSelection = void 0;
    this.enableCellTextSelection = void 0;
    this.enableRangeSelection = void 0;
    this.enableRangeHandle = void 0;
    this.enableFillHandle = void 0;
    this.fillHandleDirection = void 0;
    this.suppressClearOnFillReduction = void 0;
    this.sortingOrder = void 0;
    this.accentedSort = void 0;
    this.unSortIcon = void 0;
    this.suppressMultiSort = void 0;
    this.alwaysMultiSort = void 0;
    this.multiSortKey = void 0;
    this.suppressMaintainUnsortedOrder = void 0;
    this.icons = void 0;
    this.rowHeight = void 0;
    this.rowStyle = void 0;
    this.rowClass = void 0;
    this.rowClassRules = void 0;
    this.suppressRowHoverHighlight = void 0;
    this.suppressRowTransform = void 0;
    this.columnHoverHighlight = void 0;
    this.gridId = void 0;
    this.deltaSort = void 0;
    this.treeDataDisplayType = void 0;
    this.functionsPassive = void 0;
    this.enableGroupEdit = void 0;
    this.initialState = void 0;
    this.getContextMenuItems = void 0;
    this.getMainMenuItems = void 0;
    this.postProcessPopup = void 0;
    this.processUnpinnedColumns = void 0;
    this.processCellForClipboard = void 0;
    this.processHeaderForClipboard = void 0;
    this.processGroupHeaderForClipboard = void 0;
    this.processCellFromClipboard = void 0;
    this.sendToClipboard = void 0;
    this.processDataFromClipboard = void 0;
    this.isExternalFilterPresent = void 0;
    this.doesExternalFilterPass = void 0;
    this.getChartToolbarItems = void 0;
    this.createChartContainer = void 0;
    this.navigateToNextHeader = void 0;
    this.tabToNextHeader = void 0;
    this.navigateToNextCell = void 0;
    this.tabToNextCell = void 0;
    this.getLocaleText = void 0;
    this.getDocument = void 0;
    this.paginationNumberFormatter = void 0;
    this.getGroupRowAgg = void 0;
    this.isGroupOpenByDefault = void 0;
    this.initialGroupOrderComparator = void 0;
    this.processPivotResultColDef = void 0;
    this.processPivotResultColGroupDef = void 0;
    this.getDataPath = void 0;
    this.getChildCount = void 0;
    this.getServerSideGroupLevelParams = void 0;
    this.isServerSideGroupOpenByDefault = void 0;
    this.isApplyServerSideTransaction = void 0;
    this.isServerSideGroup = void 0;
    this.getServerSideGroupKey = void 0;
    this.getBusinessKeyForNode = void 0;
    this.getRowId = void 0;
    this.resetRowDataOnUpdate = void 0;
    this.processRowPostCreate = void 0;
    this.isRowSelectable = void 0;
    this.isRowMaster = void 0;
    this.fillOperation = void 0;
    this.postSortRows = void 0;
    this.getRowStyle = void 0;
    this.getRowClass = void 0;
    this.getRowHeight = void 0;
    this.isFullWidthRow = void 0;
    this.toolPanelVisibleChanged = new EventEmitter();
    this.toolPanelSizeChanged = new EventEmitter();
    this.cutStart = new EventEmitter();
    this.cutEnd = new EventEmitter();
    this.pasteStart = new EventEmitter();
    this.pasteEnd = new EventEmitter();
    this.columnVisible = new EventEmitter();
    this.columnPinned = new EventEmitter();
    this.columnResized = new EventEmitter();
    this.columnMoved = new EventEmitter();
    this.columnValueChanged = new EventEmitter();
    this.columnPivotModeChanged = new EventEmitter();
    this.columnPivotChanged = new EventEmitter();
    this.columnGroupOpened = new EventEmitter();
    this.newColumnsLoaded = new EventEmitter();
    this.gridColumnsChanged = new EventEmitter();
    this.displayedColumnsChanged = new EventEmitter();
    this.virtualColumnsChanged = new EventEmitter();
    this.columnEverythingChanged = new EventEmitter();
    this.columnHeaderMouseOver = new EventEmitter();
    this.columnHeaderMouseLeave = new EventEmitter();
    this.columnHeaderClicked = new EventEmitter();
    this.columnHeaderContextMenu = new EventEmitter();
    this.componentStateChanged = new EventEmitter();
    this.cellValueChanged = new EventEmitter();
    this.cellEditRequest = new EventEmitter();
    this.rowValueChanged = new EventEmitter();
    this.cellEditingStarted = new EventEmitter();
    this.cellEditingStopped = new EventEmitter();
    this.rowEditingStarted = new EventEmitter();
    this.rowEditingStopped = new EventEmitter();
    this.undoStarted = new EventEmitter();
    this.undoEnded = new EventEmitter();
    this.redoStarted = new EventEmitter();
    this.redoEnded = new EventEmitter();
    this.rangeDeleteStart = new EventEmitter();
    this.rangeDeleteEnd = new EventEmitter();
    this.filterOpened = new EventEmitter();
    this.filterChanged = new EventEmitter();
    this.filterModified = new EventEmitter();
    this.advancedFilterBuilderVisibleChanged = new EventEmitter();
    this.chartCreated = new EventEmitter();
    this.chartRangeSelectionChanged = new EventEmitter();
    this.chartOptionsChanged = new EventEmitter();
    this.chartDestroyed = new EventEmitter();
    this.cellKeyDown = new EventEmitter();
    this.gridReady = new EventEmitter();
    this.gridPreDestroyed = new EventEmitter();
    this.firstDataRendered = new EventEmitter();
    this.gridSizeChanged = new EventEmitter();
    this.modelUpdated = new EventEmitter();
    this.virtualRowRemoved = new EventEmitter();
    this.viewportChanged = new EventEmitter();
    this.bodyScroll = new EventEmitter();
    this.bodyScrollEnd = new EventEmitter();
    this.dragStarted = new EventEmitter();
    this.dragStopped = new EventEmitter();
    this.stateUpdated = new EventEmitter();
    this.paginationChanged = new EventEmitter();
    this.rowDragEnter = new EventEmitter();
    this.rowDragMove = new EventEmitter();
    this.rowDragLeave = new EventEmitter();
    this.rowDragEnd = new EventEmitter();
    this.columnRowGroupChanged = new EventEmitter();
    this.rowGroupOpened = new EventEmitter();
    this.expandOrCollapseAll = new EventEmitter();
    this.pinnedRowDataChanged = new EventEmitter();
    this.rowDataUpdated = new EventEmitter();
    this.asyncTransactionsFlushed = new EventEmitter();
    this.storeRefreshed = new EventEmitter();
    this.cellClicked = new EventEmitter();
    this.cellDoubleClicked = new EventEmitter();
    this.cellFocused = new EventEmitter();
    this.cellMouseOver = new EventEmitter();
    this.cellMouseOut = new EventEmitter();
    this.cellMouseDown = new EventEmitter();
    this.rowClicked = new EventEmitter();
    this.rowDoubleClicked = new EventEmitter();
    this.rowSelected = new EventEmitter();
    this.selectionChanged = new EventEmitter();
    this.cellContextMenu = new EventEmitter();
    this.rangeSelectionChanged = new EventEmitter();
    this.tooltipShow = new EventEmitter();
    this.tooltipHide = new EventEmitter();
    this.sortChanged = new EventEmitter();
    this.columnRowGroupChangeRequest = new EventEmitter();
    this.columnPivotChangeRequest = new EventEmitter();
    this.columnValueChangeRequest = new EventEmitter();
    this.columnAggFuncChangeRequest = new EventEmitter();
    this._nativeElement = elementDef.nativeElement;
  }
  ngAfterViewInit() {
    this.angularFrameworkOverrides.runOutsideAngular(() => {
      this.frameworkComponentWrapper.setViewContainerRef(this.viewContainerRef, this.angularFrameworkOverrides);
      const mergedGridOps = ComponentUtil.combineAttributesAndGridOptions(this.gridOptions, this);
      this.gridParams = {
        globalEventListener: this.globalEventListener.bind(this),
        frameworkOverrides: this.angularFrameworkOverrides,
        providedBeanInstances: {
          frameworkComponentWrapper: this.frameworkComponentWrapper
        },
        modules: this.modules || []
      };
      const api = createGrid(this._nativeElement, mergedGridOps, this.gridParams);
      if (api) {
        this.api = api;
        this.columnApi = new ColumnApi(api);
      }
      const gridPreDestroyedEmitter = this.gridPreDestroyed;
      if (gridPreDestroyedEmitter.observed ?? gridPreDestroyedEmitter.observers.length > 0) {
        console.warn('AG Grid: gridPreDestroyed event listener registered via (gridPreDestroyed)="method($event)" will be ignored! Please assign via gridOptions.gridPreDestroyed and pass to the grid as [gridOptions]="gridOptions"');
      }
      this._initialised = true;
      this._fullyReady.resolveNow(null, (resolve) => resolve);
    });
  }
  ngOnChanges(changes) {
    if (this._initialised) {
      this.angularFrameworkOverrides.runOutsideAngular(() => {
        const gridOptions = {};
        Object.entries(changes).forEach(([key, value]) => {
          gridOptions[key] = value.currentValue;
        });
        ComponentUtil.processOnChange(gridOptions, this.api);
      });
    }
  }
  ngOnDestroy() {
    if (this._initialised) {
      this._destroyed = true;
      this.api?.destroy();
    }
  }
  // we'll emit the emit if a user is listening for a given event either on the component via normal angular binding
  // or via gridOptions
  isEmitterUsed(eventType) {
    const emitter = this[eventType];
    const emitterAny = emitter;
    const hasEmitter = emitterAny?.observed ?? emitterAny?.observers?.length > 0;
    const asEventName = `on${eventType.charAt(0).toUpperCase()}${eventType.substring(1)}`;
    const hasGridOptionListener = !!this.gridOptions && !!this.gridOptions[asEventName];
    return hasEmitter || hasGridOptionListener;
  }
  globalEventListener(eventType, event) {
    if (this._destroyed) {
      return;
    }
    const emitter = this[eventType];
    if (emitter && this.isEmitterUsed(eventType)) {
      const fireEmitter = () => this.angularFrameworkOverrides.runInsideAngular(() => emitter.emit(event));
      if (eventType === "gridReady") {
        this._fullyReady.then(() => fireEmitter());
      } else {
        fireEmitter();
      }
    }
  }
};
AgGridAngular.ɵfac = function AgGridAngular_Factory(t) {
  return new (t || AgGridAngular)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(AngularFrameworkOverrides), ɵɵdirectiveInject(AngularFrameworkComponentWrapper));
};
AgGridAngular.ɵcmp = ɵɵdefineComponent({
  type: AgGridAngular,
  selectors: [["ag-grid-angular"]],
  inputs: {
    gridOptions: "gridOptions",
    modules: "modules",
    statusBar: "statusBar",
    sideBar: "sideBar",
    suppressContextMenu: "suppressContextMenu",
    preventDefaultOnContextMenu: "preventDefaultOnContextMenu",
    allowContextMenuWithControlKey: "allowContextMenuWithControlKey",
    suppressMenuHide: "suppressMenuHide",
    enableBrowserTooltips: "enableBrowserTooltips",
    tooltipTrigger: "tooltipTrigger",
    tooltipShowDelay: "tooltipShowDelay",
    tooltipHideDelay: "tooltipHideDelay",
    tooltipMouseTrack: "tooltipMouseTrack",
    tooltipInteraction: "tooltipInteraction",
    popupParent: "popupParent",
    copyHeadersToClipboard: "copyHeadersToClipboard",
    copyGroupHeadersToClipboard: "copyGroupHeadersToClipboard",
    clipboardDelimiter: "clipboardDelimiter",
    suppressCopyRowsToClipboard: "suppressCopyRowsToClipboard",
    suppressCopySingleCellRanges: "suppressCopySingleCellRanges",
    suppressLastEmptyLineOnPaste: "suppressLastEmptyLineOnPaste",
    suppressClipboardPaste: "suppressClipboardPaste",
    suppressClipboardApi: "suppressClipboardApi",
    suppressCutToClipboard: "suppressCutToClipboard",
    columnDefs: "columnDefs",
    defaultColDef: "defaultColDef",
    defaultColGroupDef: "defaultColGroupDef",
    columnTypes: "columnTypes",
    dataTypeDefinitions: "dataTypeDefinitions",
    maintainColumnOrder: "maintainColumnOrder",
    suppressFieldDotNotation: "suppressFieldDotNotation",
    headerHeight: "headerHeight",
    groupHeaderHeight: "groupHeaderHeight",
    floatingFiltersHeight: "floatingFiltersHeight",
    pivotHeaderHeight: "pivotHeaderHeight",
    pivotGroupHeaderHeight: "pivotGroupHeaderHeight",
    allowDragFromColumnsToolPanel: "allowDragFromColumnsToolPanel",
    suppressMovableColumns: "suppressMovableColumns",
    suppressColumnMoveAnimation: "suppressColumnMoveAnimation",
    suppressDragLeaveHidesColumns: "suppressDragLeaveHidesColumns",
    suppressRowGroupHidesColumns: "suppressRowGroupHidesColumns",
    colResizeDefault: "colResizeDefault",
    suppressAutoSize: "suppressAutoSize",
    autoSizePadding: "autoSizePadding",
    skipHeaderOnAutoSize: "skipHeaderOnAutoSize",
    autoSizeStrategy: "autoSizeStrategy",
    components: "components",
    editType: "editType",
    singleClickEdit: "singleClickEdit",
    suppressClickEdit: "suppressClickEdit",
    readOnlyEdit: "readOnlyEdit",
    stopEditingWhenCellsLoseFocus: "stopEditingWhenCellsLoseFocus",
    enterMovesDown: "enterMovesDown",
    enterMovesDownAfterEdit: "enterMovesDownAfterEdit",
    enterNavigatesVertically: "enterNavigatesVertically",
    enterNavigatesVerticallyAfterEdit: "enterNavigatesVerticallyAfterEdit",
    enableCellEditingOnBackspace: "enableCellEditingOnBackspace",
    undoRedoCellEditing: "undoRedoCellEditing",
    undoRedoCellEditingLimit: "undoRedoCellEditingLimit",
    defaultCsvExportParams: "defaultCsvExportParams",
    suppressCsvExport: "suppressCsvExport",
    defaultExcelExportParams: "defaultExcelExportParams",
    suppressExcelExport: "suppressExcelExport",
    excelStyles: "excelStyles",
    quickFilterText: "quickFilterText",
    cacheQuickFilter: "cacheQuickFilter",
    excludeHiddenColumnsFromQuickFilter: "excludeHiddenColumnsFromQuickFilter",
    includeHiddenColumnsInQuickFilter: "includeHiddenColumnsInQuickFilter",
    quickFilterParser: "quickFilterParser",
    quickFilterMatcher: "quickFilterMatcher",
    excludeChildrenWhenTreeDataFiltering: "excludeChildrenWhenTreeDataFiltering",
    enableAdvancedFilter: "enableAdvancedFilter",
    advancedFilterModel: "advancedFilterModel",
    includeHiddenColumnsInAdvancedFilter: "includeHiddenColumnsInAdvancedFilter",
    advancedFilterParent: "advancedFilterParent",
    advancedFilterBuilderParams: "advancedFilterBuilderParams",
    enableCharts: "enableCharts",
    chartThemes: "chartThemes",
    customChartThemes: "customChartThemes",
    chartThemeOverrides: "chartThemeOverrides",
    enableChartToolPanelsButton: "enableChartToolPanelsButton",
    suppressChartToolPanelsButton: "suppressChartToolPanelsButton",
    chartToolPanelsDef: "chartToolPanelsDef",
    loadingCellRenderer: "loadingCellRenderer",
    loadingCellRendererParams: "loadingCellRendererParams",
    loadingCellRendererSelector: "loadingCellRendererSelector",
    localeText: "localeText",
    masterDetail: "masterDetail",
    keepDetailRows: "keepDetailRows",
    keepDetailRowsCount: "keepDetailRowsCount",
    detailCellRenderer: "detailCellRenderer",
    detailCellRendererParams: "detailCellRendererParams",
    detailRowHeight: "detailRowHeight",
    detailRowAutoHeight: "detailRowAutoHeight",
    context: "context",
    alignedGrids: "alignedGrids",
    tabIndex: "tabIndex",
    rowBuffer: "rowBuffer",
    valueCache: "valueCache",
    valueCacheNeverExpires: "valueCacheNeverExpires",
    enableCellExpressions: "enableCellExpressions",
    suppressParentsInRowNodes: "suppressParentsInRowNodes",
    suppressTouch: "suppressTouch",
    suppressFocusAfterRefresh: "suppressFocusAfterRefresh",
    suppressAsyncEvents: "suppressAsyncEvents",
    suppressBrowserResizeObserver: "suppressBrowserResizeObserver",
    suppressPropertyNamesCheck: "suppressPropertyNamesCheck",
    suppressChangeDetection: "suppressChangeDetection",
    debug: "debug",
    overlayLoadingTemplate: "overlayLoadingTemplate",
    loadingOverlayComponent: "loadingOverlayComponent",
    loadingOverlayComponentParams: "loadingOverlayComponentParams",
    suppressLoadingOverlay: "suppressLoadingOverlay",
    overlayNoRowsTemplate: "overlayNoRowsTemplate",
    noRowsOverlayComponent: "noRowsOverlayComponent",
    noRowsOverlayComponentParams: "noRowsOverlayComponentParams",
    suppressNoRowsOverlay: "suppressNoRowsOverlay",
    pagination: "pagination",
    paginationPageSize: "paginationPageSize",
    paginationPageSizeSelector: "paginationPageSizeSelector",
    paginationAutoPageSize: "paginationAutoPageSize",
    paginateChildRows: "paginateChildRows",
    suppressPaginationPanel: "suppressPaginationPanel",
    pivotMode: "pivotMode",
    pivotPanelShow: "pivotPanelShow",
    pivotDefaultExpanded: "pivotDefaultExpanded",
    pivotColumnGroupTotals: "pivotColumnGroupTotals",
    pivotRowTotals: "pivotRowTotals",
    pivotSuppressAutoColumn: "pivotSuppressAutoColumn",
    suppressExpandablePivotGroups: "suppressExpandablePivotGroups",
    functionsReadOnly: "functionsReadOnly",
    aggFuncs: "aggFuncs",
    suppressAggFuncInHeader: "suppressAggFuncInHeader",
    alwaysAggregateAtRootLevel: "alwaysAggregateAtRootLevel",
    suppressAggAtRootLevel: "suppressAggAtRootLevel",
    aggregateOnlyChangedColumns: "aggregateOnlyChangedColumns",
    suppressAggFilteredOnly: "suppressAggFilteredOnly",
    removePivotHeaderRowWhenSingleValueColumn: "removePivotHeaderRowWhenSingleValueColumn",
    animateRows: "animateRows",
    enableCellChangeFlash: "enableCellChangeFlash",
    cellFlashDelay: "cellFlashDelay",
    cellFadeDelay: "cellFadeDelay",
    allowShowChangeAfterFilter: "allowShowChangeAfterFilter",
    domLayout: "domLayout",
    ensureDomOrder: "ensureDomOrder",
    enableRtl: "enableRtl",
    suppressColumnVirtualisation: "suppressColumnVirtualisation",
    suppressMaxRenderedRowRestriction: "suppressMaxRenderedRowRestriction",
    suppressRowVirtualisation: "suppressRowVirtualisation",
    rowDragManaged: "rowDragManaged",
    suppressRowDrag: "suppressRowDrag",
    suppressMoveWhenRowDragging: "suppressMoveWhenRowDragging",
    rowDragEntireRow: "rowDragEntireRow",
    rowDragMultiRow: "rowDragMultiRow",
    rowDragText: "rowDragText",
    fullWidthCellRenderer: "fullWidthCellRenderer",
    fullWidthCellRendererParams: "fullWidthCellRendererParams",
    embedFullWidthRows: "embedFullWidthRows",
    suppressGroupMaintainValueType: "suppressGroupMaintainValueType",
    groupDisplayType: "groupDisplayType",
    groupDefaultExpanded: "groupDefaultExpanded",
    autoGroupColumnDef: "autoGroupColumnDef",
    groupMaintainOrder: "groupMaintainOrder",
    groupSelectsChildren: "groupSelectsChildren",
    groupLockGroupColumns: "groupLockGroupColumns",
    groupAggFiltering: "groupAggFiltering",
    groupIncludeFooter: "groupIncludeFooter",
    groupIncludeTotalFooter: "groupIncludeTotalFooter",
    groupSuppressBlankHeader: "groupSuppressBlankHeader",
    groupSelectsFiltered: "groupSelectsFiltered",
    showOpenedGroup: "showOpenedGroup",
    groupRemoveSingleChildren: "groupRemoveSingleChildren",
    groupRemoveLowestSingleChildren: "groupRemoveLowestSingleChildren",
    groupHideOpenParents: "groupHideOpenParents",
    groupAllowUnbalanced: "groupAllowUnbalanced",
    rowGroupPanelShow: "rowGroupPanelShow",
    groupRowRenderer: "groupRowRenderer",
    groupRowRendererParams: "groupRowRendererParams",
    suppressMakeColumnVisibleAfterUnGroup: "suppressMakeColumnVisibleAfterUnGroup",
    treeData: "treeData",
    rowGroupPanelSuppressSort: "rowGroupPanelSuppressSort",
    suppressGroupRowsSticky: "suppressGroupRowsSticky",
    pinnedTopRowData: "pinnedTopRowData",
    pinnedBottomRowData: "pinnedBottomRowData",
    rowModelType: "rowModelType",
    rowData: "rowData",
    asyncTransactionWaitMillis: "asyncTransactionWaitMillis",
    suppressModelUpdateAfterUpdateTransaction: "suppressModelUpdateAfterUpdateTransaction",
    datasource: "datasource",
    cacheOverflowSize: "cacheOverflowSize",
    infiniteInitialRowCount: "infiniteInitialRowCount",
    serverSideInitialRowCount: "serverSideInitialRowCount",
    suppressServerSideInfiniteScroll: "suppressServerSideInfiniteScroll",
    cacheBlockSize: "cacheBlockSize",
    maxBlocksInCache: "maxBlocksInCache",
    maxConcurrentDatasourceRequests: "maxConcurrentDatasourceRequests",
    blockLoadDebounceMillis: "blockLoadDebounceMillis",
    purgeClosedRowNodes: "purgeClosedRowNodes",
    serverSideDatasource: "serverSideDatasource",
    serverSideSortAllLevels: "serverSideSortAllLevels",
    serverSideOnlyRefreshFilteredGroups: "serverSideOnlyRefreshFilteredGroups",
    serverSideFilterAllLevels: "serverSideFilterAllLevels",
    serverSideSortOnServer: "serverSideSortOnServer",
    serverSideFilterOnServer: "serverSideFilterOnServer",
    serverSidePivotResultFieldSeparator: "serverSidePivotResultFieldSeparator",
    viewportDatasource: "viewportDatasource",
    viewportRowModelPageSize: "viewportRowModelPageSize",
    viewportRowModelBufferSize: "viewportRowModelBufferSize",
    alwaysShowHorizontalScroll: "alwaysShowHorizontalScroll",
    alwaysShowVerticalScroll: "alwaysShowVerticalScroll",
    debounceVerticalScrollbar: "debounceVerticalScrollbar",
    suppressHorizontalScroll: "suppressHorizontalScroll",
    suppressScrollOnNewData: "suppressScrollOnNewData",
    suppressScrollWhenPopupsAreOpen: "suppressScrollWhenPopupsAreOpen",
    suppressAnimationFrame: "suppressAnimationFrame",
    suppressMiddleClickScrolls: "suppressMiddleClickScrolls",
    suppressPreventDefaultOnMouseWheel: "suppressPreventDefaultOnMouseWheel",
    scrollbarWidth: "scrollbarWidth",
    rowSelection: "rowSelection",
    rowMultiSelectWithClick: "rowMultiSelectWithClick",
    suppressRowDeselection: "suppressRowDeselection",
    suppressRowClickSelection: "suppressRowClickSelection",
    suppressCellFocus: "suppressCellFocus",
    suppressMultiRangeSelection: "suppressMultiRangeSelection",
    enableCellTextSelection: "enableCellTextSelection",
    enableRangeSelection: "enableRangeSelection",
    enableRangeHandle: "enableRangeHandle",
    enableFillHandle: "enableFillHandle",
    fillHandleDirection: "fillHandleDirection",
    suppressClearOnFillReduction: "suppressClearOnFillReduction",
    sortingOrder: "sortingOrder",
    accentedSort: "accentedSort",
    unSortIcon: "unSortIcon",
    suppressMultiSort: "suppressMultiSort",
    alwaysMultiSort: "alwaysMultiSort",
    multiSortKey: "multiSortKey",
    suppressMaintainUnsortedOrder: "suppressMaintainUnsortedOrder",
    icons: "icons",
    rowHeight: "rowHeight",
    rowStyle: "rowStyle",
    rowClass: "rowClass",
    rowClassRules: "rowClassRules",
    suppressRowHoverHighlight: "suppressRowHoverHighlight",
    suppressRowTransform: "suppressRowTransform",
    columnHoverHighlight: "columnHoverHighlight",
    gridId: "gridId",
    deltaSort: "deltaSort",
    treeDataDisplayType: "treeDataDisplayType",
    functionsPassive: "functionsPassive",
    enableGroupEdit: "enableGroupEdit",
    initialState: "initialState",
    getContextMenuItems: "getContextMenuItems",
    getMainMenuItems: "getMainMenuItems",
    postProcessPopup: "postProcessPopup",
    processUnpinnedColumns: "processUnpinnedColumns",
    processCellForClipboard: "processCellForClipboard",
    processHeaderForClipboard: "processHeaderForClipboard",
    processGroupHeaderForClipboard: "processGroupHeaderForClipboard",
    processCellFromClipboard: "processCellFromClipboard",
    sendToClipboard: "sendToClipboard",
    processDataFromClipboard: "processDataFromClipboard",
    isExternalFilterPresent: "isExternalFilterPresent",
    doesExternalFilterPass: "doesExternalFilterPass",
    getChartToolbarItems: "getChartToolbarItems",
    createChartContainer: "createChartContainer",
    navigateToNextHeader: "navigateToNextHeader",
    tabToNextHeader: "tabToNextHeader",
    navigateToNextCell: "navigateToNextCell",
    tabToNextCell: "tabToNextCell",
    getLocaleText: "getLocaleText",
    getDocument: "getDocument",
    paginationNumberFormatter: "paginationNumberFormatter",
    getGroupRowAgg: "getGroupRowAgg",
    isGroupOpenByDefault: "isGroupOpenByDefault",
    initialGroupOrderComparator: "initialGroupOrderComparator",
    processPivotResultColDef: "processPivotResultColDef",
    processPivotResultColGroupDef: "processPivotResultColGroupDef",
    getDataPath: "getDataPath",
    getChildCount: "getChildCount",
    getServerSideGroupLevelParams: "getServerSideGroupLevelParams",
    isServerSideGroupOpenByDefault: "isServerSideGroupOpenByDefault",
    isApplyServerSideTransaction: "isApplyServerSideTransaction",
    isServerSideGroup: "isServerSideGroup",
    getServerSideGroupKey: "getServerSideGroupKey",
    getBusinessKeyForNode: "getBusinessKeyForNode",
    getRowId: "getRowId",
    resetRowDataOnUpdate: "resetRowDataOnUpdate",
    processRowPostCreate: "processRowPostCreate",
    isRowSelectable: "isRowSelectable",
    isRowMaster: "isRowMaster",
    fillOperation: "fillOperation",
    postSortRows: "postSortRows",
    getRowStyle: "getRowStyle",
    getRowClass: "getRowClass",
    getRowHeight: "getRowHeight",
    isFullWidthRow: "isFullWidthRow"
  },
  outputs: {
    toolPanelVisibleChanged: "toolPanelVisibleChanged",
    toolPanelSizeChanged: "toolPanelSizeChanged",
    cutStart: "cutStart",
    cutEnd: "cutEnd",
    pasteStart: "pasteStart",
    pasteEnd: "pasteEnd",
    columnVisible: "columnVisible",
    columnPinned: "columnPinned",
    columnResized: "columnResized",
    columnMoved: "columnMoved",
    columnValueChanged: "columnValueChanged",
    columnPivotModeChanged: "columnPivotModeChanged",
    columnPivotChanged: "columnPivotChanged",
    columnGroupOpened: "columnGroupOpened",
    newColumnsLoaded: "newColumnsLoaded",
    gridColumnsChanged: "gridColumnsChanged",
    displayedColumnsChanged: "displayedColumnsChanged",
    virtualColumnsChanged: "virtualColumnsChanged",
    columnEverythingChanged: "columnEverythingChanged",
    columnHeaderMouseOver: "columnHeaderMouseOver",
    columnHeaderMouseLeave: "columnHeaderMouseLeave",
    columnHeaderClicked: "columnHeaderClicked",
    columnHeaderContextMenu: "columnHeaderContextMenu",
    componentStateChanged: "componentStateChanged",
    cellValueChanged: "cellValueChanged",
    cellEditRequest: "cellEditRequest",
    rowValueChanged: "rowValueChanged",
    cellEditingStarted: "cellEditingStarted",
    cellEditingStopped: "cellEditingStopped",
    rowEditingStarted: "rowEditingStarted",
    rowEditingStopped: "rowEditingStopped",
    undoStarted: "undoStarted",
    undoEnded: "undoEnded",
    redoStarted: "redoStarted",
    redoEnded: "redoEnded",
    rangeDeleteStart: "rangeDeleteStart",
    rangeDeleteEnd: "rangeDeleteEnd",
    filterOpened: "filterOpened",
    filterChanged: "filterChanged",
    filterModified: "filterModified",
    advancedFilterBuilderVisibleChanged: "advancedFilterBuilderVisibleChanged",
    chartCreated: "chartCreated",
    chartRangeSelectionChanged: "chartRangeSelectionChanged",
    chartOptionsChanged: "chartOptionsChanged",
    chartDestroyed: "chartDestroyed",
    cellKeyDown: "cellKeyDown",
    gridReady: "gridReady",
    gridPreDestroyed: "gridPreDestroyed",
    firstDataRendered: "firstDataRendered",
    gridSizeChanged: "gridSizeChanged",
    modelUpdated: "modelUpdated",
    virtualRowRemoved: "virtualRowRemoved",
    viewportChanged: "viewportChanged",
    bodyScroll: "bodyScroll",
    bodyScrollEnd: "bodyScrollEnd",
    dragStarted: "dragStarted",
    dragStopped: "dragStopped",
    stateUpdated: "stateUpdated",
    paginationChanged: "paginationChanged",
    rowDragEnter: "rowDragEnter",
    rowDragMove: "rowDragMove",
    rowDragLeave: "rowDragLeave",
    rowDragEnd: "rowDragEnd",
    columnRowGroupChanged: "columnRowGroupChanged",
    rowGroupOpened: "rowGroupOpened",
    expandOrCollapseAll: "expandOrCollapseAll",
    pinnedRowDataChanged: "pinnedRowDataChanged",
    rowDataUpdated: "rowDataUpdated",
    asyncTransactionsFlushed: "asyncTransactionsFlushed",
    storeRefreshed: "storeRefreshed",
    cellClicked: "cellClicked",
    cellDoubleClicked: "cellDoubleClicked",
    cellFocused: "cellFocused",
    cellMouseOver: "cellMouseOver",
    cellMouseOut: "cellMouseOut",
    cellMouseDown: "cellMouseDown",
    rowClicked: "rowClicked",
    rowDoubleClicked: "rowDoubleClicked",
    rowSelected: "rowSelected",
    selectionChanged: "selectionChanged",
    cellContextMenu: "cellContextMenu",
    rangeSelectionChanged: "rangeSelectionChanged",
    tooltipShow: "tooltipShow",
    tooltipHide: "tooltipHide",
    sortChanged: "sortChanged",
    columnRowGroupChangeRequest: "columnRowGroupChangeRequest",
    columnPivotChangeRequest: "columnPivotChangeRequest",
    columnValueChangeRequest: "columnValueChangeRequest",
    columnAggFuncChangeRequest: "columnAggFuncChangeRequest"
  },
  standalone: true,
  features: [ɵɵProvidersFeature([AngularFrameworkOverrides, AngularFrameworkComponentWrapper]), ɵɵNgOnChangesFeature, ɵɵStandaloneFeature],
  decls: 0,
  vars: 0,
  template: function AgGridAngular_Template(rf, ctx) {
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AgGridAngular, [{
    type: Component,
    args: [{
      selector: "ag-grid-angular",
      standalone: true,
      template: "",
      providers: [AngularFrameworkOverrides, AngularFrameworkComponentWrapper],
      // tell angular we don't want view encapsulation, we don't want a shadow root
      encapsulation: ViewEncapsulation$1.None
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: ViewContainerRef
    }, {
      type: AngularFrameworkOverrides
    }, {
      type: AngularFrameworkComponentWrapper
    }];
  }, {
    gridOptions: [{
      type: Input
    }],
    modules: [{
      type: Input
    }],
    statusBar: [{
      type: Input
    }],
    sideBar: [{
      type: Input
    }],
    suppressContextMenu: [{
      type: Input
    }],
    preventDefaultOnContextMenu: [{
      type: Input
    }],
    allowContextMenuWithControlKey: [{
      type: Input
    }],
    suppressMenuHide: [{
      type: Input
    }],
    enableBrowserTooltips: [{
      type: Input
    }],
    tooltipTrigger: [{
      type: Input
    }],
    tooltipShowDelay: [{
      type: Input
    }],
    tooltipHideDelay: [{
      type: Input
    }],
    tooltipMouseTrack: [{
      type: Input
    }],
    tooltipInteraction: [{
      type: Input
    }],
    popupParent: [{
      type: Input
    }],
    copyHeadersToClipboard: [{
      type: Input
    }],
    copyGroupHeadersToClipboard: [{
      type: Input
    }],
    clipboardDelimiter: [{
      type: Input
    }],
    suppressCopyRowsToClipboard: [{
      type: Input
    }],
    suppressCopySingleCellRanges: [{
      type: Input
    }],
    suppressLastEmptyLineOnPaste: [{
      type: Input
    }],
    suppressClipboardPaste: [{
      type: Input
    }],
    suppressClipboardApi: [{
      type: Input
    }],
    suppressCutToClipboard: [{
      type: Input
    }],
    columnDefs: [{
      type: Input
    }],
    defaultColDef: [{
      type: Input
    }],
    defaultColGroupDef: [{
      type: Input
    }],
    columnTypes: [{
      type: Input
    }],
    dataTypeDefinitions: [{
      type: Input
    }],
    maintainColumnOrder: [{
      type: Input
    }],
    suppressFieldDotNotation: [{
      type: Input
    }],
    headerHeight: [{
      type: Input
    }],
    groupHeaderHeight: [{
      type: Input
    }],
    floatingFiltersHeight: [{
      type: Input
    }],
    pivotHeaderHeight: [{
      type: Input
    }],
    pivotGroupHeaderHeight: [{
      type: Input
    }],
    allowDragFromColumnsToolPanel: [{
      type: Input
    }],
    suppressMovableColumns: [{
      type: Input
    }],
    suppressColumnMoveAnimation: [{
      type: Input
    }],
    suppressDragLeaveHidesColumns: [{
      type: Input
    }],
    suppressRowGroupHidesColumns: [{
      type: Input
    }],
    colResizeDefault: [{
      type: Input
    }],
    suppressAutoSize: [{
      type: Input
    }],
    autoSizePadding: [{
      type: Input
    }],
    skipHeaderOnAutoSize: [{
      type: Input
    }],
    autoSizeStrategy: [{
      type: Input
    }],
    components: [{
      type: Input
    }],
    editType: [{
      type: Input
    }],
    singleClickEdit: [{
      type: Input
    }],
    suppressClickEdit: [{
      type: Input
    }],
    readOnlyEdit: [{
      type: Input
    }],
    stopEditingWhenCellsLoseFocus: [{
      type: Input
    }],
    enterMovesDown: [{
      type: Input
    }],
    enterMovesDownAfterEdit: [{
      type: Input
    }],
    enterNavigatesVertically: [{
      type: Input
    }],
    enterNavigatesVerticallyAfterEdit: [{
      type: Input
    }],
    enableCellEditingOnBackspace: [{
      type: Input
    }],
    undoRedoCellEditing: [{
      type: Input
    }],
    undoRedoCellEditingLimit: [{
      type: Input
    }],
    defaultCsvExportParams: [{
      type: Input
    }],
    suppressCsvExport: [{
      type: Input
    }],
    defaultExcelExportParams: [{
      type: Input
    }],
    suppressExcelExport: [{
      type: Input
    }],
    excelStyles: [{
      type: Input
    }],
    quickFilterText: [{
      type: Input
    }],
    cacheQuickFilter: [{
      type: Input
    }],
    excludeHiddenColumnsFromQuickFilter: [{
      type: Input
    }],
    includeHiddenColumnsInQuickFilter: [{
      type: Input
    }],
    quickFilterParser: [{
      type: Input
    }],
    quickFilterMatcher: [{
      type: Input
    }],
    excludeChildrenWhenTreeDataFiltering: [{
      type: Input
    }],
    enableAdvancedFilter: [{
      type: Input
    }],
    advancedFilterModel: [{
      type: Input
    }],
    includeHiddenColumnsInAdvancedFilter: [{
      type: Input
    }],
    advancedFilterParent: [{
      type: Input
    }],
    advancedFilterBuilderParams: [{
      type: Input
    }],
    enableCharts: [{
      type: Input
    }],
    chartThemes: [{
      type: Input
    }],
    customChartThemes: [{
      type: Input
    }],
    chartThemeOverrides: [{
      type: Input
    }],
    enableChartToolPanelsButton: [{
      type: Input
    }],
    suppressChartToolPanelsButton: [{
      type: Input
    }],
    chartToolPanelsDef: [{
      type: Input
    }],
    loadingCellRenderer: [{
      type: Input
    }],
    loadingCellRendererParams: [{
      type: Input
    }],
    loadingCellRendererSelector: [{
      type: Input
    }],
    localeText: [{
      type: Input
    }],
    masterDetail: [{
      type: Input
    }],
    keepDetailRows: [{
      type: Input
    }],
    keepDetailRowsCount: [{
      type: Input
    }],
    detailCellRenderer: [{
      type: Input
    }],
    detailCellRendererParams: [{
      type: Input
    }],
    detailRowHeight: [{
      type: Input
    }],
    detailRowAutoHeight: [{
      type: Input
    }],
    context: [{
      type: Input
    }],
    alignedGrids: [{
      type: Input
    }],
    tabIndex: [{
      type: Input
    }],
    rowBuffer: [{
      type: Input
    }],
    valueCache: [{
      type: Input
    }],
    valueCacheNeverExpires: [{
      type: Input
    }],
    enableCellExpressions: [{
      type: Input
    }],
    suppressParentsInRowNodes: [{
      type: Input
    }],
    suppressTouch: [{
      type: Input
    }],
    suppressFocusAfterRefresh: [{
      type: Input
    }],
    suppressAsyncEvents: [{
      type: Input
    }],
    suppressBrowserResizeObserver: [{
      type: Input
    }],
    suppressPropertyNamesCheck: [{
      type: Input
    }],
    suppressChangeDetection: [{
      type: Input
    }],
    debug: [{
      type: Input
    }],
    overlayLoadingTemplate: [{
      type: Input
    }],
    loadingOverlayComponent: [{
      type: Input
    }],
    loadingOverlayComponentParams: [{
      type: Input
    }],
    suppressLoadingOverlay: [{
      type: Input
    }],
    overlayNoRowsTemplate: [{
      type: Input
    }],
    noRowsOverlayComponent: [{
      type: Input
    }],
    noRowsOverlayComponentParams: [{
      type: Input
    }],
    suppressNoRowsOverlay: [{
      type: Input
    }],
    pagination: [{
      type: Input
    }],
    paginationPageSize: [{
      type: Input
    }],
    paginationPageSizeSelector: [{
      type: Input
    }],
    paginationAutoPageSize: [{
      type: Input
    }],
    paginateChildRows: [{
      type: Input
    }],
    suppressPaginationPanel: [{
      type: Input
    }],
    pivotMode: [{
      type: Input
    }],
    pivotPanelShow: [{
      type: Input
    }],
    pivotDefaultExpanded: [{
      type: Input
    }],
    pivotColumnGroupTotals: [{
      type: Input
    }],
    pivotRowTotals: [{
      type: Input
    }],
    pivotSuppressAutoColumn: [{
      type: Input
    }],
    suppressExpandablePivotGroups: [{
      type: Input
    }],
    functionsReadOnly: [{
      type: Input
    }],
    aggFuncs: [{
      type: Input
    }],
    suppressAggFuncInHeader: [{
      type: Input
    }],
    alwaysAggregateAtRootLevel: [{
      type: Input
    }],
    suppressAggAtRootLevel: [{
      type: Input
    }],
    aggregateOnlyChangedColumns: [{
      type: Input
    }],
    suppressAggFilteredOnly: [{
      type: Input
    }],
    removePivotHeaderRowWhenSingleValueColumn: [{
      type: Input
    }],
    animateRows: [{
      type: Input
    }],
    enableCellChangeFlash: [{
      type: Input
    }],
    cellFlashDelay: [{
      type: Input
    }],
    cellFadeDelay: [{
      type: Input
    }],
    allowShowChangeAfterFilter: [{
      type: Input
    }],
    domLayout: [{
      type: Input
    }],
    ensureDomOrder: [{
      type: Input
    }],
    enableRtl: [{
      type: Input
    }],
    suppressColumnVirtualisation: [{
      type: Input
    }],
    suppressMaxRenderedRowRestriction: [{
      type: Input
    }],
    suppressRowVirtualisation: [{
      type: Input
    }],
    rowDragManaged: [{
      type: Input
    }],
    suppressRowDrag: [{
      type: Input
    }],
    suppressMoveWhenRowDragging: [{
      type: Input
    }],
    rowDragEntireRow: [{
      type: Input
    }],
    rowDragMultiRow: [{
      type: Input
    }],
    rowDragText: [{
      type: Input
    }],
    fullWidthCellRenderer: [{
      type: Input
    }],
    fullWidthCellRendererParams: [{
      type: Input
    }],
    embedFullWidthRows: [{
      type: Input
    }],
    suppressGroupMaintainValueType: [{
      type: Input
    }],
    groupDisplayType: [{
      type: Input
    }],
    groupDefaultExpanded: [{
      type: Input
    }],
    autoGroupColumnDef: [{
      type: Input
    }],
    groupMaintainOrder: [{
      type: Input
    }],
    groupSelectsChildren: [{
      type: Input
    }],
    groupLockGroupColumns: [{
      type: Input
    }],
    groupAggFiltering: [{
      type: Input
    }],
    groupIncludeFooter: [{
      type: Input
    }],
    groupIncludeTotalFooter: [{
      type: Input
    }],
    groupSuppressBlankHeader: [{
      type: Input
    }],
    groupSelectsFiltered: [{
      type: Input
    }],
    showOpenedGroup: [{
      type: Input
    }],
    groupRemoveSingleChildren: [{
      type: Input
    }],
    groupRemoveLowestSingleChildren: [{
      type: Input
    }],
    groupHideOpenParents: [{
      type: Input
    }],
    groupAllowUnbalanced: [{
      type: Input
    }],
    rowGroupPanelShow: [{
      type: Input
    }],
    groupRowRenderer: [{
      type: Input
    }],
    groupRowRendererParams: [{
      type: Input
    }],
    suppressMakeColumnVisibleAfterUnGroup: [{
      type: Input
    }],
    treeData: [{
      type: Input
    }],
    rowGroupPanelSuppressSort: [{
      type: Input
    }],
    suppressGroupRowsSticky: [{
      type: Input
    }],
    pinnedTopRowData: [{
      type: Input
    }],
    pinnedBottomRowData: [{
      type: Input
    }],
    rowModelType: [{
      type: Input
    }],
    rowData: [{
      type: Input
    }],
    asyncTransactionWaitMillis: [{
      type: Input
    }],
    suppressModelUpdateAfterUpdateTransaction: [{
      type: Input
    }],
    datasource: [{
      type: Input
    }],
    cacheOverflowSize: [{
      type: Input
    }],
    infiniteInitialRowCount: [{
      type: Input
    }],
    serverSideInitialRowCount: [{
      type: Input
    }],
    suppressServerSideInfiniteScroll: [{
      type: Input
    }],
    cacheBlockSize: [{
      type: Input
    }],
    maxBlocksInCache: [{
      type: Input
    }],
    maxConcurrentDatasourceRequests: [{
      type: Input
    }],
    blockLoadDebounceMillis: [{
      type: Input
    }],
    purgeClosedRowNodes: [{
      type: Input
    }],
    serverSideDatasource: [{
      type: Input
    }],
    serverSideSortAllLevels: [{
      type: Input
    }],
    serverSideOnlyRefreshFilteredGroups: [{
      type: Input
    }],
    serverSideFilterAllLevels: [{
      type: Input
    }],
    serverSideSortOnServer: [{
      type: Input
    }],
    serverSideFilterOnServer: [{
      type: Input
    }],
    serverSidePivotResultFieldSeparator: [{
      type: Input
    }],
    viewportDatasource: [{
      type: Input
    }],
    viewportRowModelPageSize: [{
      type: Input
    }],
    viewportRowModelBufferSize: [{
      type: Input
    }],
    alwaysShowHorizontalScroll: [{
      type: Input
    }],
    alwaysShowVerticalScroll: [{
      type: Input
    }],
    debounceVerticalScrollbar: [{
      type: Input
    }],
    suppressHorizontalScroll: [{
      type: Input
    }],
    suppressScrollOnNewData: [{
      type: Input
    }],
    suppressScrollWhenPopupsAreOpen: [{
      type: Input
    }],
    suppressAnimationFrame: [{
      type: Input
    }],
    suppressMiddleClickScrolls: [{
      type: Input
    }],
    suppressPreventDefaultOnMouseWheel: [{
      type: Input
    }],
    scrollbarWidth: [{
      type: Input
    }],
    rowSelection: [{
      type: Input
    }],
    rowMultiSelectWithClick: [{
      type: Input
    }],
    suppressRowDeselection: [{
      type: Input
    }],
    suppressRowClickSelection: [{
      type: Input
    }],
    suppressCellFocus: [{
      type: Input
    }],
    suppressMultiRangeSelection: [{
      type: Input
    }],
    enableCellTextSelection: [{
      type: Input
    }],
    enableRangeSelection: [{
      type: Input
    }],
    enableRangeHandle: [{
      type: Input
    }],
    enableFillHandle: [{
      type: Input
    }],
    fillHandleDirection: [{
      type: Input
    }],
    suppressClearOnFillReduction: [{
      type: Input
    }],
    sortingOrder: [{
      type: Input
    }],
    accentedSort: [{
      type: Input
    }],
    unSortIcon: [{
      type: Input
    }],
    suppressMultiSort: [{
      type: Input
    }],
    alwaysMultiSort: [{
      type: Input
    }],
    multiSortKey: [{
      type: Input
    }],
    suppressMaintainUnsortedOrder: [{
      type: Input
    }],
    icons: [{
      type: Input
    }],
    rowHeight: [{
      type: Input
    }],
    rowStyle: [{
      type: Input
    }],
    rowClass: [{
      type: Input
    }],
    rowClassRules: [{
      type: Input
    }],
    suppressRowHoverHighlight: [{
      type: Input
    }],
    suppressRowTransform: [{
      type: Input
    }],
    columnHoverHighlight: [{
      type: Input
    }],
    gridId: [{
      type: Input
    }],
    deltaSort: [{
      type: Input
    }],
    treeDataDisplayType: [{
      type: Input
    }],
    functionsPassive: [{
      type: Input
    }],
    enableGroupEdit: [{
      type: Input
    }],
    initialState: [{
      type: Input
    }],
    getContextMenuItems: [{
      type: Input
    }],
    getMainMenuItems: [{
      type: Input
    }],
    postProcessPopup: [{
      type: Input
    }],
    processUnpinnedColumns: [{
      type: Input
    }],
    processCellForClipboard: [{
      type: Input
    }],
    processHeaderForClipboard: [{
      type: Input
    }],
    processGroupHeaderForClipboard: [{
      type: Input
    }],
    processCellFromClipboard: [{
      type: Input
    }],
    sendToClipboard: [{
      type: Input
    }],
    processDataFromClipboard: [{
      type: Input
    }],
    isExternalFilterPresent: [{
      type: Input
    }],
    doesExternalFilterPass: [{
      type: Input
    }],
    getChartToolbarItems: [{
      type: Input
    }],
    createChartContainer: [{
      type: Input
    }],
    navigateToNextHeader: [{
      type: Input
    }],
    tabToNextHeader: [{
      type: Input
    }],
    navigateToNextCell: [{
      type: Input
    }],
    tabToNextCell: [{
      type: Input
    }],
    getLocaleText: [{
      type: Input
    }],
    getDocument: [{
      type: Input
    }],
    paginationNumberFormatter: [{
      type: Input
    }],
    getGroupRowAgg: [{
      type: Input
    }],
    isGroupOpenByDefault: [{
      type: Input
    }],
    initialGroupOrderComparator: [{
      type: Input
    }],
    processPivotResultColDef: [{
      type: Input
    }],
    processPivotResultColGroupDef: [{
      type: Input
    }],
    getDataPath: [{
      type: Input
    }],
    getChildCount: [{
      type: Input
    }],
    getServerSideGroupLevelParams: [{
      type: Input
    }],
    isServerSideGroupOpenByDefault: [{
      type: Input
    }],
    isApplyServerSideTransaction: [{
      type: Input
    }],
    isServerSideGroup: [{
      type: Input
    }],
    getServerSideGroupKey: [{
      type: Input
    }],
    getBusinessKeyForNode: [{
      type: Input
    }],
    getRowId: [{
      type: Input
    }],
    resetRowDataOnUpdate: [{
      type: Input
    }],
    processRowPostCreate: [{
      type: Input
    }],
    isRowSelectable: [{
      type: Input
    }],
    isRowMaster: [{
      type: Input
    }],
    fillOperation: [{
      type: Input
    }],
    postSortRows: [{
      type: Input
    }],
    getRowStyle: [{
      type: Input
    }],
    getRowClass: [{
      type: Input
    }],
    getRowHeight: [{
      type: Input
    }],
    isFullWidthRow: [{
      type: Input
    }],
    toolPanelVisibleChanged: [{
      type: Output
    }],
    toolPanelSizeChanged: [{
      type: Output
    }],
    cutStart: [{
      type: Output
    }],
    cutEnd: [{
      type: Output
    }],
    pasteStart: [{
      type: Output
    }],
    pasteEnd: [{
      type: Output
    }],
    columnVisible: [{
      type: Output
    }],
    columnPinned: [{
      type: Output
    }],
    columnResized: [{
      type: Output
    }],
    columnMoved: [{
      type: Output
    }],
    columnValueChanged: [{
      type: Output
    }],
    columnPivotModeChanged: [{
      type: Output
    }],
    columnPivotChanged: [{
      type: Output
    }],
    columnGroupOpened: [{
      type: Output
    }],
    newColumnsLoaded: [{
      type: Output
    }],
    gridColumnsChanged: [{
      type: Output
    }],
    displayedColumnsChanged: [{
      type: Output
    }],
    virtualColumnsChanged: [{
      type: Output
    }],
    columnEverythingChanged: [{
      type: Output
    }],
    columnHeaderMouseOver: [{
      type: Output
    }],
    columnHeaderMouseLeave: [{
      type: Output
    }],
    columnHeaderClicked: [{
      type: Output
    }],
    columnHeaderContextMenu: [{
      type: Output
    }],
    componentStateChanged: [{
      type: Output
    }],
    cellValueChanged: [{
      type: Output
    }],
    cellEditRequest: [{
      type: Output
    }],
    rowValueChanged: [{
      type: Output
    }],
    cellEditingStarted: [{
      type: Output
    }],
    cellEditingStopped: [{
      type: Output
    }],
    rowEditingStarted: [{
      type: Output
    }],
    rowEditingStopped: [{
      type: Output
    }],
    undoStarted: [{
      type: Output
    }],
    undoEnded: [{
      type: Output
    }],
    redoStarted: [{
      type: Output
    }],
    redoEnded: [{
      type: Output
    }],
    rangeDeleteStart: [{
      type: Output
    }],
    rangeDeleteEnd: [{
      type: Output
    }],
    filterOpened: [{
      type: Output
    }],
    filterChanged: [{
      type: Output
    }],
    filterModified: [{
      type: Output
    }],
    advancedFilterBuilderVisibleChanged: [{
      type: Output
    }],
    chartCreated: [{
      type: Output
    }],
    chartRangeSelectionChanged: [{
      type: Output
    }],
    chartOptionsChanged: [{
      type: Output
    }],
    chartDestroyed: [{
      type: Output
    }],
    cellKeyDown: [{
      type: Output
    }],
    gridReady: [{
      type: Output
    }],
    gridPreDestroyed: [{
      type: Output
    }],
    firstDataRendered: [{
      type: Output
    }],
    gridSizeChanged: [{
      type: Output
    }],
    modelUpdated: [{
      type: Output
    }],
    virtualRowRemoved: [{
      type: Output
    }],
    viewportChanged: [{
      type: Output
    }],
    bodyScroll: [{
      type: Output
    }],
    bodyScrollEnd: [{
      type: Output
    }],
    dragStarted: [{
      type: Output
    }],
    dragStopped: [{
      type: Output
    }],
    stateUpdated: [{
      type: Output
    }],
    paginationChanged: [{
      type: Output
    }],
    rowDragEnter: [{
      type: Output
    }],
    rowDragMove: [{
      type: Output
    }],
    rowDragLeave: [{
      type: Output
    }],
    rowDragEnd: [{
      type: Output
    }],
    columnRowGroupChanged: [{
      type: Output
    }],
    rowGroupOpened: [{
      type: Output
    }],
    expandOrCollapseAll: [{
      type: Output
    }],
    pinnedRowDataChanged: [{
      type: Output
    }],
    rowDataUpdated: [{
      type: Output
    }],
    asyncTransactionsFlushed: [{
      type: Output
    }],
    storeRefreshed: [{
      type: Output
    }],
    cellClicked: [{
      type: Output
    }],
    cellDoubleClicked: [{
      type: Output
    }],
    cellFocused: [{
      type: Output
    }],
    cellMouseOver: [{
      type: Output
    }],
    cellMouseOut: [{
      type: Output
    }],
    cellMouseDown: [{
      type: Output
    }],
    rowClicked: [{
      type: Output
    }],
    rowDoubleClicked: [{
      type: Output
    }],
    rowSelected: [{
      type: Output
    }],
    selectionChanged: [{
      type: Output
    }],
    cellContextMenu: [{
      type: Output
    }],
    rangeSelectionChanged: [{
      type: Output
    }],
    tooltipShow: [{
      type: Output
    }],
    tooltipHide: [{
      type: Output
    }],
    sortChanged: [{
      type: Output
    }],
    columnRowGroupChangeRequest: [{
      type: Output
    }],
    columnPivotChangeRequest: [{
      type: Output
    }],
    columnValueChangeRequest: [{
      type: Output
    }],
    columnAggFuncChangeRequest: [{
      type: Output
    }]
  });
})();
var AgGridModule = class {
};
AgGridModule.ɵfac = function AgGridModule_Factory(t) {
  return new (t || AgGridModule)();
};
AgGridModule.ɵmod = ɵɵdefineNgModule({
  type: AgGridModule,
  imports: [AgGridAngular],
  exports: [AgGridAngular]
});
AgGridModule.ɵinj = ɵɵdefineInjector({
  imports: [AgGridAngular]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AgGridModule, [{
    type: NgModule,
    args: [{
      imports: [AgGridAngular],
      exports: [AgGridAngular]
    }]
  }], null, null);
})();
export {
  AgGridAngular,
  AgGridModule,
  AngularFrameworkComponentWrapper,
  AngularFrameworkOverrides
};
/*! Bundled license information:

ag-grid-community/dist/ag-grid-community.auto.esm.js:
  (**
            * @ag-grid-community/all-modules - Advanced Data Grid / Data Table supporting Javascript / Typescript / React / Angular / Vue * @version v31.0.3
            * @link https://www.ag-grid.com/
            * @license MIT
            *)

ag-grid-community/dist/ag-grid-community.auto.esm.js:
  (**
   * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / Typescript / React / Angular / Vue
   * @version v31.0.3
   * @link https://www.ag-grid.com/
   * @license MIT
   *)
*/
//# sourceMappingURL=ag-grid-angular.js.map
